# Generated by API Builder - https://www.apibuilder.io
# Service version: 0.11.50
# apibuilder 0.15.33 app.apibuilder.io/flow/api/latest/ruby_client

require 'cgi'
require 'net/http'
require 'net/https'
require 'uri'
require 'base64'

require 'date'
require 'rubygems'
require 'json'
require 'bigdecimal'

# The Flow Commerce REST API provides full access to the global ecommerce
# platform.
module Io
  module Flow
    module V0

      class Client

        module Constants

          BASE_URL = 'https://api.flow.io' unless defined?(Constants::BASE_URL)
          NAMESPACE = 'io.flow.v0' unless defined?(Constants::NAMESPACE)
          USER_AGENT = 'apibuilder 0.15.33 app.apibuilder.io/flow/api/latest/ruby_client' unless defined?(Constants::USER_AGENT)
          VERSION = '0.11.50' unless defined?(Constants::VERSION)
          VERSION_MAJOR = 0 unless defined?(VERSION_MAJOR)

        end

        attr_reader :url

        def initialize(url, opts={})
          @url = HttpClient::Preconditions.assert_class('url', url, String)
          @base_url = URI(url)
          @authorization = HttpClient::Preconditions.assert_class_or_nil('authorization', opts.delete(:authorization), HttpClient::Authorization)
          @default_headers = HttpClient::Preconditions.assert_class('default_headers', opts.delete(:default_headers) || {}, Hash)
          @http_handler = opts.delete(:http_handler) || HttpClient::DefaultHttpHandler.new

          HttpClient::Preconditions.assert_empty_opts(opts)
          HttpClient::Preconditions.check_state(url.match(/http.+/i), "URL[%s] must start with http" % url)
        end

        # Creates an instance of the client using the base url specified in the API spec.
        def Client.at_base_url(opts={})
          Client.new(Constants::BASE_URL, opts)
        end

        def request(path=nil)
          HttpClient::Preconditions.assert_class_or_nil('path', path, String)
          request = HttpClient::Request.new(@http_handler, @base_url, path.to_s).with_header('User-Agent', Constants::USER_AGENT).with_header('X-Apidoc-Version', Constants::VERSION).with_header('X-Apidoc-Version-Major', Constants::VERSION_MAJOR)

          @default_headers.each do |key, value|
            request = request.with_header(key, value)
          end

          if @authorization
            request = request.with_auth(@authorization)
          end

          request
        end

        def address_configurations
          @address_configurations ||= ::Io::Flow::V0::Clients::AddressConfigurations.new(self)
        end

        def allocations
          @allocations ||= ::Io::Flow::V0::Clients::Allocations.new(self)
        end

        def attributes
          @attributes ||= ::Io::Flow::V0::Clients::Attributes.new(self)
        end

        def catalogs
          @catalogs ||= ::Io::Flow::V0::Clients::Catalogs.new(self)
        end

        def checkout_attributes
          @checkout_attributes ||= ::Io::Flow::V0::Clients::CheckoutAttributes.new(self)
        end

        def checkout_item_contents
          @checkout_item_contents ||= ::Io::Flow::V0::Clients::CheckoutItemContents.new(self)
        end

        def credit_payments
          @credit_payments ||= ::Io::Flow::V0::Clients::CreditPayments.new(self)
        end

        def discount_rule_settings
          @discount_rule_settings ||= ::Io::Flow::V0::Clients::DiscountRuleSettings.new(self)
        end

        def experiences
          @experiences ||= ::Io::Flow::V0::Clients::Experiences.new(self)
        end

        def experience_checkout_settings
          @experience_checkout_settings ||= ::Io::Flow::V0::Clients::ExperienceCheckoutSettings.new(self)
        end

        def experience_defaults
          @experience_defaults ||= ::Io::Flow::V0::Clients::ExperienceDefaults.new(self)
        end

        def experience_logistics_settings
          @experience_logistics_settings ||= ::Io::Flow::V0::Clients::ExperienceLogisticsSettings.new(self)
        end

        def experience_price_conversions
          @experience_price_conversions ||= ::Io::Flow::V0::Clients::ExperiencePriceConversions.new(self)
        end

        def experience_price_facet_conversions
          @experience_price_facet_conversions ||= ::Io::Flow::V0::Clients::ExperiencePriceFacetConversions.new(self)
        end

        def items
          @items ||= ::Io::Flow::V0::Clients::Items.new(self)
        end

        def item_form_overlays
          @item_form_overlays ||= ::Io::Flow::V0::Clients::ItemFormOverlays.new(self)
        end

        def orders
          @orders ||= ::Io::Flow::V0::Clients::Orders.new(self)
        end

        def order_builders
          @order_builders ||= ::Io::Flow::V0::Clients::OrderBuilders.new(self)
        end

        def order_estimates
          @order_estimates ||= ::Io::Flow::V0::Clients::OrderEstimates.new(self)
        end

        def order_identifiers
          @order_identifiers ||= ::Io::Flow::V0::Clients::OrderIdentifiers.new(self)
        end

        def order_number_generators
          @order_number_generators ||= ::Io::Flow::V0::Clients::OrderNumberGenerators.new(self)
        end

        def order_promotions
          @order_promotions ||= ::Io::Flow::V0::Clients::OrderPromotions.new(self)
        end

        def order_summaries
          @order_summaries ||= ::Io::Flow::V0::Clients::OrderSummaries.new(self)
        end

        def organizations
          @organizations ||= ::Io::Flow::V0::Clients::Organizations.new(self)
        end

        def payment_method_rules
          @payment_method_rules ||= ::Io::Flow::V0::Clients::PaymentMethodRules.new(self)
        end

        def price_books
          @price_books ||= ::Io::Flow::V0::Clients::PriceBooks.new(self)
        end

        def price_book_items
          @price_book_items ||= ::Io::Flow::V0::Clients::PriceBookItems.new(self)
        end

        def subcatalogs
          @subcatalogs ||= ::Io::Flow::V0::Clients::Subcatalogs.new(self)
        end

        def subcatalog_items
          @subcatalog_items ||= ::Io::Flow::V0::Clients::SubcatalogItems.new(self)
        end

        def rates
          @rates ||= ::Io::Flow::V0::Clients::Rates.new(self)
        end

        def harmonized_landed_costs
          @harmonized_landed_costs ||= ::Io::Flow::V0::Clients::HarmonizedLandedCosts.new(self)
        end

        def hs10
          @hs10 ||= ::Io::Flow::V0::Clients::Hs10.new(self)
        end

        def tax_registrations
          @tax_registrations ||= ::Io::Flow::V0::Clients::TaxRegistrations.new(self)
        end

        def authorizations
          @authorizations ||= ::Io::Flow::V0::Clients::Authorizations.new(self)
        end

        def captures
          @captures ||= ::Io::Flow::V0::Clients::Captures.new(self)
        end

        def cards
          @cards ||= ::Io::Flow::V0::Clients::Cards.new(self)
        end

        def card_payment_sources
          @card_payment_sources ||= ::Io::Flow::V0::Clients::CardPaymentSources.new(self)
        end

        def gateway_authentication_data
          @gateway_authentication_data ||= ::Io::Flow::V0::Clients::GatewayAuthenticationData.new(self)
        end

        def payments
          @payments ||= ::Io::Flow::V0::Clients::Payments.new(self)
        end

        def public_keys
          @public_keys ||= ::Io::Flow::V0::Clients::PublicKeys.new(self)
        end

        def refunds
          @refunds ||= ::Io::Flow::V0::Clients::Refunds.new(self)
        end

        def reversals
          @reversals ||= ::Io::Flow::V0::Clients::Reversals.new(self)
        end

        def virtual_cards
          @virtual_cards ||= ::Io::Flow::V0::Clients::VirtualCards.new(self)
        end

        def virtual_card_captures
          @virtual_card_captures ||= ::Io::Flow::V0::Clients::VirtualCardCaptures.new(self)
        end

        def virtual_card_refunds
          @virtual_card_refunds ||= ::Io::Flow::V0::Clients::VirtualCardRefunds.new(self)
        end

        def centers
          @centers ||= ::Io::Flow::V0::Clients::Centers.new(self)
        end

        def delivery_windows
          @delivery_windows ||= ::Io::Flow::V0::Clients::DeliveryWindows.new(self)
        end

        def dimension_estimates
          @dimension_estimates ||= ::Io::Flow::V0::Clients::DimensionEstimates.new(self)
        end

        def inventory_rules
          @inventory_rules ||= ::Io::Flow::V0::Clients::InventoryRules.new(self)
        end

        def inventory_snapshots
          @inventory_snapshots ||= ::Io::Flow::V0::Clients::InventorySnapshots.new(self)
        end

        def inventory_updates
          @inventory_updates ||= ::Io::Flow::V0::Clients::InventoryUpdates.new(self)
        end

        def manifests
          @manifests ||= ::Io::Flow::V0::Clients::Manifests.new(self)
        end

        def quotes
          @quotes ||= ::Io::Flow::V0::Clients::Quotes.new(self)
        end

        def ratecards
          @ratecards ||= ::Io::Flow::V0::Clients::Ratecards.new(self)
        end

        def ratecard_estimates
          @ratecard_estimates ||= ::Io::Flow::V0::Clients::RatecardEstimates.new(self)
        end

        def ratecard_lanes
          @ratecard_lanes ||= ::Io::Flow::V0::Clients::RatecardLanes.new(self)
        end

        def ratecard_rates
          @ratecard_rates ||= ::Io::Flow::V0::Clients::RatecardRates.new(self)
        end

        def returns
          @returns ||= ::Io::Flow::V0::Clients::Returns.new(self)
        end

        def shipping_configurations
          @shipping_configurations ||= ::Io::Flow::V0::Clients::ShippingConfigurations.new(self)
        end

        def shipping_configuration_copies
          @shipping_configuration_copies ||= ::Io::Flow::V0::Clients::ShippingConfigurationCopies.new(self)
        end

        def shipping_labels
          @shipping_labels ||= ::Io::Flow::V0::Clients::ShippingLabels.new(self)
        end

        def shipping_notifications
          @shipping_notifications ||= ::Io::Flow::V0::Clients::ShippingNotifications.new(self)
        end

        def surcharge_settings
          @surcharge_settings ||= ::Io::Flow::V0::Clients::SurchargeSettings.new(self)
        end

        def tiers
          @tiers ||= ::Io::Flow::V0::Clients::Tiers.new(self)
        end

        def trackings
          @trackings ||= ::Io::Flow::V0::Clients::Trackings.new(self)
        end

        def tracking_events
          @tracking_events ||= ::Io::Flow::V0::Clients::TrackingEvents.new(self)
        end

        def tracking_labels
          @tracking_labels ||= ::Io::Flow::V0::Clients::TrackingLabels.new(self)
        end

        def webhooks
          @webhooks ||= ::Io::Flow::V0::Clients::Webhooks.new(self)
        end

        def webhook_deliveries
          @webhook_deliveries ||= ::Io::Flow::V0::Clients::WebhookDeliveries.new(self)
        end

        def webhook_settings
          @webhook_settings ||= ::Io::Flow::V0::Clients::WebhookSettings.new(self)
        end

        def addresses
          @addresses ||= ::Io::Flow::V0::Clients::Addresses.new(self)
        end

        def country_defaults
          @country_defaults ||= ::Io::Flow::V0::Clients::CountryDefaults.new(self)
        end

        def timezones
          @timezones ||= ::Io::Flow::V0::Clients::Timezones.new(self)
        end

        def carriers
          @carriers ||= ::Io::Flow::V0::Clients::Carriers.new(self)
        end

        def carrier_services
          @carrier_services ||= ::Io::Flow::V0::Clients::CarrierServices.new(self)
        end

        def countries
          @countries ||= ::Io::Flow::V0::Clients::Countries.new(self)
        end

        def currencies
          @currencies ||= ::Io::Flow::V0::Clients::Currencies.new(self)
        end

        def languages
          @languages ||= ::Io::Flow::V0::Clients::Languages.new(self)
        end

        def locales
          @locales ||= ::Io::Flow::V0::Clients::Locales.new(self)
        end

        def payment_methods
          @payment_methods ||= ::Io::Flow::V0::Clients::PaymentMethods.new(self)
        end

        def provinces
          @provinces ||= ::Io::Flow::V0::Clients::Provinces.new(self)
        end

        def regions
          @regions ||= ::Io::Flow::V0::Clients::Regions.new(self)
        end

        def tax_duty_quotes
          @tax_duty_quotes ||= ::Io::Flow::V0::Clients::TaxDutyQuotes.new(self)
        end

        def abandoned_order_promotions
          @abandoned_order_promotions ||= ::Io::Flow::V0::Clients::AbandonedOrderPromotions.new(self)
        end

        def abandoned_order_settings
          @abandoned_order_settings ||= ::Io::Flow::V0::Clients::AbandonedOrderSettings.new(self)
        end

        def b2b_credit_memos
          @b2b_credit_memos ||= ::Io::Flow::V0::Clients::B2bCreditMemos.new(self)
        end

        def b2b_invoices
          @b2b_invoices ||= ::Io::Flow::V0::Clients::B2bInvoices.new(self)
        end

        def catalog_price_book_item_documents
          @catalog_price_book_item_documents ||= ::Io::Flow::V0::Clients::CatalogPriceBookItemDocuments.new(self)
        end

        def channel_authorizations
          @channel_authorizations ||= ::Io::Flow::V0::Clients::ChannelAuthorizations.new(self)
        end

        def channel_organizations
          @channel_organizations ||= ::Io::Flow::V0::Clients::ChannelOrganizations.new(self)
        end

        def channel_organization_authorizations
          @channel_organization_authorizations ||= ::Io::Flow::V0::Clients::ChannelOrganizationAuthorizations.new(self)
        end

        def channel_rates
          @channel_rates ||= ::Io::Flow::V0::Clients::ChannelRates.new(self)
        end

        def channel_tokens
          @channel_tokens ||= ::Io::Flow::V0::Clients::ChannelTokens.new(self)
        end

        def checkout_tokens
          @checkout_tokens ||= ::Io::Flow::V0::Clients::CheckoutTokens.new(self)
        end

        def consumer_invoices
          @consumer_invoices ||= ::Io::Flow::V0::Clients::ConsumerInvoices.new(self)
        end

        def consumer_invoice_documents
          @consumer_invoice_documents ||= ::Io::Flow::V0::Clients::ConsumerInvoiceDocuments.new(self)
        end

        def country_pickers
          @country_pickers ||= ::Io::Flow::V0::Clients::CountryPickers.new(self)
        end

        def credit_memos
          @credit_memos ||= ::Io::Flow::V0::Clients::CreditMemos.new(self)
        end

        def customers
          @customers ||= ::Io::Flow::V0::Clients::Customers.new(self)
        end

        def customer_address_book
          @customer_address_book ||= ::Io::Flow::V0::Clients::CustomerAddressBook.new(self)
        end

        def customer_address_book_contacts
          @customer_address_book_contacts ||= ::Io::Flow::V0::Clients::CustomerAddressBookContacts.new(self)
        end

        def customer_bundles
          @customer_bundles ||= ::Io::Flow::V0::Clients::CustomerBundles.new(self)
        end

        def customer_purge_settings
          @customer_purge_settings ||= ::Io::Flow::V0::Clients::CustomerPurgeSettings.new(self)
        end

        def customer_tokens
          @customer_tokens ||= ::Io::Flow::V0::Clients::CustomerTokens.new(self)
        end

        def documents
          @documents ||= ::Io::Flow::V0::Clients::Documents.new(self)
        end

        def duty_items
          @duty_items ||= ::Io::Flow::V0::Clients::DutyItems.new(self)
        end

        def duty_item_approvals
          @duty_item_approvals ||= ::Io::Flow::V0::Clients::DutyItemApprovals.new(self)
        end

        def duty_item_producers
          @duty_item_producers ||= ::Io::Flow::V0::Clients::DutyItemProducers.new(self)
        end

        def ecommerce_platforms
          @ecommerce_platforms ||= ::Io::Flow::V0::Clients::EcommercePlatforms.new(self)
        end

        def email_verifications
          @email_verifications ||= ::Io::Flow::V0::Clients::EmailVerifications.new(self)
        end

        def exclusion_rules
          @exclusion_rules ||= ::Io::Flow::V0::Clients::ExclusionRules.new(self)
        end

        def exports
          @exports ||= ::Io::Flow::V0::Clients::Exports.new(self)
        end

        def flow_roles
          @flow_roles ||= ::Io::Flow::V0::Clients::FlowRoles.new(self)
        end

        def fraud_email_rules
          @fraud_email_rules ||= ::Io::Flow::V0::Clients::FraudEmailRules.new(self)
        end

        def ftp_files
          @ftp_files ||= ::Io::Flow::V0::Clients::FtpFiles.new(self)
        end

        def ftp_folders
          @ftp_folders ||= ::Io::Flow::V0::Clients::FtpFolders.new(self)
        end

        def ftp_organization_settings
          @ftp_organization_settings ||= ::Io::Flow::V0::Clients::FtpOrganizationSettings.new(self)
        end

        def fulfillments
          @fulfillments ||= ::Io::Flow::V0::Clients::Fulfillments.new(self)
        end

        def healthchecks
          @healthchecks ||= ::Io::Flow::V0::Clients::Healthchecks.new(self)
        end

        def imports
          @imports ||= ::Io::Flow::V0::Clients::Imports.new(self)
        end

        def import_templates
          @import_templates ||= ::Io::Flow::V0::Clients::ImportTemplates.new(self)
        end

        def invitations
          @invitations ||= ::Io::Flow::V0::Clients::Invitations.new(self)
        end

        def price_rules
          @price_rules ||= ::Io::Flow::V0::Clients::PriceRules.new(self)
        end

        def item_query_suggestions
          @item_query_suggestions ||= ::Io::Flow::V0::Clients::ItemQuerySuggestions.new(self)
        end

        def links
          @links ||= ::Io::Flow::V0::Clients::Links.new(self)
        end

        def memberships
          @memberships ||= ::Io::Flow::V0::Clients::Memberships.new(self)
        end

        def merchant_gift_card_balances
          @merchant_gift_card_balances ||= ::Io::Flow::V0::Clients::MerchantGiftCardBalances.new(self)
        end

        def merchant_gift_card_redemptions
          @merchant_gift_card_redemptions ||= ::Io::Flow::V0::Clients::MerchantGiftCardRedemptions.new(self)
        end

        def merchant_gift_card_reversals
          @merchant_gift_card_reversals ||= ::Io::Flow::V0::Clients::MerchantGiftCardReversals.new(self)
        end

        def order_quotes
          @order_quotes ||= ::Io::Flow::V0::Clients::OrderQuotes.new(self)
        end

        def organization_authorizations
          @organization_authorizations ||= ::Io::Flow::V0::Clients::OrganizationAuthorizations.new(self)
        end

        def organization_default_configurations
          @organization_default_configurations ||= ::Io::Flow::V0::Clients::OrganizationDefaultConfigurations.new(self)
        end

        def organization_tokens
          @organization_tokens ||= ::Io::Flow::V0::Clients::OrganizationTokens.new(self)
        end

        def organization_token_v2
          @organization_token_v2 ||= ::Io::Flow::V0::Clients::OrganizationTokenV2.new(self)
        end

        def partner_tokens
          @partner_tokens ||= ::Io::Flow::V0::Clients::PartnerTokens.new(self)
        end

        def password_reset_forms
          @password_reset_forms ||= ::Io::Flow::V0::Clients::PasswordResetForms.new(self)
        end

        def payment_payment_methods
          @payment_payment_methods ||= ::Io::Flow::V0::Clients::PaymentPaymentMethods.new(self)
        end

        def payment_requests
          @payment_requests ||= ::Io::Flow::V0::Clients::PaymentRequests.new(self)
        end

        def permission_checks
          @permission_checks ||= ::Io::Flow::V0::Clients::PermissionChecks.new(self)
        end

        def price_book_item_export_options
          @price_book_item_export_options ||= ::Io::Flow::V0::Clients::PriceBookItemExportOptions.new(self)
        end

        def return_policies
          @return_policies ||= ::Io::Flow::V0::Clients::ReturnPolicies.new(self)
        end

        def romanizations
          @romanizations ||= ::Io::Flow::V0::Clients::Romanizations.new(self)
        end

        def scheduled_exports
          @scheduled_exports ||= ::Io::Flow::V0::Clients::ScheduledExports.new(self)
        end

        def sessions
          @sessions ||= ::Io::Flow::V0::Clients::Sessions.new(self)
        end

        def session_authorizations
          @session_authorizations ||= ::Io::Flow::V0::Clients::SessionAuthorizations.new(self)
        end

        def shopify_carts
          @shopify_carts ||= ::Io::Flow::V0::Clients::ShopifyCarts.new(self)
        end

        def shopify_cart_conversions
          @shopify_cart_conversions ||= ::Io::Flow::V0::Clients::ShopifyCartConversions.new(self)
        end

        def shopify_localization_settings
          @shopify_localization_settings ||= ::Io::Flow::V0::Clients::ShopifyLocalizationSettings.new(self)
        end

        def shopify_location_flow_center_mappings
          @shopify_location_flow_center_mappings ||= ::Io::Flow::V0::Clients::ShopifyLocationFlowCenterMappings.new(self)
        end

        def shopify_private_apps
          @shopify_private_apps ||= ::Io::Flow::V0::Clients::ShopifyPrivateApps.new(self)
        end

        def shopify_sync_statuses
          @shopify_sync_statuses ||= ::Io::Flow::V0::Clients::ShopifySyncStatuses.new(self)
        end

        def suggestions
          @suggestions ||= ::Io::Flow::V0::Clients::Suggestions.new(self)
        end

        def sync_pending_records
          @sync_pending_records ||= ::Io::Flow::V0::Clients::SyncPendingRecords.new(self)
        end

        def sync_records
          @sync_records ||= ::Io::Flow::V0::Clients::SyncRecords.new(self)
        end

        def sync_record_failures
          @sync_record_failures ||= ::Io::Flow::V0::Clients::SyncRecordFailures.new(self)
        end

        def sync_streams
          @sync_streams ||= ::Io::Flow::V0::Clients::SyncStreams.new(self)
        end

        def tax_settings
          @tax_settings ||= ::Io::Flow::V0::Clients::TaxSettings.new(self)
        end

        def tokens
          @tokens ||= ::Io::Flow::V0::Clients::Tokens.new(self)
        end

        def token_validations
          @token_validations ||= ::Io::Flow::V0::Clients::TokenValidations.new(self)
        end

        def trade_agreements
          @trade_agreements ||= ::Io::Flow::V0::Clients::TradeAgreements.new(self)
        end

        def trade_agreement_certifiers
          @trade_agreement_certifiers ||= ::Io::Flow::V0::Clients::TradeAgreementCertifiers.new(self)
        end

        def uploads
          @uploads ||= ::Io::Flow::V0::Clients::Uploads.new(self)
        end

        def users
          @users ||= ::Io::Flow::V0::Clients::Users.new(self)
        end
      end

      module Clients

        class AddressConfigurations

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          # Search checkout address configurations.
          def get(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :country => (x = opts.delete(:country); x.nil? ? nil : HttpClient::Preconditions.assert_class('country', x, Array).map { |v| HttpClient::Preconditions.assert_class('country', v, String) }),
              :context => (x = opts.delete(:context); x.nil? ? nil : HttpClient::Preconditions.assert_class('context', x, String))
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/address/configurations").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::AddressConfiguration.new(x) }
          end

        end

        class Allocations

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          # Order-level price details allocated using a strategy among individual order
          # item units.
          def get(organization, number)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('number', number, String)
            r = @client.request("/#{CGI.escape(organization)}/orders/allocations/#{CGI.escape(number)}").get
            ::Io::Flow::V0::Models::AllocationV2.new(r)
          end

        end

        class Attributes

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          # Search attributes. Always paginated.
          def get(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :key => (x = opts.delete(:key); x.nil? ? nil : HttpClient::Preconditions.assert_class('key', x, Array).map { |v| HttpClient::Preconditions.assert_class('key', v, String) }),
              :intent => (x = opts.delete(:intent); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::AttributeIntent) ? x : ::Io::Flow::V0::Models::AttributeIntent.apply(x)).value),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "position" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/attributes").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::Attribute.new(x) }
          end

          # Add attribute
          def post(organization, attribute_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            (x = attribute_form; x.is_a?(::Io::Flow::V0::Models::AttributeForm) ? x : ::Io::Flow::V0::Models::AttributeForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/attributes").with_json(attribute_form.to_json).post
            ::Io::Flow::V0::Models::Attribute.new(r)
          end

          # Create or update a batch of attributes
          def put(organization, attribute_forms)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('attribute_forms', attribute_forms, Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::AttributeForm) ? x : ::Io::Flow::V0::Models::AttributeForm.new(x)) }
            r = @client.request("/#{CGI.escape(organization)}/attributes").with_json(attribute_forms.map { |o| o.to_hash }.to_json).put
            r.map { |x| ::Io::Flow::V0::Models::Attribute.new(x) }
          end

          # Provides visibility into recent changes of each object, including deletion
          def get_versions(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :key => (x = opts.delete(:key); x.nil? ? nil : HttpClient::Preconditions.assert_class('key', x, Array).map { |v| HttpClient::Preconditions.assert_class('key', v, String) }),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "journal_timestamp" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/attributes/versions").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::AttributeVersion.new(x) }
          end

          # Returns information about a specific attribute.
          def get_by_key(organization, key)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            r = @client.request("/#{CGI.escape(organization)}/attributes/#{CGI.escape(key)}").get
            ::Io::Flow::V0::Models::Attribute.new(r)
          end

          # Create or update an attribute with the specified key.
          def put_by_key(organization, key, attribute_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            (x = attribute_form; x.is_a?(::Io::Flow::V0::Models::AttributeForm) ? x : ::Io::Flow::V0::Models::AttributeForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/attributes/#{CGI.escape(key)}").with_json(attribute_form.to_json).put
            ::Io::Flow::V0::Models::Attribute.new(r)
          end

          # Delete an attribute with the specified key.
          def delete_by_key(organization, key)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            r = @client.request("/#{CGI.escape(organization)}/attributes/#{CGI.escape(key)}").delete
            nil
          end

        end

        class Catalogs

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          # Returns information about a specific catalog.
          def get_catalog(organization)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            r = @client.request("/#{CGI.escape(organization)}/catalog").get
            ::Io::Flow::V0::Models::Catalog.new(r)
          end

          # Search global restrictions. Always paginated.
          def get_catalog_and_restrictions(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :number => (x = opts.delete(:number); x.nil? ? nil : HttpClient::Preconditions.assert_class('number', x, Array).map { |v| HttpClient::Preconditions.assert_class('number', v, String) }),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "name" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/catalog/restrictions").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::Item.new(x) }
          end

          # Returns a specific globally restricted item.
          def get_catalog_and_restrictions_by_number(organization, number)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('number', number, String)
            r = @client.request("/#{CGI.escape(organization)}/catalog/restrictions/#{CGI.escape(number)}").get
            ::Io::Flow::V0::Models::Item.new(r)
          end

          # Upsert a global restriction
          def put_catalog_and_restrictions_by_number(organization, number)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('number', number, String)
            r = @client.request("/#{CGI.escape(organization)}/catalog/restrictions/#{CGI.escape(number)}").put
            ::Io::Flow::V0::Models::Item.new(r)
          end

          # Delete the global restriction for this catalog item number
          def delete_catalog_and_restrictions_by_number(organization, number)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('number', number, String)
            r = @client.request("/#{CGI.escape(organization)}/catalog/restrictions/#{CGI.escape(number)}").delete
            nil
          end

          # Get statistics for this organization's catalog.
          def get_catalog_and_statistics(organization)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            r = @client.request("/#{CGI.escape(organization)}/catalog/statistics").get
            ::Io::Flow::V0::Models::CatalogStatistics.new(r)
          end

        end

        class CheckoutAttributes

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          def get(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :key => (x = opts.delete(:key); x.nil? ? nil : HttpClient::Preconditions.assert_class('key', x, Array).map { |v| HttpClient::Preconditions.assert_class('key', v, String) }),
              :experience_key => (x = opts.delete(:experience_key); x.nil? ? nil : HttpClient::Preconditions.assert_class('experience_key', x, String)),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "position" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/checkout/attributes").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::CheckoutAttribute.new(x) }
          end

          def post(organization, checkout_attribute_form, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :context => (x = opts.delete(:context); x.nil? ? nil : HttpClient::Preconditions.assert_class('context', x, String))
            }.delete_if { |k, v| v.nil? }
            (x = checkout_attribute_form; x.is_a?(::Io::Flow::V0::Models::CheckoutAttributeForm) ? x : ::Io::Flow::V0::Models::CheckoutAttributeForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/checkout/attributes").with_query(query).with_json(checkout_attribute_form.to_json).post
            ::Io::Flow::V0::Models::CheckoutAttribute.new(r)
          end

          def get_by_id(organization, id)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            r = @client.request("/#{CGI.escape(organization)}/checkout/attributes/#{CGI.escape(id)}").get
            ::Io::Flow::V0::Models::CheckoutAttribute.new(r)
          end

          def put_by_id(organization, id, checkout_attribute_form, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :context => (x = opts.delete(:context); x.nil? ? nil : HttpClient::Preconditions.assert_class('context', x, String))
            }.delete_if { |k, v| v.nil? }
            (x = checkout_attribute_form; x.is_a?(::Io::Flow::V0::Models::CheckoutAttributeForm) ? x : ::Io::Flow::V0::Models::CheckoutAttributeForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/checkout/attributes/#{CGI.escape(id)}").with_query(query).with_json(checkout_attribute_form.to_json).put
            ::Io::Flow::V0::Models::CheckoutAttribute.new(r)
          end

          def delete_by_id(organization, id)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            r = @client.request("/#{CGI.escape(organization)}/checkout/attributes/#{CGI.escape(id)}").delete
            nil
          end

        end

        class CheckoutItemContents

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          # Returns a localized view of 1 or more items in the context of checkout,
          # returning data specifically related to rendering a view of an item in a cart
          # or checkout page.
          def get_checkout(organization, experience_key, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('experience_key', experience_key, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :number => (x = opts.delete(:number); x.nil? ? nil : HttpClient::Preconditions.assert_class('number', x, Array).map { |v| HttpClient::Preconditions.assert_class('number', v, String) }),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :context => (x = opts.delete(:context); x.nil? ? nil : HttpClient::Preconditions.assert_class('context', x, String))
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/experiences/#{CGI.escape(experience_key)}/item/content/checkout").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::CheckoutItemContent.new(x) }
          end

        end

        class CreditPayments

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          def get(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :key => (x = opts.delete(:key); x.nil? ? nil : HttpClient::Preconditions.assert_class('key', x, Array).map { |v| HttpClient::Preconditions.assert_class('key', v, String) }),
              :order_number => (x = opts.delete(:order_number); x.nil? ? nil : HttpClient::Preconditions.assert_class('order_number', x, String)),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "-created_at" : x), String),
              :expand => (x = opts.delete(:expand); x.nil? ? nil : HttpClient::Preconditions.assert_class('expand', x, Array).map { |v| HttpClient::Preconditions.assert_class('expand', v, String) })
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/credit/payments").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::CreditPayment.new(x) }
          end

          def post(organization, credit_payment_form, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :expand => (x = opts.delete(:expand); x.nil? ? nil : HttpClient::Preconditions.assert_class('expand', x, Array).map { |v| HttpClient::Preconditions.assert_class('expand', v, String) }),
              :context => (x = opts.delete(:context); x.nil? ? nil : HttpClient::Preconditions.assert_class('context', x, String))
            }.delete_if { |k, v| v.nil? }
            (x = credit_payment_form; x.is_a?(::Io::Flow::V0::Models::CreditPaymentForm) ? x : ::Io::Flow::V0::Models::CreditPaymentForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/credit/payments").with_query(query).with_json(credit_payment_form.to_json).post
            ::Io::Flow::V0::Models::CreditPayment.new(r)
          end

          def get_versions(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :key => (x = opts.delete(:key); x.nil? ? nil : HttpClient::Preconditions.assert_class('key', x, Array).map { |v| HttpClient::Preconditions.assert_class('key', v, String) }),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "journal_timestamp" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/credit/payments/versions").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::CreditPaymentVersion.new(x) }
          end

          def get_by_key(organization, key, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :expand => (x = opts.delete(:expand); x.nil? ? nil : HttpClient::Preconditions.assert_class('expand', x, Array).map { |v| HttpClient::Preconditions.assert_class('expand', v, String) })
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/credit/payments/#{CGI.escape(key)}").with_query(query).get
            ::Io::Flow::V0::Models::CreditPayment.new(r)
          end

          def put_by_key(organization, key, credit_payment_form, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :expand => (x = opts.delete(:expand); x.nil? ? nil : HttpClient::Preconditions.assert_class('expand', x, Array).map { |v| HttpClient::Preconditions.assert_class('expand', v, String) }),
              :context => (x = opts.delete(:context); x.nil? ? nil : HttpClient::Preconditions.assert_class('context', x, String))
            }.delete_if { |k, v| v.nil? }
            (x = credit_payment_form; x.is_a?(::Io::Flow::V0::Models::CreditPaymentForm) ? x : ::Io::Flow::V0::Models::CreditPaymentForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/credit/payments/#{CGI.escape(key)}").with_query(query).with_json(credit_payment_form.to_json).put
            ::Io::Flow::V0::Models::CreditPayment.new(r)
          end

          def delete_by_key(organization, key, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :context => (x = opts.delete(:context); x.nil? ? nil : HttpClient::Preconditions.assert_class('context', x, String))
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/credit/payments/#{CGI.escape(key)}").with_query(query).delete
            nil
          end

        end

        class DiscountRuleSettings

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          def get(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :status => (x = opts.delete(:status); x.nil? ? nil : HttpClient::Preconditions.assert_class('status', x, Array).map { |v| HttpClient::Preconditions.assert_class('status', v, String) }),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "-created_at" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/discount/rule/settings").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::DiscountRuleSettings.new(x) }
          end

          def post(organization, discount_rule_settings_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            (x = discount_rule_settings_form; x.is_a?(::Io::Flow::V0::Models::DiscountRuleSettingsForm) ? x : ::Io::Flow::V0::Models::DiscountRuleSettingsForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/discount/rule/settings").with_json(discount_rule_settings_form.to_json).post
            ::Io::Flow::V0::Models::DiscountRuleSettings.new(r)
          end

          def get_by_id(organization, id)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            r = @client.request("/#{CGI.escape(organization)}/discount/rule/settings/#{CGI.escape(id)}").get
            ::Io::Flow::V0::Models::DiscountRuleSettings.new(r)
          end

          def put_by_id(organization, id, discount_rule_settings_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            (x = discount_rule_settings_form; x.is_a?(::Io::Flow::V0::Models::DiscountRuleSettingsForm) ? x : ::Io::Flow::V0::Models::DiscountRuleSettingsForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/discount/rule/settings/#{CGI.escape(id)}").with_json(discount_rule_settings_form.to_json).put
            ::Io::Flow::V0::Models::DiscountRuleSettings.new(r)
          end

          def delete_by_id(organization, id)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            r = @client.request("/#{CGI.escape(organization)}/discount/rule/settings/#{CGI.escape(id)}").delete
            nil
          end

        end

        class Experiences

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          # Search experiences. Always paginated.
          def get(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :q => (x = opts.delete(:q); x.nil? ? nil : HttpClient::Preconditions.assert_class('q', x, String)),
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :key => (x = opts.delete(:key); x.nil? ? nil : HttpClient::Preconditions.assert_class('key', x, Array).map { |v| HttpClient::Preconditions.assert_class('key', v, String) }),
              :name => (x = opts.delete(:name); x.nil? ? nil : HttpClient::Preconditions.assert_class('name', x, String)),
              :region => (x = opts.delete(:region); x.nil? ? nil : HttpClient::Preconditions.assert_class('region', x, String)),
              :currency => (x = opts.delete(:currency); x.nil? ? nil : HttpClient::Preconditions.assert_class('currency', x, String)),
              :subcatalog => (x = opts.delete(:subcatalog); x.nil? ? nil : HttpClient::Preconditions.assert_class('subcatalog', x, String)),
              :ip => (x = opts.delete(:ip); x.nil? ? nil : HttpClient::Preconditions.assert_class('ip', x, String)),
              :status => (x = opts.delete(:status); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::ExperienceStatus) ? x : ::Io::Flow::V0::Models::ExperienceStatus.apply(x)).value),
              :shipping_configuration_key => (x = opts.delete(:shipping_configuration_key); x.nil? ? nil : HttpClient::Preconditions.assert_class('shipping_configuration_key', x, String)),
              :context => (x = opts.delete(:context); x.nil? ? nil : HttpClient::Preconditions.assert_class('context', x, String)),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "position" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/experiences").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::Experience.new(x) }
          end

          # Add experience
          def post(organization, experience_form, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :context => (x = opts.delete(:context); x.nil? ? nil : HttpClient::Preconditions.assert_class('context', x, String))
            }.delete_if { |k, v| v.nil? }
            (x = experience_form; x.is_a?(::Io::Flow::V0::Models::ExperienceForm) ? x : ::Io::Flow::V0::Models::ExperienceForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/experiences").with_query(query).with_json(experience_form.to_json).post
            ::Io::Flow::V0::Models::Experience.new(r)
          end

          # Formats the requested amount using the formatting settings for the
          # experience.
          def get_conversions_by_base_and_amount(organization, base, amount, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('base', base, String)
            HttpClient::Preconditions.assert_class('amount', amount, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :experience => (x = opts.delete(:experience); x.nil? ? nil : HttpClient::Preconditions.assert_class('experience', x, String)),
              :country => (x = opts.delete(:country); x.nil? ? nil : HttpClient::Preconditions.assert_class('country', x, String)),
              :ip => (x = opts.delete(:ip); x.nil? ? nil : HttpClient::Preconditions.assert_class('ip', x, String)),
              :currency => (x = opts.delete(:currency); x.nil? ? nil : HttpClient::Preconditions.assert_class('currency', x, String)),
              :context => (x = opts.delete(:context); x.nil? ? nil : HttpClient::Preconditions.assert_class('context', x, String))
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/experiences/conversions/#{CGI.escape(base)}/#{CGI.escape(amount)}").with_query(query).get
            ::Io::Flow::V0::Models::PriceWithBase.new(r)
          end

          # Returns localized information about 1 or more items. The items will be
          # localized based on the experience selected by the query parameters in the
          # order of experience, then country, then ip address.
          def get_items(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :number => (x = opts.delete(:number); x.nil? ? nil : HttpClient::Preconditions.assert_class('number', x, Array).map { |v| HttpClient::Preconditions.assert_class('number', v, String) }),
              :status => (x = opts.delete(:status); x.nil? ? nil : HttpClient::Preconditions.assert_class('status', x, Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::SubcatalogItemStatus) ? x : ::Io::Flow::V0::Models::SubcatalogItemStatus.apply(x)).value }),
              :experience => (x = opts.delete(:experience); x.nil? ? nil : HttpClient::Preconditions.assert_class('experience', x, String)),
              :country => (x = opts.delete(:country); x.nil? ? nil : HttpClient::Preconditions.assert_class('country', x, String)),
              :ip => (x = opts.delete(:ip); x.nil? ? nil : HttpClient::Preconditions.assert_class('ip', x, String)),
              :currency => (x = opts.delete(:currency); x.nil? ? nil : HttpClient::Preconditions.assert_class('currency', x, String)),
              :language => (x = opts.delete(:language); x.nil? ? nil : HttpClient::Preconditions.assert_class('language', x, String)),
              :context => (x = opts.delete(:context); x.nil? ? nil : HttpClient::Preconditions.assert_class('context', x, String)),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "-created_at" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/experiences/items").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::Item.new(x) }
          end

          # Returns information about this item localized based on the query parameters
          def get_items_by_number(organization, number, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('number', number, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :experience => (x = opts.delete(:experience); x.nil? ? nil : HttpClient::Preconditions.assert_class('experience', x, String)),
              :country => (x = opts.delete(:country); x.nil? ? nil : HttpClient::Preconditions.assert_class('country', x, String)),
              :ip => (x = opts.delete(:ip); x.nil? ? nil : HttpClient::Preconditions.assert_class('ip', x, String)),
              :currency => (x = opts.delete(:currency); x.nil? ? nil : HttpClient::Preconditions.assert_class('currency', x, String)),
              :language => (x = opts.delete(:language); x.nil? ? nil : HttpClient::Preconditions.assert_class('language', x, String)),
              :context => (x = opts.delete(:context); x.nil? ? nil : HttpClient::Preconditions.assert_class('context', x, String))
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/experiences/items/#{CGI.escape(number)}").with_query(query).get
            ::Io::Flow::V0::Models::Item.new(r)
          end

          # Builds a query to search experiences
          def post_query_and_builders(organization, query_builder_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            (x = query_builder_form; x.is_a?(::Io::Flow::V0::Models::QueryBuilderForm) ? x : ::Io::Flow::V0::Models::QueryBuilderForm.from_json(x))
            r = @client.request("/#{CGI.escape(organization)}/experiences/query/builders").with_json(query_builder_form.to_json).post
            ::Io::Flow::V0::Models::QueryBuilder.new(r)
          end

          # Provides visibility into recent changes of each object, including deletion
          def get_versions(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :key => (x = opts.delete(:key); x.nil? ? nil : HttpClient::Preconditions.assert_class('key', x, Array).map { |v| HttpClient::Preconditions.assert_class('key', v, String) }),
              :context => (x = opts.delete(:context); x.nil? ? nil : HttpClient::Preconditions.assert_class('context', x, String)),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "journal_timestamp" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/experiences/versions").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::ExperienceVersion.new(x) }
          end

          def get_currency_and_formats_by_experience_key(organization, experience_key, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('experience_key', experience_key, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :context => (x = opts.delete(:context); x.nil? ? nil : HttpClient::Preconditions.assert_class('context', x, String))
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/experiences/#{CGI.escape(experience_key)}/currency/formats").with_query(query).get
            ::Io::Flow::V0::Models::ExperienceCurrencyFormat.new(r)
          end

          def put_currency_and_formats_by_experience_key(organization, experience_key, experience_currency_format_form, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('experience_key', experience_key, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :context => (x = opts.delete(:context); x.nil? ? nil : HttpClient::Preconditions.assert_class('context', x, String))
            }.delete_if { |k, v| v.nil? }
            (x = experience_currency_format_form; x.is_a?(::Io::Flow::V0::Models::ExperienceCurrencyFormatForm) ? x : ::Io::Flow::V0::Models::ExperienceCurrencyFormatForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/experiences/#{CGI.escape(experience_key)}/currency/formats").with_query(query).with_json(experience_currency_format_form.to_json).put
            ::Io::Flow::V0::Models::ExperienceCurrencyFormat.new(r)
          end

          # Returns localized information about 0 or more items given a query for the
          # specified experience.
          def get_local_and_items_by_experience_key(organization, experience_key, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('experience_key', experience_key, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :q => (x = opts.delete(:q); x.nil? ? nil : HttpClient::Preconditions.assert_class('q', x, String)),
              :currency => (x = opts.delete(:currency); x.nil? ? nil : HttpClient::Preconditions.assert_class('currency', x, String)),
              :context => (x = opts.delete(:context); x.nil? ? nil : HttpClient::Preconditions.assert_class('context', x, String))
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/experiences/#{CGI.escape(experience_key)}/local/items").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::LocalItem.new(x) }
          end

          def get_logistics_and_summary_by_experience_key(organization, experience_key, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('experience_key', experience_key, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :country => (x = opts.delete(:country); x.nil? ? nil : HttpClient::Preconditions.assert_class('country', x, String)),
              :currency => (x = opts.delete(:currency); x.nil? ? nil : HttpClient::Preconditions.assert_class('currency', x, String)),
              :number => (x = opts.delete(:number); x.nil? ? nil : HttpClient::Preconditions.assert_class('number', x, String))
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/experiences/#{CGI.escape(experience_key)}/logistics/summary").with_query(query).get
            ::Io::Flow::V0::Models::ExperienceLogisticsSummary.new(r)
          end

          def get_margins_by_experience_key(organization, experience_key, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('experience_key', experience_key, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "name" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/experiences/#{CGI.escape(experience_key)}/margins").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::ItemMargin.new(x) }
          end

          def post_margins_by_experience_key(organization, experience_key, item_margin_post_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('experience_key', experience_key, String)
            (x = item_margin_post_form; x.is_a?(::Io::Flow::V0::Models::ItemMarginPostForm) ? x : ::Io::Flow::V0::Models::ItemMarginPostForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/experiences/#{CGI.escape(experience_key)}/margins").with_json(item_margin_post_form.to_json).post
            ::Io::Flow::V0::Models::ItemMargin.new(r)
          end

          def get_margins_and_versions_by_experience_key(organization, experience_key, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('experience_key', experience_key, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "journal_timestamp" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/experiences/#{CGI.escape(experience_key)}/margins/versions").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::ItemMarginVersion.new(x) }
          end

          def get_margins_by_experience_key_and_key(organization, experience_key, key)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('experience_key', experience_key, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            r = @client.request("/#{CGI.escape(organization)}/experiences/#{CGI.escape(experience_key)}/margins/#{CGI.escape(key)}").get
            ::Io::Flow::V0::Models::ItemMargin.new(r)
          end

          def put_margins_by_experience_key_and_key(organization, experience_key, key, item_margin_put_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('experience_key', experience_key, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            (x = item_margin_put_form; x.is_a?(::Io::Flow::V0::Models::ItemMarginPutForm) ? x : ::Io::Flow::V0::Models::ItemMarginPutForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/experiences/#{CGI.escape(experience_key)}/margins/#{CGI.escape(key)}").with_json(item_margin_put_form.to_json).put
            ::Io::Flow::V0::Models::ItemMargin.new(r)
          end

          def delete_margins_by_experience_key_and_key(organization, experience_key, key)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('experience_key', experience_key, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            r = @client.request("/#{CGI.escape(organization)}/experiences/#{CGI.escape(experience_key)}/margins/#{CGI.escape(key)}").delete
            nil
          end

          def get_payment_method_types_by_experience_key(organization, experience_key, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('experience_key', experience_key, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :context => (x = opts.delete(:context); x.nil? ? nil : HttpClient::Preconditions.assert_class('context', x, String))
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/experiences/#{CGI.escape(experience_key)}/payment-method-types").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::PaymentMethodType.new(x) }
          end

          def get_payment_and_method_and_rules_by_experience_key(organization, experience_key, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('experience_key', experience_key, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :payment_method_type => (x = opts.delete(:payment_method_type); x.nil? ? nil : HttpClient::Preconditions.assert_class('payment_method_type', x, Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::PaymentMethodType) ? x : ::Io::Flow::V0::Models::PaymentMethodType.apply(x)).value }),
              :tags => (x = opts.delete(:tags); x.nil? ? nil : HttpClient::Preconditions.assert_class('tags', x, Array).map { |v| HttpClient::Preconditions.assert_class('tags', v, String) }),
              :amount => (x = opts.delete(:amount); x.nil? ? nil : HttpClient::Preconditions.assert_class('amount', x, String)),
              :currency => (x = opts.delete(:currency); x.nil? ? nil : HttpClient::Preconditions.assert_class('currency', x, String)),
              :context => (x = opts.delete(:context); x.nil? ? nil : HttpClient::Preconditions.assert_class('context', x, String))
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/experiences/#{CGI.escape(experience_key)}/payment/method/rules").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::PaymentMethodRule.new(x) }
          end

          # Change the ordering or payment tags for an experience. Every post must
          # include one entry for each payment method offered by Flow.
          def put_payment_and_method_and_rules_by_experience_key(organization, experience_key, experience_payment_method_rule_forms, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('experience_key', experience_key, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :context => (x = opts.delete(:context); x.nil? ? nil : HttpClient::Preconditions.assert_class('context', x, String))
            }.delete_if { |k, v| v.nil? }
            HttpClient::Preconditions.assert_class('experience_payment_method_rule_forms', experience_payment_method_rule_forms, Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::ExperiencePaymentMethodRuleForm) ? x : ::Io::Flow::V0::Models::ExperiencePaymentMethodRuleForm.new(x)) }
            r = @client.request("/#{CGI.escape(organization)}/experiences/#{CGI.escape(experience_key)}/payment/method/rules").with_query(query).with_json(experience_payment_method_rule_forms.map { |o| o.to_hash }.to_json).put
            r.map { |x| ::Io::Flow::V0::Models::PaymentMethodRule.new(x) }
          end

          def get_price_and_books_by_experience_key(organization, experience_key, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('experience_key', experience_key, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :price_book_key => (x = opts.delete(:price_book_key); x.nil? ? nil : HttpClient::Preconditions.assert_class('price_book_key', x, Array).map { |v| HttpClient::Preconditions.assert_class('price_book_key', v, String) }),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "position" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/experiences/#{CGI.escape(experience_key)}/price/books").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::ExperiencePriceBookMapping.new(x) }
          end

          def post_price_and_books_by_experience_key(organization, experience_key, experience_price_book_mapping_form, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('experience_key', experience_key, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :context => (x = opts.delete(:context); x.nil? ? nil : HttpClient::Preconditions.assert_class('context', x, String))
            }.delete_if { |k, v| v.nil? }
            (x = experience_price_book_mapping_form; x.is_a?(::Io::Flow::V0::Models::ExperiencePriceBookMappingForm) ? x : ::Io::Flow::V0::Models::ExperiencePriceBookMappingForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/experiences/#{CGI.escape(experience_key)}/price/books").with_query(query).with_json(experience_price_book_mapping_form.to_json).post
            ::Io::Flow::V0::Models::ExperiencePriceBookMapping.new(r)
          end

          def put_price_and_books_by_experience_key(organization, experience_key, experience_price_book_mapping_put_form, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('experience_key', experience_key, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :context => (x = opts.delete(:context); x.nil? ? nil : HttpClient::Preconditions.assert_class('context', x, String))
            }.delete_if { |k, v| v.nil? }
            (x = experience_price_book_mapping_put_form; x.is_a?(::Io::Flow::V0::Models::ExperiencePriceBookMappingPutForm) ? x : ::Io::Flow::V0::Models::ExperiencePriceBookMappingPutForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/experiences/#{CGI.escape(experience_key)}/price/books").with_query(query).with_json(experience_price_book_mapping_put_form.to_json).put
            r.map { |x| ::Io::Flow::V0::Models::ExperiencePriceBookMapping.new(x) }
          end

          def get_price_and_books_by_experience_key_and_key(organization, experience_key, key)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('experience_key', experience_key, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            r = @client.request("/#{CGI.escape(organization)}/experiences/#{CGI.escape(experience_key)}/price/books/#{CGI.escape(key)}").get
            ::Io::Flow::V0::Models::ExperiencePriceBookMapping.new(r)
          end

          def delete_price_and_books_by_experience_key_and_key(organization, experience_key, key)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('experience_key', experience_key, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            r = @client.request("/#{CGI.escape(organization)}/experiences/#{CGI.escape(experience_key)}/price/books/#{CGI.escape(key)}").delete
            nil
          end

          # Returns information about a specific experience.
          def get_by_key(organization, key, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :context => (x = opts.delete(:context); x.nil? ? nil : HttpClient::Preconditions.assert_class('context', x, String))
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/experiences/#{CGI.escape(key)}").with_query(query).get
            ::Io::Flow::V0::Models::Experience.new(r)
          end

          # Update experience with the specified key, creating if it does not exist.
          def put_by_key(organization, key, experience_form, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :context => (x = opts.delete(:context); x.nil? ? nil : HttpClient::Preconditions.assert_class('context', x, String))
            }.delete_if { |k, v| v.nil? }
            (x = experience_form; x.is_a?(::Io::Flow::V0::Models::ExperienceForm) ? x : ::Io::Flow::V0::Models::ExperienceForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/experiences/#{CGI.escape(key)}").with_query(query).with_json(experience_form.to_json).put
            ::Io::Flow::V0::Models::Experience.new(r)
          end

          # Delete the experience with this key
          def delete_by_key(organization, key, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :context => (x = opts.delete(:context); x.nil? ? nil : HttpClient::Preconditions.assert_class('context', x, String))
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/experiences/#{CGI.escape(key)}").with_query(query).delete
            nil
          end

          # Clones the experience with the specified key, using data from
          # experience_clone_form.
          def post_clone_by_key(organization, key, experience_clone_form, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :context => (x = opts.delete(:context); x.nil? ? nil : HttpClient::Preconditions.assert_class('context', x, String))
            }.delete_if { |k, v| v.nil? }
            (x = experience_clone_form; x.is_a?(::Io::Flow::V0::Models::ExperienceCloneForm) ? x : ::Io::Flow::V0::Models::ExperienceCloneForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/experiences/#{CGI.escape(key)}/clone").with_query(query).with_json(experience_clone_form.to_json).post
            ::Io::Flow::V0::Models::ExperienceClone.new(r)
          end

          # Returns the experience_clone associated with the id.
          def get_clone_by_key_and_id(organization, key, id)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            r = @client.request("/#{CGI.escape(organization)}/experiences/#{CGI.escape(key)}/clone/#{CGI.escape(id)}").get
            ::Io::Flow::V0::Models::ExperienceClone.new(r)
          end

          # Returns detailed information on the pricing of this item within this
          # experience
          def get_items_and_price_by_key_and_number(organization, key, number, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            HttpClient::Preconditions.assert_class('number', number, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :price_amount => (x = opts.delete(:price_amount); x.nil? ? nil : HttpClient::Preconditions.assert_class('price_amount', x, Numeric)),
              :price_currency => (x = opts.delete(:price_currency); x.nil? ? nil : HttpClient::Preconditions.assert_class('price_currency', x, String)),
              :ship_from_country => (x = opts.delete(:ship_from_country); x.nil? ? nil : HttpClient::Preconditions.assert_class('ship_from_country', x, String)),
              :ship_from_province => (x = opts.delete(:ship_from_province); x.nil? ? nil : HttpClient::Preconditions.assert_class('ship_from_province', x, String)),
              :ship_to_country => (x = opts.delete(:ship_to_country); x.nil? ? nil : HttpClient::Preconditions.assert_class('ship_to_country', x, String)),
              :ship_to_province => (x = opts.delete(:ship_to_province); x.nil? ? nil : HttpClient::Preconditions.assert_class('ship_to_province', x, String)),
              :currency => (x = opts.delete(:currency); x.nil? ? nil : HttpClient::Preconditions.assert_class('currency', x, String)),
              :context => (x = opts.delete(:context); x.nil? ? nil : HttpClient::Preconditions.assert_class('context', x, String))
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/experiences/#{CGI.escape(key)}/items/#{CGI.escape(number)}/price").with_query(query).get
            ::Io::Flow::V0::Models::PriceCheck.new(r)
          end

          # Get the pricing settings for this experience
          def get_pricing_by_key(organization, key, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :context => (x = opts.delete(:context); x.nil? ? nil : HttpClient::Preconditions.assert_class('context', x, String))
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/experiences/#{CGI.escape(key)}/pricing").with_query(query).get
            ::Io::Flow::V0::Models::Pricing.new(r)
          end

          # Update the pricing settings for this experience
          def put_pricing_by_key(organization, key, pricing, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :context => (x = opts.delete(:context); x.nil? ? nil : HttpClient::Preconditions.assert_class('context', x, String))
            }.delete_if { |k, v| v.nil? }
            (x = pricing; x.is_a?(::Io::Flow::V0::Models::Pricing) ? x : ::Io::Flow::V0::Models::Pricing.new(x))
            r = @client.request("/#{CGI.escape(organization)}/experiences/#{CGI.escape(key)}/pricing").with_query(query).with_json(pricing.to_json).put
            ::Io::Flow::V0::Models::Pricing.new(r)
          end

          # Get the pricing settings versions for this experience
          def get_pricing_and_versions_by_key(organization, key, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "journal_timestamp" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/experiences/#{CGI.escape(key)}/pricing/versions").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::PricingVersion.new(x) }
          end

          # Get available promotions for the experience
          def get_promotions_and_available_by_key(organization, key, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :context => (x = opts.delete(:context); x.nil? ? nil : HttpClient::Preconditions.assert_class('context', x, String))
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/experiences/#{CGI.escape(key)}/promotions/available").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::Promotion.from_json(x) }
          end

          # Updates the status of a given experience.
          def put_status_by_key(organization, key, experience_status_form, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :context => (x = opts.delete(:context); x.nil? ? nil : HttpClient::Preconditions.assert_class('context', x, String))
            }.delete_if { |k, v| v.nil? }
            (x = experience_status_form; x.is_a?(::Io::Flow::V0::Models::ExperienceStatusForm) ? x : ::Io::Flow::V0::Models::ExperienceStatusForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/experiences/#{CGI.escape(key)}/status").with_query(query).with_json(experience_status_form.to_json).put
            ::Io::Flow::V0::Models::Experience.new(r)
          end

        end

        class ExperienceCheckoutSettings

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          def get(organization, experience_key, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('experience_key', experience_key, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :context => (x = opts.delete(:context); x.nil? ? nil : HttpClient::Preconditions.assert_class('context', x, String))
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/experiences/#{CGI.escape(experience_key)}/settings/checkout").with_query(query).get
            ::Io::Flow::V0::Models::ExperienceCheckoutSettings.new(r)
          end

          def put(organization, experience_key, experience_checkout_settings_form, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('experience_key', experience_key, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :context => (x = opts.delete(:context); x.nil? ? nil : HttpClient::Preconditions.assert_class('context', x, String))
            }.delete_if { |k, v| v.nil? }
            (x = experience_checkout_settings_form; x.is_a?(::Io::Flow::V0::Models::ExperienceCheckoutSettingsForm) ? x : ::Io::Flow::V0::Models::ExperienceCheckoutSettingsForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/experiences/#{CGI.escape(experience_key)}/settings/checkout").with_query(query).with_json(experience_checkout_settings_form.to_json).put
            ::Io::Flow::V0::Models::ExperienceCheckoutSettings.new(r)
          end

        end

        class ExperienceDefaults

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          # Returns recommended default settings when creating a new experience
          def get(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :region_id => (x = opts.delete(:region_id); x.nil? ? nil : HttpClient::Preconditions.assert_class('region_id', x, String)),
              :context => (x = opts.delete(:context); x.nil? ? nil : HttpClient::Preconditions.assert_class('context', x, String))
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/experience/defaults").with_query(query).get
            ::Io::Flow::V0::Models::ExperienceDefaults.new(r)
          end

        end

        class ExperienceLogisticsSettings

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          def get(organization, experience_key)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('experience_key', experience_key, String)
            r = @client.request("/#{CGI.escape(organization)}/experiences/#{CGI.escape(experience_key)}/settings/logistics").get
            ::Io::Flow::V0::Models::ExperienceLogisticsSettings.new(r)
          end

          def put(organization, experience_key, experience_logistics_settings_put_form, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('experience_key', experience_key, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :context => (x = opts.delete(:context); x.nil? ? nil : HttpClient::Preconditions.assert_class('context', x, String))
            }.delete_if { |k, v| v.nil? }
            (x = experience_logistics_settings_put_form; x.is_a?(::Io::Flow::V0::Models::ExperienceLogisticsSettingsPutForm) ? x : ::Io::Flow::V0::Models::ExperienceLogisticsSettingsPutForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/experiences/#{CGI.escape(experience_key)}/settings/logistics").with_query(query).with_json(experience_logistics_settings_put_form.to_json).put
            ::Io::Flow::V0::Models::ExperienceLogisticsSettings.new(r)
          end

        end

        class ExperiencePriceConversions

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          # Converts one or more prices from one currency to another
          def get(organization, experience_key, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('experience_key', experience_key, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :base => (x = opts.delete(:base); x.nil? ? nil : HttpClient::Preconditions.assert_class('base', x, String)),
              :local => (x = opts.delete(:local); x.nil? ? nil : HttpClient::Preconditions.assert_class('local', x, String)),
              :amount => (x = opts.delete(:amount); x.nil? ? nil : HttpClient::Preconditions.assert_class('amount', x, Array).map { |v| HttpClient::Preconditions.assert_class('amount', v, String) })
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/experiences/#{CGI.escape(experience_key)}/conversions/price").with_query(query).get
            ::Io::Flow::V0::Models::ExperiencePriceConversionResponse.new(r)
          end

        end

        class ExperiencePriceFacetConversions

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          # Converts one or more price values into local currency, rounding for display
          # in price facets. A common use case is to say show a price filter to
          # consumers (e.g. 10-20 USD) and want to display that in local currency (15-30
          # CAD). To do so, send the values '10' and '20' to this API which will return
          # the rounded local currency facet values
          def get(organization, experience_key, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('experience_key', experience_key, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :base => (x = opts.delete(:base); x.nil? ? nil : HttpClient::Preconditions.assert_class('base', x, String)),
              :local => (x = opts.delete(:local); x.nil? ? nil : HttpClient::Preconditions.assert_class('local', x, String)),
              :min => (x = opts.delete(:min); x.nil? ? nil : HttpClient::Preconditions.assert_class('min', x, Array).map { |v| HttpClient::Preconditions.assert_class('min', v, String) }),
              :max => (x = opts.delete(:max); x.nil? ? nil : HttpClient::Preconditions.assert_class('max', x, Array).map { |v| HttpClient::Preconditions.assert_class('max', v, String) })
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/experiences/#{CGI.escape(experience_key)}/conversions/price/facet").with_query(query).get
            ::Io::Flow::V0::Models::ExperiencePriceFacetConversionResponse.new(r)
          end

        end

        class Items

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          # Search items. Always paginated.
          def get(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :number => (x = opts.delete(:number); x.nil? ? nil : HttpClient::Preconditions.assert_class('number', x, Array).map { |v| HttpClient::Preconditions.assert_class('number', v, String) }),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "name" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/catalog/items").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::Item.new(x) }
          end

          # Add catalog item(s)
          def post(organization, item_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            (x = item_form; x.is_a?(::Io::Flow::V0::Models::ItemForm) ? x : ::Io::Flow::V0::Models::ItemForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/catalog/items").with_json(item_form.to_json).post
            ::Io::Flow::V0::Models::Item.new(r)
          end

          # Provides visibility into recent changes of each object, including deletion
          def get_versions(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :number => (x = opts.delete(:number); x.nil? ? nil : HttpClient::Preconditions.assert_class('number', x, Array).map { |v| HttpClient::Preconditions.assert_class('number', v, String) }),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "journal_timestamp" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/catalog/items/versions").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::ItemVersion.new(x) }
          end

          # Returns information about a specific item.
          def get_by_number(organization, number)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('number', number, String)
            r = @client.request("/#{CGI.escape(organization)}/catalog/items/#{CGI.escape(number)}").get
            ::Io::Flow::V0::Models::Item.new(r)
          end

          # Update item with the specified number, creating if it does not exist.
          def put_by_number(organization, number, item_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('number', number, String)
            (x = item_form; x.is_a?(::Io::Flow::V0::Models::ItemForm) ? x : ::Io::Flow::V0::Models::ItemForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/catalog/items/#{CGI.escape(number)}").with_json(item_form.to_json).put
            ::Io::Flow::V0::Models::Item.new(r)
          end

          # Delete the item with this number
          def delete_by_number(organization, number)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('number', number, String)
            r = @client.request("/#{CGI.escape(organization)}/catalog/items/#{CGI.escape(number)}").delete
            nil
          end

          # Update item with the specified attributes.
          def patch_attributes_by_number(organization, number, item_attributes_patch_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('number', number, String)
            (x = item_attributes_patch_form; x.is_a?(::Io::Flow::V0::Models::ItemAttributesPatchForm) ? x : ::Io::Flow::V0::Models::ItemAttributesPatchForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/catalog/items/#{CGI.escape(number)}/attributes").with_json(item_attributes_patch_form.to_json).patch
            ::Io::Flow::V0::Models::Item.new(r)
          end

          # Update item with the specified number, creating if it does not exist.
          def put_price_by_number(organization, number, item_price_update_put_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('number', number, String)
            (x = item_price_update_put_form; x.is_a?(::Io::Flow::V0::Models::ItemPriceUpdatePutForm) ? x : ::Io::Flow::V0::Models::ItemPriceUpdatePutForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/catalog/items/#{CGI.escape(number)}/price").with_json(item_price_update_put_form.to_json).put
            ::Io::Flow::V0::Models::Item.new(r)
          end

        end

        class ItemFormOverlays

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          def get(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :key => (x = opts.delete(:key); x.nil? ? nil : HttpClient::Preconditions.assert_class('key', x, Array).map { |v| HttpClient::Preconditions.assert_class('key', v, String) }),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "position" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/catalog/item/overlays").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::ItemFormOverlay.new(x) }
          end

          # Adds an overlay data to merge into a catalog item
          def post(organization, item_form_overlay_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            (x = item_form_overlay_form; x.is_a?(::Io::Flow::V0::Models::ItemFormOverlayForm) ? x : ::Io::Flow::V0::Models::ItemFormOverlayForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/catalog/item/overlays").with_json(item_form_overlay_form.to_json).post
            ::Io::Flow::V0::Models::ItemFormOverlay.new(r)
          end

          def get_by_key(organization, key)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            r = @client.request("/#{CGI.escape(organization)}/catalog/item/overlays/#{CGI.escape(key)}").get
            ::Io::Flow::V0::Models::ItemFormOverlay.new(r)
          end

          # Update item overlay with the specified key, creating if it does not exist.
          def put_by_key(organization, key, item_form_overlay_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            (x = item_form_overlay_form; x.is_a?(::Io::Flow::V0::Models::ItemFormOverlayForm) ? x : ::Io::Flow::V0::Models::ItemFormOverlayForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/catalog/item/overlays/#{CGI.escape(key)}").with_json(item_form_overlay_form.to_json).put
            ::Io::Flow::V0::Models::ItemFormOverlay.new(r)
          end

          def delete_by_key(organization, key)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            r = @client.request("/#{CGI.escape(organization)}/catalog/item/overlays/#{CGI.escape(key)}").delete
            nil
          end

        end

        class Orders

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          # Search orders. Always paginated.
          def get(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :number => (x = opts.delete(:number); x.nil? ? nil : HttpClient::Preconditions.assert_class('number', x, Array).map { |v| HttpClient::Preconditions.assert_class('number', v, String) }),
              :identifier => (x = opts.delete(:identifier); x.nil? ? nil : HttpClient::Preconditions.assert_class('identifier', x, String)),
              :status => (x = opts.delete(:status); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::OrderStatus) ? x : ::Io::Flow::V0::Models::OrderStatus.apply(x)).value),
              :customer_number => (x = opts.delete(:customer_number); x.nil? ? nil : HttpClient::Preconditions.assert_class('customer_number', x, String)),
              :submitted_at_on_or_after => (x = opts.delete(:submitted_at_on_or_after); x.nil? ? nil : HttpClient::Preconditions.assert_class('submitted_at_on_or_after', HttpClient::Helper.to_date_time_iso8601(x), DateTime)),
              :romanize => (x = opts.delete(:romanize); x.nil? ? nil : HttpClient::Preconditions.assert_class('romanize', x, Array).map { |v| HttpClient::Preconditions.assert_class('romanize', v, String) }),
              :context => (x = opts.delete(:context); x.nil? ? nil : HttpClient::Preconditions.assert_class('context', x, String)),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "-created_at" : x), String),
              :expand => (x = opts.delete(:expand); x.nil? ? nil : HttpClient::Preconditions.assert_class('expand', x, Array).map { |v| HttpClient::Preconditions.assert_class('expand', v, String) })
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/orders").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::Order.new(x) }
          end

          # Create an order, using the localized information from the experience
          # selected by the query parameters. Note the order must be submitted before
          # its expiration
          def post(organization, order_form, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :experience => (x = opts.delete(:experience); x.nil? ? nil : HttpClient::Preconditions.assert_class('experience', x, String)),
              :country => (x = opts.delete(:country); x.nil? ? nil : HttpClient::Preconditions.assert_class('country', x, String)),
              :ip => (x = opts.delete(:ip); x.nil? ? nil : HttpClient::Preconditions.assert_class('ip', x, String)),
              :currency => (x = opts.delete(:currency); x.nil? ? nil : HttpClient::Preconditions.assert_class('currency', x, String)),
              :language => (x = opts.delete(:language); x.nil? ? nil : HttpClient::Preconditions.assert_class('language', x, String)),
              :expand => (x = opts.delete(:expand); x.nil? ? nil : HttpClient::Preconditions.assert_class('expand', x, Array).map { |v| HttpClient::Preconditions.assert_class('expand', v, String) }),
              :romanize => (x = opts.delete(:romanize); x.nil? ? nil : HttpClient::Preconditions.assert_class('romanize', x, Array).map { |v| HttpClient::Preconditions.assert_class('romanize', v, String) }),
              :context => (x = opts.delete(:context); x.nil? ? nil : HttpClient::Preconditions.assert_class('context', x, String))
            }.delete_if { |k, v| v.nil? }
            (x = order_form; x.is_a?(::Io::Flow::V0::Models::OrderForm) ? x : ::Io::Flow::V0::Models::OrderForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/orders").with_query(query).with_json(order_form.to_json).post
            ::Io::Flow::V0::Models::Order.new(r)
          end

          # Returns information about a specific order using an identifier number
          def get_identifier_by_identifier(organization, identifier, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('identifier', identifier, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :expand => (x = opts.delete(:expand); x.nil? ? nil : HttpClient::Preconditions.assert_class('expand', x, Array).map { |v| HttpClient::Preconditions.assert_class('expand', v, String) }),
              :romanize => (x = opts.delete(:romanize); x.nil? ? nil : HttpClient::Preconditions.assert_class('romanize', x, Array).map { |v| HttpClient::Preconditions.assert_class('romanize', v, String) }),
              :context => (x = opts.delete(:context); x.nil? ? nil : HttpClient::Preconditions.assert_class('context', x, String))
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/orders/identifier/#{CGI.escape(identifier)}").with_query(query).get
            ::Io::Flow::V0::Models::Order.new(r)
          end

          # Submits an order. You will get a validation error if the order has already
          # expired (and a new quote could not be automatically recreated for a lower or
          # same price). This method is idempotent - submitting an order a second time
          # has no effect.
          def post_submissions(organization, order_with_discounts_form, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :expand => (x = opts.delete(:expand); x.nil? ? nil : HttpClient::Preconditions.assert_class('expand', x, Array).map { |v| HttpClient::Preconditions.assert_class('expand', v, String) }),
              :experience => (x = opts.delete(:experience); x.nil? ? nil : HttpClient::Preconditions.assert_class('experience', x, String)),
              :currency => (x = opts.delete(:currency); x.nil? ? nil : HttpClient::Preconditions.assert_class('currency', x, String)),
              :show_selections_only => (x = opts.delete(:show_selections_only); x.nil? ? nil : HttpClient::Preconditions.assert_boolean('show_selections_only', x)),
              :context => (x = opts.delete(:context); x.nil? ? nil : HttpClient::Preconditions.assert_class('context', x, String))
            }.delete_if { |k, v| v.nil? }
            (x = order_with_discounts_form; x.is_a?(::Io::Flow::V0::Models::OrderWithDiscountsForm) ? x : ::Io::Flow::V0::Models::OrderWithDiscountsForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/orders/submissions").with_query(query).with_json(order_with_discounts_form.to_json).post
            ::Io::Flow::V0::Models::Order.new(r)
          end

          # Provides visibility into recent changes of each order, including deletion
          def get_versions(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :number => (x = opts.delete(:number); x.nil? ? nil : HttpClient::Preconditions.assert_class('number', x, Array).map { |v| HttpClient::Preconditions.assert_class('number', v, String) }),
              :journal_timestamp_on_or_after => (x = opts.delete(:journal_timestamp_on_or_after); x.nil? ? nil : HttpClient::Preconditions.assert_class('journal_timestamp_on_or_after', HttpClient::Helper.to_date_time_iso8601(x), DateTime)),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "journal_timestamp" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/orders/versions").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::OrderVersion.new(x) }
          end

          # Returns information about a specific order.
          def get_by_number(organization, number, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('number', number, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :expand => (x = opts.delete(:expand); x.nil? ? nil : HttpClient::Preconditions.assert_class('expand', x, Array).map { |v| HttpClient::Preconditions.assert_class('expand', v, String) }),
              :romanize => (x = opts.delete(:romanize); x.nil? ? nil : HttpClient::Preconditions.assert_class('romanize', x, Array).map { |v| HttpClient::Preconditions.assert_class('romanize', v, String) }),
              :context => (x = opts.delete(:context); x.nil? ? nil : HttpClient::Preconditions.assert_class('context', x, String))
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/orders/#{CGI.escape(number)}").with_query(query).get
            ::Io::Flow::V0::Models::Order.new(r)
          end

          # Upserts an order. using the localized information from the experience
          # selected by the query parameters. Note the order must be submitted before
          # its expiration
          def put_by_number(organization, number, order_put_form, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('number', number, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :experience => (x = opts.delete(:experience); x.nil? ? nil : HttpClient::Preconditions.assert_class('experience', x, String)),
              :country => (x = opts.delete(:country); x.nil? ? nil : HttpClient::Preconditions.assert_class('country', x, String)),
              :ip => (x = opts.delete(:ip); x.nil? ? nil : HttpClient::Preconditions.assert_class('ip', x, String)),
              :currency => (x = opts.delete(:currency); x.nil? ? nil : HttpClient::Preconditions.assert_class('currency', x, String)),
              :language => (x = opts.delete(:language); x.nil? ? nil : HttpClient::Preconditions.assert_class('language', x, String)),
              :expand => (x = opts.delete(:expand); x.nil? ? nil : HttpClient::Preconditions.assert_class('expand', x, Array).map { |v| HttpClient::Preconditions.assert_class('expand', v, String) }),
              :romanize => (x = opts.delete(:romanize); x.nil? ? nil : HttpClient::Preconditions.assert_class('romanize', x, Array).map { |v| HttpClient::Preconditions.assert_class('romanize', v, String) }),
              :context => (x = opts.delete(:context); x.nil? ? nil : HttpClient::Preconditions.assert_class('context', x, String))
            }.delete_if { |k, v| v.nil? }
            (x = order_put_form; x.is_a?(::Io::Flow::V0::Models::OrderPutForm) ? x : ::Io::Flow::V0::Models::OrderPutForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/orders/#{CGI.escape(number)}").with_query(query).with_json(order_put_form.to_json).put
            ::Io::Flow::V0::Models::Order.new(r)
          end

          # Delete an order. Note that production orders that have already been
          # submitted cannot be deleted (you will see a 422 response in these cases).
          def delete_by_number(organization, number)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('number', number, String)
            r = @client.request("/#{CGI.escape(organization)}/orders/#{CGI.escape(number)}").delete
            nil
          end

          # Order allocations provide a granular view of an order that is targeted for
          # accounting / financial views of an order
          def get_allocations_by_number(organization, number)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('number', number, String)
            r = @client.request("/#{CGI.escape(organization)}/orders/#{CGI.escape(number)}/allocations").get
            ::Io::Flow::V0::Models::AllocationV2.new(r)
          end

          # A simplified, line-based view of order financials.
          def get_allocations_and_summaries_and_line_by_number(organization, number)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('number', number, String)
            r = @client.request("/#{CGI.escape(organization)}/orders/#{CGI.escape(number)}/allocations/summaries/line").get
            ::Io::Flow::V0::Models::AllocationLineSummary.new(r)
          end

          # Creates an authorization, automatically associating to this order.
          def post_authorizations_by_number(organization, number, authorization_form, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('number', number, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :context => (x = opts.delete(:context); x.nil? ? nil : HttpClient::Preconditions.assert_class('context', x, String))
            }.delete_if { |k, v| v.nil? }
            (x = authorization_form; x.is_a?(::Io::Flow::V0::Models::AuthorizationForm) ? x : ::Io::Flow::V0::Models::AuthorizationForm.from_json(x))
            r = @client.request("/#{CGI.escape(organization)}/orders/#{CGI.escape(number)}/authorizations").with_query(query).with_json(authorization_form.to_json).post
            ::Io::Flow::V0::Models::Authorization.from_json(r)
          end

          # Updates an order's destination address
          def put_destination_by_number(organization, number, order_destination_put_form, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('number', number, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :context => (x = opts.delete(:context); x.nil? ? nil : HttpClient::Preconditions.assert_class('context', x, String))
            }.delete_if { |k, v| v.nil? }
            (x = order_destination_put_form; x.is_a?(::Io::Flow::V0::Models::OrderDestinationPutForm) ? x : ::Io::Flow::V0::Models::OrderDestinationPutForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/orders/#{CGI.escape(number)}/destination").with_query(query).with_json(order_destination_put_form.to_json).put
            ::Io::Flow::V0::Models::Order.new(r)
          end

          def put_inventory_and_reservations_by_number(organization, number, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('number', number, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :context => (x = opts.delete(:context); x.nil? ? nil : HttpClient::Preconditions.assert_class('context', x, String))
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/orders/#{CGI.escape(number)}/inventory/reservations").with_query(query).put
            ::Io::Flow::V0::Models::Reservation.new(r)
          end

          # Creates an order payment by applying the authorization to the order.
          def post_payments_by_number(organization, number, authorization)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('number', number, String)
            (x = authorization; x.is_a?(::Io::Flow::V0::Models::Authorization) ? x : ::Io::Flow::V0::Models::Authorization.from_json(x))
            r = @client.request("/#{CGI.escape(organization)}/orders/#{CGI.escape(number)}/payments").with_json(authorization.to_json).post
            ::Io::Flow::V0::Models::Order.new(r)
          end

          # Creates a free shipping promotion for this order, automatically applying it
          # to the order if the order meets the defined promotion trigger.
          def put_promotions_and_free_shipping_by_number_and_key(organization, number, key, free_shipping_order_promotion_form, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('number', number, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :expand => (x = opts.delete(:expand); x.nil? ? nil : HttpClient::Preconditions.assert_class('expand', x, Array).map { |v| HttpClient::Preconditions.assert_class('expand', v, String) }),
              :context => (x = opts.delete(:context); x.nil? ? nil : HttpClient::Preconditions.assert_class('context', x, String))
            }.delete_if { |k, v| v.nil? }
            (x = free_shipping_order_promotion_form; x.is_a?(::Io::Flow::V0::Models::FreeShippingOrderPromotionForm) ? x : ::Io::Flow::V0::Models::FreeShippingOrderPromotionForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/orders/#{CGI.escape(number)}/promotions/#{CGI.escape(key)}/free_shipping").with_query(query).with_json(free_shipping_order_promotion_form.to_json).put
            ::Io::Flow::V0::Models::FreeShippingOrderPromotion.new(r)
          end

          # Returns a refund order summary for the specified order.
          def post_refunds_and_summaries_by_number(organization, number, order_refund_summary_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('number', number, String)
            (x = order_refund_summary_form; x.is_a?(::Io::Flow::V0::Models::OrderRefundSummaryForm) ? x : ::Io::Flow::V0::Models::OrderRefundSummaryForm.from_json(x))
            r = @client.request("/#{CGI.escape(organization)}/orders/#{CGI.escape(number)}/refunds/summaries").with_json(order_refund_summary_form.to_json).post
            ::Io::Flow::V0::Models::OrderRefundSummary.new(r)
          end

          # Creates a replacement order.
          def post_replacements_by_number(organization, number, order_replacement_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('number', number, String)
            (x = order_replacement_form; x.is_a?(::Io::Flow::V0::Models::OrderReplacementForm) ? x : ::Io::Flow::V0::Models::OrderReplacementForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/orders/#{CGI.escape(number)}/replacements").with_json(order_replacement_form.to_json).post
            ::Io::Flow::V0::Models::OrderReplacement.new(r)
          end

          def post_service_and_changes_by_number(organization, number, order_service_change_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('number', number, String)
            (x = order_service_change_form; x.is_a?(::Io::Flow::V0::Models::OrderServiceChangeForm) ? x : ::Io::Flow::V0::Models::OrderServiceChangeForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/orders/#{CGI.escape(number)}/service/changes").with_json(order_service_change_form.to_json).post
            ::Io::Flow::V0::Models::OrderServiceChange.new(r)
          end

          # Submits an order. You will get a validation error if the order has already
          # expired (and a new quote could not be automatically recreated for a lower or
          # same price). This method is idempotent - submitting an order a second time
          # has no effect.
          def put_submissions_by_number(organization, number, order_submission_form, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('number', number, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :expand => (x = opts.delete(:expand); x.nil? ? nil : HttpClient::Preconditions.assert_class('expand', x, Array).map { |v| HttpClient::Preconditions.assert_class('expand', v, String) }),
              :context => (x = opts.delete(:context); x.nil? ? nil : HttpClient::Preconditions.assert_class('context', x, String))
            }.delete_if { |k, v| v.nil? }
            (x = order_submission_form; x.is_a?(::Io::Flow::V0::Models::OrderSubmissionForm) ? x : ::Io::Flow::V0::Models::OrderSubmissionForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/orders/#{CGI.escape(number)}/submissions").with_query(query).with_json(order_submission_form.to_json).put
            ::Io::Flow::V0::Models::Order.new(r)
          end

          # Validates a tax registration number, proxying to underlying services and
          # recording the result on the order.
          def put_tax_and_registration_by_number(organization, number, tax_registration_form, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('number', number, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :context => (x = opts.delete(:context); x.nil? ? nil : HttpClient::Preconditions.assert_class('context', x, String))
            }.delete_if { |k, v| v.nil? }
            (x = tax_registration_form; x.is_a?(::Io::Flow::V0::Models::TaxRegistrationForm) ? x : ::Io::Flow::V0::Models::TaxRegistrationForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/orders/#{CGI.escape(number)}/tax/registration").with_query(query).with_json(tax_registration_form.to_json).put
            ::Io::Flow::V0::Models::TaxRegistration.new(r)
          end

          def delete_tax_and_registration_by_number_and_key(organization, number, key)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('number', number, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            r = @client.request("/#{CGI.escape(organization)}/orders/#{CGI.escape(number)}/tax/registration/#{CGI.escape(key)}").delete
            nil
          end

          # Retrieve the current fraud status for an order.
          def get_status_and_fraud_by_number(organization, number)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('number', number, String)
            r = @client.request("/#{CGI.escape(organization)}/orders/#{CGI.escape(number)}/status/fraud").get
            ::Io::Flow::V0::Models::OrderFraudStatus.new(r)
          end

          # Generate a commercial invoice for the order without providing a label.
          def post_labels_and_documents_and_invoice_by_number(organization, number)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('number', number, String)
            r = @client.request("/#{CGI.escape(organization)}/orders/#{CGI.escape(number)}/labels/documents/invoice").post
            ::Io::Flow::V0::Models::ShippingLabelDocument.new(r)
          end

        end

        class OrderBuilders

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          def post(organization, order_put_form, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :experience => (x = opts.delete(:experience); x.nil? ? nil : HttpClient::Preconditions.assert_class('experience', x, String)),
              :country => (x = opts.delete(:country); x.nil? ? nil : HttpClient::Preconditions.assert_class('country', x, String)),
              :ip => (x = opts.delete(:ip); x.nil? ? nil : HttpClient::Preconditions.assert_class('ip', x, String)),
              :currency => (x = opts.delete(:currency); x.nil? ? nil : HttpClient::Preconditions.assert_class('currency', x, String)),
              :language => (x = opts.delete(:language); x.nil? ? nil : HttpClient::Preconditions.assert_class('language', x, String)),
              :expand => (x = opts.delete(:expand); x.nil? ? nil : HttpClient::Preconditions.assert_class('expand', x, Array).map { |v| HttpClient::Preconditions.assert_class('expand', v, String) }),
              :context => (x = opts.delete(:context); x.nil? ? nil : HttpClient::Preconditions.assert_class('context', x, String))
            }.delete_if { |k, v| v.nil? }
            (x = order_put_form; x.is_a?(::Io::Flow::V0::Models::OrderPutForm) ? x : ::Io::Flow::V0::Models::OrderPutForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/order/builders").with_query(query).with_json(order_put_form.to_json).post
            ::Io::Flow::V0::Models::OrderBuilder.new(r)
          end

          def put_carts_by_number(organization, number, order_put_form, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('number', number, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :experience => (x = opts.delete(:experience); x.nil? ? nil : HttpClient::Preconditions.assert_class('experience', x, String)),
              :country => (x = opts.delete(:country); x.nil? ? nil : HttpClient::Preconditions.assert_class('country', x, String)),
              :ip => (x = opts.delete(:ip); x.nil? ? nil : HttpClient::Preconditions.assert_class('ip', x, String)),
              :currency => (x = opts.delete(:currency); x.nil? ? nil : HttpClient::Preconditions.assert_class('currency', x, String)),
              :language => (x = opts.delete(:language); x.nil? ? nil : HttpClient::Preconditions.assert_class('language', x, String)),
              :expand => (x = opts.delete(:expand); x.nil? ? nil : HttpClient::Preconditions.assert_class('expand', x, Array).map { |v| HttpClient::Preconditions.assert_class('expand', v, String) }),
              :context => (x = opts.delete(:context); x.nil? ? nil : HttpClient::Preconditions.assert_class('context', x, String))
            }.delete_if { |k, v| v.nil? }
            (x = order_put_form; x.is_a?(::Io::Flow::V0::Models::OrderPutForm) ? x : ::Io::Flow::V0::Models::OrderPutForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/order/builders/carts/#{CGI.escape(number)}").with_query(query).with_json(order_put_form.to_json).put
            ::Io::Flow::V0::Models::OrderBuilder.new(r)
          end

          # Returns information about a specific order and any errors associated with
          # the order.
          def get_by_number(organization, number, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('number', number, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :expand => (x = opts.delete(:expand); x.nil? ? nil : HttpClient::Preconditions.assert_class('expand', x, Array).map { |v| HttpClient::Preconditions.assert_class('expand', v, String) }),
              :romanize => (x = opts.delete(:romanize); x.nil? ? nil : HttpClient::Preconditions.assert_class('romanize', x, Array).map { |v| HttpClient::Preconditions.assert_class('romanize', v, String) }),
              :context => (x = opts.delete(:context); x.nil? ? nil : HttpClient::Preconditions.assert_class('context', x, String))
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/order/builders/#{CGI.escape(number)}").with_query(query).get
            ::Io::Flow::V0::Models::OrderBuilder.new(r)
          end

          def put_by_number(organization, number, order_put_form, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('number', number, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :experience => (x = opts.delete(:experience); x.nil? ? nil : HttpClient::Preconditions.assert_class('experience', x, String)),
              :country => (x = opts.delete(:country); x.nil? ? nil : HttpClient::Preconditions.assert_class('country', x, String)),
              :ip => (x = opts.delete(:ip); x.nil? ? nil : HttpClient::Preconditions.assert_class('ip', x, String)),
              :currency => (x = opts.delete(:currency); x.nil? ? nil : HttpClient::Preconditions.assert_class('currency', x, String)),
              :language => (x = opts.delete(:language); x.nil? ? nil : HttpClient::Preconditions.assert_class('language', x, String)),
              :expand => (x = opts.delete(:expand); x.nil? ? nil : HttpClient::Preconditions.assert_class('expand', x, Array).map { |v| HttpClient::Preconditions.assert_class('expand', v, String) }),
              :context => (x = opts.delete(:context); x.nil? ? nil : HttpClient::Preconditions.assert_class('context', x, String))
            }.delete_if { |k, v| v.nil? }
            (x = order_put_form; x.is_a?(::Io::Flow::V0::Models::OrderPutForm) ? x : ::Io::Flow::V0::Models::OrderPutForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/order/builders/#{CGI.escape(number)}").with_query(query).with_json(order_put_form.to_json).put
            ::Io::Flow::V0::Models::OrderBuilder.new(r)
          end

          def put_attributes_by_number(organization, number, order_builder_attributes_form, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('number', number, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :expand => (x = opts.delete(:expand); x.nil? ? nil : HttpClient::Preconditions.assert_class('expand', x, Array).map { |v| HttpClient::Preconditions.assert_class('expand', v, String) }),
              :context => (x = opts.delete(:context); x.nil? ? nil : HttpClient::Preconditions.assert_class('context', x, String))
            }.delete_if { |k, v| v.nil? }
            (x = order_builder_attributes_form; x.is_a?(::Io::Flow::V0::Models::OrderBuilderAttributesForm) ? x : ::Io::Flow::V0::Models::OrderBuilderAttributesForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/order/builders/#{CGI.escape(number)}/attributes").with_query(query).with_json(order_builder_attributes_form.to_json).put
            ::Io::Flow::V0::Models::OrderBuilder.new(r)
          end

          def put_country_by_number(organization, number, order_builder_destination_country_form, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('number', number, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :expand => (x = opts.delete(:expand); x.nil? ? nil : HttpClient::Preconditions.assert_class('expand', x, Array).map { |v| HttpClient::Preconditions.assert_class('expand', v, String) }),
              :context => (x = opts.delete(:context); x.nil? ? nil : HttpClient::Preconditions.assert_class('context', x, String))
            }.delete_if { |k, v| v.nil? }
            (x = order_builder_destination_country_form; x.is_a?(::Io::Flow::V0::Models::OrderBuilderDestinationCountryForm) ? x : ::Io::Flow::V0::Models::OrderBuilderDestinationCountryForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/order/builders/#{CGI.escape(number)}/country").with_query(query).with_json(order_builder_destination_country_form.to_json).put
            ::Io::Flow::V0::Models::OrderBuilder.new(r)
          end

          def put_customer_by_number(organization, number, order_builder_customer_form, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('number', number, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :expand => (x = opts.delete(:expand); x.nil? ? nil : HttpClient::Preconditions.assert_class('expand', x, Array).map { |v| HttpClient::Preconditions.assert_class('expand', v, String) }),
              :context => (x = opts.delete(:context); x.nil? ? nil : HttpClient::Preconditions.assert_class('context', x, String))
            }.delete_if { |k, v| v.nil? }
            (x = order_builder_customer_form; x.is_a?(::Io::Flow::V0::Models::OrderBuilderCustomerForm) ? x : ::Io::Flow::V0::Models::OrderBuilderCustomerForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/order/builders/#{CGI.escape(number)}/customer").with_query(query).with_json(order_builder_customer_form.to_json).put
            ::Io::Flow::V0::Models::OrderBuilder.new(r)
          end

          def put_destination_by_number(organization, number, order_builder_destination_form, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('number', number, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :expand => (x = opts.delete(:expand); x.nil? ? nil : HttpClient::Preconditions.assert_class('expand', x, Array).map { |v| HttpClient::Preconditions.assert_class('expand', v, String) }),
              :context => (x = opts.delete(:context); x.nil? ? nil : HttpClient::Preconditions.assert_class('context', x, String))
            }.delete_if { |k, v| v.nil? }
            (x = order_builder_destination_form; x.is_a?(::Io::Flow::V0::Models::OrderBuilderDestinationForm) ? x : ::Io::Flow::V0::Models::OrderBuilderDestinationForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/order/builders/#{CGI.escape(number)}/destination").with_query(query).with_json(order_builder_destination_form.to_json).put
            ::Io::Flow::V0::Models::OrderBuilder.new(r)
          end

          def put_duty_by_number(organization, number, order_builder_delivered_duty_form, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('number', number, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :expand => (x = opts.delete(:expand); x.nil? ? nil : HttpClient::Preconditions.assert_class('expand', x, Array).map { |v| HttpClient::Preconditions.assert_class('expand', v, String) }),
              :context => (x = opts.delete(:context); x.nil? ? nil : HttpClient::Preconditions.assert_class('context', x, String))
            }.delete_if { |k, v| v.nil? }
            (x = order_builder_delivered_duty_form; x.is_a?(::Io::Flow::V0::Models::OrderBuilderDeliveredDutyForm) ? x : ::Io::Flow::V0::Models::OrderBuilderDeliveredDutyForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/order/builders/#{CGI.escape(number)}/duty").with_query(query).with_json(order_builder_delivered_duty_form.to_json).put
            ::Io::Flow::V0::Models::OrderBuilder.new(r)
          end

          # Update the customer invoice address
          def put_invoice_and_address_by_number(organization, number, order_builder_customer_invoice_address_form, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('number', number, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :expand => (x = opts.delete(:expand); x.nil? ? nil : HttpClient::Preconditions.assert_class('expand', x, Array).map { |v| HttpClient::Preconditions.assert_class('expand', v, String) }),
              :context => (x = opts.delete(:context); x.nil? ? nil : HttpClient::Preconditions.assert_class('context', x, String))
            }.delete_if { |k, v| v.nil? }
            (x = order_builder_customer_invoice_address_form; x.is_a?(::Io::Flow::V0::Models::OrderBuilderCustomerInvoiceAddressForm) ? x : ::Io::Flow::V0::Models::OrderBuilderCustomerInvoiceAddressForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/order/builders/#{CGI.escape(number)}/invoice/address").with_query(query).with_json(order_builder_customer_invoice_address_form.to_json).put
            ::Io::Flow::V0::Models::OrderBuilder.new(r)
          end

          # Adds a line item to the order.
          def post_lines_by_number(organization, number, line_item_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('number', number, String)
            (x = line_item_form; x.is_a?(::Io::Flow::V0::Models::LineItemForm) ? x : ::Io::Flow::V0::Models::LineItemForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/order/builders/#{CGI.escape(number)}/lines").with_json(line_item_form.to_json).post
            ::Io::Flow::V0::Models::Order.new(r)
          end

          # Replaces all line items in the order.
          def put_lines_by_number(organization, number, line_item_forms)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('number', number, String)
            HttpClient::Preconditions.assert_class('line_item_forms', line_item_forms, Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::LineItemForm) ? x : ::Io::Flow::V0::Models::LineItemForm.new(x)) }
            r = @client.request("/#{CGI.escape(organization)}/order/builders/#{CGI.escape(number)}/lines").with_json(line_item_forms.map { |o| o.to_hash }.to_json).put
            ::Io::Flow::V0::Models::Order.new(r)
          end

          # Replaces line item in the order specifed by the line item id.
          def put_lines_by_number_and_id(organization, number, id, line_item_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('number', number, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            (x = line_item_form; x.is_a?(::Io::Flow::V0::Models::LineItemForm) ? x : ::Io::Flow::V0::Models::LineItemForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/order/builders/#{CGI.escape(number)}/lines/#{CGI.escape(id)}").with_json(line_item_form.to_json).put
            ::Io::Flow::V0::Models::Order.new(r)
          end

          # Deletes line item in the order specifed by the line item id.
          def delete_lines_by_number_and_id(organization, number, id)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('number', number, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            r = @client.request("/#{CGI.escape(organization)}/order/builders/#{CGI.escape(number)}/lines/#{CGI.escape(id)}").delete
            ::Io::Flow::V0::Models::OrderBuilder.new(r)
          end

          # Updates line item attributes in the order specifed by the line item id.
          def put_lines_and_attributes_by_number_and_id(organization, number, id, line_item_attributes_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('number', number, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            (x = line_item_attributes_form; x.is_a?(::Io::Flow::V0::Models::LineItemAttributesForm) ? x : ::Io::Flow::V0::Models::LineItemAttributesForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/order/builders/#{CGI.escape(number)}/lines/#{CGI.escape(id)}/attributes").with_json(line_item_attributes_form.to_json).put
            ::Io::Flow::V0::Models::Order.new(r)
          end

          # Updates line item quantity in the order specifed by the line item id.
          def put_lines_and_quantity_by_number_and_id(organization, number, id, line_item_quantity_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('number', number, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            (x = line_item_quantity_form; x.is_a?(::Io::Flow::V0::Models::LineItemQuantityForm) ? x : ::Io::Flow::V0::Models::LineItemQuantityForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/order/builders/#{CGI.escape(number)}/lines/#{CGI.escape(id)}/quantity").with_json(line_item_quantity_form.to_json).put
            ::Io::Flow::V0::Models::Order.new(r)
          end

          def put_selections_by_number(organization, number, order_builder_selections_form, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('number', number, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :expand => (x = opts.delete(:expand); x.nil? ? nil : HttpClient::Preconditions.assert_class('expand', x, Array).map { |v| HttpClient::Preconditions.assert_class('expand', v, String) }),
              :context => (x = opts.delete(:context); x.nil? ? nil : HttpClient::Preconditions.assert_class('context', x, String))
            }.delete_if { |k, v| v.nil? }
            (x = order_builder_selections_form; x.is_a?(::Io::Flow::V0::Models::OrderBuilderSelectionsForm) ? x : ::Io::Flow::V0::Models::OrderBuilderSelectionsForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/order/builders/#{CGI.escape(number)}/selections").with_query(query).with_json(order_builder_selections_form.to_json).put
            ::Io::Flow::V0::Models::OrderBuilder.new(r)
          end

          # Validates a tax registration number, proxying to underlying services and
          # recording the result on the order.
          def put_tax_and_registration_by_number(organization, number, tax_registration_form, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('number', number, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :expand => (x = opts.delete(:expand); x.nil? ? nil : HttpClient::Preconditions.assert_class('expand', x, Array).map { |v| HttpClient::Preconditions.assert_class('expand', v, String) }),
              :context => (x = opts.delete(:context); x.nil? ? nil : HttpClient::Preconditions.assert_class('context', x, String))
            }.delete_if { |k, v| v.nil? }
            (x = tax_registration_form; x.is_a?(::Io::Flow::V0::Models::TaxRegistrationForm) ? x : ::Io::Flow::V0::Models::TaxRegistrationForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/order/builders/#{CGI.escape(number)}/tax/registration").with_query(query).with_json(tax_registration_form.to_json).put
            ::Io::Flow::V0::Models::OrderBuilder.new(r)
          end

        end

        class OrderEstimates

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          # Create an order estimate, using the localized information from the
          # experience selected by the query parameters. This is similar to the POST
          # orders endpoint, except this just returns an estimate and cannot be
          # submitted.
          def post(organization, order_estimate_form, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :experience => (x = opts.delete(:experience); x.nil? ? nil : HttpClient::Preconditions.assert_class('experience', x, String)),
              :country => (x = opts.delete(:country); x.nil? ? nil : HttpClient::Preconditions.assert_class('country', x, String)),
              :ip => (x = opts.delete(:ip); x.nil? ? nil : HttpClient::Preconditions.assert_class('ip', x, String)),
              :currency => (x = opts.delete(:currency); x.nil? ? nil : HttpClient::Preconditions.assert_class('currency', x, String)),
              :language => (x = opts.delete(:language); x.nil? ? nil : HttpClient::Preconditions.assert_class('language', x, String)),
              :expand => (x = opts.delete(:expand); x.nil? ? nil : HttpClient::Preconditions.assert_class('expand', x, Array).map { |v| HttpClient::Preconditions.assert_class('expand', v, String) }),
              :romanize => (x = opts.delete(:romanize); x.nil? ? nil : HttpClient::Preconditions.assert_class('romanize', x, Array).map { |v| HttpClient::Preconditions.assert_class('romanize', v, String) }),
              :context => (x = opts.delete(:context); x.nil? ? nil : HttpClient::Preconditions.assert_class('context', x, String))
            }.delete_if { |k, v| v.nil? }
            (x = order_estimate_form; x.is_a?(::Io::Flow::V0::Models::OrderEstimateForm) ? x : ::Io::Flow::V0::Models::OrderEstimateForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/order-estimates").with_query(query).with_json(order_estimate_form.to_json).post
            ::Io::Flow::V0::Models::OrderEstimate.new(r)
          end

          def get_by_number(organization, number, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('number', number, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :expand => (x = opts.delete(:expand); x.nil? ? nil : HttpClient::Preconditions.assert_class('expand', x, Array).map { |v| HttpClient::Preconditions.assert_class('expand', v, String) }),
              :romanize => (x = opts.delete(:romanize); x.nil? ? nil : HttpClient::Preconditions.assert_class('romanize', x, Array).map { |v| HttpClient::Preconditions.assert_class('romanize', v, String) }),
              :context => (x = opts.delete(:context); x.nil? ? nil : HttpClient::Preconditions.assert_class('context', x, String))
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/order-estimates/#{CGI.escape(number)}").with_query(query).get
            ::Io::Flow::V0::Models::Experience.new(r)
          end

          def put_by_number(organization, number, order_estimate_form, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('number', number, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :experience => (x = opts.delete(:experience); x.nil? ? nil : HttpClient::Preconditions.assert_class('experience', x, String)),
              :country => (x = opts.delete(:country); x.nil? ? nil : HttpClient::Preconditions.assert_class('country', x, String)),
              :ip => (x = opts.delete(:ip); x.nil? ? nil : HttpClient::Preconditions.assert_class('ip', x, String)),
              :currency => (x = opts.delete(:currency); x.nil? ? nil : HttpClient::Preconditions.assert_class('currency', x, String)),
              :language => (x = opts.delete(:language); x.nil? ? nil : HttpClient::Preconditions.assert_class('language', x, String)),
              :expand => (x = opts.delete(:expand); x.nil? ? nil : HttpClient::Preconditions.assert_class('expand', x, Array).map { |v| HttpClient::Preconditions.assert_class('expand', v, String) }),
              :romanize => (x = opts.delete(:romanize); x.nil? ? nil : HttpClient::Preconditions.assert_class('romanize', x, Array).map { |v| HttpClient::Preconditions.assert_class('romanize', v, String) }),
              :context => (x = opts.delete(:context); x.nil? ? nil : HttpClient::Preconditions.assert_class('context', x, String))
            }.delete_if { |k, v| v.nil? }
            (x = order_estimate_form; x.is_a?(::Io::Flow::V0::Models::OrderEstimateForm) ? x : ::Io::Flow::V0::Models::OrderEstimateForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/order-estimates/#{CGI.escape(number)}").with_query(query).with_json(order_estimate_form.to_json).put
            ::Io::Flow::V0::Models::OrderEstimate.new(r)
          end

        end

        class OrderIdentifiers

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          def get(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :identifier => (x = opts.delete(:identifier); x.nil? ? nil : HttpClient::Preconditions.assert_class('identifier', x, Array).map { |v| HttpClient::Preconditions.assert_class('identifier', v, String) }),
              :order_number => (x = opts.delete(:order_number); x.nil? ? nil : HttpClient::Preconditions.assert_class('order_number', x, Array).map { |v| HttpClient::Preconditions.assert_class('order_number', v, String) }),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "name" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/order-identifiers").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::OrderIdentifier.new(x) }
          end

          def post(organization, order_identifier_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            (x = order_identifier_form; x.is_a?(::Io::Flow::V0::Models::OrderIdentifierForm) ? x : ::Io::Flow::V0::Models::OrderIdentifierForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/order-identifiers").with_json(order_identifier_form.to_json).post
            ::Io::Flow::V0::Models::OrderIdentifier.new(r)
          end

          def get_versions(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "journal_timestamp" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/order-identifiers/versions").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::OrderIdentifierVersion.new(x) }
          end

          def get_by_identifier(organization, identifier)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('identifier', identifier, String)
            r = @client.request("/#{CGI.escape(organization)}/order-identifiers/#{CGI.escape(identifier)}").get
            ::Io::Flow::V0::Models::OrderIdentifier.new(r)
          end

          def put_by_identifier(organization, identifier, order_identifier_put_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('identifier', identifier, String)
            (x = order_identifier_put_form; x.is_a?(::Io::Flow::V0::Models::OrderIdentifierPutForm) ? x : ::Io::Flow::V0::Models::OrderIdentifierPutForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/order-identifiers/#{CGI.escape(identifier)}").with_json(order_identifier_put_form.to_json).put
            ::Io::Flow::V0::Models::OrderIdentifier.new(r)
          end

          def delete_by_identifier(organization, identifier)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('identifier', identifier, String)
            r = @client.request("/#{CGI.escape(organization)}/order-identifiers/#{CGI.escape(identifier)}").delete
            nil
          end

        end

        class OrderNumberGenerators

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          def get(organization)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            r = @client.request("/#{CGI.escape(organization)}/order/number/generators").get
            ::Io::Flow::V0::Models::OrderNumberGenerator.from_json(r)
          end

          def put(organization, order_number_generator)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            (x = order_number_generator; x.is_a?(::Io::Flow::V0::Models::OrderNumberGenerator) ? x : ::Io::Flow::V0::Models::OrderNumberGenerator.from_json(x))
            r = @client.request("/#{CGI.escape(organization)}/order/number/generators").with_json(order_number_generator.to_json).put
            ::Io::Flow::V0::Models::OrderNumberGenerator.from_json(r)
          end

          def delete(organization)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            r = @client.request("/#{CGI.escape(organization)}/order/number/generators").delete
            nil
          end

          def get_generated_and_number(organization)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            r = @client.request("/#{CGI.escape(organization)}/order/number/generators/generated/number").get
            ::Io::Flow::V0::Models::OrderNumberGeneratorGeneratedNumber.new(r)
          end

        end

        class OrderPromotions

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          # Deletes the order promotion with the specified key
          def delete_by_key(organization, key)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            r = @client.request("/#{CGI.escape(organization)}/order/promotions/#{CGI.escape(key)}").delete
            nil
          end

        end

        class OrderSummaries

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          def get_by_number(organization, number)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('number', number, String)
            r = @client.request("/#{CGI.escape(organization)}/order/summaries/#{CGI.escape(number)}").get
            ::Io::Flow::V0::Models::OrderSummary.new(r)
          end

        end

        class Organizations

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          # The countries resources provides a unique list of all of the countries for
          # which an experience exists. We generate this list of countries by iterating
          # through all of the experience regions, and collecting all of the countries.
          def get_countries_by_organization(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :ip => (x = opts.delete(:ip); x.nil? ? nil : HttpClient::Preconditions.assert_class('ip', x, String)),
              :country => (x = opts.delete(:country); x.nil? ? nil : HttpClient::Preconditions.assert_class('country', x, String)),
              :status => HttpClient::Preconditions.assert_class('status', (x = opts.delete(:status); x.nil? ? [] : x), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::ExperienceStatus) ? x : ::Io::Flow::V0::Models::ExperienceStatus.apply(x)).value },
              :context => (x = opts.delete(:context); x.nil? ? nil : HttpClient::Preconditions.assert_class('context', x, String))
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/countries").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::Country.new(x) }
          end

          # List of all destination countries available for this organization, including
          # countries within a world experience.
          def get_countries_and_destinations_by_organization(organization)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            r = @client.request("/#{CGI.escape(organization)}/countries/destinations").get
            r.map { |x| ::Io::Flow::V0::Models::Country.new(x) }
          end

          # Status of all countries
          def get_countries_and_statuses_by_organization(organization)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            r = @client.request("/#{CGI.escape(organization)}/countries/statuses").get
            r.map { |x| ::Io::Flow::V0::Models::CountryStatus.new(x) }
          end

          def put_countries_and_statuses_by_organization_and_country(organization, country, country_status_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('country', country, String)
            (x = country_status_form; x.is_a?(::Io::Flow::V0::Models::CountryStatusForm) ? x : ::Io::Flow::V0::Models::CountryStatusForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/countries/statuses/#{CGI.escape(country)}").with_json(country_status_form.to_json).put
            ::Io::Flow::V0::Models::CountryStatus.new(r)
          end

          # Search organizations. Always paginated.
          def get(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :channel_id => (x = opts.delete(:channel_id); x.nil? ? nil : HttpClient::Preconditions.assert_class('channel_id', x, String)),
              :name => (x = opts.delete(:name); x.nil? ? nil : HttpClient::Preconditions.assert_class('name', x, String)),
              :environment => (x = opts.delete(:environment); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Environment) ? x : ::Io::Flow::V0::Models::Environment.apply(x)).value),
              :parent => (x = opts.delete(:parent); x.nil? ? nil : HttpClient::Preconditions.assert_class('parent', x, String)),
              :in_channel => (x = opts.delete(:in_channel); x.nil? ? nil : HttpClient::Preconditions.assert_boolean('in_channel', x)),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "name" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/organizations").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::Organization.new(x) }
          end

          # Create a new organization.
          def post(organization_form)
            (x = organization_form; x.is_a?(::Io::Flow::V0::Models::OrganizationForm) ? x : ::Io::Flow::V0::Models::OrganizationForm.new(x))
            r = @client.request("/organizations").with_json(organization_form.to_json).post
            ::Io::Flow::V0::Models::Organization.new(r)
          end

          # Provides visibility into recent changes of each object, including deletion
          def get_versions(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :organization => (x = opts.delete(:organization); x.nil? ? nil : HttpClient::Preconditions.assert_class('organization', x, Array).map { |v| HttpClient::Preconditions.assert_class('organization', v, String) }),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "journal_timestamp" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/organizations/versions").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::OrganizationVersion.new(x) }
          end

          # Returns information about a specific organization.
          def get_by_organization_id(organization_id)
            HttpClient::Preconditions.assert_class('organization_id', organization_id, String)
            r = @client.request("/organizations/#{CGI.escape(organization_id)}").get
            ::Io::Flow::V0::Models::Organization.new(r)
          end

          # Update or create an organization with the specified id.
          def put_by_organization_id(organization_id, organization_put_form)
            HttpClient::Preconditions.assert_class('organization_id', organization_id, String)
            (x = organization_put_form; x.is_a?(::Io::Flow::V0::Models::OrganizationPutForm) ? x : ::Io::Flow::V0::Models::OrganizationPutForm.new(x))
            r = @client.request("/organizations/#{CGI.escape(organization_id)}").with_json(organization_put_form.to_json).put
            ::Io::Flow::V0::Models::Organization.new(r)
          end

          # Delete the organization with this id
          def delete_by_organization_id(organization_id)
            HttpClient::Preconditions.assert_class('organization_id', organization_id, String)
            r = @client.request("/organizations/#{CGI.escape(organization_id)}").delete
            nil
          end

          # Returns currencies for a specific organization.
          def get_settings_and_currencies_by_organization_id(organization_id)
            HttpClient::Preconditions.assert_class('organization_id', organization_id, String)
            r = @client.request("/organizations/#{CGI.escape(organization_id)}/settings/currencies").get
            r.map { |x| ::Io::Flow::V0::Models::Currency.new(x) }
          end

          # Returns the region settings associated to a specific organization.
          def get_settings_and_regions_by_organization_id(organization_id)
            HttpClient::Preconditions.assert_class('organization_id', organization_id, String)
            r = @client.request("/organizations/#{CGI.escape(organization_id)}/settings/regions").get
            r.map { |x| ::Io::Flow::V0::Models::RegionSetting.new(x) }
          end

          # Returns the list of enabled countries based on the region settings for a
          # specific organization
          def get_settings_and_regions_and_countries_and_available_by_organization_id(organization_id)
            HttpClient::Preconditions.assert_class('organization_id', organization_id, String)
            r = @client.request("/organizations/#{CGI.escape(organization_id)}/settings/regions/countries/available").get
            r.map { |x| ::Io::Flow::V0::Models::Country.new(x) }
          end

          # Updates or creates a region setting for a specific organization
          def put_settings_and_regions_by_organization_id_and_region(organization_id, region, region_setting_form)
            HttpClient::Preconditions.assert_class('organization_id', organization_id, String)
            HttpClient::Preconditions.assert_class('region', region, String)
            (x = region_setting_form; x.is_a?(::Io::Flow::V0::Models::RegionSettingForm) ? x : ::Io::Flow::V0::Models::RegionSettingForm.new(x))
            r = @client.request("/organizations/#{CGI.escape(organization_id)}/settings/regions/#{CGI.escape(region)}").with_json(region_setting_form.to_json).put
            ::Io::Flow::V0::Models::RegionSetting.new(r)
          end

          # Removes the setting for this region for a specific organization
          def delete_settings_and_regions_by_organization_id_and_region(organization_id, region)
            HttpClient::Preconditions.assert_class('organization_id', organization_id, String)
            HttpClient::Preconditions.assert_class('region', region, String)
            r = @client.request("/organizations/#{CGI.escape(organization_id)}/settings/regions/#{CGI.escape(region)}").delete
            nil
          end

        end

        class PaymentMethodRules

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          def get_payment_method_rules(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :country => (x = opts.delete(:country); x.nil? ? nil : HttpClient::Preconditions.assert_class('country', x, Array).map { |v| HttpClient::Preconditions.assert_class('country', v, String) }),
              :amount => (x = opts.delete(:amount); x.nil? ? nil : HttpClient::Preconditions.assert_class('amount', x, String)),
              :currency => (x = opts.delete(:currency); x.nil? ? nil : HttpClient::Preconditions.assert_class('currency', x, String)),
              :experience => (x = opts.delete(:experience); x.nil? ? nil : HttpClient::Preconditions.assert_class('experience', x, String)),
              :ip => (x = opts.delete(:ip); x.nil? ? nil : HttpClient::Preconditions.assert_class('ip', x, String)),
              :context => (x = opts.delete(:context); x.nil? ? nil : HttpClient::Preconditions.assert_class('context', x, String)),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "display_position" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/payment-method-rules").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::PaymentMethodRule.new(x) }
          end

          def get_payment_and_method_and_rules(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :country => (x = opts.delete(:country); x.nil? ? nil : HttpClient::Preconditions.assert_class('country', x, Array).map { |v| HttpClient::Preconditions.assert_class('country', v, String) }),
              :amount => (x = opts.delete(:amount); x.nil? ? nil : HttpClient::Preconditions.assert_class('amount', x, String)),
              :currency => (x = opts.delete(:currency); x.nil? ? nil : HttpClient::Preconditions.assert_class('currency', x, String)),
              :experience => (x = opts.delete(:experience); x.nil? ? nil : HttpClient::Preconditions.assert_class('experience', x, String)),
              :ip => (x = opts.delete(:ip); x.nil? ? nil : HttpClient::Preconditions.assert_class('ip', x, String)),
              :context => (x = opts.delete(:context); x.nil? ? nil : HttpClient::Preconditions.assert_class('context', x, String)),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "display_position" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/payment/method/rules").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::PaymentMethodRule.new(x) }
          end

          # Provides payment method rules for all experiences for an organization
          def get_payment_and_method_and_rules_and_batch(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :experiences => (x = opts.delete(:experiences); x.nil? ? nil : HttpClient::Preconditions.assert_class('experiences', x, Array).map { |v| HttpClient::Preconditions.assert_class('experiences', v, String) }),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :context => (x = opts.delete(:context); x.nil? ? nil : HttpClient::Preconditions.assert_class('context', x, String))
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/payment/method/rules/batch").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::ExperiencePaymentMethodRule.new(x) }
          end

        end

        class PriceBooks

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          def get(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :key => (x = opts.delete(:key); x.nil? ? nil : HttpClient::Preconditions.assert_class('key', x, Array).map { |v| HttpClient::Preconditions.assert_class('key', v, String) }),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "-created_at" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/price/books").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::PriceBook.new(x) }
          end

          # Create a price book.
          def post(organization, price_book_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            (x = price_book_form; x.is_a?(::Io::Flow::V0::Models::PriceBookForm) ? x : ::Io::Flow::V0::Models::PriceBookForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/price/books").with_json(price_book_form.to_json).post
            ::Io::Flow::V0::Models::PriceBook.new(r)
          end

          # Returns information about a specific price book.
          def get_by_key(organization, key)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            r = @client.request("/#{CGI.escape(organization)}/price/books/#{CGI.escape(key)}").get
            ::Io::Flow::V0::Models::PriceBook.new(r)
          end

          # Create or update a price book.
          def put_by_key(organization, key, price_book_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            (x = price_book_form; x.is_a?(::Io::Flow::V0::Models::PriceBookForm) ? x : ::Io::Flow::V0::Models::PriceBookForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/price/books/#{CGI.escape(key)}").with_json(price_book_form.to_json).put
            ::Io::Flow::V0::Models::PriceBook.new(r)
          end

          # Deletes the specified price book
          def delete_by_key(organization, key)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            r = @client.request("/#{CGI.escape(organization)}/price/books/#{CGI.escape(key)}").delete
            nil
          end

        end

        class PriceBookItems

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          def get(organization, price_book_key, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('price_book_key', price_book_key, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :key => (x = opts.delete(:key); x.nil? ? nil : HttpClient::Preconditions.assert_class('key', x, Array).map { |v| HttpClient::Preconditions.assert_class('key', v, String) }),
              :number => (x = opts.delete(:number); x.nil? ? nil : HttpClient::Preconditions.assert_class('number', x, Array).map { |v| HttpClient::Preconditions.assert_class('number', v, String) }),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "-created_at" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/price/books/#{CGI.escape(price_book_key)}/items").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::PriceBookItem.new(x) }
          end

          # Create a price book item.
          def post(organization, price_book_key, price_book_item_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('price_book_key', price_book_key, String)
            (x = price_book_item_form; x.is_a?(::Io::Flow::V0::Models::PriceBookItemForm) ? x : ::Io::Flow::V0::Models::PriceBookItemForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/price/books/#{CGI.escape(price_book_key)}/items").with_json(price_book_item_form.to_json).post
            ::Io::Flow::V0::Models::PriceBookItem.new(r)
          end

          # Returns information about a specific price book item.
          def get_by_key(organization, price_book_key, key)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('price_book_key', price_book_key, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            r = @client.request("/#{CGI.escape(organization)}/price/books/#{CGI.escape(price_book_key)}/items/#{CGI.escape(key)}").get
            ::Io::Flow::V0::Models::PriceBookItem.new(r)
          end

          # Create or update a price book item.
          def put_by_key(organization, price_book_key, key, price_book_item_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('price_book_key', price_book_key, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            (x = price_book_item_form; x.is_a?(::Io::Flow::V0::Models::PriceBookItemForm) ? x : ::Io::Flow::V0::Models::PriceBookItemForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/price/books/#{CGI.escape(price_book_key)}/items/#{CGI.escape(key)}").with_json(price_book_item_form.to_json).put
            ::Io::Flow::V0::Models::PriceBookItem.new(r)
          end

          # Deletes the specified price book item
          def delete_by_key(organization, price_book_key, key)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('price_book_key', price_book_key, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            r = @client.request("/#{CGI.escape(organization)}/price/books/#{CGI.escape(price_book_key)}/items/#{CGI.escape(key)}").delete
            nil
          end

        end

        class Subcatalogs

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          # Search subcatalogs. Always paginated.
          def get(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "-created_at" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/catalog/subcatalogs").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::Subcatalog.new(x) }
          end

          # Add subcatalog
          def post(organization, subcatalog_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            (x = subcatalog_form; x.is_a?(::Io::Flow::V0::Models::SubcatalogForm) ? x : ::Io::Flow::V0::Models::SubcatalogForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/catalog/subcatalogs").with_json(subcatalog_form.to_json).post
            ::Io::Flow::V0::Models::Subcatalog.new(r)
          end

          # Provides visibility into recent changes of each object, including deletion
          def get_versions(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "journal_timestamp" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/catalog/subcatalogs/versions").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::SubcatalogVersion.new(x) }
          end

          # Returns information about a specific subcatalog.
          def get_by_id(organization, id)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            r = @client.request("/#{CGI.escape(organization)}/catalog/subcatalogs/#{CGI.escape(id)}").get
            ::Io::Flow::V0::Models::Subcatalog.new(r)
          end

          # Update subcatalog with the specified id, creating if it does not exist.
          def put_by_id(organization, id, subcatalog_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            (x = subcatalog_form; x.is_a?(::Io::Flow::V0::Models::SubcatalogForm) ? x : ::Io::Flow::V0::Models::SubcatalogForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/catalog/subcatalogs/#{CGI.escape(id)}").with_json(subcatalog_form.to_json).put
            ::Io::Flow::V0::Models::Subcatalog.new(r)
          end

          # Delete the subcatalog with this id
          def delete_by_id(organization, id)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            r = @client.request("/#{CGI.escape(organization)}/catalog/subcatalogs/#{CGI.escape(id)}").delete
            nil
          end

          # Returns information about a specific subcatalog's settings.
          def get_settings_by_id(organization, id)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            r = @client.request("/#{CGI.escape(organization)}/catalog/subcatalogs/#{CGI.escape(id)}/settings").get
            ::Io::Flow::V0::Models::SubcatalogSettings.new(r)
          end

          # Update subcatalog settings for the specified subcatalog.
          def put_settings_by_id(organization, id, subcatalog_settings_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            (x = subcatalog_settings_form; x.is_a?(::Io::Flow::V0::Models::SubcatalogSettingsForm) ? x : ::Io::Flow::V0::Models::SubcatalogSettingsForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/catalog/subcatalogs/#{CGI.escape(id)}/settings").with_json(subcatalog_settings_form.to_json).put
            ::Io::Flow::V0::Models::SubcatalogSettings.new(r)
          end

          # Get statistics for the specified subcatalog
          def get_statistics_by_subcatalog_id(organization, subcatalog_id)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('subcatalog_id', subcatalog_id, String)
            r = @client.request("/#{CGI.escape(organization)}/catalog/subcatalogs/#{CGI.escape(subcatalog_id)}/statistics").get
            ::Io::Flow::V0::Models::SubcatalogStatistics.new(r)
          end

        end

        class SubcatalogItems

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          # Search subcatalog items. Always paginated.
          def get(organization, subcatalog_id, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('subcatalog_id', subcatalog_id, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :number => (x = opts.delete(:number); x.nil? ? nil : HttpClient::Preconditions.assert_class('number', x, Array).map { |v| HttpClient::Preconditions.assert_class('number', v, String) }),
              :status => (x = opts.delete(:status); x.nil? ? nil : HttpClient::Preconditions.assert_class('status', x, Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::SubcatalogItemStatus) ? x : ::Io::Flow::V0::Models::SubcatalogItemStatus.apply(x)).value }),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "-created_at" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/catalog/subcatalogs/#{CGI.escape(subcatalog_id)}/items").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::SubcatalogItem.new(x) }
          end

          # Provides visibility into recent changes of each object, including deletion
          def get_versions(organization, subcatalog_id, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('subcatalog_id', subcatalog_id, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :number => (x = opts.delete(:number); x.nil? ? nil : HttpClient::Preconditions.assert_class('number', x, Array).map { |v| HttpClient::Preconditions.assert_class('number', v, String) }),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "journal_timestamp" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/catalog/subcatalogs/#{CGI.escape(subcatalog_id)}/items/versions").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::SubcatalogItemVersion.new(x) }
          end

          # Returns information about specific subcatalog items.
          def get_by_number(organization, subcatalog_id, number)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('subcatalog_id', subcatalog_id, String)
            HttpClient::Preconditions.assert_class('number', number, String)
            r = @client.request("/#{CGI.escape(organization)}/catalog/subcatalogs/#{CGI.escape(subcatalog_id)}/items/#{CGI.escape(number)}").get
            ::Io::Flow::V0::Models::SubcatalogItem.new(r)
          end

        end

        class Rates

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          # Search organization currency conversion rates. Always paginated.
          def get(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :base => (x = opts.delete(:base); x.nil? ? nil : HttpClient::Preconditions.assert_class('base', x, Array).map { |v| HttpClient::Preconditions.assert_class('base', v, String) }),
              :target => (x = opts.delete(:target); x.nil? ? nil : HttpClient::Preconditions.assert_class('target', x, String)),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "-created_at" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/currency/rates").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::Rate.new(x) }
          end

          # Provides visibility into recent changes of each object, including deletion.
          def get_versions(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :base => (x = opts.delete(:base); x.nil? ? nil : HttpClient::Preconditions.assert_class('base', x, String)),
              :target => (x = opts.delete(:target); x.nil? ? nil : HttpClient::Preconditions.assert_class('target', x, String)),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "journal_timestamp" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/currency/rates/versions").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::RateVersion.new(x) }
          end

        end

        class HarmonizedLandedCosts

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          # Single operation that provides harmonization landed costs (i.e. duties and
          # taxes) for 1 or more items. This method is designed to enable a single call
          # from applications that need it (like checkout) to get all data for a
          # collection of items
          def post(organization, harmonized_landed_cost_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            (x = harmonized_landed_cost_form; x.is_a?(::Io::Flow::V0::Models::HarmonizedLandedCostForm) ? x : ::Io::Flow::V0::Models::HarmonizedLandedCostForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/harmonization/landed-costs").with_json(harmonized_landed_cost_form.to_json).post
            ::Io::Flow::V0::Models::HarmonizedLandedCost.new(r)
          end

        end

        class Hs10

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          def get(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :item_number => (x = opts.delete(:item_number); x.nil? ? nil : HttpClient::Preconditions.assert_class('item_number', x, Array).map { |v| HttpClient::Preconditions.assert_class('item_number', v, String) }),
              :origin => (x = opts.delete(:origin); x.nil? ? nil : HttpClient::Preconditions.assert_class('origin', x, String)),
              :destination => (x = opts.delete(:destination); x.nil? ? nil : HttpClient::Preconditions.assert_class('destination', x, String)),
              :code => (x = opts.delete(:code); x.nil? ? nil : HttpClient::Preconditions.assert_class('code', x, String)),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/harmonization/hs10").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::Hs10.new(x) }
          end

        end

        class TaxRegistrations

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          def post(organization, tax_registration_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            (x = tax_registration_form; x.is_a?(::Io::Flow::V0::Models::TaxRegistrationForm) ? x : ::Io::Flow::V0::Models::TaxRegistrationForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/tax/registrations").with_json(tax_registration_form.to_json).post
            ::Io::Flow::V0::Models::TaxRegistration.new(r)
          end

          def get_details(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :order_number => HttpClient::Preconditions.assert_class('order_number', opts.delete(:order_number), String),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/tax/registrations/details").with_query(query).get
            ::Io::Flow::V0::Models::DetailedTaxRegistration.new(r)
          end

          def put_by_key(organization, key, tax_registration_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            (x = tax_registration_form; x.is_a?(::Io::Flow::V0::Models::TaxRegistrationForm) ? x : ::Io::Flow::V0::Models::TaxRegistrationForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/tax/registrations/#{CGI.escape(key)}").with_json(tax_registration_form.to_json).put
            ::Io::Flow::V0::Models::TaxRegistration.new(r)
          end

          def delete_by_key(organization, key)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            r = @client.request("/#{CGI.escape(organization)}/tax/registrations/#{CGI.escape(key)}").delete
            nil
          end

        end

        class Authorizations

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          def get(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :key => (x = opts.delete(:key); x.nil? ? nil : HttpClient::Preconditions.assert_class('key', x, Array).map { |v| HttpClient::Preconditions.assert_class('key', v, String) }),
              :order_number => (x = opts.delete(:order_number); x.nil? ? nil : HttpClient::Preconditions.assert_class('order_number', x, String)),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "-created_at" : x), String),
              :expand => (x = opts.delete(:expand); x.nil? ? nil : HttpClient::Preconditions.assert_class('expand', x, Array).map { |v| HttpClient::Preconditions.assert_class('expand', v, String) })
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/authorizations").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::Authorization.from_json(x) }
          end

          # Create a new authorization.
          def post(organization, authorization_form, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :expand => (x = opts.delete(:expand); x.nil? ? nil : HttpClient::Preconditions.assert_class('expand', x, Array).map { |v| HttpClient::Preconditions.assert_class('expand', v, String) })
            }.delete_if { |k, v| v.nil? }
            (x = authorization_form; x.is_a?(::Io::Flow::V0::Models::AuthorizationForm) ? x : ::Io::Flow::V0::Models::AuthorizationForm.from_json(x))
            r = @client.request("/#{CGI.escape(organization)}/authorizations").with_query(query).with_json(authorization_form.to_json).post
            ::Io::Flow::V0::Models::Authorization.from_json(r)
          end

          # Provides visibility into recent changes of each object, including deletion
          def get_versions(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, Integer) }),
              :authorization_id => (x = opts.delete(:authorization_id); x.nil? ? nil : HttpClient::Preconditions.assert_class('authorization_id', x, Array).map { |v| HttpClient::Preconditions.assert_class('authorization_id', v, String) }),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "journal_timestamp" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/authorizations/versions").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::AuthorizationVersion.new(x) }
          end

          # Returns information about a specific authorization.
          def get_by_key(organization, key, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :expand => (x = opts.delete(:expand); x.nil? ? nil : HttpClient::Preconditions.assert_class('expand', x, Array).map { |v| HttpClient::Preconditions.assert_class('expand', v, String) })
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/authorizations/#{CGI.escape(key)}").with_query(query).get
            ::Io::Flow::V0::Models::Authorization.from_json(r)
          end

          # Attempts to create an authorization identified by the provided key. Multiple
          # requests using the same key are idempotent.
          def put_by_key(organization, key, authorization_form, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :expand => (x = opts.delete(:expand); x.nil? ? nil : HttpClient::Preconditions.assert_class('expand', x, Array).map { |v| HttpClient::Preconditions.assert_class('expand', v, String) })
            }.delete_if { |k, v| v.nil? }
            (x = authorization_form; x.is_a?(::Io::Flow::V0::Models::AuthorizationForm) ? x : ::Io::Flow::V0::Models::AuthorizationForm.from_json(x))
            r = @client.request("/#{CGI.escape(organization)}/authorizations/#{CGI.escape(key)}").with_query(query).with_json(authorization_form.to_json).put
            ::Io::Flow::V0::Models::Authorization.from_json(r)
          end

          # Deprecated. This end point no longer deletes an authorization and is
          # implemented by creating a reversal for the remaining balance on the auth.
          def delete_by_key(organization, key)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            r = @client.request("/#{CGI.escape(organization)}/authorizations/#{CGI.escape(key)}").delete
            nil
          end

          # Accepts the data from the underlying processor to, for example, record the
          # 3DSecure results
          def post_details_by_key(organization, key, value)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            HttpClient::Preconditions.assert_class('value', value, BasicObject)
            r = @client.request("/#{CGI.escape(organization)}/authorizations/#{CGI.escape(key)}/details").with_body(value).post
            ::Io::Flow::V0::Models::Authorization.from_json(r)
          end

        end

        class Captures

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          def get(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :key => (x = opts.delete(:key); x.nil? ? nil : HttpClient::Preconditions.assert_class('key', x, Array).map { |v| HttpClient::Preconditions.assert_class('key', v, String) }),
              :identifier => (x = opts.delete(:identifier); x.nil? ? nil : HttpClient::Preconditions.assert_class('identifier', x, String)),
              :authorization_id => (x = opts.delete(:authorization_id); x.nil? ? nil : HttpClient::Preconditions.assert_class('authorization_id', x, String)),
              :authorization_key => (x = opts.delete(:authorization_key); x.nil? ? nil : HttpClient::Preconditions.assert_class('authorization_key', x, String)),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "-created_at" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/captures").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::Capture.new(x) }
          end

          # Create a new capture.
          def post(organization, capture_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            (x = capture_form; x.is_a?(::Io::Flow::V0::Models::CaptureForm) ? x : ::Io::Flow::V0::Models::CaptureForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/captures").with_json(capture_form.to_json).post
            ::Io::Flow::V0::Models::Capture.new(r)
          end

          # Provides visibility into recent changes of each object, including deletion
          def get_versions(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, Integer) }),
              :capture_id => (x = opts.delete(:capture_id); x.nil? ? nil : HttpClient::Preconditions.assert_class('capture_id', x, Array).map { |v| HttpClient::Preconditions.assert_class('capture_id', v, String) }),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "journal_timestamp" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/captures/versions").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::CaptureVersion.new(x) }
          end

          # Returns information about a specific capture.
          def get_by_key(organization, key)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            r = @client.request("/#{CGI.escape(organization)}/captures/#{CGI.escape(key)}").get
            ::Io::Flow::V0::Models::Capture.new(r)
          end

          def get_identifiers_by_key(organization, key, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :identifier => (x = opts.delete(:identifier); x.nil? ? nil : HttpClient::Preconditions.assert_class('identifier', x, String)),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "name" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/captures/#{CGI.escape(key)}/identifiers").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::CaptureIdentifier.new(x) }
          end

          # Create a new identifier for this capture
          def put_identifiers_by_key_and_identifier(organization, key, identifier, identifier_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            HttpClient::Preconditions.assert_class('identifier', identifier, String)
            (x = identifier_form; x.is_a?(::Io::Flow::V0::Models::IdentifierForm) ? x : ::Io::Flow::V0::Models::IdentifierForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/captures/#{CGI.escape(key)}/identifiers/#{CGI.escape(identifier)}").with_json(identifier_form.to_json).put
            ::Io::Flow::V0::Models::CaptureIdentifier.new(r)
          end

          def delete_identifiers_by_key_and_identifier(organization, key, identifier)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            HttpClient::Preconditions.assert_class('identifier', identifier, String)
            r = @client.request("/#{CGI.escape(organization)}/captures/#{CGI.escape(key)}/identifiers/#{CGI.escape(identifier)}").delete
            nil
          end

        end

        class Cards

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          def get(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :token => (x = opts.delete(:token); x.nil? ? nil : HttpClient::Preconditions.assert_class('token', x, Array).map { |v| HttpClient::Preconditions.assert_class('token', v, String) }),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "-created_at" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/cards").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::Card.new(x) }
          end

          # Create a new card. Note that when using JSONP to submit a card, you do not
          # need to authenticate.
          def post(organization, card_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            (x = card_form; x.is_a?(::Io::Flow::V0::Models::CardForm) ? x : ::Io::Flow::V0::Models::CardForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/cards").with_json(card_form.to_json).post
            ::Io::Flow::V0::Models::Card.new(r)
          end

          # Creates a card from a one time nonce. Each nonce can be used at most once
          # and you will receive a validation error if the nonce has already been
          # exchanged.
          def post_nonces(organization, card_nonce_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            (x = card_nonce_form; x.is_a?(::Io::Flow::V0::Models::CardNonceForm) ? x : ::Io::Flow::V0::Models::CardNonceForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/cards/nonces").with_json(card_nonce_form.to_json).post
            ::Io::Flow::V0::Models::Card.new(r)
          end

          # Provides visibility into recent changes of each object, including deletion
          def get_versions(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, Integer) }),
              :card_id => (x = opts.delete(:card_id); x.nil? ? nil : HttpClient::Preconditions.assert_class('card_id', x, Array).map { |v| HttpClient::Preconditions.assert_class('card_id', v, String) }),
              :card_token => (x = opts.delete(:card_token); x.nil? ? nil : HttpClient::Preconditions.assert_class('card_token', x, Array).map { |v| HttpClient::Preconditions.assert_class('card_token', v, String) }),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "journal_timestamp" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/cards/versions").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::CardVersion.new(x) }
          end

          # Returns information about a specific card.
          def get_by_token(organization, token)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('token', token, String)
            r = @client.request("/#{CGI.escape(organization)}/cards/#{CGI.escape(token)}").get
            ::Io::Flow::V0::Models::Card.new(r)
          end

          # Deletes the specified card
          def delete_by_token(organization, token)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('token', token, String)
            r = @client.request("/#{CGI.escape(organization)}/cards/#{CGI.escape(token)}").delete
            nil
          end

        end

        class CardPaymentSources

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          def get(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :customer_number => (x = opts.delete(:customer_number); x.nil? ? nil : HttpClient::Preconditions.assert_class('customer_number', x, Array).map { |v| HttpClient::Preconditions.assert_class('customer_number', v, String) }),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "-created_at" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/sources/payments/cards").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::CardPaymentSource.new(x) }
          end

          # Create a new card payment source.
          def post(organization, card_payment_source_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            (x = card_payment_source_form; x.is_a?(::Io::Flow::V0::Models::CardPaymentSourceForm) ? x : ::Io::Flow::V0::Models::CardPaymentSourceForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/sources/payments/cards").with_json(card_payment_source_form.to_json).post
            ::Io::Flow::V0::Models::CardPaymentSource.new(r)
          end

          # Returns information about a specific card payment source.
          def get_by_id(organization, id)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            r = @client.request("/#{CGI.escape(organization)}/sources/payments/cards/#{CGI.escape(id)}").get
            ::Io::Flow::V0::Models::CardPaymentSource.new(r)
          end

          # Update a card payment source.
          def put_by_id(organization, id, card_payment_source_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            (x = card_payment_source_form; x.is_a?(::Io::Flow::V0::Models::CardPaymentSourceForm) ? x : ::Io::Flow::V0::Models::CardPaymentSourceForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/sources/payments/cards/#{CGI.escape(id)}").with_json(card_payment_source_form.to_json).put
            ::Io::Flow::V0::Models::CardPaymentSource.new(r)
          end

          # Deletes the specified card payment source
          def delete_by_id(organization, id)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            r = @client.request("/#{CGI.escape(organization)}/sources/payments/cards/#{CGI.escape(id)}").delete
            nil
          end

        end

        class GatewayAuthenticationData

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          # Specify authentication data for payment processor
          def post(organization, gateway_authentication_data_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            (x = gateway_authentication_data_form; x.is_a?(::Io::Flow::V0::Models::GatewayAuthenticationDataForm) ? x : ::Io::Flow::V0::Models::GatewayAuthenticationDataForm.from_json(x))
            r = @client.request("/#{CGI.escape(organization)}/gateways/authentication").with_json(gateway_authentication_data_form.to_json).post
            ::Io::Flow::V0::Models::GatewayAuthenticationData.from_json(r)
          end

        end

        class Payments

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          def get(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :payment_method => (x = opts.delete(:payment_method); x.nil? ? nil : HttpClient::Preconditions.assert_class('payment_method', x, String)),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "-created_at" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/payments").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::Payment.from_json(x) }
          end

          # Create a new payment. Note that when using JSONP to submit a payment, you do
          # not need to authenticate.
          def post(organization, payment_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            (x = payment_form; x.is_a?(::Io::Flow::V0::Models::PaymentForm) ? x : ::Io::Flow::V0::Models::PaymentForm.from_json(x))
            r = @client.request("/#{CGI.escape(organization)}/payments").with_json(payment_form.to_json).post
            ::Io::Flow::V0::Models::Payment.from_json(r)
          end

          # Provides visibility into recent changes of each object, including deletion
          def get_versions(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, Integer) }),
              :payment_id => (x = opts.delete(:payment_id); x.nil? ? nil : HttpClient::Preconditions.assert_class('payment_id', x, Array).map { |v| HttpClient::Preconditions.assert_class('payment_id', v, String) }),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "journal_timestamp" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/payments/versions").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::PaymentVersion.new(x) }
          end

          # Returns information about a specific payment.
          def get_by_id(organization, id)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            r = @client.request("/#{CGI.escape(organization)}/payments/#{CGI.escape(id)}").get
            ::Io::Flow::V0::Models::Payment.from_json(r)
          end

          # Deletes the specified payment
          def delete_by_id(organization, id)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            r = @client.request("/#{CGI.escape(organization)}/payments/#{CGI.escape(id)}").delete
            nil
          end

        end

        class PublicKeys

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          # Returns your public keys
          def get(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "-created_at" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/encryption/keys").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::PublicKey.new(x) }
          end

          # Return the latest public key for an organization
          def get_latest(organization)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            r = @client.request("/#{CGI.escape(organization)}/encryption/keys/latest").get
            ::Io::Flow::V0::Models::PublicKey.new(r)
          end

        end

        class Refunds

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          def get(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :key => (x = opts.delete(:key); x.nil? ? nil : HttpClient::Preconditions.assert_class('key', x, Array).map { |v| HttpClient::Preconditions.assert_class('key', v, String) }),
              :identifier => (x = opts.delete(:identifier); x.nil? ? nil : HttpClient::Preconditions.assert_class('identifier', x, String)),
              :authorization_id => (x = opts.delete(:authorization_id); x.nil? ? nil : HttpClient::Preconditions.assert_class('authorization_id', x, String)),
              :authorization_key => (x = opts.delete(:authorization_key); x.nil? ? nil : HttpClient::Preconditions.assert_class('authorization_key', x, String)),
              :capture_id => (x = opts.delete(:capture_id); x.nil? ? nil : HttpClient::Preconditions.assert_class('capture_id', x, String)),
              :capture_key => (x = opts.delete(:capture_key); x.nil? ? nil : HttpClient::Preconditions.assert_class('capture_key', x, String)),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "-created_at" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/refunds").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::Refund.new(x) }
          end

          # Create a new refund.
          def post(organization, refund_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            (x = refund_form; x.is_a?(::Io::Flow::V0::Models::RefundForm) ? x : ::Io::Flow::V0::Models::RefundForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/refunds").with_json(refund_form.to_json).post
            ::Io::Flow::V0::Models::Refund.new(r)
          end

          # Returns a refund order summary for the specified order.
          def get_summary_by_order_number(organization, order_number)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('order_number', order_number, String)
            r = @client.request("/#{CGI.escape(organization)}/refunds/summary/#{CGI.escape(order_number)}").get
            ::Io::Flow::V0::Models::RefundOrderSummary.new(r)
          end

          # Provides visibility into recent changes of each object, including deletion
          def get_versions(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, Integer) }),
              :refund_id => (x = opts.delete(:refund_id); x.nil? ? nil : HttpClient::Preconditions.assert_class('refund_id', x, Array).map { |v| HttpClient::Preconditions.assert_class('refund_id', v, String) }),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "journal_timestamp" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/refunds/versions").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::RefundVersion.new(x) }
          end

          # Returns information about a specific refund.
          def get_by_key(organization, key)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            r = @client.request("/#{CGI.escape(organization)}/refunds/#{CGI.escape(key)}").get
            ::Io::Flow::V0::Models::Refund.new(r)
          end

          def get_identifiers_by_key(organization, key, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :identifier => (x = opts.delete(:identifier); x.nil? ? nil : HttpClient::Preconditions.assert_class('identifier', x, String)),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "name" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/refunds/#{CGI.escape(key)}/identifiers").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::RefundIdentifier.new(x) }
          end

          # Create a new identifier for this refund
          def put_identifiers_by_key_and_identifier(organization, key, identifier, identifier_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            HttpClient::Preconditions.assert_class('identifier', identifier, String)
            (x = identifier_form; x.is_a?(::Io::Flow::V0::Models::IdentifierForm) ? x : ::Io::Flow::V0::Models::IdentifierForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/refunds/#{CGI.escape(key)}/identifiers/#{CGI.escape(identifier)}").with_json(identifier_form.to_json).put
            ::Io::Flow::V0::Models::RefundIdentifier.new(r)
          end

          def delete_identifiers_by_key_and_identifier(organization, key, identifier)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            HttpClient::Preconditions.assert_class('identifier', identifier, String)
            r = @client.request("/#{CGI.escape(organization)}/refunds/#{CGI.escape(key)}/identifiers/#{CGI.escape(identifier)}").delete
            nil
          end

        end

        class Reversals

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          def get(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :key => (x = opts.delete(:key); x.nil? ? nil : HttpClient::Preconditions.assert_class('key', x, Array).map { |v| HttpClient::Preconditions.assert_class('key', v, String) }),
              :authorization_id => (x = opts.delete(:authorization_id); x.nil? ? nil : HttpClient::Preconditions.assert_class('authorization_id', x, String)),
              :authorization_key => (x = opts.delete(:authorization_key); x.nil? ? nil : HttpClient::Preconditions.assert_class('authorization_key', x, String)),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "-created_at" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/reversals").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::Reversal.new(x) }
          end

          def post(organization, reversal_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            (x = reversal_form; x.is_a?(::Io::Flow::V0::Models::ReversalForm) ? x : ::Io::Flow::V0::Models::ReversalForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/reversals").with_json(reversal_form.to_json).post
            ::Io::Flow::V0::Models::Reversal.new(r)
          end

          def get_versions(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, Integer) }),
              :reversal_id => (x = opts.delete(:reversal_id); x.nil? ? nil : HttpClient::Preconditions.assert_class('reversal_id', x, Array).map { |v| HttpClient::Preconditions.assert_class('reversal_id', v, String) }),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "journal_timestamp" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/reversals/versions").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::ReversalVersion.new(x) }
          end

          def get_by_key(organization, key)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            r = @client.request("/#{CGI.escape(organization)}/reversals/#{CGI.escape(key)}").get
            ::Io::Flow::V0::Models::Reversal.new(r)
          end

          # Try inserting or updating a new reversal. Useful for retrying pending
          # reversals
          def put_by_key(organization, key, reversal_put_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            (x = reversal_put_form; x.is_a?(::Io::Flow::V0::Models::ReversalPutForm) ? x : ::Io::Flow::V0::Models::ReversalPutForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/reversals/#{CGI.escape(key)}").with_json(reversal_put_form.to_json).put
            ::Io::Flow::V0::Models::Reversal.new(r)
          end

        end

        class VirtualCards

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          # Retrieve all the virtual credit cards that have been created matching
          # selected criteria.
          def get(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :key => (x = opts.delete(:key); x.nil? ? nil : HttpClient::Preconditions.assert_class('key', x, String)),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "-created_at" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/virtual/cards").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::VirtualCard.new(x) }
          end

          # Retrieves a virtual credit card using your unique key used when creating the
          # card. Note that the card number and cvv will not be returned by this request
          # to maintain PCI compliance. If you have lost these details you will need to
          # create a new card.
          def get_by_key(organization, key)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            r = @client.request("/#{CGI.escape(organization)}/virtual/cards/#{CGI.escape(key)}").get
            ::Io::Flow::V0::Models::VirtualCard.new(r)
          end

          # Creates a new virtual credit card. The card number and cvv will only be
          # returned once when creating the card to maintain PCI compliance. This end
          # point is idempotent and subsequent calls with same key will return details
          # for the previously created card.
          def put_authorizations_by_key_and_authorization_key(organization, key, authorization_key, virtual_card_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            HttpClient::Preconditions.assert_class('authorization_key', authorization_key, String)
            (x = virtual_card_form; x.is_a?(::Io::Flow::V0::Models::VirtualCardForm) ? x : ::Io::Flow::V0::Models::VirtualCardForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/virtual/cards/#{CGI.escape(key)}/authorizations/#{CGI.escape(authorization_key)}").with_json(virtual_card_form.to_json).put
            ::Io::Flow::V0::Models::VirtualCard.new(r)
          end

        end

        class VirtualCardCaptures

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          # Retrieve all the virtual credit card captures that have been received for
          # all issued cards matching selected criteria.
          def get(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "-created_at" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/virtual/card/captures").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::VirtualCardCapture.new(x) }
          end

          # Retrieve payment captures for a specific virtual credit card that has been
          # previously issued.
          def get_by_virtual_card_id(organization, virtual_card_id)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('virtual_card_id', virtual_card_id, String)
            r = @client.request("/#{CGI.escape(organization)}/virtual/card/captures/#{CGI.escape(virtual_card_id)}").get
            r.map { |x| ::Io::Flow::V0::Models::VirtualCardCapture.new(x) }
          end

        end

        class VirtualCardRefunds

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          # Retrieve all the virtual credit card refunds that have been received for all
          # issued cards matching selected criteria.
          def get(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "-created_at" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/virtual/card/refunds").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::VirtualCardRefund.new(x) }
          end

          # Retrieve payment refunds for a specific virtual credit card that has been
          # previously issued.
          def get_by_virtual_card_id(organization, virtual_card_id)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('virtual_card_id', virtual_card_id, String)
            r = @client.request("/#{CGI.escape(organization)}/virtual/card/refunds/#{CGI.escape(virtual_card_id)}").get
            r.map { |x| ::Io::Flow::V0::Models::VirtualCardRefund.new(x) }
          end

        end

        class Centers

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          def get(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :key => (x = opts.delete(:key); x.nil? ? nil : HttpClient::Preconditions.assert_class('key', x, Array).map { |v| HttpClient::Preconditions.assert_class('key', v, String) }),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "name" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/centers").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::Center.new(x) }
          end

          def post(organization, center_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            (x = center_form; x.is_a?(::Io::Flow::V0::Models::CenterForm) ? x : ::Io::Flow::V0::Models::CenterForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/centers").with_json(center_form.to_json).post
            ::Io::Flow::V0::Models::Center.new(r)
          end

          def post_query(organization, center_query)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            (x = center_query; x.is_a?(::Io::Flow::V0::Models::CenterQuery) ? x : ::Io::Flow::V0::Models::CenterQuery.new(x))
            r = @client.request("/#{CGI.escape(organization)}/centers/query").with_json(center_query.to_json).post
            r.map { |x| ::Io::Flow::V0::Models::Center.new(x) }
          end

          def get_versions(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :key => (x = opts.delete(:key); x.nil? ? nil : HttpClient::Preconditions.assert_class('key', x, Array).map { |v| HttpClient::Preconditions.assert_class('key', v, String) }),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "journal_timestamp" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/centers/versions").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::CenterVersion.new(x) }
          end

          def get_by_key(organization, key)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            r = @client.request("/#{CGI.escape(organization)}/centers/#{CGI.escape(key)}").get
            ::Io::Flow::V0::Models::Center.new(r)
          end

          def put_by_key(organization, key, center_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            (x = center_form; x.is_a?(::Io::Flow::V0::Models::CenterForm) ? x : ::Io::Flow::V0::Models::CenterForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/centers/#{CGI.escape(key)}").with_json(center_form.to_json).put
            ::Io::Flow::V0::Models::Center.new(r)
          end

          def delete_by_key(organization, key)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            r = @client.request("/#{CGI.escape(organization)}/centers/#{CGI.escape(key)}").delete
            nil
          end

        end

        class DeliveryWindows

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          # Endpoint to request a delivery window. Requires some knowledge of origin
          # (based on organization, center, or specified address string) and destination
          # (based on ip, lat/long, or address string). Other attributes allow us to
          # narrow down delivery windows even more such as service level to be used and
          # timestamp of expected shipment date.
          def get_summary(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :strategy => (x = (x = opts.delete(:strategy); x.nil? ? "range" : x); x.is_a?(::Io::Flow::V0::Models::Strategy) ? x : ::Io::Flow::V0::Models::Strategy.apply(x)).value,
              :center => (x = opts.delete(:center); x.nil? ? nil : HttpClient::Preconditions.assert_class('center', x, String)),
              :origin => (x = opts.delete(:origin); x.nil? ? nil : HttpClient::Preconditions.assert_class('origin', x, String)),
              :destination => (x = opts.delete(:destination); x.nil? ? nil : HttpClient::Preconditions.assert_class('destination', x, String)),
              :ip => (x = opts.delete(:ip); x.nil? ? nil : HttpClient::Preconditions.assert_class('ip', x, String)),
              :latitude => (x = opts.delete(:latitude); x.nil? ? nil : HttpClient::Preconditions.assert_class('latitude', x, String)),
              :longitude => (x = opts.delete(:longitude); x.nil? ? nil : HttpClient::Preconditions.assert_class('longitude', x, String)),
              :service => (x = opts.delete(:service); x.nil? ? nil : HttpClient::Preconditions.assert_class('service', x, String)),
              :item_number => (x = opts.delete(:item_number); x.nil? ? nil : HttpClient::Preconditions.assert_class('item_number', x, Array).map { |v| HttpClient::Preconditions.assert_class('item_number', v, String) }),
              :min_lead_days => (x = opts.delete(:min_lead_days); x.nil? ? nil : HttpClient::Preconditions.assert_class('min_lead_days', x, Integer)),
              :max_lead_days => (x = opts.delete(:max_lead_days); x.nil? ? nil : HttpClient::Preconditions.assert_class('max_lead_days', x, Integer)),
              :context => (x = opts.delete(:context); x.nil? ? nil : HttpClient::Preconditions.assert_class('context', x, String))
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/delivery-windows/summary").with_query(query).get
            ::Io::Flow::V0::Models::DeliveryWindow.new(r)
          end

          # Endpoint to request all delivery windows across multiple destinations.
          def get_summary_and_all(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :destination => (x = opts.delete(:destination); x.nil? ? nil : HttpClient::Preconditions.assert_class('destination', x, Array).map { |v| HttpClient::Preconditions.assert_class('destination', v, String) }),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :context => (x = opts.delete(:context); x.nil? ? nil : HttpClient::Preconditions.assert_class('context', x, String))
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/delivery-windows/summary/all").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::DeliveryWindowSummary.new(x) }
          end

        end

        class DimensionEstimates

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          def get(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "-created_at" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/dimension-estimates").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::DimensionEstimate.new(x) }
          end

          def post(organization, dimension_estimate_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            (x = dimension_estimate_form; x.is_a?(::Io::Flow::V0::Models::DimensionEstimateForm) ? x : ::Io::Flow::V0::Models::DimensionEstimateForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/dimension-estimates").with_json(dimension_estimate_form.to_json).post
            ::Io::Flow::V0::Models::DimensionEstimate.new(r)
          end

          def get_versions(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "journal_timestamp" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/dimension-estimates/versions").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::DimensionEstimateVersion.new(x) }
          end

          def get_by_id(organization, id)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            r = @client.request("/#{CGI.escape(organization)}/dimension-estimates/#{CGI.escape(id)}").get
            ::Io::Flow::V0::Models::DimensionEstimate.new(r)
          end

          def put_by_id(organization, id, dimension_estimate_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            (x = dimension_estimate_form; x.is_a?(::Io::Flow::V0::Models::DimensionEstimateForm) ? x : ::Io::Flow::V0::Models::DimensionEstimateForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/dimension-estimates/#{CGI.escape(id)}").with_json(dimension_estimate_form.to_json).put
            ::Io::Flow::V0::Models::DimensionEstimate.new(r)
          end

          def delete_by_id(organization, id)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            r = @client.request("/#{CGI.escape(organization)}/dimension-estimates/#{CGI.escape(id)}").delete
            nil
          end

        end

        class InventoryRules

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          def get(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "-created_at" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/inventory_rules").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::InventoryRule.new(x) }
          end

          def post(organization, inventory_rule_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            (x = inventory_rule_form; x.is_a?(::Io::Flow::V0::Models::InventoryRuleForm) ? x : ::Io::Flow::V0::Models::InventoryRuleForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/inventory_rules").with_json(inventory_rule_form.to_json).post
            ::Io::Flow::V0::Models::InventoryRule.new(r)
          end

          def get_versions(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "journal_timestamp" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/inventory_rules/versions").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::InventoryRuleVersion.new(x) }
          end

        end

        class InventorySnapshots

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          def get(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :center => (x = opts.delete(:center); x.nil? ? nil : HttpClient::Preconditions.assert_class('center', x, Array).map { |v| HttpClient::Preconditions.assert_class('center', v, String) }),
              :item_number => (x = opts.delete(:item_number); x.nil? ? nil : HttpClient::Preconditions.assert_class('item_number', x, Array).map { |v| HttpClient::Preconditions.assert_class('item_number', v, String) }),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "-created_at" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/inventory_snapshots").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::InventorySnapshot.new(x) }
          end

          def get_versions(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :inventory_snapshot => (x = opts.delete(:inventory_snapshot); x.nil? ? nil : HttpClient::Preconditions.assert_class('inventory_snapshot', x, Array).map { |v| HttpClient::Preconditions.assert_class('inventory_snapshot', v, String) }),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "journal_timestamp" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/inventory_snapshots/versions").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::InventorySnapshotVersion.new(x) }
          end

          def get_by_id(organization, id)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            r = @client.request("/#{CGI.escape(organization)}/inventory_snapshots/#{CGI.escape(id)}").get
            ::Io::Flow::V0::Models::InventorySnapshot.new(r)
          end

        end

        class InventoryUpdates

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          def get(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :center => (x = opts.delete(:center); x.nil? ? nil : HttpClient::Preconditions.assert_class('center', x, Array).map { |v| HttpClient::Preconditions.assert_class('center', v, String) }),
              :item_number => (x = opts.delete(:item_number); x.nil? ? nil : HttpClient::Preconditions.assert_class('item_number', x, Array).map { |v| HttpClient::Preconditions.assert_class('item_number', v, String) }),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "-created_at" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/inventory_updates").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::InventoryUpdate.new(x) }
          end

          def post(organization, inventory_update_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            (x = inventory_update_form; x.is_a?(::Io::Flow::V0::Models::InventoryUpdateForm) ? x : ::Io::Flow::V0::Models::InventoryUpdateForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/inventory_updates").with_json(inventory_update_form.to_json).post
            ::Io::Flow::V0::Models::InventoryUpdate.new(r)
          end

          def get_versions(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :inventory_update => (x = opts.delete(:inventory_update); x.nil? ? nil : HttpClient::Preconditions.assert_class('inventory_update', x, Array).map { |v| HttpClient::Preconditions.assert_class('inventory_update', v, String) }),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "journal_timestamp" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/inventory_updates/versions").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::InventoryUpdateVersion.new(x) }
          end

          def get_by_id(organization, id)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            r = @client.request("/#{CGI.escape(organization)}/inventory_updates/#{CGI.escape(id)}").get
            ::Io::Flow::V0::Models::InventoryUpdate.new(r)
          end

        end

        class Manifests

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          def get(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :carrier_tracking_number => (x = opts.delete(:carrier_tracking_number); x.nil? ? nil : HttpClient::Preconditions.assert_class('carrier_tracking_number', x, Array).map { |v| HttpClient::Preconditions.assert_class('carrier_tracking_number', v, String) }),
              :flow_tracking_number => (x = opts.delete(:flow_tracking_number); x.nil? ? nil : HttpClient::Preconditions.assert_class('flow_tracking_number', x, Array).map { |v| HttpClient::Preconditions.assert_class('flow_tracking_number', v, String) }),
              :service => (x = opts.delete(:service); x.nil? ? nil : HttpClient::Preconditions.assert_class('service', x, Array).map { |v| HttpClient::Preconditions.assert_class('service', v, String) }),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "-created_at" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/manifests").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::Manifest.new(x) }
          end

          # Creates a new manifest/carrier BOL with specific tracking numbers
          def post(organization, manifest_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            (x = manifest_form; x.is_a?(::Io::Flow::V0::Models::ManifestForm) ? x : ::Io::Flow::V0::Models::ManifestForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/manifests").with_json(manifest_form.to_json).post
            ::Io::Flow::V0::Models::Manifest.new(r)
          end

          # Generates a new manifest with all outstanding labels and redirects to a
          # downloadable PDF of carrier-generated manifest or bill of lading (BOL). If
          # no outstanding labels, this will generate a 422 error.
          def get_services_and_outstanding_by_service(organization, service)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('service', service, String)
            r = @client.request("/#{CGI.escape(organization)}/manifests/services/#{CGI.escape(service)}/outstanding").get
            r
          end

          def get_by_id(organization, id)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            r = @client.request("/#{CGI.escape(organization)}/manifests/#{CGI.escape(id)}").get
            ::Io::Flow::V0::Models::Manifest.new(r)
          end

        end

        class Quotes

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          # Search quotes. Always paginated.
          def get(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "-created_at" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/quotes").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::Quote.new(x) }
          end

          def post(organization, quote_form, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :context => (x = opts.delete(:context); x.nil? ? nil : HttpClient::Preconditions.assert_class('context', x, String))
            }.delete_if { |k, v| v.nil? }
            (x = quote_form; x.is_a?(::Io::Flow::V0::Models::QuoteForm) ? x : ::Io::Flow::V0::Models::QuoteForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/quotes").with_query(query).with_json(quote_form.to_json).post
            ::Io::Flow::V0::Models::Quote.new(r)
          end

          def get_by_id(organization, id)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            r = @client.request("/#{CGI.escape(organization)}/quotes/#{CGI.escape(id)}").get
            ::Io::Flow::V0::Models::Quote.new(r)
          end

        end

        class Ratecards

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          def get(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :number => (x = opts.delete(:number); x.nil? ? nil : HttpClient::Preconditions.assert_class('number', x, String)),
              :service => (x = opts.delete(:service); x.nil? ? nil : HttpClient::Preconditions.assert_class('service', x, String)),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "-created_at" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/ratecards").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::Ratecard.new(x) }
          end

          def post(organization, ratecard_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            (x = ratecard_form; x.is_a?(::Io::Flow::V0::Models::RatecardForm) ? x : ::Io::Flow::V0::Models::RatecardForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/ratecards").with_json(ratecard_form.to_json).post
            ::Io::Flow::V0::Models::Ratecard.new(r)
          end

          def get_versions(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "journal_timestamp" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/ratecards/versions").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::RatecardVersion.new(x) }
          end

          def get_by_id(organization, id)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            r = @client.request("/#{CGI.escape(organization)}/ratecards/#{CGI.escape(id)}").get
            ::Io::Flow::V0::Models::Ratecard.new(r)
          end

          def delete_by_id(organization, id)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            r = @client.request("/#{CGI.escape(organization)}/ratecards/#{CGI.escape(id)}").delete
            nil
          end

          def put_publish_by_id(organization, id)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            r = @client.request("/#{CGI.escape(organization)}/ratecards/#{CGI.escape(id)}/publish").put
            ::Io::Flow::V0::Models::Ratecard.new(r)
          end

        end

        class RatecardEstimates

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          # Endpoint to get shipment cost estimates based on applicable rate cards. An
          # origin and destination address must be provided. Final amounts are based on
          # either gravitational weight or dimensional weight. When estimating based off
          # gravitational weight, the weight field must be set. When estimating based
          # off dimensional weight, then length/width/depth must be set. For either one,
          # the appropriate unit of measurement must be given.
          def post(organization, ratecard_estimate_form, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :context => (x = opts.delete(:context); x.nil? ? nil : HttpClient::Preconditions.assert_class('context', x, String))
            }.delete_if { |k, v| v.nil? }
            (x = ratecard_estimate_form; x.is_a?(::Io::Flow::V0::Models::RatecardEstimateForm) ? x : ::Io::Flow::V0::Models::RatecardEstimateForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/ratecard_estimates").with_query(query).with_json(ratecard_estimate_form.to_json).post
            r.map { |x| ::Io::Flow::V0::Models::RatecardEstimateV4.new(x) }
          end

          # Endpoint to get a summary of the shipment estimates based on applicable rate
          # cards. An origin and destination country must be provided.
          def post_summaries(organization, ratecard_estimate_summary_form, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :context => (x = opts.delete(:context); x.nil? ? nil : HttpClient::Preconditions.assert_class('context', x, String))
            }.delete_if { |k, v| v.nil? }
            (x = ratecard_estimate_summary_form; x.is_a?(::Io::Flow::V0::Models::RatecardEstimateSummaryForm) ? x : ::Io::Flow::V0::Models::RatecardEstimateSummaryForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/ratecard_estimates/summaries").with_query(query).with_json(ratecard_estimate_summary_form.to_json).post
            r.map { |x| ::Io::Flow::V0::Models::RatecardEstimateV4.new(x) }
          end

        end

        class RatecardLanes

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          def get(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :delivered_duty => (x = opts.delete(:delivered_duty); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::DeliveredDuty) ? x : ::Io::Flow::V0::Models::DeliveredDuty.apply(x)).value),
              :destination => (x = opts.delete(:destination); x.nil? ? nil : HttpClient::Preconditions.assert_class('destination', x, String)),
              :origin => (x = opts.delete(:origin); x.nil? ? nil : HttpClient::Preconditions.assert_class('origin', x, String)),
              :ratecard_id => (x = opts.delete(:ratecard_id); x.nil? ? nil : HttpClient::Preconditions.assert_class('ratecard_id', x, String)),
              :service => (x = opts.delete(:service); x.nil? ? nil : HttpClient::Preconditions.assert_class('service', x, String)),
              :ratecard_owner => (x = opts.delete(:ratecard_owner); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::RatecardOwner) ? x : ::Io::Flow::V0::Models::RatecardOwner.apply(x)).value),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "-created_at" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/ratecard-lanes").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::RatecardLane.new(x) }
          end

          def post(organization, ratecard_lane_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            (x = ratecard_lane_form; x.is_a?(::Io::Flow::V0::Models::RatecardLaneForm) ? x : ::Io::Flow::V0::Models::RatecardLaneForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/ratecard-lanes").with_json(ratecard_lane_form.to_json).post
            ::Io::Flow::V0::Models::RatecardLane.new(r)
          end

          def get_by_id(organization, id)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            r = @client.request("/#{CGI.escape(organization)}/ratecard-lanes/#{CGI.escape(id)}").get
            ::Io::Flow::V0::Models::RatecardLane.new(r)
          end

          def put_by_id(organization, id, ratecard_lane_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            (x = ratecard_lane_form; x.is_a?(::Io::Flow::V0::Models::RatecardLaneForm) ? x : ::Io::Flow::V0::Models::RatecardLaneForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/ratecard-lanes/#{CGI.escape(id)}").with_json(ratecard_lane_form.to_json).put
            ::Io::Flow::V0::Models::RatecardLane.new(r)
          end

          def delete_by_id(organization, id)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            r = @client.request("/#{CGI.escape(organization)}/ratecard-lanes/#{CGI.escape(id)}").delete
            nil
          end

        end

        class RatecardRates

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          def get(organization, ratecard_id, lane_id, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('ratecard_id', ratecard_id, String)
            HttpClient::Preconditions.assert_class('lane_id', lane_id, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :weight => (x = opts.delete(:weight); x.nil? ? nil : HttpClient::Preconditions.assert_class('weight', x, Array).map { |v| HttpClient::Preconditions.assert_class('weight', v, Numeric) }),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "-created_at" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/ratecards/#{CGI.escape(ratecard_id)}/lanes/#{CGI.escape(lane_id)}/rates").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::RatecardRate.new(x) }
          end

          def post(organization, ratecard_id, lane_id, ratecard_rate_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('ratecard_id', ratecard_id, String)
            HttpClient::Preconditions.assert_class('lane_id', lane_id, String)
            (x = ratecard_rate_form; x.is_a?(::Io::Flow::V0::Models::RatecardRateForm) ? x : ::Io::Flow::V0::Models::RatecardRateForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/ratecards/#{CGI.escape(ratecard_id)}/lanes/#{CGI.escape(lane_id)}/rates").with_json(ratecard_rate_form.to_json).post
            ::Io::Flow::V0::Models::RatecardRate.new(r)
          end

          def get_versions(organization, ratecard_id, lane_id, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('ratecard_id', ratecard_id, String)
            HttpClient::Preconditions.assert_class('lane_id', lane_id, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "journal_timestamp" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/ratecards/#{CGI.escape(ratecard_id)}/lanes/#{CGI.escape(lane_id)}/rates/versions").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::RatecardRateVersion.new(x) }
          end

          def get_by_id(organization, ratecard_id, lane_id, id)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('ratecard_id', ratecard_id, String)
            HttpClient::Preconditions.assert_class('lane_id', lane_id, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            r = @client.request("/#{CGI.escape(organization)}/ratecards/#{CGI.escape(ratecard_id)}/lanes/#{CGI.escape(lane_id)}/rates/#{CGI.escape(id)}").get
            ::Io::Flow::V0::Models::RatecardRate.new(r)
          end

          def put_by_id(organization, ratecard_id, lane_id, id, ratecard_rate_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('ratecard_id', ratecard_id, String)
            HttpClient::Preconditions.assert_class('lane_id', lane_id, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            (x = ratecard_rate_form; x.is_a?(::Io::Flow::V0::Models::RatecardRateForm) ? x : ::Io::Flow::V0::Models::RatecardRateForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/ratecards/#{CGI.escape(ratecard_id)}/lanes/#{CGI.escape(lane_id)}/rates/#{CGI.escape(id)}").with_json(ratecard_rate_form.to_json).put
            ::Io::Flow::V0::Models::RatecardRate.new(r)
          end

        end

        class Returns

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          def get(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :key => (x = opts.delete(:key); x.nil? ? nil : HttpClient::Preconditions.assert_class('key', x, Array).map { |v| HttpClient::Preconditions.assert_class('key', v, String) }),
              :order_number => (x = opts.delete(:order_number); x.nil? ? nil : HttpClient::Preconditions.assert_class('order_number', x, Array).map { |v| HttpClient::Preconditions.assert_class('order_number', v, String) }),
              :flow_tracking_number => (x = opts.delete(:flow_tracking_number); x.nil? ? nil : HttpClient::Preconditions.assert_class('flow_tracking_number', x, Array).map { |v| HttpClient::Preconditions.assert_class('flow_tracking_number', v, String) }),
              :carrier_tracking_number => (x = opts.delete(:carrier_tracking_number); x.nil? ? nil : HttpClient::Preconditions.assert_class('carrier_tracking_number', x, Array).map { |v| HttpClient::Preconditions.assert_class('carrier_tracking_number', v, String) }),
              :service => (x = opts.delete(:service); x.nil? ? nil : HttpClient::Preconditions.assert_class('service', x, Array).map { |v| HttpClient::Preconditions.assert_class('service', v, String) }),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "-created_at" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/returns").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::Return.new(x) }
          end

          def post(organization, return_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            (x = return_form; x.is_a?(::Io::Flow::V0::Models::ReturnForm) ? x : ::Io::Flow::V0::Models::ReturnForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/returns").with_json(return_form.to_json).post
            ::Io::Flow::V0::Models::Return.new(r)
          end

          def get_versions(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :key => (x = opts.delete(:key); x.nil? ? nil : HttpClient::Preconditions.assert_class('key', x, Array).map { |v| HttpClient::Preconditions.assert_class('key', v, String) }),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "journal_timestamp" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/returns/versions").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::ReturnVersion.new(x) }
          end

          def get_by_key(organization, key)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            r = @client.request("/#{CGI.escape(organization)}/returns/#{CGI.escape(key)}").get
            ::Io::Flow::V0::Models::Return.new(r)
          end

          def put_by_key(organization, key, return_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            (x = return_form; x.is_a?(::Io::Flow::V0::Models::ReturnForm) ? x : ::Io::Flow::V0::Models::ReturnForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/returns/#{CGI.escape(key)}").with_json(return_form.to_json).put
            ::Io::Flow::V0::Models::Return.new(r)
          end

          def delete_by_key(organization, key)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            r = @client.request("/#{CGI.escape(organization)}/returns/#{CGI.escape(key)}").delete
            nil
          end

        end

        class ShippingConfigurations

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          def get(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :key => (x = opts.delete(:key); x.nil? ? nil : HttpClient::Preconditions.assert_class('key', x, Array).map { |v| HttpClient::Preconditions.assert_class('key', v, String) }),
              :name => (x = opts.delete(:name); x.nil? ? nil : HttpClient::Preconditions.assert_class('name', x, String)),
              :experience => (x = opts.delete(:experience); x.nil? ? nil : HttpClient::Preconditions.assert_class('experience', x, String)),
              :expand => (x = opts.delete(:expand); x.nil? ? nil : HttpClient::Preconditions.assert_class('expand', x, Array).map { |v| HttpClient::Preconditions.assert_class('expand', v, String) }),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "name" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/shipping/configuration").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::ShippingConfiguration.new(x) }
          end

          def post(organization, shipping_configuration_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            (x = shipping_configuration_form; x.is_a?(::Io::Flow::V0::Models::ShippingConfigurationForm) ? x : ::Io::Flow::V0::Models::ShippingConfigurationForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/shipping/configuration").with_json(shipping_configuration_form.to_json).post
            ::Io::Flow::V0::Models::ShippingConfiguration.new(r)
          end

          def get_by_key(organization, key, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :experience => (x = opts.delete(:experience); x.nil? ? nil : HttpClient::Preconditions.assert_class('experience', x, String)),
              :expand => (x = opts.delete(:expand); x.nil? ? nil : HttpClient::Preconditions.assert_class('expand', x, Array).map { |v| HttpClient::Preconditions.assert_class('expand', v, String) })
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/shipping/configuration/#{CGI.escape(key)}").with_query(query).get
            ::Io::Flow::V0::Models::ShippingConfiguration.new(r)
          end

          def put_by_key(organization, key, shipping_configuration_form, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :expand => (x = opts.delete(:expand); x.nil? ? nil : HttpClient::Preconditions.assert_class('expand', x, Array).map { |v| HttpClient::Preconditions.assert_class('expand', v, String) })
            }.delete_if { |k, v| v.nil? }
            (x = shipping_configuration_form; x.is_a?(::Io::Flow::V0::Models::ShippingConfigurationForm) ? x : ::Io::Flow::V0::Models::ShippingConfigurationForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/shipping/configuration/#{CGI.escape(key)}").with_query(query).with_json(shipping_configuration_form.to_json).put
            ::Io::Flow::V0::Models::ShippingConfiguration.new(r)
          end

          def delete_by_key(organization, key)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            r = @client.request("/#{CGI.escape(organization)}/shipping/configuration/#{CGI.escape(key)}").delete
            nil
          end

          def get_lanes_by_key(organization, key, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :region => (x = opts.delete(:region); x.nil? ? nil : HttpClient::Preconditions.assert_class('region', x, String)),
              :expand => (x = opts.delete(:expand); x.nil? ? nil : HttpClient::Preconditions.assert_class('expand', x, Array).map { |v| HttpClient::Preconditions.assert_class('expand', v, String) }),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "-created_at" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/shipping/configuration/#{CGI.escape(key)}/lanes").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::ShippingLane.new(x) }
          end

          def post_lanes_by_key(organization, key, shipping_lane_form, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :expand => (x = opts.delete(:expand); x.nil? ? nil : HttpClient::Preconditions.assert_class('expand', x, Array).map { |v| HttpClient::Preconditions.assert_class('expand', v, String) })
            }.delete_if { |k, v| v.nil? }
            (x = shipping_lane_form; x.is_a?(::Io::Flow::V0::Models::ShippingLaneForm) ? x : ::Io::Flow::V0::Models::ShippingLaneForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/shipping/configuration/#{CGI.escape(key)}/lanes").with_query(query).with_json(shipping_lane_form.to_json).post
            ::Io::Flow::V0::Models::ShippingLane.new(r)
          end

          def get_lanes_by_key_and_id(organization, key, id, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :expand => (x = opts.delete(:expand); x.nil? ? nil : HttpClient::Preconditions.assert_class('expand', x, Array).map { |v| HttpClient::Preconditions.assert_class('expand', v, String) })
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/shipping/configuration/#{CGI.escape(key)}/lanes/#{CGI.escape(id)}").with_query(query).get
            ::Io::Flow::V0::Models::ShippingLane.new(r)
          end

          def put_lanes_by_key_and_id(organization, key, id, shipping_lane_form, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :expand => (x = opts.delete(:expand); x.nil? ? nil : HttpClient::Preconditions.assert_class('expand', x, Array).map { |v| HttpClient::Preconditions.assert_class('expand', v, String) })
            }.delete_if { |k, v| v.nil? }
            (x = shipping_lane_form; x.is_a?(::Io::Flow::V0::Models::ShippingLaneForm) ? x : ::Io::Flow::V0::Models::ShippingLaneForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/shipping/configuration/#{CGI.escape(key)}/lanes/#{CGI.escape(id)}").with_query(query).with_json(shipping_lane_form.to_json).put
            ::Io::Flow::V0::Models::ShippingLane.new(r)
          end

          def delete_lanes_by_key_and_id(organization, key, id)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            r = @client.request("/#{CGI.escape(organization)}/shipping/configuration/#{CGI.escape(key)}/lanes/#{CGI.escape(id)}").delete
            nil
          end

          # Endpoint to retrieve the default tier of a shipping lane
          def get_lanes_and_defaults_and_tiers_by_key_and_id(organization, key, id)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            r = @client.request("/#{CGI.escape(organization)}/shipping/configuration/#{CGI.escape(key)}/lanes/#{CGI.escape(id)}/defaults/tiers").get
            ::Io::Flow::V0::Models::ShippingLaneDefaultTier.new(r)
          end

          # Endpoint to set or udpate the default tier of a shipping lane
          def put_lanes_and_defaults_and_tiers_by_key_and_id(organization, key, id, shipping_lane_default_tier_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            (x = shipping_lane_default_tier_form; x.is_a?(::Io::Flow::V0::Models::ShippingLaneDefaultTierForm) ? x : ::Io::Flow::V0::Models::ShippingLaneDefaultTierForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/shipping/configuration/#{CGI.escape(key)}/lanes/#{CGI.escape(id)}/defaults/tiers").with_json(shipping_lane_default_tier_form.to_json).put
            ::Io::Flow::V0::Models::ShippingLaneDefaultTier.new(r)
          end

        end

        class ShippingConfigurationCopies

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          def post_by_key(organization, key, shipping_configuration_copy_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            (x = shipping_configuration_copy_form; x.is_a?(::Io::Flow::V0::Models::ShippingConfigurationCopyForm) ? x : ::Io::Flow::V0::Models::ShippingConfigurationCopyForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/shipping/configuration/copies/#{CGI.escape(key)}").with_json(shipping_configuration_copy_form.to_json).post
            ::Io::Flow::V0::Models::ShippingConfigurationCopy.new(r)
          end

        end

        class ShippingLabels

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          def get(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :carrier_tracking_number => (x = opts.delete(:carrier_tracking_number); x.nil? ? nil : HttpClient::Preconditions.assert_class('carrier_tracking_number', x, Array).map { |v| HttpClient::Preconditions.assert_class('carrier_tracking_number', v, String) }),
              :flow_tracking_number => (x = opts.delete(:flow_tracking_number); x.nil? ? nil : HttpClient::Preconditions.assert_class('flow_tracking_number', x, Array).map { |v| HttpClient::Preconditions.assert_class('flow_tracking_number', v, String) }),
              :order_number => (x = opts.delete(:order_number); x.nil? ? nil : HttpClient::Preconditions.assert_class('order_number', x, Array).map { |v| HttpClient::Preconditions.assert_class('order_number', v, String) }),
              :service => (x = opts.delete(:service); x.nil? ? nil : HttpClient::Preconditions.assert_class('service', x, Array).map { |v| HttpClient::Preconditions.assert_class('service', v, String) }),
              :show_commercial_invoice => (x = opts.delete(:show_commercial_invoice); x.nil? ? nil : HttpClient::Preconditions.assert_boolean('show_commercial_invoice', x)),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "-created_at" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/shipping_labels").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::ShippingLabel.new(x) }
          end

          def post(organization, shipping_label_form, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :show_commercial_invoice => (x = opts.delete(:show_commercial_invoice); x.nil? ? nil : HttpClient::Preconditions.assert_boolean('show_commercial_invoice', x)),
              :context => (x = opts.delete(:context); x.nil? ? nil : HttpClient::Preconditions.assert_class('context', x, String)),
              :force_new => (x = opts.delete(:force_new); x.nil? ? nil : HttpClient::Preconditions.assert_boolean('force_new', x))
            }.delete_if { |k, v| v.nil? }
            (x = shipping_label_form; x.is_a?(::Io::Flow::V0::Models::ShippingLabelForm) ? x : ::Io::Flow::V0::Models::ShippingLabelForm.from_json(x))
            r = @client.request("/#{CGI.escape(organization)}/shipping_labels").with_query(query).with_json(shipping_label_form.to_json).post
            ::Io::Flow::V0::Models::ShippingLabel.new(r)
          end

          def get_crossdock_and_labels_and_barcode_by_barcode(organization, barcode)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('barcode', barcode, String)
            r = @client.request("/#{CGI.escape(organization)}/shipping_labels/crossdock/labels/#{CGI.escape(barcode)}/barcode").get
            ::Io::Flow::V0::Models::ShippingLabel.new(r)
          end

          def get_versions(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :label => (x = opts.delete(:label); x.nil? ? nil : HttpClient::Preconditions.assert_class('label', x, Array).map { |v| HttpClient::Preconditions.assert_class('label', v, String) }),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "journal_timestamp" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/shipping_labels/versions").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::ShippingLabelVersion.new(x) }
          end

          def get_by_id(organization, id)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            r = @client.request("/#{CGI.escape(organization)}/shipping_labels/#{CGI.escape(id)}").get
            ::Io::Flow::V0::Models::ShippingLabel.new(r)
          end

        end

        class ShippingNotifications

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          def get(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :key => (x = opts.delete(:key); x.nil? ? nil : HttpClient::Preconditions.assert_class('key', x, Array).map { |v| HttpClient::Preconditions.assert_class('key', v, String) }),
              :carrier_tracking_number => (x = opts.delete(:carrier_tracking_number); x.nil? ? nil : HttpClient::Preconditions.assert_class('carrier_tracking_number', x, Array).map { |v| HttpClient::Preconditions.assert_class('carrier_tracking_number', v, String) }),
              :flow_tracking_number => (x = opts.delete(:flow_tracking_number); x.nil? ? nil : HttpClient::Preconditions.assert_class('flow_tracking_number', x, Array).map { |v| HttpClient::Preconditions.assert_class('flow_tracking_number', v, String) }),
              :order_number => (x = opts.delete(:order_number); x.nil? ? nil : HttpClient::Preconditions.assert_class('order_number', x, Array).map { |v| HttpClient::Preconditions.assert_class('order_number', v, String) }),
              :service => (x = opts.delete(:service); x.nil? ? nil : HttpClient::Preconditions.assert_class('service', x, Array).map { |v| HttpClient::Preconditions.assert_class('service', v, String) }),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "-created_at" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/shipping-notifications").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::ShippingNotification.new(x) }
          end

          def post(organization, shipping_notification_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            (x = shipping_notification_form; x.is_a?(::Io::Flow::V0::Models::ShippingNotificationForm) ? x : ::Io::Flow::V0::Models::ShippingNotificationForm.from_json(x))
            r = @client.request("/#{CGI.escape(organization)}/shipping-notifications").with_json(shipping_notification_form.to_json).post
            ::Io::Flow::V0::Models::ShippingNotification.new(r)
          end

          def get_versions(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :key => (x = opts.delete(:key); x.nil? ? nil : HttpClient::Preconditions.assert_class('key', x, Array).map { |v| HttpClient::Preconditions.assert_class('key', v, String) }),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "journal_timestamp" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/shipping-notifications/versions").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::ShippingNotificationVersion.new(x) }
          end

          def get_by_key(organization, key)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            r = @client.request("/#{CGI.escape(organization)}/shipping-notifications/#{CGI.escape(key)}").get
            ::Io::Flow::V0::Models::ShippingNotification.new(r)
          end

          def put_by_key(organization, key, shipping_notification_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            (x = shipping_notification_form; x.is_a?(::Io::Flow::V0::Models::ShippingNotificationForm) ? x : ::Io::Flow::V0::Models::ShippingNotificationForm.from_json(x))
            r = @client.request("/#{CGI.escape(organization)}/shipping-notifications/#{CGI.escape(key)}").with_json(shipping_notification_form.to_json).put
            ::Io::Flow::V0::Models::ShippingNotification.new(r)
          end

          def delete_by_key(organization, key)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            r = @client.request("/#{CGI.escape(organization)}/shipping-notifications/#{CGI.escape(key)}").delete
            nil
          end

        end

        class SurchargeSettings

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          def get_displays(organization)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            r = @client.request("/#{CGI.escape(organization)}/surcharge/settings/displays").get
            r.map { |x| ::Io::Flow::V0::Models::SurchargeSettingDisplay.new(x) }
          end

        end

        class Tiers

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          def get(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :direction => (x = opts.delete(:direction); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::LaneDirection) ? x : ::Io::Flow::V0::Models::LaneDirection.apply(x)).value),
              :experience => (x = opts.delete(:experience); x.nil? ? nil : HttpClient::Preconditions.assert_class('experience', x, String)),
              :expand => (x = opts.delete(:expand); x.nil? ? nil : HttpClient::Preconditions.assert_class('expand', x, Array).map { |v| HttpClient::Preconditions.assert_class('expand', v, String) }),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "name" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/tiers").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::Tier.new(x) }
          end

          def post(organization, tier_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            (x = tier_form; x.is_a?(::Io::Flow::V0::Models::TierForm) ? x : ::Io::Flow::V0::Models::TierForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/tiers").with_json(tier_form.to_json).post
            ::Io::Flow::V0::Models::Tier.new(r)
          end

          def get_versions(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "journal_timestamp" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/tiers/versions").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::TierVersion.new(x) }
          end

          def get_by_id(organization, id)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            r = @client.request("/#{CGI.escape(organization)}/tiers/#{CGI.escape(id)}").get
            ::Io::Flow::V0::Models::Tier.new(r)
          end

          def put_by_id(organization, id, tier_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            (x = tier_form; x.is_a?(::Io::Flow::V0::Models::TierForm) ? x : ::Io::Flow::V0::Models::TierForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/tiers/#{CGI.escape(id)}").with_json(tier_form.to_json).put
            ::Io::Flow::V0::Models::Tier.new(r)
          end

          def delete_by_id(organization, id)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            r = @client.request("/#{CGI.escape(organization)}/tiers/#{CGI.escape(id)}").delete
            nil
          end

        end

        class Trackings

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          # Public endpoint to get all relevant information about a tracking, label(s)
          # under it, and event(s) under those label(s)
          def get_trackings_by_id(id)
            HttpClient::Preconditions.assert_class('id', id, String)
            r = @client.request("/trackings/#{CGI.escape(id)}").get
            ::Io::Flow::V0::Models::Tracking.new(r)
          end

          def get_trackings_by_organization(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "-created_at" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/trackings").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::Tracking.new(x) }
          end

          def post_trackings_by_organization(organization, tracking_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            (x = tracking_form; x.is_a?(::Io::Flow::V0::Models::TrackingForm) ? x : ::Io::Flow::V0::Models::TrackingForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/trackings").with_json(tracking_form.to_json).post
            ::Io::Flow::V0::Models::Tracking.new(r)
          end

          def get_trackings_and_versions_by_organization(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :tracking_id => (x = opts.delete(:tracking_id); x.nil? ? nil : HttpClient::Preconditions.assert_class('tracking_id', x, Array).map { |v| HttpClient::Preconditions.assert_class('tracking_id', v, String) }),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "journal_timestamp" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/trackings/versions").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::TrackingVersion.new(x) }
          end

        end

        class TrackingEvents

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          def get(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :tracking_id => (x = opts.delete(:tracking_id); x.nil? ? nil : HttpClient::Preconditions.assert_class('tracking_id', x, Array).map { |v| HttpClient::Preconditions.assert_class('tracking_id', v, String) }),
              :tracking_label_id => (x = opts.delete(:tracking_label_id); x.nil? ? nil : HttpClient::Preconditions.assert_class('tracking_label_id', x, Array).map { |v| HttpClient::Preconditions.assert_class('tracking_label_id', v, String) }),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "-created_at" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/tracking-events").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::TrackingEvent.new(x) }
          end

          def get_versions(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :tracking_event_id => (x = opts.delete(:tracking_event_id); x.nil? ? nil : HttpClient::Preconditions.assert_class('tracking_event_id', x, Array).map { |v| HttpClient::Preconditions.assert_class('tracking_event_id', v, String) }),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "journal_timestamp" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/tracking-events/versions").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::TrackingEventVersion.new(x) }
          end

          def get_by_id(organization, id)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            r = @client.request("/#{CGI.escape(organization)}/tracking-events/#{CGI.escape(id)}").get
            ::Io::Flow::V0::Models::TrackingEvent.new(r)
          end

        end

        class TrackingLabels

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          def get(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :tracking_id => (x = opts.delete(:tracking_id); x.nil? ? nil : HttpClient::Preconditions.assert_class('tracking_id', x, Array).map { |v| HttpClient::Preconditions.assert_class('tracking_id', v, String) }),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "-created_at" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/tracking-labels").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::TrackingLabel.new(x) }
          end

          def post(organization, tracking_label_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            (x = tracking_label_form; x.is_a?(::Io::Flow::V0::Models::TrackingLabelForm) ? x : ::Io::Flow::V0::Models::TrackingLabelForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/tracking-labels").with_json(tracking_label_form.to_json).post
            ::Io::Flow::V0::Models::TrackingLabel.new(r)
          end

          def get_versions(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :tracking_label_id => (x = opts.delete(:tracking_label_id); x.nil? ? nil : HttpClient::Preconditions.assert_class('tracking_label_id', x, Array).map { |v| HttpClient::Preconditions.assert_class('tracking_label_id', v, String) }),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "journal_timestamp" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/tracking-labels/versions").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::TrackingLabelVersion.new(x) }
          end

          def get_by_id(organization, id)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            r = @client.request("/#{CGI.escape(organization)}/tracking-labels/#{CGI.escape(id)}").get
            ::Io::Flow::V0::Models::TrackingLabel.new(r)
          end

        end

        class Webhooks

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          # Returns webhooks for an organization
          def get(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "-created_at" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/webhooks").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::Webhook.new(x) }
          end

          # Create a new webhook
          def post(organization, webhook_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            (x = webhook_form; x.is_a?(::Io::Flow::V0::Models::WebhookForm) ? x : ::Io::Flow::V0::Models::WebhookForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/webhooks").with_json(webhook_form.to_json).post
            ::Io::Flow::V0::Models::Webhook.new(r)
          end

          # Returns information about a specific webhook
          def get_by_id(organization, id)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            r = @client.request("/#{CGI.escape(organization)}/webhooks/#{CGI.escape(id)}").get
            ::Io::Flow::V0::Models::Webhook.new(r)
          end

          # Update an existing webhook
          def put_by_id(organization, id, webhook_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            (x = webhook_form; x.is_a?(::Io::Flow::V0::Models::WebhookForm) ? x : ::Io::Flow::V0::Models::WebhookForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/webhooks/#{CGI.escape(id)}").with_json(webhook_form.to_json).put
            ::Io::Flow::V0::Models::Webhook.new(r)
          end

          # Delete a webhook with the specified id
          def delete_by_id(organization, id)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            r = @client.request("/#{CGI.escape(organization)}/webhooks/#{CGI.escape(id)}").delete
            nil
          end

        end

        class WebhookDeliveries

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          # Returns deliveries for an organization's webhook
          def get(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :webhook_id => (x = opts.delete(:webhook_id); x.nil? ? nil : HttpClient::Preconditions.assert_class('webhook_id', x, String)),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "-created_at" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/webhook/deliveries").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::WebhookDelivery.new(x) }
          end

          # Returns information about a specific webhook delivery
          def get_by_id(organization, id)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            r = @client.request("/#{CGI.escape(organization)}/webhook/deliveries/#{CGI.escape(id)}").get
            ::Io::Flow::V0::Models::WebhookDelivery.new(r)
          end

          # Redeliver a webhook request. This created a new webhook request to requeue
          # delivery
          def post_requests_by_id(organization, id)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            r = @client.request("/#{CGI.escape(organization)}/webhook/deliveries/#{CGI.escape(id)}/requests").post
            ::Io::Flow::V0::Models::WebhookRequest.new(r)
          end

        end

        class WebhookSettings

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          # Returns the webhook settings for an organization
          def get(organization)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            r = @client.request("/#{CGI.escape(organization)}/webhook/settings").get
            ::Io::Flow::V0::Models::WebhookSettings.new(r)
          end

          # Updates the webhook settings for an organization
          def put(organization, webhook_settings)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            (x = webhook_settings; x.is_a?(::Io::Flow::V0::Models::WebhookSettings) ? x : ::Io::Flow::V0::Models::WebhookSettings.new(x))
            r = @client.request("/#{CGI.escape(organization)}/webhook/settings").with_json(webhook_settings.to_json).put
            ::Io::Flow::V0::Models::WebhookSettings.new(r)
          end

        end

        class Addresses

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          # Geolocates the request based on the provided parameters, returning a list of
          # potential matching addresses.
          def get(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :address => (x = opts.delete(:address); x.nil? ? nil : HttpClient::Preconditions.assert_class('address', x, String)),
              :ip => (x = opts.delete(:ip); x.nil? ? nil : HttpClient::Preconditions.assert_class('ip', x, String)),
              :country => (x = opts.delete(:country); x.nil? ? nil : HttpClient::Preconditions.assert_class('country', x, String)),
              :postal_prefix => (x = opts.delete(:postal_prefix); x.nil? ? nil : HttpClient::Preconditions.assert_class('postal_prefix', x, String))
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/addresses").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::Address.new(x) }
          end

          def post_verifications(address)
            (x = address; x.is_a?(::Io::Flow::V0::Models::Address) ? x : ::Io::Flow::V0::Models::Address.new(x))
            r = @client.request("/addresses/verifications").with_json(address.to_json).post
            ::Io::Flow::V0::Models::AddressVerification.new(r)
          end

        end

        class CountryDefaults

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          def get(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :country => (x = opts.delete(:country); x.nil? ? nil : HttpClient::Preconditions.assert_class('country', x, String)),
              :ip => (x = opts.delete(:ip); x.nil? ? nil : HttpClient::Preconditions.assert_class('ip', x, String))
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/geolocation/defaults").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::CountryDefaults.new(x) }
          end

          def get_by_country(country)
            HttpClient::Preconditions.assert_class('country', country, String)
            r = @client.request("/geolocation/defaults/#{CGI.escape(country)}").get
            ::Io::Flow::V0::Models::CountryDefaults.new(r)
          end

        end

        class Timezones

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          # Provides timezone based on address or geolocated IP.
          def get_geolocation_and_timezones(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :ip => (x = opts.delete(:ip); x.nil? ? nil : HttpClient::Preconditions.assert_class('ip', x, String))
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/geolocation/timezones").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::Timezone.new(x) }
          end

          # Returns a list of timezones.
          def get_reference_and_timezones(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :q => (x = opts.delete(:q); x.nil? ? nil : HttpClient::Preconditions.assert_class('q', x, String))
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/reference/timezones").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::Timezone.new(x) }
          end

        end

        class Carriers

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          # Returns a list of carriers supported by Flow.
          def get(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :q => (x = opts.delete(:q); x.nil? ? nil : HttpClient::Preconditions.assert_class('q', x, String))
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/reference/carriers").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::Carrier.new(x) }
          end

        end

        class CarrierServices

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          # Returns a list of carrier services supported by Flow.
          def get(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :q => (x = opts.delete(:q); x.nil? ? nil : HttpClient::Preconditions.assert_class('q', x, String))
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/reference/carrier/services").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::CarrierService.new(x) }
          end

        end

        class Countries

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          # Returns a list of countries.
          def get(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :q => (x = opts.delete(:q); x.nil? ? nil : HttpClient::Preconditions.assert_class('q', x, String))
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/reference/countries").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::Country.new(x) }
          end

        end

        class Currencies

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          # Returns a list of currencies.
          def get(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :q => (x = opts.delete(:q); x.nil? ? nil : HttpClient::Preconditions.assert_class('q', x, String))
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/reference/currencies").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::Currency.new(x) }
          end

        end

        class Languages

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          # Returns a list of languages.
          def get(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :q => (x = opts.delete(:q); x.nil? ? nil : HttpClient::Preconditions.assert_class('q', x, String))
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/reference/languages").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::Language.new(x) }
          end

        end

        class Locales

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          # Returns a list of locales.
          def get(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :q => (x = opts.delete(:q); x.nil? ? nil : HttpClient::Preconditions.assert_class('q', x, String))
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/reference/locales").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::Locale.new(x) }
          end

          # Returns the locale with the specifed id.
          def get_by_id(id)
            HttpClient::Preconditions.assert_class('id', id, String)
            r = @client.request("/reference/locales/#{CGI.escape(id)}").get
            ::Io::Flow::V0::Models::Locale.new(r)
          end

        end

        class PaymentMethods

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          # Returns a list of payment methods supported by Flow.
          def get(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :q => (x = opts.delete(:q); x.nil? ? nil : HttpClient::Preconditions.assert_class('q', x, String))
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/reference/payment/methods").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::PaymentMethod.new(x) }
          end

        end

        class Provinces

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          # Returns a list of provinces.
          def get(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :q => (x = opts.delete(:q); x.nil? ? nil : HttpClient::Preconditions.assert_class('q', x, String)),
              :countries => (x = opts.delete(:countries); x.nil? ? nil : HttpClient::Preconditions.assert_class('countries', x, Array).map { |v| HttpClient::Preconditions.assert_class('countries', v, String) })
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/reference/provinces").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::Province.new(x) }
          end

          # Returns the province with the specifed id.
          def get_by_id(id)
            HttpClient::Preconditions.assert_class('id', id, String)
            r = @client.request("/reference/provinces/#{CGI.escape(id)}").get
            ::Io::Flow::V0::Models::Province.new(r)
          end

        end

        class Regions

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          # Returns a list of regions.
          def get(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :q => (x = opts.delete(:q); x.nil? ? nil : HttpClient::Preconditions.assert_class('q', x, String))
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/reference/regions").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::Region.new(x) }
          end

          # Returns the region with the specifed id.
          def get_by_id(id)
            HttpClient::Preconditions.assert_class('id', id, String)
            r = @client.request("/reference/regions/#{CGI.escape(id)}").get
            ::Io::Flow::V0::Models::Region.new(r)
          end

        end

        class TaxDutyQuotes

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          # Create and return a new tax duty quote.
          def post(organization, tax_duty_quote_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            (x = tax_duty_quote_form; x.is_a?(::Io::Flow::V0::Models::TaxDutyQuoteForm) ? x : ::Io::Flow::V0::Models::TaxDutyQuoteForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/levy/quotes").with_json(tax_duty_quote_form.to_json).post
            ::Io::Flow::V0::Models::TaxDutyQuote.new(r)
          end

        end

        class AbandonedOrderPromotions

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          def get(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :name => (x = opts.delete(:name); x.nil? ? nil : HttpClient::Preconditions.assert_class('name', x, Array).map { |v| HttpClient::Preconditions.assert_class('name', v, String) }),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "name" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/marketing/abandoned/order/promotions").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::AbandonedOrderPromotion.new(x) }
          end

          def post(organization, abandoned_order_promotion_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            (x = abandoned_order_promotion_form; x.is_a?(::Io::Flow::V0::Models::AbandonedOrderPromotionForm) ? x : ::Io::Flow::V0::Models::AbandonedOrderPromotionForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/marketing/abandoned/order/promotions").with_json(abandoned_order_promotion_form.to_json).post
            ::Io::Flow::V0::Models::AbandonedOrderPromotion.new(r)
          end

          def get_by_id(organization, id)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            r = @client.request("/#{CGI.escape(organization)}/marketing/abandoned/order/promotions/#{CGI.escape(id)}").get
            ::Io::Flow::V0::Models::AbandonedOrderPromotion.new(r)
          end

          def put_by_id(organization, id, abandoned_order_promotion_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            (x = abandoned_order_promotion_form; x.is_a?(::Io::Flow::V0::Models::AbandonedOrderPromotionForm) ? x : ::Io::Flow::V0::Models::AbandonedOrderPromotionForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/marketing/abandoned/order/promotions/#{CGI.escape(id)}").with_json(abandoned_order_promotion_form.to_json).put
            ::Io::Flow::V0::Models::AbandonedOrderPromotion.new(r)
          end

          def delete_by_id(organization, id)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            r = @client.request("/#{CGI.escape(organization)}/marketing/abandoned/order/promotions/#{CGI.escape(id)}").delete
            nil
          end

        end

        class AbandonedOrderSettings

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          def get(organization)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            r = @client.request("/#{CGI.escape(organization)}/marketing/abandoned/order/settings").get
            ::Io::Flow::V0::Models::AbandonedOrderSettings.new(r)
          end

          def post(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :delay_time => HttpClient::Preconditions.assert_class('delay_time', (x = opts.delete(:delay_time); x.nil? ? 30 : x), Integer),
              :delay_unit => (x = (x = opts.delete(:delay_unit); x.nil? ? "minute" : x); x.is_a?(::Io::Flow::V0::Models::UnitOfTime) ? x : ::Io::Flow::V0::Models::UnitOfTime.apply(x)).value,
              :frequency_time => HttpClient::Preconditions.assert_class('frequency_time', (x = opts.delete(:frequency_time); x.nil? ? 24 : x), Integer),
              :frequency_unit => (x = (x = opts.delete(:frequency_unit); x.nil? ? "hour" : x); x.is_a?(::Io::Flow::V0::Models::UnitOfTime) ? x : ::Io::Flow::V0::Models::UnitOfTime.apply(x)).value,
              :status => (x = opts.delete(:status); x.is_a?(::Io::Flow::V0::Models::AbandonedOrderSettingStatus) ? x : ::Io::Flow::V0::Models::AbandonedOrderSettingStatus.apply(x)).value
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/marketing/abandoned/order/settings").with_query(query).post
            ::Io::Flow::V0::Models::AbandonedOrderSettings.new(r)
          end

          def put(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :delay_time => HttpClient::Preconditions.assert_class('delay_time', opts.delete(:delay_time), Integer),
              :delay_unit => (x = opts.delete(:delay_unit); x.is_a?(::Io::Flow::V0::Models::UnitOfTime) ? x : ::Io::Flow::V0::Models::UnitOfTime.apply(x)).value,
              :frequency_time => HttpClient::Preconditions.assert_class('frequency_time', opts.delete(:frequency_time), Integer),
              :frequency_unit => (x = opts.delete(:frequency_unit); x.is_a?(::Io::Flow::V0::Models::UnitOfTime) ? x : ::Io::Flow::V0::Models::UnitOfTime.apply(x)).value,
              :status => (x = opts.delete(:status); x.is_a?(::Io::Flow::V0::Models::AbandonedOrderSettingStatus) ? x : ::Io::Flow::V0::Models::AbandonedOrderSettingStatus.apply(x)).value
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/marketing/abandoned/order/settings").with_query(query).put
            ::Io::Flow::V0::Models::AbandonedOrderSettings.new(r)
          end

          def delete(organization)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            r = @client.request("/#{CGI.escape(organization)}/marketing/abandoned/order/settings").delete
            nil
          end

        end

        class B2bCreditMemos

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          def get(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :key => (x = opts.delete(:key); x.nil? ? nil : HttpClient::Preconditions.assert_class('key', x, String)),
              :order_number => (x = opts.delete(:order_number); x.nil? ? nil : HttpClient::Preconditions.assert_class('order_number', x, String)),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "-created_at" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/b2b/credit/memos").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::B2bCreditMemo.new(x) }
          end

        end

        class B2bInvoices

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          def get(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :key => (x = opts.delete(:key); x.nil? ? nil : HttpClient::Preconditions.assert_class('key', x, String)),
              :order_number => (x = opts.delete(:order_number); x.nil? ? nil : HttpClient::Preconditions.assert_class('order_number', x, String)),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "-created_at" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/b2b/invoices").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::B2bInvoice.new(x) }
          end

          # Creates an export of the b2b invoices
          def post_exports(organization, invoice_export_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            (x = invoice_export_form; x.is_a?(::Io::Flow::V0::Models::InvoiceExportForm) ? x : ::Io::Flow::V0::Models::InvoiceExportForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/b2b/invoices/exports").with_json(invoice_export_form.to_json).post
            ::Io::Flow::V0::Models::InvoiceExport.new(r)
          end

          def get_by_key(organization, key)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            r = @client.request("/#{CGI.escape(organization)}/b2b/invoices/#{CGI.escape(key)}").get
            ::Io::Flow::V0::Models::B2bInvoice.new(r)
          end

        end

        class CatalogPriceBookItemDocuments

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          # Returns price book item documents based on the search criteria
          def get(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :price_book_key => (x = opts.delete(:price_book_key); x.nil? ? nil : HttpClient::Preconditions.assert_class('price_book_key', x, Array).map { |v| HttpClient::Preconditions.assert_class('price_book_key', v, String) }),
              :q => (x = opts.delete(:q); x.nil? ? nil : HttpClient::Preconditions.assert_class('q', x, String)),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/search/price/books/items").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::CatalogPriceBookItemDocument.new(x) }
          end

        end

        class ChannelAuthorizations

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          def post(channel_authorization_form)
            (x = channel_authorization_form; x.is_a?(::Io::Flow::V0::Models::ChannelAuthorizationForm) ? x : ::Io::Flow::V0::Models::ChannelAuthorizationForm.new(x))
            r = @client.request("/channel/authorizations").with_json(channel_authorization_form.to_json).post
            ::Io::Flow::V0::Models::ChannelAuthorization.new(r)
          end

        end

        class ChannelOrganizations

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          # Returns the list of organizations in a channel, channel is identified by id
          def get(channel_id, incoming={})
            HttpClient::Preconditions.assert_class('channel_id', channel_id, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :key => (x = opts.delete(:key); x.nil? ? nil : HttpClient::Preconditions.assert_class('key', x, Array).map { |v| HttpClient::Preconditions.assert_class('key', v, String) }),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "name" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/channel/#{CGI.escape(channel_id)}/organizations").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::ChannelOrganization.new(x) }
          end

          def post(channel_id, channel_organization_form)
            HttpClient::Preconditions.assert_class('channel_id', channel_id, String)
            (x = channel_organization_form; x.is_a?(::Io::Flow::V0::Models::ChannelOrganizationForm) ? x : ::Io::Flow::V0::Models::ChannelOrganizationForm.new(x))
            r = @client.request("/channel/#{CGI.escape(channel_id)}/organizations").with_json(channel_organization_form.to_json).post
            ::Io::Flow::V0::Models::ChannelOrganization.new(r)
          end

          def get_by_key(channel_id, key)
            HttpClient::Preconditions.assert_class('channel_id', channel_id, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            r = @client.request("/channel/#{CGI.escape(channel_id)}/organizations/#{CGI.escape(key)}").get
            ::Io::Flow::V0::Models::ChannelOrganization.new(r)
          end

          def put_by_key(channel_id, key, channel_organization_put_form)
            HttpClient::Preconditions.assert_class('channel_id', channel_id, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            (x = channel_organization_put_form; x.is_a?(::Io::Flow::V0::Models::ChannelOrganizationPutForm) ? x : ::Io::Flow::V0::Models::ChannelOrganizationPutForm.new(x))
            r = @client.request("/channel/#{CGI.escape(channel_id)}/organizations/#{CGI.escape(key)}").with_json(channel_organization_put_form.to_json).put
            ::Io::Flow::V0::Models::ChannelOrganization.new(r)
          end

          def delete_by_key(channel_id, key)
            HttpClient::Preconditions.assert_class('channel_id', channel_id, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            r = @client.request("/channel/#{CGI.escape(channel_id)}/organizations/#{CGI.escape(key)}").delete
            nil
          end

        end

        class ChannelOrganizationAuthorizations

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          def post(channel_organization_authorization_form)
            (x = channel_organization_authorization_form; x.is_a?(::Io::Flow::V0::Models::ChannelOrganizationAuthorizationForm) ? x : ::Io::Flow::V0::Models::ChannelOrganizationAuthorizationForm.new(x))
            r = @client.request("/channel/organization/authorizations").with_json(channel_organization_authorization_form.to_json).post
            ::Io::Flow::V0::Models::ChannelOrganizationAuthorization.new(r)
          end

        end

        class ChannelRates

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          def get_all(channel_id)
            HttpClient::Preconditions.assert_class('channel_id', channel_id, String)
            r = @client.request("/channel/#{CGI.escape(channel_id)}/currency/rates/all").get
            r.map { |x| ::Io::Flow::V0::Models::Rate.new(x) }
          end

        end

        class ChannelTokens

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          def get(channel_id, incoming={})
            HttpClient::Preconditions.assert_class('channel_id', channel_id, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "-created_at" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/channel/#{CGI.escape(channel_id)}/tokens").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::ChannelToken.new(x) }
          end

          def get_by_id(channel_id, id)
            HttpClient::Preconditions.assert_class('channel_id', channel_id, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            r = @client.request("/channel/#{CGI.escape(channel_id)}/tokens/#{CGI.escape(id)}").get
            ::Io::Flow::V0::Models::ChannelToken.new(r)
          end

          def put_by_id(channel_id, id, io_flow_token_internal_v0_models_channel_token_form)
            HttpClient::Preconditions.assert_class('channel_id', channel_id, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            (x = io_flow_token_internal_v0_models_channel_token_form; x.is_a?(::Io::Flow::Token::Internal::V0::Models::ChannelTokenForm) ? x : ::Io::Flow::Token::Internal::V0::Models::ChannelTokenForm.new(x))
            r = @client.request("/channel/#{CGI.escape(channel_id)}/tokens/#{CGI.escape(id)}").with_json(io_flow_token_internal_v0_models_channel_token_form.to_json).put
            ::Io::Flow::V0::Models::ChannelToken.new(r)
          end

          def delete_by_id(channel_id, id)
            HttpClient::Preconditions.assert_class('channel_id', channel_id, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            r = @client.request("/channel/#{CGI.escape(channel_id)}/tokens/#{CGI.escape(id)}").delete
            nil
          end

        end

        class CheckoutTokens

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          def get_checkout_and_tokens_by_id(id)
            HttpClient::Preconditions.assert_class('id', id, String)
            r = @client.request("/checkout/tokens/#{CGI.escape(id)}").get
            ::Io::Flow::V0::Models::CheckoutToken.new(r)
          end

          def delete_checkout_and_tokens_by_id(id)
            HttpClient::Preconditions.assert_class('id', id, String)
            r = @client.request("/checkout/tokens/#{CGI.escape(id)}").delete
            nil
          end

          def post_checkout_and_tokens_by_organization(organization, checkout_token_form, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :context => (x = opts.delete(:context); x.nil? ? nil : HttpClient::Preconditions.assert_class('context', x, String))
            }.delete_if { |k, v| v.nil? }
            (x = checkout_token_form; x.is_a?(::Io::Flow::V0::Models::CheckoutTokenForm) ? x : ::Io::Flow::V0::Models::CheckoutTokenForm.from_json(x))
            r = @client.request("/#{CGI.escape(organization)}/checkout/tokens").with_query(query).with_json(checkout_token_form.to_json).post
            ::Io::Flow::V0::Models::CheckoutToken.new(r)
          end

        end

        class ConsumerInvoices

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          def get(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :key => (x = opts.delete(:key); x.nil? ? nil : HttpClient::Preconditions.assert_class('key', x, String)),
              :order_number => (x = opts.delete(:order_number); x.nil? ? nil : HttpClient::Preconditions.assert_class('order_number', x, String)),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "-created_at" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/consumer/invoices").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::ConsumerInvoice.new(x) }
          end

          # Creates an export of the consumer/invoices
          def post_exports(organization, invoice_export_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            (x = invoice_export_form; x.is_a?(::Io::Flow::V0::Models::InvoiceExportForm) ? x : ::Io::Flow::V0::Models::InvoiceExportForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/consumer/invoices/exports").with_json(invoice_export_form.to_json).post
            ::Io::Flow::V0::Models::InvoiceExport.new(r)
          end

          def put_order_by_number(organization, number, consumer_invoice_form_by_order)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('number', number, String)
            (x = consumer_invoice_form_by_order; x.is_a?(::Io::Flow::V0::Models::ConsumerInvoiceFormByOrder) ? x : ::Io::Flow::V0::Models::ConsumerInvoiceFormByOrder.new(x))
            r = @client.request("/#{CGI.escape(organization)}/consumer/invoices/order/#{CGI.escape(number)}").with_json(consumer_invoice_form_by_order.to_json).put
            r.map { |x| ::Io::Flow::V0::Models::ConsumerInvoice.new(x) }
          end

          # Creates a credit memo against this invoice
          def post_credit_and_memos_by_invoice_key(organization, invoice_key, credit_memo_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('invoice_key', invoice_key, String)
            (x = credit_memo_form; x.is_a?(::Io::Flow::V0::Models::CreditMemoForm) ? x : ::Io::Flow::V0::Models::CreditMemoForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/consumer/invoices/#{CGI.escape(invoice_key)}/credit/memos").with_json(credit_memo_form.to_json).post
            ::Io::Flow::V0::Models::CreditMemo.new(r)
          end

          # Upserts a credit memo against this invoice
          def put_credit_and_memos_by_invoice_key_and_key(organization, invoice_key, key, credit_memo_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('invoice_key', invoice_key, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            (x = credit_memo_form; x.is_a?(::Io::Flow::V0::Models::CreditMemoForm) ? x : ::Io::Flow::V0::Models::CreditMemoForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/consumer/invoices/#{CGI.escape(invoice_key)}/credit/memos/#{CGI.escape(key)}").with_json(credit_memo_form.to_json).put
            ::Io::Flow::V0::Models::CreditMemo.new(r)
          end

          def delete_credit_and_memos_by_invoice_key_and_key(organization, invoice_key, key)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('invoice_key', invoice_key, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            r = @client.request("/#{CGI.escape(organization)}/consumer/invoices/#{CGI.escape(invoice_key)}/credit/memos/#{CGI.escape(key)}").delete
            nil
          end

          def get_by_key(organization, key)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            r = @client.request("/#{CGI.escape(organization)}/consumer/invoices/#{CGI.escape(key)}").get
            ::Io::Flow::V0::Models::ConsumerInvoice.new(r)
          end

          def put_by_key(organization, key, consumer_invoice_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            (x = consumer_invoice_form; x.is_a?(::Io::Flow::V0::Models::ConsumerInvoiceForm) ? x : ::Io::Flow::V0::Models::ConsumerInvoiceForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/consumer/invoices/#{CGI.escape(key)}").with_json(consumer_invoice_form.to_json).put
            ::Io::Flow::V0::Models::ConsumerInvoice.new(r)
          end

          def delete_by_key(organization, key)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            r = @client.request("/#{CGI.escape(organization)}/consumer/invoices/#{CGI.escape(key)}").delete
            nil
          end

        end

        class ConsumerInvoiceDocuments

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          def get_tokens_and_type_by_token_and_type(token, type, incoming={})
            HttpClient::Preconditions.assert_class('token', token, String)
            (x = type; x.is_a?(::Io::Flow::V0::Models::ConsumerInvoiceDocumentType) ? x : ::Io::Flow::V0::Models::ConsumerInvoiceDocumentType.apply(x))
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :language => (x = opts.delete(:language); x.nil? ? nil : HttpClient::Preconditions.assert_class('language', x, String))
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/consumer/invoice/document/tokens/#{CGI.escape(token)}/type/#{type.value}").with_query(query).get
            ::Io::Flow::V0::Models::ConsumerInvoiceDocument.new(r)
          end

        end

        class CountryPickers

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          def get(organization_id)
            HttpClient::Preconditions.assert_class('organization_id', organization_id, String)
            r = @client.request("/organizations/#{CGI.escape(organization_id)}/country/picker").get
            ::Io::Flow::V0::Models::CountryPicker.new(r)
          end

          def put(organization_id, country_picker_form)
            HttpClient::Preconditions.assert_class('organization_id', organization_id, String)
            (x = country_picker_form; x.is_a?(::Io::Flow::V0::Models::CountryPickerForm) ? x : ::Io::Flow::V0::Models::CountryPickerForm.new(x))
            r = @client.request("/organizations/#{CGI.escape(organization_id)}/country/picker").with_json(country_picker_form.to_json).put
            ::Io::Flow::V0::Models::CountryPicker.new(r)
          end

        end

        class CreditMemos

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          def get(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :key => (x = opts.delete(:key); x.nil? ? nil : HttpClient::Preconditions.assert_class('key', x, String)),
              :order_number => (x = opts.delete(:order_number); x.nil? ? nil : HttpClient::Preconditions.assert_class('order_number', x, String)),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "-created_at" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/credit/memos").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::CreditMemo.new(x) }
          end

        end

        class Customers

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          # Search customers. Always paginated.
          def get(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :number => (x = opts.delete(:number); x.nil? ? nil : HttpClient::Preconditions.assert_class('number', x, Array).map { |v| HttpClient::Preconditions.assert_class('number', v, String) }),
              :email => (x = opts.delete(:email); x.nil? ? nil : HttpClient::Preconditions.assert_class('email', x, Array).map { |v| HttpClient::Preconditions.assert_class('email', v, String) }),
              :phone => (x = opts.delete(:phone); x.nil? ? nil : HttpClient::Preconditions.assert_class('phone', x, Array).map { |v| HttpClient::Preconditions.assert_class('phone', v, String) }),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "-created_at" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/customers").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::Customer.new(x) }
          end

          # Create a customer.
          def post(organization, customer_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            (x = customer_form; x.is_a?(::Io::Flow::V0::Models::CustomerForm) ? x : ::Io::Flow::V0::Models::CustomerForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/customers").with_json(customer_form.to_json).post
            ::Io::Flow::V0::Models::Customer.new(r)
          end

          # Returns information about a specific customer given a client token.
          def post_client_and_tokens(organization, customer_client_token)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            (x = customer_client_token; x.is_a?(::Io::Flow::V0::Models::CustomerClientToken) ? x : ::Io::Flow::V0::Models::CustomerClientToken.new(x))
            r = @client.request("/#{CGI.escape(organization)}/customers/client/tokens").with_json(customer_client_token.to_json).post
            ::Io::Flow::V0::Models::Customer.new(r)
          end

          # Returns information about a specific customer.
          def get_by_number(organization, number)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('number', number, String)
            r = @client.request("/#{CGI.escape(organization)}/customers/#{CGI.escape(number)}").get
            ::Io::Flow::V0::Models::Customer.new(r)
          end

          # Update or create a customer with the specified number.
          def put_by_number(organization, number, customer_put_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('number', number, String)
            (x = customer_put_form; x.is_a?(::Io::Flow::V0::Models::CustomerPutForm) ? x : ::Io::Flow::V0::Models::CustomerPutForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/customers/#{CGI.escape(number)}").with_json(customer_put_form.to_json).put
            ::Io::Flow::V0::Models::Customer.new(r)
          end

          # Delete the customer with this number.
          def delete_by_number(organization, number)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('number', number, String)
            r = @client.request("/#{CGI.escape(organization)}/customers/#{CGI.escape(number)}").delete
            nil
          end

        end

        class CustomerAddressBook

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          # Retrieve customer addrress book.
          def get(organization, number)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('number', number, String)
            r = @client.request("/#{CGI.escape(organization)}/customers/#{CGI.escape(number)}/addresses/book").get
            ::Io::Flow::V0::Models::CustomerAddressBook.new(r)
          end

        end

        class CustomerAddressBookContacts

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          # Search contacts. Always paginated.
          def get(organization, number, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('number', number, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :email => (x = opts.delete(:email); x.nil? ? nil : HttpClient::Preconditions.assert_class('email', x, Array).map { |v| HttpClient::Preconditions.assert_class('email', v, String) }),
              :phone => (x = opts.delete(:phone); x.nil? ? nil : HttpClient::Preconditions.assert_class('phone', x, Array).map { |v| HttpClient::Preconditions.assert_class('phone', v, String) }),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "-created_at" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/customers/#{CGI.escape(number)}/addresses/book/contacts").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::CustomerAddressBookContact.new(x) }
          end

          # Create a contact.
          def post(organization, number, customer_address_book_contact_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('number', number, String)
            (x = customer_address_book_contact_form; x.is_a?(::Io::Flow::V0::Models::CustomerAddressBookContactForm) ? x : ::Io::Flow::V0::Models::CustomerAddressBookContactForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/customers/#{CGI.escape(number)}/addresses/book/contacts").with_json(customer_address_book_contact_form.to_json).post
            ::Io::Flow::V0::Models::CustomerAddressBookContact.new(r)
          end

          # Returns information about a specific contact.
          def get_by_id(organization, number, id)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('number', number, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            r = @client.request("/#{CGI.escape(organization)}/customers/#{CGI.escape(number)}/addresses/book/contacts/#{CGI.escape(id)}").get
            ::Io::Flow::V0::Models::CustomerAddressBookContact.new(r)
          end

          # Update or create a contact with the specified id.
          def put_by_id(organization, number, id, customer_address_book_contact_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('number', number, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            (x = customer_address_book_contact_form; x.is_a?(::Io::Flow::V0::Models::CustomerAddressBookContactForm) ? x : ::Io::Flow::V0::Models::CustomerAddressBookContactForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/customers/#{CGI.escape(number)}/addresses/book/contacts/#{CGI.escape(id)}").with_json(customer_address_book_contact_form.to_json).put
            ::Io::Flow::V0::Models::CustomerAddressBookContact.new(r)
          end

          # Delete the contact with this id.
          def delete_by_id(organization, number, id)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('number', number, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            r = @client.request("/#{CGI.escape(organization)}/customers/#{CGI.escape(number)}/addresses/book/contacts/#{CGI.escape(id)}").delete
            nil
          end

        end

        class CustomerBundles

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          # Returns information about a specific customer.
          def get_bundle_by_number(organization, number)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('number', number, String)
            r = @client.request("/#{CGI.escape(organization)}/customers/#{CGI.escape(number)}/bundle").get
            ::Io::Flow::V0::Models::CustomerBundle.new(r)
          end

        end

        class CustomerPurgeSettings

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          def get(organization)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            r = @client.request("/#{CGI.escape(organization)}/customer/purge/settings").get
            ::Io::Flow::V0::Models::CustomerPurgeSettings.new(r)
          end

          def put(organization, customer_purge_settings_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            (x = customer_purge_settings_form; x.is_a?(::Io::Flow::V0::Models::CustomerPurgeSettingsForm) ? x : ::Io::Flow::V0::Models::CustomerPurgeSettingsForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/customer/purge/settings").with_json(customer_purge_settings_form.to_json).put
            ::Io::Flow::V0::Models::CustomerPurgeSettings.new(r)
          end

          def delete(organization)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            r = @client.request("/#{CGI.escape(organization)}/customer/purge/settings").delete
            nil
          end

        end

        class CustomerTokens

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          # Search tokens.
          def get(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :token => (x = opts.delete(:token); x.nil? ? nil : HttpClient::Preconditions.assert_class('token', x, String)),
              :customer_number => (x = opts.delete(:customer_number); x.nil? ? nil : HttpClient::Preconditions.assert_class('customer_number', x, String)),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "-created_at" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/customer/tokens").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::CustomerToken.new(x) }
          end

          # If there exists at least one token for this customer number, returns the
          # latest. Otherwise creates a new token and returns that
          def post_latest_by_customer_number(organization, customer_number)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('customer_number', customer_number, String)
            r = @client.request("/#{CGI.escape(organization)}/customer/tokens/latest/#{CGI.escape(customer_number)}").post
            ::Io::Flow::V0::Models::CustomerToken.new(r)
          end

          # Delete the token for this id.
          def delete_by_id(organization, id)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            r = @client.request("/#{CGI.escape(organization)}/customer/tokens/#{CGI.escape(id)}").delete
            nil
          end

          # Returns a token if it exists.
          def get_by_token(organization, token)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('token', token, String)
            r = @client.request("/#{CGI.escape(organization)}/customer/tokens/#{CGI.escape(token)}").get
            ::Io::Flow::V0::Models::CustomerToken.new(r)
          end

        end

        class Documents

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          # Returns items based on search criteria
          def get_catalog(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :q => (x = opts.delete(:q); x.nil? ? nil : HttpClient::Preconditions.assert_class('q', x, String)),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "name" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/search/catalog").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::CatalogItemDocument.new(x) }
          end

          # Returns harmonization information based on search criteria
          def get_harmonization(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :q => (x = opts.delete(:q); x.nil? ? nil : HttpClient::Preconditions.assert_class('q', x, String)),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "-created_at" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/search/harmonization").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::HarmonizationDocument.new(x) }
          end

        end

        class DutyItems

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          # Retrieve duty items.
          def get(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :number => (x = opts.delete(:number); x.nil? ? nil : HttpClient::Preconditions.assert_class('number', x, Array).map { |v| HttpClient::Preconditions.assert_class('number', v, String) }),
              :product_id => (x = opts.delete(:product_id); x.nil? ? nil : HttpClient::Preconditions.assert_class('product_id', x, Array).map { |v| HttpClient::Preconditions.assert_class('product_id', v, String) }),
              :sku => (x = opts.delete(:sku); x.nil? ? nil : HttpClient::Preconditions.assert_class('sku', x, Array).map { |v| HttpClient::Preconditions.assert_class('sku', v, String) }),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "-created_at" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/duty/items").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::DutyItem.new(x) }
          end

          # Add a duty item.
          def post(organization, duty_item_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            (x = duty_item_form; x.is_a?(::Io::Flow::V0::Models::DutyItemForm) ? x : ::Io::Flow::V0::Models::DutyItemForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/duty/items").with_json(duty_item_form.to_json).post
            ::Io::Flow::V0::Models::DutyItem.new(r)
          end

          # Retrieve a duty item.
          def get_by_number(organization, number)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('number', number, String)
            r = @client.request("/#{CGI.escape(organization)}/duty/items/#{CGI.escape(number)}").get
            ::Io::Flow::V0::Models::DutyItem.new(r)
          end

          def put_by_number(organization, number, duty_item_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('number', number, String)
            (x = duty_item_form; x.is_a?(::Io::Flow::V0::Models::DutyItemForm) ? x : ::Io::Flow::V0::Models::DutyItemForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/duty/items/#{CGI.escape(number)}").with_json(duty_item_form.to_json).put
            ::Io::Flow::V0::Models::DutyItem.new(r)
          end

          def delete_by_number(organization, number)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('number', number, String)
            r = @client.request("/#{CGI.escape(organization)}/duty/items/#{CGI.escape(number)}").delete
            nil
          end

        end

        class DutyItemApprovals

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          def put_by_number(organization, number, duty_item_approval_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('number', number, String)
            (x = duty_item_approval_form; x.is_a?(::Io::Flow::V0::Models::DutyItemApprovalForm) ? x : ::Io::Flow::V0::Models::DutyItemApprovalForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/duty/item/approval/#{CGI.escape(number)}").with_json(duty_item_approval_form.to_json).put
            ::Io::Flow::V0::Models::DutyItem.new(r)
          end

        end

        class DutyItemProducers

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          # Retrieve duty item producers.
          def get(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :key => (x = opts.delete(:key); x.nil? ? nil : HttpClient::Preconditions.assert_class('key', x, String)),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "name" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/duty/item/producers").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::DutyItemProducer.new(x) }
          end

          # Add a duty item producer.
          def post(organization, duty_item_producer)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            (x = duty_item_producer; x.is_a?(::Io::Flow::V0::Models::DutyItemProducer) ? x : ::Io::Flow::V0::Models::DutyItemProducer.new(x))
            r = @client.request("/#{CGI.escape(organization)}/duty/item/producers").with_json(duty_item_producer.to_json).post
            ::Io::Flow::V0::Models::DutyItemProducer.new(r)
          end

          # Retrieve a duty item producer.
          def get_by_key(organization, key)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            r = @client.request("/#{CGI.escape(organization)}/duty/item/producers/#{CGI.escape(key)}").get
            ::Io::Flow::V0::Models::DutyItemProducer.new(r)
          end

          def put_by_key(organization, key, duty_item_producer)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            (x = duty_item_producer; x.is_a?(::Io::Flow::V0::Models::DutyItemProducer) ? x : ::Io::Flow::V0::Models::DutyItemProducer.new(x))
            r = @client.request("/#{CGI.escape(organization)}/duty/item/producers/#{CGI.escape(key)}").with_json(duty_item_producer.to_json).put
            ::Io::Flow::V0::Models::DutyItemProducer.new(r)
          end

          def delete_by_key(organization, key)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            r = @client.request("/#{CGI.escape(organization)}/duty/item/producers/#{CGI.escape(key)}").delete
            nil
          end

        end

        class EcommercePlatforms

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          def get(organization_id)
            HttpClient::Preconditions.assert_class('organization_id', organization_id, String)
            r = @client.request("/organizations/#{CGI.escape(organization_id)}/ecommerce/platform").get
            ::Io::Flow::V0::Models::EcommercePlatform.new(r)
          end

          def put(organization_id, ecommerce_platform_form)
            HttpClient::Preconditions.assert_class('organization_id', organization_id, String)
            (x = ecommerce_platform_form; x.is_a?(::Io::Flow::V0::Models::EcommercePlatformForm) ? x : ::Io::Flow::V0::Models::EcommercePlatformForm.new(x))
            r = @client.request("/organizations/#{CGI.escape(organization_id)}/ecommerce/platform").with_json(ecommerce_platform_form.to_json).put
            ::Io::Flow::V0::Models::EcommercePlatform.new(r)
          end

        end

        class EmailVerifications

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          def post_by_token(token)
            HttpClient::Preconditions.assert_class('token', token, String)
            r = @client.request("/users/emails/verifications/#{CGI.escape(token)}").post
            ::Io::Flow::V0::Models::EmailVerification.new(r)
          end

        end

        class ExclusionRules

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          # Returns a list of exclusions rules.
          def get(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "-created_at" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/exclusion/rules").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::ExclusionRule.new(x) }
          end

          def post(organization, exclusion_rule_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            (x = exclusion_rule_form; x.is_a?(::Io::Flow::V0::Models::ExclusionRuleForm) ? x : ::Io::Flow::V0::Models::ExclusionRuleForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/exclusion/rules").with_json(exclusion_rule_form.to_json).post
            ::Io::Flow::V0::Models::ExclusionRule.new(r)
          end

          def get_versions(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :exclusion_rule_id => (x = opts.delete(:exclusion_rule_id); x.nil? ? nil : HttpClient::Preconditions.assert_class('exclusion_rule_id', x, Array).map { |v| HttpClient::Preconditions.assert_class('exclusion_rule_id', v, String) }),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "journal_timestamp" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/exclusion/rules/versions").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::ExclusionRuleVersion.new(x) }
          end

          # Updates the specified exclusion rule.
          def put_by_id(organization, id, exclusion_rule_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            (x = exclusion_rule_form; x.is_a?(::Io::Flow::V0::Models::ExclusionRuleForm) ? x : ::Io::Flow::V0::Models::ExclusionRuleForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/exclusion/rules/#{CGI.escape(id)}").with_json(exclusion_rule_form.to_json).put
            ::Io::Flow::V0::Models::ExclusionRule.new(r)
          end

          # Marks the exclusion rule deleted. Once updated, the rule itself will be
          # deleted.
          def put_deletion_by_id(organization, id)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            r = @client.request("/#{CGI.escape(organization)}/exclusion/rules/#{CGI.escape(id)}/deletion").put
            ::Io::Flow::V0::Models::ExclusionRule.new(r)
          end

        end

        class Exports

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          # Search exports. Always paginated.
          def get(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :created_by_user_id => (x = opts.delete(:created_by_user_id); x.nil? ? nil : HttpClient::Preconditions.assert_class('created_by_user_id', x, String)),
              :discriminator => (x = opts.delete(:discriminator); x.nil? ? nil : HttpClient::Preconditions.assert_class('discriminator', x, String)),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "-created_at" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/exports").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::Export.new(x) }
          end

          # Create an export.
          def post(organization, export_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            (x = export_form; x.is_a?(::Io::Flow::V0::Models::ExportForm) ? x : ::Io::Flow::V0::Models::ExportForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/exports").with_json(export_form.to_json).post
            ::Io::Flow::V0::Models::Export.new(r)
          end

          # Provides visibility into recent changes of each export, including deletion.
          def get_versions(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :export_id => (x = opts.delete(:export_id); x.nil? ? nil : HttpClient::Preconditions.assert_class('export_id', x, Array).map { |v| HttpClient::Preconditions.assert_class('export_id', v, String) }),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "journal_timestamp" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/exports/versions").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::ExportVersion.new(x) }
          end

          # Get a single export.
          def get_by_id(organization, id)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            r = @client.request("/#{CGI.escape(organization)}/exports/#{CGI.escape(id)}").get
            ::Io::Flow::V0::Models::Export.new(r)
          end

          def delete_by_id(organization, id)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            r = @client.request("/#{CGI.escape(organization)}/exports/#{CGI.escape(id)}").delete
            nil
          end

        end

        class FlowRoles

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          # List roles in use by this organization.
          def get_organization_and_roles_by_organization(organization)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            r = @client.request("/permission/organization/#{CGI.escape(organization)}/roles").get
            r.map { |x| ::Io::Flow::V0::Models::FlowRole.new(x) }
          end

        end

        class FraudEmailRules

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          # Retrieve fraud review email rules. Always paginated.
          def get(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :decision => (x = opts.delete(:decision); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::FraudEmailRuleDecision) ? x : ::Io::Flow::V0::Models::FraudEmailRuleDecision.apply(x)).value),
              :email => (x = opts.delete(:email); x.nil? ? nil : HttpClient::Preconditions.assert_class('email', x, String)),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "decision" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/fraud/email/rules").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::FraudEmailRule.new(x) }
          end

          # Add an email decision rule.
          def post(organization, fraud_email_rule_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            (x = fraud_email_rule_form; x.is_a?(::Io::Flow::V0::Models::FraudEmailRuleForm) ? x : ::Io::Flow::V0::Models::FraudEmailRuleForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/fraud/email/rules").with_json(fraud_email_rule_form.to_json).post
            ::Io::Flow::V0::Models::FraudEmailRule.new(r)
          end

          # Remove an email decision rule.
          def delete_by_id(organization, id)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            r = @client.request("/#{CGI.escape(organization)}/fraud/email/rules/#{CGI.escape(id)}").delete
            nil
          end

        end

        class FtpFiles

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          def get(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :name => (x = opts.delete(:name); x.nil? ? nil : HttpClient::Preconditions.assert_class('name', x, String)),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "name" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/ftp/files").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::FtpFile.new(x) }
          end

          def post(organization, ftp_file_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            (x = ftp_file_form; x.is_a?(::Io::Flow::V0::Models::FtpFileForm) ? x : ::Io::Flow::V0::Models::FtpFileForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/ftp/files").with_json(ftp_file_form.to_json).post
            ::Io::Flow::V0::Models::FtpFile.new(r)
          end

          def get_by_id(organization, id)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            r = @client.request("/#{CGI.escape(organization)}/ftp/files/#{CGI.escape(id)}").get
            ::Io::Flow::V0::Models::FtpFile.new(r)
          end

          def delete_by_id(organization, id)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            r = @client.request("/#{CGI.escape(organization)}/ftp/files/#{CGI.escape(id)}").delete
            nil
          end

        end

        class FtpFolders

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          def get(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :path => (x = opts.delete(:path); x.nil? ? nil : HttpClient::Preconditions.assert_class('path', x, String)),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "-created_at" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/ftp/folders").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::FtpFolder.new(x) }
          end

          def post(organization, ftp_folder_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            (x = ftp_folder_form; x.is_a?(::Io::Flow::V0::Models::FtpFolderForm) ? x : ::Io::Flow::V0::Models::FtpFolderForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/ftp/folders").with_json(ftp_folder_form.to_json).post
            ::Io::Flow::V0::Models::FtpFolder.new(r)
          end

          def get_by_id(organization, id)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            r = @client.request("/#{CGI.escape(organization)}/ftp/folders/#{CGI.escape(id)}").get
            ::Io::Flow::V0::Models::FtpFolder.new(r)
          end

          def delete_by_id(organization, id)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            r = @client.request("/#{CGI.escape(organization)}/ftp/folders/#{CGI.escape(id)}").delete
            nil
          end

        end

        class FtpOrganizationSettings

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          def get(organization)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            r = @client.request("/#{CGI.escape(organization)}/ftp/settings").get
            ::Io::Flow::V0::Models::FtpOrganizationSettings.new(r)
          end

          def put(organization, ftp_organization_settings_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            (x = ftp_organization_settings_form; x.is_a?(::Io::Flow::V0::Models::FtpOrganizationSettingsForm) ? x : ::Io::Flow::V0::Models::FtpOrganizationSettingsForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/ftp/settings").with_json(ftp_organization_settings_form.to_json).put
            ::Io::Flow::V0::Models::FtpOrganizationSettings.new(r)
          end

          def delete(organization)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            r = @client.request("/#{CGI.escape(organization)}/ftp/settings").delete
            nil
          end

        end

        class Fulfillments

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          def get(organization, number)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('number', number, String)
            r = @client.request("/#{CGI.escape(organization)}/orders/#{CGI.escape(number)}/fulfillments").get
            r.map { |x| ::Io::Flow::V0::Models::Fulfillment.new(x) }
          end

          def put_cancellations(organization, number, fulfillment_cancellation_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('number', number, String)
            (x = fulfillment_cancellation_form; x.is_a?(::Io::Flow::V0::Models::FulfillmentCancellationForm) ? x : ::Io::Flow::V0::Models::FulfillmentCancellationForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/orders/#{CGI.escape(number)}/fulfillments/cancellations").with_json(fulfillment_cancellation_form.to_json).put
            ::Io::Flow::V0::Models::Fulfillment.new(r)
          end

          def put_complete_and_cancellations(organization, number, fulfillment_complete_cancellation_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('number', number, String)
            (x = fulfillment_complete_cancellation_form; x.is_a?(::Io::Flow::V0::Models::FulfillmentCompleteCancellationForm) ? x : ::Io::Flow::V0::Models::FulfillmentCompleteCancellationForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/orders/#{CGI.escape(number)}/fulfillments/complete/cancellations").with_json(fulfillment_complete_cancellation_form.to_json).put
            ::Io::Flow::V0::Models::Fulfillment.new(r)
          end

        end

        class Healthchecks

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          def get_healthcheck
            r = @client.request("/_internal_/healthcheck").get
            ::Io::Flow::V0::Models::Healthcheck.new(r)
          end

        end

        class Imports

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          # Search imports. Always paginated.
          def get(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :created_by_user_id => (x = opts.delete(:created_by_user_id); x.nil? ? nil : HttpClient::Preconditions.assert_class('created_by_user_id', x, String)),
              :type => (x = opts.delete(:type); x.nil? ? nil : HttpClient::Preconditions.assert_class('type', x, String)),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "-created_at" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/imports").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::Import.new(x) }
          end

          # Create an import.
          def post(organization, import_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            (x = import_form; x.is_a?(::Io::Flow::V0::Models::ImportForm) ? x : ::Io::Flow::V0::Models::ImportForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/imports").with_json(import_form.to_json).post
            ::Io::Flow::V0::Models::Import.new(r)
          end

          # Provides visibility into recent changes of each import, including deletion.
          def get_versions(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :import_id => (x = opts.delete(:import_id); x.nil? ? nil : HttpClient::Preconditions.assert_class('import_id', x, Array).map { |v| HttpClient::Preconditions.assert_class('import_id', v, String) }),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "journal_timestamp" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/imports/versions").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::ImportVersion.new(x) }
          end

          # Get a single import.
          def get_by_id(organization, id)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            r = @client.request("/#{CGI.escape(organization)}/imports/#{CGI.escape(id)}").get
            ::Io::Flow::V0::Models::Import.new(r)
          end

          def delete_by_id(organization, id)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            r = @client.request("/#{CGI.escape(organization)}/imports/#{CGI.escape(id)}").delete
            nil
          end

        end

        class ImportTemplates

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          def get(organization)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            r = @client.request("/#{CGI.escape(organization)}/import/templates").get
            r.map { |x| ::Io::Flow::V0::Models::ImportTemplate.new(x) }
          end

          def post(organization, import_template_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            (x = import_template_form; x.is_a?(::Io::Flow::V0::Models::ImportTemplateForm) ? x : ::Io::Flow::V0::Models::ImportTemplateForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/import/templates").with_json(import_template_form.to_json).post
            ::Io::Flow::V0::Models::ImportTemplateExample.new(r)
          end

        end

        class Invitations

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          # Search invitations. Always paginated.
          def get(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :organization => (x = opts.delete(:organization); x.nil? ? nil : HttpClient::Preconditions.assert_class('organization', x, String)),
              :email => (x = opts.delete(:email); x.nil? ? nil : HttpClient::Preconditions.assert_class('email', x, String)),
              :token => (x = opts.delete(:token); x.nil? ? nil : HttpClient::Preconditions.assert_class('token', x, String)),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "-created_at" : x), String),
              :expand => (x = opts.delete(:expand); x.nil? ? nil : HttpClient::Preconditions.assert_class('expand', x, Array).map { |v| HttpClient::Preconditions.assert_class('expand', v, String) })
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/invitations").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::Invitation.new(x) }
          end

          # Create a new invitation.
          def post(invitation_form)
            (x = invitation_form; x.is_a?(::Io::Flow::V0::Models::InvitationForm) ? x : ::Io::Flow::V0::Models::InvitationForm.new(x))
            r = @client.request("/invitations").with_json(invitation_form.to_json).post
            ::Io::Flow::V0::Models::Invitation.new(r)
          end

          # Lookup an invitation by its token.
          def get_tokens_by_token(token, incoming={})
            HttpClient::Preconditions.assert_class('token', token, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :expand => (x = opts.delete(:expand); x.nil? ? nil : HttpClient::Preconditions.assert_class('expand', x, Array).map { |v| HttpClient::Preconditions.assert_class('expand', v, String) })
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/invitations/tokens/#{CGI.escape(token)}").with_query(query).get
            ::Io::Flow::V0::Models::Invitation.new(r)
          end

          # Accepts the invitation w/ the specified token and the authenticated user.
          # Creating a membership record for this user within this organization.
          # Invitations are one time use only - you will get a validation error if the
          # invitation has previously been accepted or if the user's email addresses do
          # not match the email on the invite.
          def put_tokens_by_token(token)
            HttpClient::Preconditions.assert_class('token', token, String)
            r = @client.request("/invitations/tokens/#{CGI.escape(token)}").put
            ::Io::Flow::V0::Models::Membership.new(r)
          end

          def get_versions(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :invitation => (x = opts.delete(:invitation); x.nil? ? nil : HttpClient::Preconditions.assert_class('invitation', x, Array).map { |v| HttpClient::Preconditions.assert_class('invitation', v, String) }),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "journal_timestamp" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/invitations/versions").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::InvitationVersion.new(x) }
          end

          # Returns information about a specific invitation.
          def get_by_id(id, incoming={})
            HttpClient::Preconditions.assert_class('id', id, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :expand => (x = opts.delete(:expand); x.nil? ? nil : HttpClient::Preconditions.assert_class('expand', x, Array).map { |v| HttpClient::Preconditions.assert_class('expand', v, String) })
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/invitations/#{CGI.escape(id)}").with_query(query).get
            ::Io::Flow::V0::Models::Invitation.new(r)
          end

          def delete_by_id(id)
            HttpClient::Preconditions.assert_class('id', id, String)
            r = @client.request("/invitations/#{CGI.escape(id)}").delete
            nil
          end

        end

        class PriceRules

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          def get(organization, code)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('code', code, String)
            r = @client.request("/#{CGI.escape(organization)}/shopify/price/rules/discount/#{CGI.escape(code)}").get
            ::Io::Flow::Shopify::External::V0::Models::PriceRule.new(r)
          end

        end

        class ItemQuerySuggestions

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          # Returns search suggestions for catalog items
          def get(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :q => (x = opts.delete(:q); x.nil? ? nil : HttpClient::Preconditions.assert_class('q', x, String)),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/search/item/query/suggestions").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::ItemQuerySuggestion.new(x) }
          end

        end

        class Links

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          def get(carrier, organization, order_number)
            HttpClient::Preconditions.assert_class('carrier', carrier, String)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('order_number', order_number, String)
            r = @client.request("/carrier/#{CGI.escape(carrier)}/data/#{CGI.escape(organization)}/#{CGI.escape(order_number)}").get
            r
          end

        end

        class Memberships

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          # Search memberships. Always paginated.
          def get(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :user => (x = opts.delete(:user); x.nil? ? nil : HttpClient::Preconditions.assert_class('user', x, String)),
              :organization => (x = opts.delete(:organization); x.nil? ? nil : HttpClient::Preconditions.assert_class('organization', x, String)),
              :role => (x = opts.delete(:role); x.nil? ? nil : HttpClient::Preconditions.assert_class('role', x, Array).map { |v| HttpClient::Preconditions.assert_class('role', v, String) }),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "-created_at" : x), String),
              :expand => (x = opts.delete(:expand); x.nil? ? nil : HttpClient::Preconditions.assert_class('expand', x, Array).map { |v| HttpClient::Preconditions.assert_class('expand', v, String) })
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/memberships").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::Membership.new(x) }
          end

          # Create a new membership.
          def post(membership_form)
            (x = membership_form; x.is_a?(::Io::Flow::V0::Models::MembershipForm) ? x : ::Io::Flow::V0::Models::MembershipForm.new(x))
            r = @client.request("/memberships").with_json(membership_form.to_json).post
            ::Io::Flow::V0::Models::Membership.new(r)
          end

          def get_versions(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :membership => (x = opts.delete(:membership); x.nil? ? nil : HttpClient::Preconditions.assert_class('membership', x, Array).map { |v| HttpClient::Preconditions.assert_class('membership', v, String) }),
              :user => (x = opts.delete(:user); x.nil? ? nil : HttpClient::Preconditions.assert_class('user', x, String)),
              :organization => (x = opts.delete(:organization); x.nil? ? nil : HttpClient::Preconditions.assert_class('organization', x, String)),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "journal_timestamp" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/memberships/versions").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::MembershipVersion.new(x) }
          end

          # Returns information about a specific membership.
          def get_by_id(id, incoming={})
            HttpClient::Preconditions.assert_class('id', id, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :expand => (x = opts.delete(:expand); x.nil? ? nil : HttpClient::Preconditions.assert_class('expand', x, Array).map { |v| HttpClient::Preconditions.assert_class('expand', v, String) })
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/memberships/#{CGI.escape(id)}").with_query(query).get
            ::Io::Flow::V0::Models::Membership.new(r)
          end

          # Change the role for a specific membership record. If the user already has
          # the specified role within the organization, does nothing.
          def put_by_id(id, membership_put_form)
            HttpClient::Preconditions.assert_class('id', id, String)
            (x = membership_put_form; x.is_a?(::Io::Flow::V0::Models::MembershipPutForm) ? x : ::Io::Flow::V0::Models::MembershipPutForm.new(x))
            r = @client.request("/memberships/#{CGI.escape(id)}").with_json(membership_put_form.to_json).put
            ::Io::Flow::V0::Models::Membership.new(r)
          end

          def delete_by_id(id)
            HttpClient::Preconditions.assert_class('id', id, String)
            r = @client.request("/memberships/#{CGI.escape(id)}").delete
            nil
          end

        end

        class MerchantGiftCardBalances

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          # Check the remaining balance on a gift card
          def post(merchant_gift_card_balance_form)
            (x = merchant_gift_card_balance_form; x.is_a?(::Io::Flow::V0::Models::MerchantGiftCardBalanceForm) ? x : ::Io::Flow::V0::Models::MerchantGiftCardBalanceForm.new(x))
            r = @client.request("/balance").with_json(merchant_gift_card_balance_form.to_json).post
            ::Io::Flow::V0::Models::MerchantGiftCardBalance.new(r)
          end

        end

        class MerchantGiftCardRedemptions

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          # Redeems a gift card
          def post(merchant_gift_card_redemption_form)
            (x = merchant_gift_card_redemption_form; x.is_a?(::Io::Flow::V0::Models::MerchantGiftCardRedemptionForm) ? x : ::Io::Flow::V0::Models::MerchantGiftCardRedemptionForm.new(x))
            r = @client.request("/redeem").with_json(merchant_gift_card_redemption_form.to_json).post
            ::Io::Flow::V0::Models::MerchantGiftCardBalance.new(r)
          end

        end

        class MerchantGiftCardReversals

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          # Check the remaining balance on a gift card
          def post(merchant_gift_card_reversal_form)
            (x = merchant_gift_card_reversal_form; x.is_a?(::Io::Flow::V0::Models::MerchantGiftCardReversalForm) ? x : ::Io::Flow::V0::Models::MerchantGiftCardReversalForm.new(x))
            r = @client.request("/reverse").with_json(merchant_gift_card_reversal_form.to_json).post
            ::Io::Flow::V0::Models::MerchantGiftCardBalance.new(r)
          end

        end

        class OrderQuotes

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          def post(organization, order_quote_put_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            (x = order_quote_put_form; x.is_a?(::Io::Flow::V0::Models::OrderQuotePutForm) ? x : ::Io::Flow::V0::Models::OrderQuotePutForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/order/quotes").with_json(order_quote_put_form.to_json).post
            ::Io::Flow::V0::Models::OrderQuote.new(r)
          end

          def get_by_id(organization, id)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            r = @client.request("/#{CGI.escape(organization)}/order/quotes/#{CGI.escape(id)}").get
            ::Io::Flow::V0::Models::OrderQuote.new(r)
          end

          def put_by_id(organization, id, order_quote_put_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            (x = order_quote_put_form; x.is_a?(::Io::Flow::V0::Models::OrderQuotePutForm) ? x : ::Io::Flow::V0::Models::OrderQuotePutForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/order/quotes/#{CGI.escape(id)}").with_json(order_quote_put_form.to_json).put
            ::Io::Flow::V0::Models::OrderQuote.new(r)
          end

        end

        class OrganizationAuthorizations

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          # For the authorized user, if the specified organization exists, and the user
          # is an active member of this organization, returns the authorization data
          # used throughout APIs at Flow, including the user's role in that organization
          # and the organization environment. Otherwise, returns 401 - this indicates
          # either the org does not exist or the user does not have access to the org.
          def post(organization_authorization_form)
            (x = organization_authorization_form; x.is_a?(::Io::Flow::V0::Models::OrganizationAuthorizationForm) ? x : ::Io::Flow::V0::Models::OrganizationAuthorizationForm.new(x))
            r = @client.request("/organization-authorizations").with_json(organization_authorization_form.to_json).post
            ::Io::Flow::V0::Models::OrganizationAuthorization.new(r)
          end

          # For the authorized user and specific organization, if the user is an active
          # member of this organization, returns the authorization data used throughout
          # APIs at Flow, including the user's role in that organization and the
          # organization environment.
          def get_by_organization(organization)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            r = @client.request("/organization-authorizations/#{CGI.escape(organization)}").get
            ::Io::Flow::V0::Models::OrganizationAuthorization.new(r)
          end

        end

        class OrganizationDefaultConfigurations

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          def get(organization_id)
            HttpClient::Preconditions.assert_class('organization_id', organization_id, String)
            r = @client.request("/#{CGI.escape(organization_id)}/default/configurations").get
            ::Io::Flow::V0::Models::OrganizationDefaultConfigurations.new(r)
          end

          # Update the default checkout configuration id for this organization
          def put_checkout(organization_id, organization_default_configurations_form)
            HttpClient::Preconditions.assert_class('organization_id', organization_id, String)
            (x = organization_default_configurations_form; x.is_a?(::Io::Flow::V0::Models::OrganizationDefaultConfigurationsForm) ? x : ::Io::Flow::V0::Models::OrganizationDefaultConfigurationsForm.new(x))
            r = @client.request("/#{CGI.escape(organization_id)}/default/configurations/checkout").with_json(organization_default_configurations_form.to_json).put
            ::Io::Flow::V0::Models::OrganizationDefaultConfigurations.new(r)
          end

        end

        class OrganizationTokens

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          # Get all tokens for the specified organization
          def get(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :mine => (x = opts.delete(:mine); x.nil? ? nil : HttpClient::Preconditions.assert_boolean('mine', x)),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "-created_at" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/tokens").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::OrganizationToken.new(x) }
          end

          # Create a new organization
          def post(organization, organization_token_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            (x = organization_token_form; x.is_a?(::Io::Flow::V0::Models::OrganizationTokenForm) ? x : ::Io::Flow::V0::Models::OrganizationTokenForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/tokens").with_json(organization_token_form.to_json).post
            ::Io::Flow::V0::Models::OrganizationToken.new(r)
          end

        end

        class OrganizationTokenV2

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          # Creates an organization token
          def post(organization_token_form_v2)
            (x = organization_token_form_v2; x.is_a?(::Io::Flow::V0::Models::OrganizationTokenFormV2) ? x : ::Io::Flow::V0::Models::OrganizationTokenFormV2.new(x))
            r = @client.request("/tokens/channel/organization").with_json(organization_token_form_v2.to_json).post
            ::Io::Flow::V0::Models::OrganizationTokenV2.new(r)
          end

        end

        class PartnerTokens

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          # Get all tokens for the specified partner
          def get(partner, incoming={})
            HttpClient::Preconditions.assert_class('partner', partner, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :mine => (x = opts.delete(:mine); x.nil? ? nil : HttpClient::Preconditions.assert_boolean('mine', x)),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "-created_at" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/partners/#{CGI.escape(partner)}/tokens").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::PartnerToken.new(x) }
          end

          # Create a new partner
          def post(partner, partner_token_form)
            HttpClient::Preconditions.assert_class('partner', partner, String)
            (x = partner_token_form; x.is_a?(::Io::Flow::V0::Models::PartnerTokenForm) ? x : ::Io::Flow::V0::Models::PartnerTokenForm.new(x))
            r = @client.request("/partners/#{CGI.escape(partner)}/tokens").with_json(partner_token_form.to_json).post
            ::Io::Flow::V0::Models::PartnerToken.new(r)
          end

        end

        class PasswordResetForms

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          def post(password_reset_form, incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :expand => (x = opts.delete(:expand); x.nil? ? nil : HttpClient::Preconditions.assert_class('expand', x, Array).map { |v| HttpClient::Preconditions.assert_class('expand', v, String) })
            }.delete_if { |k, v| v.nil? }
            (x = password_reset_form; x.is_a?(::Io::Flow::V0::Models::PasswordResetForm) ? x : ::Io::Flow::V0::Models::PasswordResetForm.new(x))
            r = @client.request("/users/passwords").with_query(query).with_json(password_reset_form.to_json).post
            ::Io::Flow::V0::Models::ExpandableUser.from_json(r)
          end

          def post_resets(password_reset_request_form)
            (x = password_reset_request_form; x.is_a?(::Io::Flow::V0::Models::PasswordResetRequestForm) ? x : ::Io::Flow::V0::Models::PasswordResetRequestForm.new(x))
            r = @client.request("/users/passwords/resets").with_json(password_reset_request_form.to_json).post
            nil
          end

        end

        class PaymentPaymentMethods

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          # Returns available payment methods.
          def get(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :currency => (x = opts.delete(:currency); x.nil? ? nil : HttpClient::Preconditions.assert_class('currency', x, String)),
              :country => (x = opts.delete(:country); x.nil? ? nil : HttpClient::Preconditions.assert_class('country', x, String)),
              :merchant_of_record => (x = opts.delete(:merchant_of_record); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::MerchantOfRecord) ? x : ::Io::Flow::V0::Models::MerchantOfRecord.apply(x)).value)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/payment/methods").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::PaymentPaymentMethod.new(x) }
          end

        end

        class PaymentRequests

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          # Creates a new payment
          def post(organization, payment_request_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            (x = payment_request_form; x.is_a?(::Io::Flow::V0::Models::PaymentRequestForm) ? x : ::Io::Flow::V0::Models::PaymentRequestForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/payment/requests").with_json(payment_request_form.to_json).post
            ::Io::Flow::V0::Models::PaymentRequest.new(r)
          end

          # Returns information about a specific payment request
          def get_by_id(organization, id)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            r = @client.request("/#{CGI.escape(organization)}/payment/requests/#{CGI.escape(id)}").get
            ::Io::Flow::V0::Models::PaymentRequest.new(r)
          end

          # Updates payment request, i.e. by adding authorization data or a new payment
          # method
          def put_by_id(organization, id, payment_request_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            (x = payment_request_form; x.is_a?(::Io::Flow::V0::Models::PaymentRequestForm) ? x : ::Io::Flow::V0::Models::PaymentRequestForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/payment/requests/#{CGI.escape(id)}").with_json(payment_request_form.to_json).put
            ::Io::Flow::V0::Models::PaymentRequest.new(r)
          end

          # Captures payment
          def post_capture_by_id(organization, id, payment_capture_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            (x = payment_capture_form; x.is_a?(::Io::Flow::V0::Models::PaymentCaptureForm) ? x : ::Io::Flow::V0::Models::PaymentCaptureForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/payment/requests/#{CGI.escape(id)}/capture").with_json(payment_capture_form.to_json).post
            ::Io::Flow::V0::Models::PaymentRequest.new(r)
          end

          # Update the payment method data to progress the payment through relevant
          # actions
          def post_payment_and_method_and_data_by_id(organization, id, payment_method_data)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            (x = payment_method_data; x.is_a?(::Io::Flow::V0::Models::PaymentMethodData) ? x : ::Io::Flow::V0::Models::PaymentMethodData.from_json(x))
            r = @client.request("/#{CGI.escape(organization)}/payment/requests/#{CGI.escape(id)}/payment/method/data").with_json(payment_method_data.to_json).post
            ::Io::Flow::V0::Models::PaymentRequest.new(r)
          end

          # Update the payment method data to progress the payment through relevant
          # actions
          def post_payment_method_data_by_id(organization, id, payment_method_data)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            (x = payment_method_data; x.is_a?(::Io::Flow::V0::Models::PaymentMethodData) ? x : ::Io::Flow::V0::Models::PaymentMethodData.from_json(x))
            r = @client.request("/#{CGI.escape(organization)}/payment/requests/#{CGI.escape(id)}/payment_method_data").with_json(payment_method_data.to_json).post
            ::Io::Flow::V0::Models::PaymentRequest.new(r)
          end

          # Refunds the payment
          def post_refund_by_id(organization, id, payment_refund_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            (x = payment_refund_form; x.is_a?(::Io::Flow::V0::Models::PaymentRefundForm) ? x : ::Io::Flow::V0::Models::PaymentRefundForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/payment/requests/#{CGI.escape(id)}/refund").with_json(payment_refund_form.to_json).post
            ::Io::Flow::V0::Models::PaymentRequest.new(r)
          end

          # Reverses the authorization hold if the authorization is not captured yet
          # otherwise refunds the payment entirely.
          def post_refund_and_reversal_by_id(organization, id)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            r = @client.request("/#{CGI.escape(organization)}/payment/requests/#{CGI.escape(id)}/refund/reversal").post
            ::Io::Flow::V0::Models::PaymentRequest.new(r)
          end

          # Reverses payment authorization
          def post_reversal_by_id(organization, id, payment_reversal_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            (x = payment_reversal_form; x.is_a?(::Io::Flow::V0::Models::PaymentReversalForm) ? x : ::Io::Flow::V0::Models::PaymentReversalForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/payment/requests/#{CGI.escape(id)}/reversal").with_json(payment_reversal_form.to_json).post
            ::Io::Flow::V0::Models::PaymentRequest.new(r)
          end

          # Reverses payment authorization
          def post_reverse_by_id(organization, id, payment_reversal_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            (x = payment_reversal_form; x.is_a?(::Io::Flow::V0::Models::PaymentReversalForm) ? x : ::Io::Flow::V0::Models::PaymentReversalForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/payment/requests/#{CGI.escape(id)}/reverse").with_json(payment_reversal_form.to_json).post
            ::Io::Flow::V0::Models::PaymentRequest.new(r)
          end

        end

        class PermissionChecks

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          # Returns permissions for the specified organization for the current request.
          # Used by integrators to test headers.
          def get_permission_and_checks_and_all_by_organization(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :permitted_method => (x = opts.delete(:permitted_method); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::PermittedHttpMethod) ? x : ::Io::Flow::V0::Models::PermittedHttpMethod.apply(x)).value),
              :path => (x = opts.delete(:path); x.nil? ? nil : HttpClient::Preconditions.assert_class('path', x, String))
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/permission/checks/all").with_query(query).get
            ::Io::Flow::V0::Models::PermissionCheck.new(r)
          end

        end

        class PriceBookItemExportOptions

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          def get(organization)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            r = @client.request("/#{CGI.escape(organization)}/export/options/price_book_item").get
            ::Io::Flow::V0::Models::PriceBookItemExportOptions.new(r)
          end

        end

        class ReturnPolicies

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          # Returns a list of return policies
          def get(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "-created_at" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/return/policies").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::ReturnPolicy.new(x) }
          end

          def post(organization, return_policy_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            (x = return_policy_form; x.is_a?(::Io::Flow::V0::Models::ReturnPolicyForm) ? x : ::Io::Flow::V0::Models::ReturnPolicyForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/return/policies").with_json(return_policy_form.to_json).post
            ::Io::Flow::V0::Models::ReturnPolicy.new(r)
          end

          def get_versions(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :return_policy_id => (x = opts.delete(:return_policy_id); x.nil? ? nil : HttpClient::Preconditions.assert_class('return_policy_id', x, Array).map { |v| HttpClient::Preconditions.assert_class('return_policy_id', v, String) }),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "journal_timestamp" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/return/policies/versions").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::ReturnPolicyVersion.new(x) }
          end

          def get_by_id(organization, id)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            r = @client.request("/#{CGI.escape(organization)}/return/policies/#{CGI.escape(id)}").get
            ::Io::Flow::V0::Models::ReturnPolicy.new(r)
          end

          # Updates the specified return policy.
          def put_by_id(organization, id, return_policy_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            (x = return_policy_form; x.is_a?(::Io::Flow::V0::Models::ReturnPolicyForm) ? x : ::Io::Flow::V0::Models::ReturnPolicyForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/return/policies/#{CGI.escape(id)}").with_json(return_policy_form.to_json).put
            ::Io::Flow::V0::Models::ReturnPolicy.new(r)
          end

          # Marks the return policy deleted. Once updated, the policy itself will be
          # deleted.
          def put_deletion_by_id(organization, id)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            r = @client.request("/#{CGI.escape(organization)}/return/policies/#{CGI.escape(id)}/deletion").put
            ::Io::Flow::V0::Models::ReturnPolicy.new(r)
          end

        end

        class Romanizations

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          def post(romanization_form)
            (x = romanization_form; x.is_a?(::Io::Flow::V0::Models::RomanizationForm) ? x : ::Io::Flow::V0::Models::RomanizationForm.new(x))
            r = @client.request("/romanize").with_json(romanization_form.to_json).post
            ::Io::Flow::V0::Models::Romanization.new(r)
          end

        end

        class ScheduledExports

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          # Search scheduled exports. Always paginated.
          def get(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "-created_at" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/users/scheduled/exports").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::ScheduledExport.new(x) }
          end

          # Create a scheduled export.
          def post(scheduled_export_form)
            (x = scheduled_export_form; x.is_a?(::Io::Flow::V0::Models::ScheduledExportForm) ? x : ::Io::Flow::V0::Models::ScheduledExportForm.new(x))
            r = @client.request("/users/scheduled/exports").with_json(scheduled_export_form.to_json).post
            ::Io::Flow::V0::Models::ScheduledExport.new(r)
          end

          # Get a single scheduled export.
          def get_by_id(id)
            HttpClient::Preconditions.assert_class('id', id, String)
            r = @client.request("/users/scheduled/exports/#{CGI.escape(id)}").get
            ::Io::Flow::V0::Models::ScheduledExport.new(r)
          end

          # Update a scheduled export.
          def put_by_id(id, scheduled_export_form)
            HttpClient::Preconditions.assert_class('id', id, String)
            (x = scheduled_export_form; x.is_a?(::Io::Flow::V0::Models::ScheduledExportForm) ? x : ::Io::Flow::V0::Models::ScheduledExportForm.new(x))
            r = @client.request("/users/scheduled/exports/#{CGI.escape(id)}").with_json(scheduled_export_form.to_json).put
            ::Io::Flow::V0::Models::ScheduledExport.new(r)
          end

          def delete_by_id(id)
            HttpClient::Preconditions.assert_class('id', id, String)
            r = @client.request("/users/scheduled/exports/#{CGI.escape(id)}").delete
            nil
          end

        end

        class Sessions

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          def post_shopify_and_organizations_by_organization(organization, session_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            (x = session_form; x.is_a?(::Io::Flow::V0::Models::SessionForm) ? x : ::Io::Flow::V0::Models::SessionForm.new(x))
            r = @client.request("/sessions/shopify/organizations/#{CGI.escape(organization)}").with_json(session_form.to_json).post
            ::Io::Flow::V0::Models::OrganizationSession.new(r)
          end

          def get_shopify_by_session(session)
            HttpClient::Preconditions.assert_class('session', session, String)
            r = @client.request("/sessions/shopify/#{CGI.escape(session)}").get
            ::Io::Flow::V0::Models::Session.from_json(r)
          end

          def put_shopify_by_session(session, session_put_form)
            HttpClient::Preconditions.assert_class('session', session, String)
            (x = session_put_form; x.is_a?(::Io::Flow::V0::Models::SessionPutForm) ? x : ::Io::Flow::V0::Models::SessionPutForm.new(x))
            r = @client.request("/sessions/shopify/#{CGI.escape(session)}").with_json(session_put_form.to_json).put
            ::Io::Flow::V0::Models::Session.from_json(r)
          end

          def delete_shopify_by_session(session)
            HttpClient::Preconditions.assert_class('session', session, String)
            r = @client.request("/sessions/shopify/#{CGI.escape(session)}").delete
            nil
          end

          # Clears the session geo parameters
          def put_shopify_and_clear_by_session(session)
            HttpClient::Preconditions.assert_class('session', session, String)
            r = @client.request("/sessions/shopify/#{CGI.escape(session)}/clear").put
            ::Io::Flow::V0::Models::Session.from_json(r)
          end

          def put_shopify_and_organizations_by_session_and_organization(session, organization, session_put_form)
            HttpClient::Preconditions.assert_class('session', session, String)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            (x = session_put_form; x.is_a?(::Io::Flow::V0::Models::SessionPutForm) ? x : ::Io::Flow::V0::Models::SessionPutForm.new(x))
            r = @client.request("/sessions/shopify/#{CGI.escape(session)}/organizations/#{CGI.escape(organization)}").with_json(session_put_form.to_json).put
            ::Io::Flow::V0::Models::OrganizationSession.new(r)
          end

          # Resets the session based on the provided geo parameters.
          def put_shopify_and_reset_by_session(session, session_put_form)
            HttpClient::Preconditions.assert_class('session', session, String)
            (x = session_put_form; x.is_a?(::Io::Flow::V0::Models::SessionPutForm) ? x : ::Io::Flow::V0::Models::SessionPutForm.new(x))
            r = @client.request("/sessions/shopify/#{CGI.escape(session)}/reset").with_json(session_put_form.to_json).put
            ::Io::Flow::V0::Models::Session.from_json(r)
          end

          def post_organizations_by_organization(organization, session_form, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :context => (x = opts.delete(:context); x.nil? ? nil : HttpClient::Preconditions.assert_class('context', x, String))
            }.delete_if { |k, v| v.nil? }
            (x = session_form; x.is_a?(::Io::Flow::V0::Models::SessionForm) ? x : ::Io::Flow::V0::Models::SessionForm.new(x))
            r = @client.request("/sessions/organizations/#{CGI.escape(organization)}").with_query(query).with_json(session_form.to_json).post
            ::Io::Flow::V0::Models::OrganizationSession.new(r)
          end

          def get_by_session(session)
            HttpClient::Preconditions.assert_class('session', session, String)
            r = @client.request("/sessions/#{CGI.escape(session)}").get
            ::Io::Flow::V0::Models::Session.from_json(r)
          end

          def put_by_session(session, session_put_form, incoming={})
            HttpClient::Preconditions.assert_class('session', session, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :context => (x = opts.delete(:context); x.nil? ? nil : HttpClient::Preconditions.assert_class('context', x, String))
            }.delete_if { |k, v| v.nil? }
            (x = session_put_form; x.is_a?(::Io::Flow::V0::Models::SessionPutForm) ? x : ::Io::Flow::V0::Models::SessionPutForm.new(x))
            r = @client.request("/sessions/#{CGI.escape(session)}").with_query(query).with_json(session_put_form.to_json).put
            ::Io::Flow::V0::Models::Session.from_json(r)
          end

          def delete_by_session(session)
            HttpClient::Preconditions.assert_class('session', session, String)
            r = @client.request("/sessions/#{CGI.escape(session)}").delete
            nil
          end

          # Clears the session geo parameters
          def put_clear_by_session(session)
            HttpClient::Preconditions.assert_class('session', session, String)
            r = @client.request("/sessions/#{CGI.escape(session)}/clear").put
            ::Io::Flow::V0::Models::Session.from_json(r)
          end

          def put_organizations_by_session_and_organization(session, organization, session_put_form, incoming={})
            HttpClient::Preconditions.assert_class('session', session, String)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :context => (x = opts.delete(:context); x.nil? ? nil : HttpClient::Preconditions.assert_class('context', x, String))
            }.delete_if { |k, v| v.nil? }
            (x = session_put_form; x.is_a?(::Io::Flow::V0::Models::SessionPutForm) ? x : ::Io::Flow::V0::Models::SessionPutForm.new(x))
            r = @client.request("/sessions/#{CGI.escape(session)}/organizations/#{CGI.escape(organization)}").with_query(query).with_json(session_put_form.to_json).put
            ::Io::Flow::V0::Models::OrganizationSession.new(r)
          end

          # Resets the session based on the provided geo parameters.
          def put_reset_by_session(session, session_put_form, incoming={})
            HttpClient::Preconditions.assert_class('session', session, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :context => (x = opts.delete(:context); x.nil? ? nil : HttpClient::Preconditions.assert_class('context', x, String))
            }.delete_if { |k, v| v.nil? }
            (x = session_put_form; x.is_a?(::Io::Flow::V0::Models::SessionPutForm) ? x : ::Io::Flow::V0::Models::SessionPutForm.new(x))
            r = @client.request("/sessions/#{CGI.escape(session)}/reset").with_query(query).with_json(session_put_form.to_json).put
            ::Io::Flow::V0::Models::Session.from_json(r)
          end

        end

        class SessionAuthorizations

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          def post(session_authorization_form)
            (x = session_authorization_form; x.is_a?(::Io::Flow::V0::Models::SessionAuthorizationForm) ? x : ::Io::Flow::V0::Models::SessionAuthorizationForm.new(x))
            r = @client.request("/authorizations/sessions").with_json(session_authorization_form.to_json).post
            ::Io::Flow::V0::Models::SessionAuthorization.from_json(r)
          end

        end

        class ShopifyCarts

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          # Retrieve representation of a Shopify cart for the given order number.
          def get_order_by_number(number, incoming={})
            HttpClient::Preconditions.assert_class('number', number, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :context => (x = opts.delete(:context); x.nil? ? nil : HttpClient::Preconditions.assert_class('context', x, String))
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/shopify/carts/order/#{CGI.escape(number)}").with_query(query).get
            ::Io::Flow::V0::Models::ShopifyCart.new(r)
          end

          # Retrieve representation of a Shopify cart given the unique cart id.
          def get_by_id_html(id, incoming={})
            HttpClient::Preconditions.assert_class('id', id, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :context => (x = opts.delete(:context); x.nil? ? nil : HttpClient::Preconditions.assert_class('context', x, String))
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/shopify/carts/#{CGI.escape(id)}").with_query(query).get
            r
          end

          # Retrieve representation of a Shopify cart given the unique cart id.
          def get_by_id(id, incoming={})
            HttpClient::Preconditions.assert_class('id', id, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :context => (x = opts.delete(:context); x.nil? ? nil : HttpClient::Preconditions.assert_class('context', x, String))
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/shopify/carts/#{CGI.escape(id)}").with_query(query).get
            ::Io::Flow::V0::Models::ShopifyCart.new(r)
          end

          # Add an item to a Shopify cart given the unique cart id.
          def post_add_by_id(id, shopify_cart_add_form, incoming={})
            HttpClient::Preconditions.assert_class('id', id, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :context => (x = opts.delete(:context); x.nil? ? nil : HttpClient::Preconditions.assert_class('context', x, String))
            }.delete_if { |k, v| v.nil? }
            (x = shopify_cart_add_form; x.is_a?(::Io::Flow::V0::Models::ShopifyCartAddForm) ? x : ::Io::Flow::V0::Models::ShopifyCartAddForm.from_json(x))
            r = @client.request("/shopify/carts/#{CGI.escape(id)}/add").with_query(query).with_json(shopify_cart_add_form.to_json).post
            ::Io::Flow::V0::Models::ShopifyCart.new(r)
          end

          # Update the attribute information for the cart.
          def put_attributes_by_id(id, shopify_order_attributes_form, incoming={})
            HttpClient::Preconditions.assert_class('id', id, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :context => (x = opts.delete(:context); x.nil? ? nil : HttpClient::Preconditions.assert_class('context', x, String))
            }.delete_if { |k, v| v.nil? }
            (x = shopify_order_attributes_form; x.is_a?(::Io::Flow::V0::Models::ShopifyOrderAttributesForm) ? x : ::Io::Flow::V0::Models::ShopifyOrderAttributesForm.new(x))
            r = @client.request("/shopify/carts/#{CGI.escape(id)}/attributes").with_query(query).with_json(shopify_order_attributes_form.to_json).put
            ::Io::Flow::V0::Models::ShopifyCart.new(r)
          end

          # Change/Update an item in a Shopify cart given the unique cart id.
          def post_change_by_id(id, shopify_cart_change_form, incoming={})
            HttpClient::Preconditions.assert_class('id', id, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :context => (x = opts.delete(:context); x.nil? ? nil : HttpClient::Preconditions.assert_class('context', x, String))
            }.delete_if { |k, v| v.nil? }
            (x = shopify_cart_change_form; x.is_a?(::Io::Flow::V0::Models::ShopifyCartChangeForm) ? x : ::Io::Flow::V0::Models::ShopifyCartChangeForm.new(x))
            r = @client.request("/shopify/carts/#{CGI.escape(id)}/change").with_query(query).with_json(shopify_cart_change_form.to_json).post
            ::Io::Flow::V0::Models::ShopifyCart.new(r)
          end

          # Remove all cart items given the unique cart id .
          def post_clear_by_id(id)
            HttpClient::Preconditions.assert_class('id', id, String)
            r = @client.request("/shopify/carts/#{CGI.escape(id)}/clear").post
            ::Io::Flow::V0::Models::ShopifyCart.new(r)
          end

          # Update the geo information for the cart.
          def put_geo_by_id(id, geo_form, incoming={})
            HttpClient::Preconditions.assert_class('id', id, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :context => (x = opts.delete(:context); x.nil? ? nil : HttpClient::Preconditions.assert_class('context', x, String))
            }.delete_if { |k, v| v.nil? }
            (x = geo_form; x.is_a?(::Io::Flow::V0::Models::GeoForm) ? x : ::Io::Flow::V0::Models::GeoForm.new(x))
            r = @client.request("/shopify/carts/#{CGI.escape(id)}/geo").with_query(query).with_json(geo_form.to_json).put
            ::Io::Flow::V0::Models::ShopifyCart.new(r)
          end

          # Create an order from a Flow cart.
          def post_orders_by_id(id, incoming={})
            HttpClient::Preconditions.assert_class('id', id, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :expand => (x = opts.delete(:expand); x.nil? ? nil : HttpClient::Preconditions.assert_class('expand', x, Array).map { |v| HttpClient::Preconditions.assert_class('expand', v, String) }),
              :context => (x = opts.delete(:context); x.nil? ? nil : HttpClient::Preconditions.assert_class('context', x, String))
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/shopify/carts/#{CGI.escape(id)}/orders").with_query(query).post
            ::Io::Flow::V0::Models::Order.new(r)
          end

        end

        class ShopifyCartConversions

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          # Creates a shopify cart conversion from a shopify cart
          def post_conversions(organization, experience_key, io_flow_shopify_external_v0_models_shopify_external_cart, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('experience_key', experience_key, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :expand => (x = opts.delete(:expand); x.nil? ? nil : HttpClient::Preconditions.assert_class('expand', x, Array).map { |v| HttpClient::Preconditions.assert_class('expand', v, String) }),
              :context => (x = opts.delete(:context); x.nil? ? nil : HttpClient::Preconditions.assert_class('context', x, String))
            }.delete_if { |k, v| v.nil? }
            (x = io_flow_shopify_external_v0_models_shopify_external_cart; x.is_a?(::Io::Flow::Shopify::External::V0::Models::ShopifyExternalCart) ? x : ::Io::Flow::Shopify::External::V0::Models::ShopifyExternalCart.new(x))
            r = @client.request("/#{CGI.escape(organization)}/experiences/#{CGI.escape(experience_key)}/shopify/cart/conversions").with_query(query).with_json(io_flow_shopify_external_v0_models_shopify_external_cart.to_json).post
            ::Io::Flow::V0::Models::ShopifyCartConversion.new(r)
          end

        end

        class ShopifyLocalizationSettings

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          def get(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "-created_at" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/shopify/localization/settings").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::ShopifyLocalizationSetting.new(x) }
          end

          # Add a localization setting.
          def post(organization, shopify_localization_setting_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            (x = shopify_localization_setting_form; x.is_a?(::Io::Flow::V0::Models::ShopifyLocalizationSettingForm) ? x : ::Io::Flow::V0::Models::ShopifyLocalizationSettingForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/shopify/localization/settings").with_json(shopify_localization_setting_form.to_json).post
            ::Io::Flow::V0::Models::ShopifyLocalizationSetting.new(r)
          end

          def get_by_id(organization, id)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            r = @client.request("/#{CGI.escape(organization)}/shopify/localization/settings/#{CGI.escape(id)}").get
            ::Io::Flow::V0::Models::ShopifyLocalizationSetting.new(r)
          end

          # Update a localization setting.
          def put_by_id(organization, id, shopify_localization_setting_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            (x = shopify_localization_setting_form; x.is_a?(::Io::Flow::V0::Models::ShopifyLocalizationSettingForm) ? x : ::Io::Flow::V0::Models::ShopifyLocalizationSettingForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/shopify/localization/settings/#{CGI.escape(id)}").with_json(shopify_localization_setting_form.to_json).put
            ::Io::Flow::V0::Models::ShopifyLocalizationSetting.new(r)
          end

          def delete_by_id(organization, id)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            r = @client.request("/#{CGI.escape(organization)}/shopify/localization/settings/#{CGI.escape(id)}").delete
            nil
          end

        end

        class ShopifyLocationFlowCenterMappings

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          def get(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "-created_at" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/shopify/locations/mappings").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::ShopifyLocationFlowCenterMapping.new(x) }
          end

          # Add a Shopify location/Flow Center mapping.
          def post(organization, shopify_location_flow_center_mapping_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            (x = shopify_location_flow_center_mapping_form; x.is_a?(::Io::Flow::V0::Models::ShopifyLocationFlowCenterMappingForm) ? x : ::Io::Flow::V0::Models::ShopifyLocationFlowCenterMappingForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/shopify/locations/mappings").with_json(shopify_location_flow_center_mapping_form.to_json).post
            ::Io::Flow::V0::Models::ShopifyLocationFlowCenterMapping.new(r)
          end

          def get_by_id(organization, id)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            r = @client.request("/#{CGI.escape(organization)}/shopify/locations/mappings/#{CGI.escape(id)}").get
            ::Io::Flow::V0::Models::ShopifyLocationFlowCenterMapping.new(r)
          end

          # Update a Shopify location/Flow Center mapping.
          def put_by_id(organization, id, shopify_location_flow_center_mapping_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            (x = shopify_location_flow_center_mapping_form; x.is_a?(::Io::Flow::V0::Models::ShopifyLocationFlowCenterMappingForm) ? x : ::Io::Flow::V0::Models::ShopifyLocationFlowCenterMappingForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/shopify/locations/mappings/#{CGI.escape(id)}").with_json(shopify_location_flow_center_mapping_form.to_json).put
            ::Io::Flow::V0::Models::ShopifyLocationFlowCenterMapping.new(r)
          end

          def delete_by_id(organization, id)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            r = @client.request("/#{CGI.escape(organization)}/shopify/locations/mappings/#{CGI.escape(id)}").delete
            nil
          end

        end

        class ShopifyPrivateApps

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          def get(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "-created_at" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/shopify/private/apps").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::ShopifyPrivateApp.new(x) }
          end

          def put(organization, shopify_private_app_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            (x = shopify_private_app_form; x.is_a?(::Io::Flow::V0::Models::ShopifyPrivateAppForm) ? x : ::Io::Flow::V0::Models::ShopifyPrivateAppForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/shopify/private/apps").with_json(shopify_private_app_form.to_json).put
            ::Io::Flow::V0::Models::ShopifyPrivateApp.new(r)
          end

          def get_by_id(organization, id)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            r = @client.request("/#{CGI.escape(organization)}/shopify/private/apps/#{CGI.escape(id)}").get
            ::Io::Flow::V0::Models::ShopifyPrivateApp.new(r)
          end

          def delete_by_id(organization, id)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            r = @client.request("/#{CGI.escape(organization)}/shopify/private/apps/#{CGI.escape(id)}").delete
            nil
          end

        end

        class ShopifySyncStatuses

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          def get(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :interval_seconds => HttpClient::Preconditions.assert_class('interval_seconds', (x = opts.delete(:interval_seconds); x.nil? ? 60 : x), Integer),
              :sync_check => (x = (x = opts.delete(:sync_check); x.nil? ? "localized_variants" : x); x.is_a?(::Io::Flow::V0::Models::ShopifySyncCheck) ? x : ::Io::Flow::V0::Models::ShopifySyncCheck.apply(x)).value
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/shopify/sync/status").with_query(query).get
            ::Io::Flow::V0::Models::ShopifySyncStatus.new(r)
          end

        end

        class Suggestions

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          # Returns search suggestions for catalog items
          def get_catalog(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :q => (x = opts.delete(:q); x.nil? ? nil : HttpClient::Preconditions.assert_class('q', x, String)),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "-count" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/suggestion/catalog").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::Suggestion.new(x) }
          end

        end

        class SyncPendingRecords

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          def get(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :stream_key => (x = opts.delete(:stream_key); x.nil? ? nil : HttpClient::Preconditions.assert_class('stream_key', x, String)),
              :value => (x = opts.delete(:value); x.nil? ? nil : HttpClient::Preconditions.assert_class('value', x, String)),
              :system => (x = opts.delete(:system); x.nil? ? nil : HttpClient::Preconditions.assert_class('system', x, String)),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "-created_at" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/sync/pending/records").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::SyncPendingRecord.new(x) }
          end

        end

        class SyncRecords

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          def get(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :stream_key => (x = opts.delete(:stream_key); x.nil? ? nil : HttpClient::Preconditions.assert_class('stream_key', x, String)),
              :system => (x = opts.delete(:system); x.nil? ? nil : HttpClient::Preconditions.assert_class('system', x, String)),
              :value => (x = opts.delete(:value); x.nil? ? nil : HttpClient::Preconditions.assert_class('value', x, String)),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "-created_at" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/sync/records").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::SyncRecord.new(x) }
          end

          def post(organization, sync_record_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            (x = sync_record_form; x.is_a?(::Io::Flow::V0::Models::SyncRecordForm) ? x : ::Io::Flow::V0::Models::SyncRecordForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/sync/records").with_json(sync_record_form.to_json).post
            ::Io::Flow::V0::Models::SyncRecord.new(r)
          end

          # Idempotent method to upsert a value for a system for this stream.
          def put_streams_and_systems_and_values_by_stream_key_and_system_and_value(organization, stream_key, system, value)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('stream_key', stream_key, String)
            HttpClient::Preconditions.assert_class('system', system, String)
            HttpClient::Preconditions.assert_class('value', value, String)
            r = @client.request("/#{CGI.escape(organization)}/sync/records/streams/#{CGI.escape(stream_key)}/systems/#{CGI.escape(system)}/values/#{CGI.escape(value)}").put
            ::Io::Flow::V0::Models::SyncRecord.new(r)
          end

          # Delete a value for a system for this stream.
          def delete_streams_and_systems_and_values_by_stream_key_and_system_and_value(organization, stream_key, system, value)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('stream_key', stream_key, String)
            HttpClient::Preconditions.assert_class('system', system, String)
            HttpClient::Preconditions.assert_class('value', value, String)
            r = @client.request("/#{CGI.escape(organization)}/sync/records/streams/#{CGI.escape(stream_key)}/systems/#{CGI.escape(system)}/values/#{CGI.escape(value)}").delete
            nil
          end

          def get_by_id(organization, id)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            r = @client.request("/#{CGI.escape(organization)}/sync/records/#{CGI.escape(id)}").get
            ::Io::Flow::V0::Models::SyncRecord.new(r)
          end

          def put_by_id(organization, id, sync_record_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            (x = sync_record_form; x.is_a?(::Io::Flow::V0::Models::SyncRecordForm) ? x : ::Io::Flow::V0::Models::SyncRecordForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/sync/records/#{CGI.escape(id)}").with_json(sync_record_form.to_json).put
            ::Io::Flow::V0::Models::SyncRecord.new(r)
          end

          def delete_by_id(organization, id)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            r = @client.request("/#{CGI.escape(organization)}/sync/records/#{CGI.escape(id)}").delete
            nil
          end

        end

        class SyncRecordFailures

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          def get(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :stream_key => (x = opts.delete(:stream_key); x.nil? ? nil : HttpClient::Preconditions.assert_class('stream_key', x, String)),
              :value => (x = opts.delete(:value); x.nil? ? nil : HttpClient::Preconditions.assert_class('value', x, String)),
              :system => (x = opts.delete(:system); x.nil? ? nil : HttpClient::Preconditions.assert_class('system', x, String)),
              :reason => (x = opts.delete(:reason); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::SyncRecordFailureReason) ? x : ::Io::Flow::V0::Models::SyncRecordFailureReason.apply(x)).value),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "-created_at" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/sync/record/failures").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::SyncRecordFailure.new(x) }
          end

          def post(organization, sync_record_failure_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            (x = sync_record_failure_form; x.is_a?(::Io::Flow::V0::Models::SyncRecordFailureForm) ? x : ::Io::Flow::V0::Models::SyncRecordFailureForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/sync/record/failures").with_json(sync_record_failure_form.to_json).post
            ::Io::Flow::V0::Models::SyncRecordFailure.new(r)
          end

          def get_by_id(organization, id)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            r = @client.request("/#{CGI.escape(organization)}/sync/record/failures/#{CGI.escape(id)}").get
            ::Io::Flow::V0::Models::SyncRecordFailure.new(r)
          end

          def put_by_id(organization, id, sync_record_failure_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            (x = sync_record_failure_form; x.is_a?(::Io::Flow::V0::Models::SyncRecordFailureForm) ? x : ::Io::Flow::V0::Models::SyncRecordFailureForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/sync/record/failures/#{CGI.escape(id)}").with_json(sync_record_failure_form.to_json).put
            ::Io::Flow::V0::Models::SyncRecordFailure.new(r)
          end

          def delete_by_id(organization, id)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('id', id, String)
            r = @client.request("/#{CGI.escape(organization)}/sync/record/failures/#{CGI.escape(id)}").delete
            nil
          end

        end

        class SyncStreams

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          def get(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :key => (x = opts.delete(:key); x.nil? ? nil : HttpClient::Preconditions.assert_class('key', x, String)),
              :type => (x = opts.delete(:type); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::SyncStreamType) ? x : ::Io::Flow::V0::Models::SyncStreamType.apply(x)).value),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "-created_at" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/sync/streams").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::SyncStream.new(x) }
          end

          def post(organization, sync_stream_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            (x = sync_stream_form; x.is_a?(::Io::Flow::V0::Models::SyncStreamForm) ? x : ::Io::Flow::V0::Models::SyncStreamForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/sync/streams").with_json(sync_stream_form.to_json).post
            ::Io::Flow::V0::Models::SyncStream.new(r)
          end

          def get_by_key(organization, key)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            r = @client.request("/#{CGI.escape(organization)}/sync/streams/#{CGI.escape(key)}").get
            ::Io::Flow::V0::Models::SyncStream.new(r)
          end

          def put_by_key(organization, key, sync_stream_form)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            (x = sync_stream_form; x.is_a?(::Io::Flow::V0::Models::SyncStreamForm) ? x : ::Io::Flow::V0::Models::SyncStreamForm.new(x))
            r = @client.request("/#{CGI.escape(organization)}/sync/streams/#{CGI.escape(key)}").with_json(sync_stream_form.to_json).put
            ::Io::Flow::V0::Models::SyncStream.new(r)
          end

          def delete_by_key(organization, key)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            r = @client.request("/#{CGI.escape(organization)}/sync/streams/#{CGI.escape(key)}").delete
            nil
          end

        end

        class TaxSettings

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          # Returns the tax settings for the organization.
          def get(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "-created_at" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/tax/settings").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::TaxSetting.from_json(x) }
          end

          def put(organization, tax_setting)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            (x = tax_setting; x.is_a?(::Io::Flow::V0::Models::TaxSetting) ? x : ::Io::Flow::V0::Models::TaxSetting.from_json(x))
            r = @client.request("/#{CGI.escape(organization)}/tax/settings").with_json(tax_setting.to_json).put
            ::Io::Flow::V0::Models::TaxSetting.from_json(r)
          end

          def delete(organization)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            r = @client.request("/#{CGI.escape(organization)}/tax/settings").delete
            nil
          end

        end

        class Tokens

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          # Get all tokens that you are authorized to view. Note that the cleartext
          # token value is never sent. To view the API token itself, see the resource
          # path /tokens/:id/cleartext
          def get(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :organization => (x = opts.delete(:organization); x.nil? ? nil : HttpClient::Preconditions.assert_class('organization', x, String)),
              :partner => (x = opts.delete(:partner); x.nil? ? nil : HttpClient::Preconditions.assert_class('partner', x, String)),
              :mine => (x = opts.delete(:mine); x.nil? ? nil : HttpClient::Preconditions.assert_boolean('mine', x)),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "-created_at" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/tokens").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::Token.from_json(x) }
          end

          # Preferred method to validate a token, obtaining specific information if the
          # token is valid (or a 404 if the token does not exist). We use an HTTP POST
          # with a form body to ensure that the token itself is not logged in the
          # request logs.
          def post_authentications(token_authentication_form)
            (x = token_authentication_form; x.is_a?(::Io::Flow::V0::Models::TokenAuthenticationForm) ? x : ::Io::Flow::V0::Models::TokenAuthenticationForm.new(x))
            r = @client.request("/tokens/authentications").with_json(token_authentication_form.to_json).post
            ::Io::Flow::V0::Models::TokenReference.from_json(r)
          end

          # Get metadata for the token with this ID
          def get_by_id(id)
            HttpClient::Preconditions.assert_class('id', id, String)
            r = @client.request("/tokens/#{CGI.escape(id)}").get
            ::Io::Flow::V0::Models::Token.from_json(r)
          end

          def delete_by_id(id)
            HttpClient::Preconditions.assert_class('id', id, String)
            r = @client.request("/tokens/#{CGI.escape(id)}").delete
            nil
          end

          # Retrieves the token with the actual string token in cleartext
          def get_cleartext_by_id(id)
            HttpClient::Preconditions.assert_class('id', id, String)
            r = @client.request("/tokens/#{CGI.escape(id)}/cleartext").get
            ::Io::Flow::V0::Models::Cleartext.new(r)
          end

        end

        class TokenValidations

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          def post(token_validation_form)
            (x = token_validation_form; x.is_a?(::Io::Flow::V0::Models::TokenValidationForm) ? x : ::Io::Flow::V0::Models::TokenValidationForm.new(x))
            r = @client.request("/token-validations").with_json(token_validation_form.to_json).post
            ::Io::Flow::V0::Models::TokenValidation.new(r)
          end

        end

        class TradeAgreements

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          # Retrieve global trade agreements.
          def get(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :key => (x = opts.delete(:key); x.nil? ? nil : HttpClient::Preconditions.assert_class('key', x, String)),
              :name => (x = opts.delete(:name); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::TradeAgreementName) ? x : ::Io::Flow::V0::Models::TradeAgreementName.apply(x)).value),
              :origin => (x = opts.delete(:origin); x.nil? ? nil : HttpClient::Preconditions.assert_class('origin', x, String)),
              :destinations => (x = opts.delete(:destinations); x.nil? ? nil : HttpClient::Preconditions.assert_class('destinations', x, Array).map { |v| HttpClient::Preconditions.assert_class('destinations', v, String) }),
              :ship_from => (x = opts.delete(:ship_from); x.nil? ? nil : HttpClient::Preconditions.assert_class('ship_from', x, Array).map { |v| HttpClient::Preconditions.assert_class('ship_from', v, String) }),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "-created_at" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/trade/agreements").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::TradeAgreement.new(x) }
          end

          # Add a global trade agreement.
          def post(trade_agreement)
            (x = trade_agreement; x.is_a?(::Io::Flow::V0::Models::TradeAgreement) ? x : ::Io::Flow::V0::Models::TradeAgreement.new(x))
            r = @client.request("/trade/agreements").with_json(trade_agreement.to_json).post
            ::Io::Flow::V0::Models::TradeAgreement.new(r)
          end

          # Retrieve a global trade agreement.
          def get_by_key(key)
            HttpClient::Preconditions.assert_class('key', key, String)
            r = @client.request("/trade/agreements/#{CGI.escape(key)}").get
            ::Io::Flow::V0::Models::TradeAgreement.new(r)
          end

          def put_by_key(key, trade_agreement)
            HttpClient::Preconditions.assert_class('key', key, String)
            (x = trade_agreement; x.is_a?(::Io::Flow::V0::Models::TradeAgreement) ? x : ::Io::Flow::V0::Models::TradeAgreement.new(x))
            r = @client.request("/trade/agreements/#{CGI.escape(key)}").with_json(trade_agreement.to_json).put
            ::Io::Flow::V0::Models::TradeAgreement.new(r)
          end

          def delete_by_key(key)
            HttpClient::Preconditions.assert_class('key', key, String)
            r = @client.request("/trade/agreements/#{CGI.escape(key)}").delete
            nil
          end

        end

        class TradeAgreementCertifiers

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          # Retrieve trade agreement certifiers.
          def get(organization, incoming={})
            HttpClient::Preconditions.assert_class('organization', organization, String)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :key => (x = opts.delete(:key); x.nil? ? nil : HttpClient::Preconditions.assert_class('key', x, String)),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "name" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/#{CGI.escape(organization)}/trade/agreement/certifiers").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::TradeAgreementCertifier.new(x) }
          end

          # Add a trade agreement certifier.
          def post(organization, trade_agreement_certifier)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            (x = trade_agreement_certifier; x.is_a?(::Io::Flow::V0::Models::TradeAgreementCertifier) ? x : ::Io::Flow::V0::Models::TradeAgreementCertifier.new(x))
            r = @client.request("/#{CGI.escape(organization)}/trade/agreement/certifiers").with_json(trade_agreement_certifier.to_json).post
            ::Io::Flow::V0::Models::TradeAgreementCertifier.new(r)
          end

          # Retrieve a trade agreement certifier.
          def get_by_key(organization, key)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            r = @client.request("/#{CGI.escape(organization)}/trade/agreement/certifiers/#{CGI.escape(key)}").get
            ::Io::Flow::V0::Models::TradeAgreementCertifier.new(r)
          end

          def put_by_key(organization, key, trade_agreement_certifier)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            (x = trade_agreement_certifier; x.is_a?(::Io::Flow::V0::Models::TradeAgreementCertifier) ? x : ::Io::Flow::V0::Models::TradeAgreementCertifier.new(x))
            r = @client.request("/#{CGI.escape(organization)}/trade/agreement/certifiers/#{CGI.escape(key)}").with_json(trade_agreement_certifier.to_json).put
            ::Io::Flow::V0::Models::TradeAgreementCertifier.new(r)
          end

          def delete_by_key(organization, key)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('key', key, String)
            r = @client.request("/#{CGI.escape(organization)}/trade/agreement/certifiers/#{CGI.escape(key)}").delete
            nil
          end

        end

        class Uploads

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          def post_by_name(organization, name)
            HttpClient::Preconditions.assert_class('organization', organization, String)
            HttpClient::Preconditions.assert_class('name', name, String)
            r = @client.request("/#{CGI.escape(organization)}/uploads/#{CGI.escape(name)}").post
            ::Io::Flow::V0::Models::Upload.new(r)
          end

        end

        class Users

          def initialize(client)
            @client = HttpClient::Preconditions.assert_class('client', client, ::Io::Flow::V0::Client)
          end

          # Search users. Must specify an id or email.
          def get(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            query = {
              :id => (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Array).map { |v| HttpClient::Preconditions.assert_class('id', v, String) }),
              :email => (x = opts.delete(:email); x.nil? ? nil : HttpClient::Preconditions.assert_class('email', x, String)),
              :status => (x = opts.delete(:status); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::UserStatus) ? x : ::Io::Flow::V0::Models::UserStatus.apply(x)).value),
              :limit => HttpClient::Preconditions.assert_class('limit', (x = opts.delete(:limit); x.nil? ? 25 : x), Integer),
              :offset => HttpClient::Preconditions.assert_class('offset', (x = opts.delete(:offset); x.nil? ? 0 : x), Integer),
              :sort => HttpClient::Preconditions.assert_class('sort', (x = opts.delete(:sort); x.nil? ? "-created_at" : x), String)
            }.delete_if { |k, v| v.nil? }
            r = @client.request("/users").with_query(query).get
            r.map { |x| ::Io::Flow::V0::Models::User.new(x) }
          end

          # Create a new user. Note that new users will be created with a status of
          # pending and will not be able to authenticate until approved by a member of
          # the Flow team.
          def post(user_form)
            (x = user_form; x.is_a?(::Io::Flow::V0::Models::UserForm) ? x : ::Io::Flow::V0::Models::UserForm.new(x))
            r = @client.request("/users").with_json(user_form.to_json).post
            ::Io::Flow::V0::Models::User.new(r)
          end

          # Authenticates a user by email / password. Note only users that have a status
          # of active will be authorized.
          def post_authenticate(authentication_form)
            (x = authentication_form; x.is_a?(::Io::Flow::V0::Models::AuthenticationForm) ? x : ::Io::Flow::V0::Models::AuthenticationForm.new(x))
            r = @client.request("/users/authenticate").with_json(authentication_form.to_json).post
            ::Io::Flow::V0::Models::User.new(r)
          end

          # Returns information about a specific user.
          def get_by_id(id)
            HttpClient::Preconditions.assert_class('id', id, String)
            r = @client.request("/users/#{CGI.escape(id)}").get
            ::Io::Flow::V0::Models::User.new(r)
          end

          # Update a user.
          def put_by_id(id, user_put_form)
            HttpClient::Preconditions.assert_class('id', id, String)
            (x = user_put_form; x.is_a?(::Io::Flow::V0::Models::UserPutForm) ? x : ::Io::Flow::V0::Models::UserPutForm.new(x))
            r = @client.request("/users/#{CGI.escape(id)}").with_json(user_put_form.to_json).put
            ::Io::Flow::V0::Models::User.new(r)
          end

          # Update the password for a user.
          def patch_passwords_by_id(id, password_change_form)
            HttpClient::Preconditions.assert_class('id', id, String)
            (x = password_change_form; x.is_a?(::Io::Flow::V0::Models::PasswordChangeForm) ? x : ::Io::Flow::V0::Models::PasswordChangeForm.new(x))
            r = @client.request("/users/#{CGI.escape(id)}/passwords").with_json(password_change_form.to_json).patch
            nil
          end

          # Deletes a password for the given user.
          def delete_passwords_by_id(id)
            HttpClient::Preconditions.assert_class('id', id, String)
            r = @client.request("/users/#{CGI.escape(id)}/passwords").delete
            nil
          end

        end

      end

      module Models

        class AbandonedOrderPromotionDetails

          module Types
            ABANDONED_ORDER_PROMOTION_DISCOUNT_DETAILS = 'abandoned_order_promotion_discount_details' unless defined?(ABANDONED_ORDER_PROMOTION_DISCOUNT_DETAILS)
          end

          attr_reader :discriminator

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:discriminator], 'AbandonedOrderPromotionDetails')
            @discriminator = HttpClient::Preconditions.assert_class('discriminator', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of abandoned_order_promotion_details directly - must use one of the specific types: abandoned_order_promotion_discount_details'
          end

          def to_hash
            subtype_to_hash.merge(:discriminator => @discriminator)
          end

          def AbandonedOrderPromotionDetails.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:discriminator].to_s.strip
            if discriminator.empty?
              raise "Union type[abandoned_order_promotion_details] requires a field named 'discriminator'"
            end
            case discriminator
              when Types::ABANDONED_ORDER_PROMOTION_DISCOUNT_DETAILS; AbandonedOrderPromotionDiscountDetails.new(hash)
              else AbandonedOrderPromotionDetailsUndefinedType.new(:discriminator => discriminator)
            end
          end

        end

        class AbandonedOrderPromotionDetailsUndefinedType < AbandonedOrderPromotionDetails

          attr_reader :name

          def initialize(incoming={})
            super(:discriminator => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        class Action

          module Types
            ACTION_REDIRECT = 'redirect' unless defined?(ACTION_REDIRECT)
            ACTION_USE_SDK_KLARNA_V1 = 'use_sdk_klarna_v1' unless defined?(ACTION_USE_SDK_KLARNA_V1)
            ACTION_USE_SDK_APPLEPAY_JS_CREATE_SESSION = 'use_sdk_applepay_js_create_session' unless defined?(ACTION_USE_SDK_APPLEPAY_JS_CREATE_SESSION)
            ACTION_USE_SDK_APPLEPAY_JS_COMPLETE_VALIDATION = 'use_sdk_applepay_js_complete_validation' unless defined?(ACTION_USE_SDK_APPLEPAY_JS_COMPLETE_VALIDATION)
            ACTION_USE_SDK_GOOGLEPAY = 'use_sdk_googlepay' unless defined?(ACTION_USE_SDK_GOOGLEPAY)
            ACTION_USE_SDK_PAYPAL = 'use_sdk_paypal' unless defined?(ACTION_USE_SDK_PAYPAL)
            ACTION_USE_SDK_STRIPE_V3 = 'use_sdk_stripe_v3' unless defined?(ACTION_USE_SDK_STRIPE_V3)
            ACTION_USE_SDK_ADYEN_V3 = 'use_sdk_adyen_v3' unless defined?(ACTION_USE_SDK_ADYEN_V3)
            ACTION_USE_SDK_ADYEN_V4 = 'use_sdk_adyen_v4' unless defined?(ACTION_USE_SDK_ADYEN_V4)
            ACTION_EXECUTE_SCRIPT = 'execute_script' unless defined?(ACTION_EXECUTE_SCRIPT)
            ACTION_DISPLAY_INLINE_WINDOW = 'display_inline_window' unless defined?(ACTION_DISPLAY_INLINE_WINDOW)
            ACTION_WAIT = 'wait' unless defined?(ACTION_WAIT)
          end

          attr_reader :type

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:type], 'Action')
            @type = HttpClient::Preconditions.assert_class('type', opts.delete(:type), String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of action directly - must use one of the specific types: action_redirect, action_use_sdk_klarna_v1, action_use_sdk_applepay_js_create_session, action_use_sdk_applepay_js_complete_validation, action_use_sdk_googlepay, action_use_sdk_paypal, action_use_sdk_stripe_v3, action_use_sdk_adyen_v3, action_use_sdk_adyen_v4, action_execute_script, action_display_inline_window, action_wait'
          end

          def to_hash
            subtype_to_hash.merge(:type => @type)
          end

          def Action.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:type].to_s.strip
            if discriminator.empty?
              raise "Union type[action] requires a field named 'type'"
            end
            case discriminator
              when Types::ACTION_REDIRECT; ActionRedirect.new(hash)
              when Types::ACTION_USE_SDK_KLARNA_V1; ActionUseSdkKlarnaV1.new(hash)
              when Types::ACTION_USE_SDK_APPLEPAY_JS_CREATE_SESSION; ActionUseSdkApplepayJsCreateSession.new(hash)
              when Types::ACTION_USE_SDK_APPLEPAY_JS_COMPLETE_VALIDATION; ActionUseSdkApplepayJsCompleteValidation.new(hash)
              when Types::ACTION_USE_SDK_GOOGLEPAY; ActionUseSdkGooglepay.new(hash)
              when Types::ACTION_USE_SDK_PAYPAL; ActionUseSdkPaypal.new(hash)
              when Types::ACTION_USE_SDK_STRIPE_V3; ActionUseSdkStripeV3.new(hash)
              when Types::ACTION_USE_SDK_ADYEN_V3; ActionUseSdkAdyenV3.new(hash)
              when Types::ACTION_USE_SDK_ADYEN_V4; ActionUseSdkAdyenV4.new(hash)
              when Types::ACTION_EXECUTE_SCRIPT; ActionExecuteScript.new(hash)
              when Types::ACTION_DISPLAY_INLINE_WINDOW; ActionDisplayInlineWindow.new(hash)
              when Types::ACTION_WAIT; ActionWait.new(hash)
              else ActionUndefinedType.new(:type => discriminator)
            end
          end

        end

        class ActionUndefinedType < Action

          attr_reader :name

          def initialize(incoming={})
            super(:type => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:type), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        class AdyenNativeData

          module Types
            ADYEN_IDENTIFY_SHOPPER_DATA = 'adyen_identify_shopper_data' unless defined?(ADYEN_IDENTIFY_SHOPPER_DATA)
            ADYEN_CHALLENGE_SHOPPER_DATA = 'adyen_challenge_shopper_data' unless defined?(ADYEN_CHALLENGE_SHOPPER_DATA)
          end

          attr_reader :discriminator

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:discriminator], 'AdyenNativeData')
            @discriminator = HttpClient::Preconditions.assert_class('discriminator', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of adyen_native_data directly - must use one of the specific types: adyen_identify_shopper_data, adyen_challenge_shopper_data'
          end

          def to_hash
            subtype_to_hash.merge(:discriminator => @discriminator)
          end

          def AdyenNativeData.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:discriminator].to_s.strip
            if discriminator.empty?
              raise "Union type[adyen_native_data] requires a field named 'discriminator'"
            end
            case discriminator
              when Types::ADYEN_IDENTIFY_SHOPPER_DATA; AdyenIdentifyShopperData.new(hash)
              when Types::ADYEN_CHALLENGE_SHOPPER_DATA; AdyenChallengeShopperData.new(hash)
              else AdyenNativeDataUndefinedType.new(:discriminator => discriminator)
            end
          end

        end

        class AdyenNativeDataUndefinedType < AdyenNativeData

          attr_reader :name

          def initialize(incoming={})
            super(:discriminator => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        class AllocationComponent

          module Types
            ALLOCATION_DETAIL_COMPONENT = 'allocation_detail_component' unless defined?(ALLOCATION_DETAIL_COMPONENT)
            ALLOCATION_LEVY_COMPONENT = 'allocation_levy_component' unless defined?(ALLOCATION_LEVY_COMPONENT)
          end

          attr_reader :discriminator

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:discriminator], 'AllocationComponent')
            @discriminator = HttpClient::Preconditions.assert_class('discriminator', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of allocation_component directly - must use one of the specific types: allocation_detail_component, allocation_levy_component'
          end

          def to_hash
            subtype_to_hash.merge(:discriminator => @discriminator)
          end

          def AllocationComponent.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:discriminator].to_s.strip
            if discriminator.empty?
              raise "Union type[allocation_component] requires a field named 'discriminator'"
            end
            case discriminator
              when Types::ALLOCATION_DETAIL_COMPONENT; AllocationDetailComponent.new(hash)
              when Types::ALLOCATION_LEVY_COMPONENT; AllocationLevyComponent.new(hash)
              else AllocationComponentUndefinedType.new(:discriminator => discriminator)
            end
          end

        end

        class AllocationComponentUndefinedType < AllocationComponent

          attr_reader :name

          def initialize(incoming={})
            super(:discriminator => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        class AllocationDetail

          module Types
            ALLOCATION_LINE_DETAIL = 'allocation_line_detail' unless defined?(ALLOCATION_LINE_DETAIL)
            ALLOCATION_ORDER_DETAIL = 'allocation_order_detail' unless defined?(ALLOCATION_ORDER_DETAIL)
          end

          attr_reader :discriminator

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:discriminator], 'AllocationDetail')
            @discriminator = HttpClient::Preconditions.assert_class('discriminator', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of allocation_detail directly - must use one of the specific types: allocation_line_detail, allocation_order_detail'
          end

          def to_hash
            subtype_to_hash.merge(:discriminator => @discriminator)
          end

          def AllocationDetail.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:discriminator].to_s.strip
            if discriminator.empty?
              raise "Union type[allocation_detail] requires a field named 'discriminator'"
            end
            case discriminator
              when Types::ALLOCATION_LINE_DETAIL; AllocationLineDetail.new(hash)
              when Types::ALLOCATION_ORDER_DETAIL; AllocationOrderDetail.new(hash)
              else AllocationDetailUndefinedType.new(:discriminator => discriminator)
            end
          end

        end

        class AllocationDetailUndefinedType < AllocationDetail

          attr_reader :name

          def initialize(incoming={})
            super(:discriminator => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        class Authorization

          module Types
            CARD_AUTHORIZATION = 'card_authorization' unless defined?(CARD_AUTHORIZATION)
            ONLINE_AUTHORIZATION = 'online_authorization' unless defined?(ONLINE_AUTHORIZATION)
          end

          attr_reader :discriminator

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:discriminator], 'Authorization')
            @discriminator = HttpClient::Preconditions.assert_class('discriminator', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of authorization directly - must use one of the specific types: card_authorization, online_authorization'
          end

          def to_hash
            subtype_to_hash.merge(:discriminator => @discriminator)
          end

          def Authorization.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:discriminator].to_s.strip
            if discriminator.empty?
              raise "Union type[authorization] requires a field named 'discriminator'"
            end
            case discriminator
              when Types::CARD_AUTHORIZATION; CardAuthorization.new(hash)
              when Types::ONLINE_AUTHORIZATION; OnlineAuthorization.new(hash)
              else AuthorizationUndefinedType.new(:discriminator => discriminator)
            end
          end

        end

        class AuthorizationUndefinedType < Authorization

          attr_reader :name

          def initialize(incoming={})
            super(:discriminator => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        # Flow provides several different options for creating an authorization
        class AuthorizationForm

          module Types
            # Creates a new authorization by copying an existing one.
            AUTHORIZATION_COPY_FORM = 'authorization_copy_form' unless defined?(AUTHORIZATION_COPY_FORM)
            # Enables card payments
            DIRECT_AUTHORIZATION_FORM = 'direct_authorization_form' unless defined?(DIRECT_AUTHORIZATION_FORM)
            # Enables card payments with Flow as Merchant of Record
            MERCHANT_OF_RECORD_AUTHORIZATION_FORM = 'merchant_of_record_authorization_form' unless defined?(MERCHANT_OF_RECORD_AUTHORIZATION_FORM)
            # Enables authorization via PayPal
            PAYPAL_AUTHORIZATION_FORM = 'paypal_authorization_form' unless defined?(PAYPAL_AUTHORIZATION_FORM)
            # Enables authorizations via redirect-based alternative payment methods, such as
            # AliPay.
            REDIRECT_AUTHORIZATION_FORM = 'redirect_authorization_form' unless defined?(REDIRECT_AUTHORIZATION_FORM)
            # Enables authorizations via inline widget alternative payment methods, such as
            # Klarna.
            INLINE_AUTHORIZATION_FORM = 'inline_authorization_form' unless defined?(INLINE_AUTHORIZATION_FORM)
            # Enables authorizations via ACH (Automated Clearing House) bank transfer.
            ACH_AUTHORIZATION_FORM = 'ach_authorization_form' unless defined?(ACH_AUTHORIZATION_FORM)
            # Enables authorizations via card payment source.
            CARD_PAYMENT_SOURCE_AUTHORIZATION_FORM = 'card_payment_source_authorization_form' unless defined?(CARD_PAYMENT_SOURCE_AUTHORIZATION_FORM)
            # Enables authorization via an online payment (e.g. CryptoPay)
            ONLINE_PAYMENT_AUTHORIZATION_FORM = 'online_payment_authorization_form' unless defined?(ONLINE_PAYMENT_AUTHORIZATION_FORM)
          end

          attr_reader :discriminator

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:discriminator], 'AuthorizationForm')
            @discriminator = HttpClient::Preconditions.assert_class('discriminator', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of authorization_form directly - must use one of the specific types: authorization_copy_form, direct_authorization_form, merchant_of_record_authorization_form, paypal_authorization_form, redirect_authorization_form, inline_authorization_form, ach_authorization_form, card_payment_source_authorization_form, online_payment_authorization_form'
          end

          def to_hash
            subtype_to_hash.merge(:discriminator => @discriminator)
          end

          def AuthorizationForm.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:discriminator].to_s.strip
            if discriminator.empty?
              raise "Union type[authorization_form] requires a field named 'discriminator'"
            end
            case discriminator
              when Types::AUTHORIZATION_COPY_FORM; AuthorizationCopyForm.new(hash)
              when Types::DIRECT_AUTHORIZATION_FORM; DirectAuthorizationForm.new(hash)
              when Types::MERCHANT_OF_RECORD_AUTHORIZATION_FORM; MerchantOfRecordAuthorizationForm.new(hash)
              when Types::PAYPAL_AUTHORIZATION_FORM; PaypalAuthorizationForm.new(hash)
              when Types::REDIRECT_AUTHORIZATION_FORM; RedirectAuthorizationForm.new(hash)
              when Types::INLINE_AUTHORIZATION_FORM; InlineAuthorizationForm.new(hash)
              when Types::ACH_AUTHORIZATION_FORM; AchAuthorizationForm.new(hash)
              when Types::CARD_PAYMENT_SOURCE_AUTHORIZATION_FORM; CardPaymentSourceAuthorizationForm.new(hash)
              when Types::ONLINE_PAYMENT_AUTHORIZATION_FORM; OnlinePaymentAuthorizationForm.new(hash)
              else AuthorizationFormUndefinedType.new(:discriminator => discriminator)
            end
          end

        end

        class AuthorizationFormUndefinedType < AuthorizationForm

          attr_reader :name

          def initialize(incoming={})
            super(:discriminator => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        class AuthorizationPayloadParameters

          module Types
            GOOGLE_PAY_AUTHORIZATION_PAYLOAD = 'google_pay_authorization_payload' unless defined?(GOOGLE_PAY_AUTHORIZATION_PAYLOAD)
            APPLE_PAY_MERCHANT_VALIDATION_PAYLOAD = 'apple_pay_merchant_validation_payload' unless defined?(APPLE_PAY_MERCHANT_VALIDATION_PAYLOAD)
          end

          attr_reader :discriminator

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:discriminator], 'AuthorizationPayloadParameters')
            @discriminator = HttpClient::Preconditions.assert_class('discriminator', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of authorization_payload_parameters directly - must use one of the specific types: google_pay_authorization_payload, apple_pay_merchant_validation_payload'
          end

          def to_hash
            subtype_to_hash.merge(:discriminator => @discriminator)
          end

          def AuthorizationPayloadParameters.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:discriminator].to_s.strip
            if discriminator.empty?
              raise "Union type[authorization_payload_parameters] requires a field named 'discriminator'"
            end
            case discriminator
              when Types::GOOGLE_PAY_AUTHORIZATION_PAYLOAD; GooglePayAuthorizationPayload.new(hash)
              when Types::APPLE_PAY_MERCHANT_VALIDATION_PAYLOAD; ApplePayMerchantValidationPayload.new(hash)
              else AuthorizationPayloadParametersUndefinedType.new(:discriminator => discriminator)
            end
          end

        end

        class AuthorizationPayloadParametersUndefinedType < AuthorizationPayloadParameters

          attr_reader :name

          def initialize(incoming={})
            super(:discriminator => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        class AuthorizationResultAction

          module Types
            AUTHORIZATION_RESULT_ACTION_GET = 'authorization_result_action_get' unless defined?(AUTHORIZATION_RESULT_ACTION_GET)
            AUTHORIZATION_RESULT_ACTION_POST = 'authorization_result_action_post' unless defined?(AUTHORIZATION_RESULT_ACTION_POST)
            AUTHORIZATION_RESULT_ACTION_WAIT = 'authorization_result_action_wait' unless defined?(AUTHORIZATION_RESULT_ACTION_WAIT)
            AUTHORIZATION_RESULT_ACTION_NATIVE = 'authorization_result_action_native' unless defined?(AUTHORIZATION_RESULT_ACTION_NATIVE)
          end

          attr_reader :discriminator

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:discriminator], 'AuthorizationResultAction')
            @discriminator = HttpClient::Preconditions.assert_class('discriminator', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of authorization_result_action directly - must use one of the specific types: authorization_result_action_get, authorization_result_action_post, authorization_result_action_wait, authorization_result_action_native'
          end

          def to_hash
            subtype_to_hash.merge(:discriminator => @discriminator)
          end

          def AuthorizationResultAction.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:discriminator].to_s.strip
            if discriminator.empty?
              raise "Union type[authorization_result_action] requires a field named 'discriminator'"
            end
            case discriminator
              when Types::AUTHORIZATION_RESULT_ACTION_GET; AuthorizationResultActionGet.new(hash)
              when Types::AUTHORIZATION_RESULT_ACTION_POST; AuthorizationResultActionPost.new(hash)
              when Types::AUTHORIZATION_RESULT_ACTION_WAIT; AuthorizationResultActionWait.new(hash)
              when Types::AUTHORIZATION_RESULT_ACTION_NATIVE; AuthorizationResultActionNative.new(hash)
              else AuthorizationResultActionUndefinedType.new(:discriminator => discriminator)
            end
          end

        end

        class AuthorizationResultActionUndefinedType < AuthorizationResultAction

          attr_reader :name

          def initialize(incoming={})
            super(:discriminator => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        class AuthorizationResultActionDetails

          module Types
            ADYEN_NATIVE_ACTION_DETAILS = 'adyen_native_action_details' unless defined?(ADYEN_NATIVE_ACTION_DETAILS)
            STRIPE_AUTHORIZATION_RESULT_ACTION_DETAILS = 'stripe_authorization_result_action_details' unless defined?(STRIPE_AUTHORIZATION_RESULT_ACTION_DETAILS)
            THREEDS_IDENTIFY_ACTION_DETAILS = 'threeds_identify_action_details' unless defined?(THREEDS_IDENTIFY_ACTION_DETAILS)
            THREEDS_CHALLENGE_ACTION_DETAILS = 'threeds_challenge_action_details' unless defined?(THREEDS_CHALLENGE_ACTION_DETAILS)
            KLARNA_SDK_AUTHORIZATION_RESULT_ACTION_DETAILS = 'klarna_sdk_authorization_result_action_details' unless defined?(KLARNA_SDK_AUTHORIZATION_RESULT_ACTION_DETAILS)
          end

          attr_reader :discriminator

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:discriminator], 'AuthorizationResultActionDetails')
            @discriminator = HttpClient::Preconditions.assert_class('discriminator', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of authorization_result_action_details directly - must use one of the specific types: adyen_native_action_details, stripe_authorization_result_action_details, threeds_identify_action_details, threeds_challenge_action_details, klarna_sdk_authorization_result_action_details'
          end

          def to_hash
            subtype_to_hash.merge(:discriminator => @discriminator)
          end

          def AuthorizationResultActionDetails.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:discriminator].to_s.strip
            if discriminator.empty?
              raise "Union type[authorization_result_action_details] requires a field named 'discriminator'"
            end
            case discriminator
              when Types::ADYEN_NATIVE_ACTION_DETAILS; AdyenNativeActionDetails.new(hash)
              when Types::STRIPE_AUTHORIZATION_RESULT_ACTION_DETAILS; StripeAuthorizationResultActionDetails.new(hash)
              when Types::THREEDS_IDENTIFY_ACTION_DETAILS; ThreedsIdentifyActionDetails.new(hash)
              when Types::THREEDS_CHALLENGE_ACTION_DETAILS; ThreedsChallengeActionDetails.new(hash)
              when Types::KLARNA_SDK_AUTHORIZATION_RESULT_ACTION_DETAILS; KlarnaSdkAuthorizationResultActionDetails.new(hash)
              else AuthorizationResultActionDetailsUndefinedType.new(:discriminator => discriminator)
            end
          end

        end

        class AuthorizationResultActionDetailsUndefinedType < AuthorizationResultActionDetails

          attr_reader :name

          def initialize(incoming={})
            super(:discriminator => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        class AvailableFilter

          module Types
            AVAILABLE_FILTER_STRUCTURED = 'structured' unless defined?(AVAILABLE_FILTER_STRUCTURED)
            AVAILABLE_FILTER_UNSTRUCTURED = 'unstructured' unless defined?(AVAILABLE_FILTER_UNSTRUCTURED)
          end

          attr_reader :discriminator

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:discriminator], 'AvailableFilter')
            @discriminator = HttpClient::Preconditions.assert_class('discriminator', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of available_filter directly - must use one of the specific types: available_filter_structured, available_filter_unstructured'
          end

          def to_hash
            subtype_to_hash.merge(:discriminator => @discriminator)
          end

          def AvailableFilter.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:discriminator].to_s.strip
            if discriminator.empty?
              raise "Union type[available_filter] requires a field named 'discriminator'"
            end
            case discriminator
              when Types::AVAILABLE_FILTER_STRUCTURED; AvailableFilterStructured.new(hash)
              when Types::AVAILABLE_FILTER_UNSTRUCTURED; AvailableFilterUnstructured.new(hash)
              else AvailableFilterUndefinedType.new(:discriminator => discriminator)
            end
          end

        end

        class AvailableFilterUndefinedType < AvailableFilter

          attr_reader :name

          def initialize(incoming={})
            super(:discriminator => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        # Configurations to support payment authentication done in the browser
        # experience e.g. card authentication with 3DS by an issuer ACS.
        class BrowserActionConfiguration

          module Types
            CARD_BROWSER_ACTION_CONFIGURATION = 'card_browser_action_configuration' unless defined?(CARD_BROWSER_ACTION_CONFIGURATION)
          end

          attr_reader :discriminator

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:discriminator], 'BrowserActionConfiguration')
            @discriminator = HttpClient::Preconditions.assert_class('discriminator', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of browser_action_configuration directly - must use one of the specific types: card_browser_action_configuration'
          end

          def to_hash
            subtype_to_hash.merge(:discriminator => @discriminator)
          end

          def BrowserActionConfiguration.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:discriminator].to_s.strip
            if discriminator.empty?
              raise "Union type[browser_action_configuration] requires a field named 'discriminator'"
            end
            case discriminator
              when Types::CARD_BROWSER_ACTION_CONFIGURATION; CardBrowserActionConfiguration.new(hash)
              else BrowserActionConfigurationUndefinedType.new(:discriminator => discriminator)
            end
          end

        end

        class BrowserActionConfigurationUndefinedType < BrowserActionConfiguration

          attr_reader :name

          def initialize(incoming={})
            super(:discriminator => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        class CardAuthorizationActionResult

          module Types
            AUTHORIZATION_ACTION_RESULT_ADYEN_V3 = 'adyen_v3' unless defined?(AUTHORIZATION_ACTION_RESULT_ADYEN_V3)
            AUTHORIZATION_ACTION_RESULT_ADYEN_V4 = 'adyen_v4' unless defined?(AUTHORIZATION_ACTION_RESULT_ADYEN_V4)
          end

          attr_reader :type

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:type], 'CardAuthorizationActionResult')
            @type = HttpClient::Preconditions.assert_class('type', opts.delete(:type), String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of card_authorization_action_result directly - must use one of the specific types: authorization_action_result_adyen_v3, authorization_action_result_adyen_v4'
          end

          def to_hash
            subtype_to_hash.merge(:type => @type)
          end

          def CardAuthorizationActionResult.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:type].to_s.strip
            if discriminator.empty?
              raise "Union type[card_authorization_action_result] requires a field named 'type'"
            end
            case discriminator
              when Types::AUTHORIZATION_ACTION_RESULT_ADYEN_V3; AuthorizationActionResultAdyenV3.new(hash)
              when Types::AUTHORIZATION_ACTION_RESULT_ADYEN_V4; AuthorizationActionResultAdyenV4.new(hash)
              else CardAuthorizationActionResultUndefinedType.new(:type => discriminator)
            end
          end

        end

        class CardAuthorizationActionResultUndefinedType < CardAuthorizationActionResult

          attr_reader :name

          def initialize(incoming={})
            super(:type => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:type), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        class CardNumber

          module Types
            PAYMENT_METHOD_CARD_NUMBER_CLEARTEXT = 'cleartext' unless defined?(PAYMENT_METHOD_CARD_NUMBER_CLEARTEXT)
            PAYMENT_METHOD_CARD_NUMBER_CIPHER = 'cipher' unless defined?(PAYMENT_METHOD_CARD_NUMBER_CIPHER)
          end

          attr_reader :type

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:type], 'CardNumber')
            @type = HttpClient::Preconditions.assert_class('type', opts.delete(:type), String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of card_number directly - must use one of the specific types: payment_method_card_number_cleartext, payment_method_card_number_cipher'
          end

          def to_hash
            subtype_to_hash.merge(:type => @type)
          end

          def CardNumber.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:type].to_s.strip
            if discriminator.empty?
              raise "Union type[card_number] requires a field named 'type'"
            end
            case discriminator
              when Types::PAYMENT_METHOD_CARD_NUMBER_CLEARTEXT; PaymentMethodCardNumberCleartext.new(hash)
              when Types::PAYMENT_METHOD_CARD_NUMBER_CIPHER; PaymentMethodCardNumberCipher.new(hash)
              else CardNumberUndefinedType.new(:type => discriminator)
            end
          end

        end

        class CardNumberUndefinedType < CardNumber

          attr_reader :name

          def initialize(incoming={})
            super(:type => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:type), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        class CheckoutTokenForm

          module Types
            CHECKOUT_TOKEN_ORDER_FORM = 'checkout_token_order_form' unless defined?(CHECKOUT_TOKEN_ORDER_FORM)
            CHECKOUT_TOKEN_REFERENCE_FORM = 'checkout_token_reference_form' unless defined?(CHECKOUT_TOKEN_REFERENCE_FORM)
          end

          attr_reader :discriminator

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @discriminator = HttpClient::Preconditions.assert_class('discriminator', opts.delete(:discriminator) || 'checkout_token_reference_form', String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of checkout_token_form directly - must use one of the specific types: checkout_token_order_form, checkout_token_reference_form'
          end

          def to_hash
            subtype_to_hash.merge(:discriminator => @discriminator)
          end

          def CheckoutTokenForm.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:discriminator].to_s.strip
            if discriminator.empty?
              raise "Union type[checkout_token_form] requires a field named 'discriminator'"
            end
            case discriminator
              when Types::CHECKOUT_TOKEN_ORDER_FORM; CheckoutTokenOrderForm.new(hash)
              when Types::CHECKOUT_TOKEN_REFERENCE_FORM; CheckoutTokenReferenceForm.new(hash)
              else CheckoutTokenFormUndefinedType.new(:discriminator => discriminator)
            end
          end

        end

        class CheckoutTokenFormUndefinedType < CheckoutTokenForm

          attr_reader :name

          def initialize(incoming={})
            super(:discriminator => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        class ConfirmationDetails

          module Types
            DIRECT_DEBIT = 'direct_debit' unless defined?(DIRECT_DEBIT)
          end

          attr_reader :discriminator

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:discriminator], 'ConfirmationDetails')
            @discriminator = HttpClient::Preconditions.assert_class('discriminator', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of confirmation_details directly - must use one of the specific types: direct_debit'
          end

          def to_hash
            subtype_to_hash.merge(:discriminator => @discriminator)
          end

          def ConfirmationDetails.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:discriminator].to_s.strip
            if discriminator.empty?
              raise "Union type[confirmation_details] requires a field named 'discriminator'"
            end
            case discriminator
              when Types::DIRECT_DEBIT; DirectDebit.new(hash)
              else ConfirmationDetailsUndefinedType.new(:discriminator => discriminator)
            end
          end

        end

        class ConfirmationDetailsUndefinedType < ConfirmationDetails

          attr_reader :name

          def initialize(incoming={})
            super(:discriminator => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        class ConsumerInvoiceLine

          module Types
            CONSUMER_INVOICE_LINE_ITEM = 'item' unless defined?(CONSUMER_INVOICE_LINE_ITEM)
            CONSUMER_INVOICE_LINE_DISCOUNT = 'discount' unless defined?(CONSUMER_INVOICE_LINE_DISCOUNT)
            CONSUMER_INVOICE_LINE_SHIPPING = 'shipping' unless defined?(CONSUMER_INVOICE_LINE_SHIPPING)
          end

          attr_reader :discriminator

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:discriminator], 'ConsumerInvoiceLine')
            @discriminator = HttpClient::Preconditions.assert_class('discriminator', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of consumer_invoice_line directly - must use one of the specific types: consumer_invoice_line_item, consumer_invoice_line_discount, consumer_invoice_line_shipping'
          end

          def to_hash
            subtype_to_hash.merge(:discriminator => @discriminator)
          end

          def ConsumerInvoiceLine.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:discriminator].to_s.strip
            if discriminator.empty?
              raise "Union type[consumer_invoice_line] requires a field named 'discriminator'"
            end
            case discriminator
              when Types::CONSUMER_INVOICE_LINE_ITEM; ConsumerInvoiceLineItem.new(hash)
              when Types::CONSUMER_INVOICE_LINE_DISCOUNT; ConsumerInvoiceLineDiscount.new(hash)
              when Types::CONSUMER_INVOICE_LINE_SHIPPING; ConsumerInvoiceLineShipping.new(hash)
              else ConsumerInvoiceLineUndefinedType.new(:discriminator => discriminator)
            end
          end

        end

        class ConsumerInvoiceLineUndefinedType < ConsumerInvoiceLine

          attr_reader :name

          def initialize(incoming={})
            super(:discriminator => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        class ConsumerInvoiceLineForm

          module Types
            CONSUMER_INVOICE_LINE_ITEM_FORM = 'item' unless defined?(CONSUMER_INVOICE_LINE_ITEM_FORM)
            CONSUMER_INVOICE_LINE_DISCOUNT_FORM = 'discount' unless defined?(CONSUMER_INVOICE_LINE_DISCOUNT_FORM)
            CONSUMER_INVOICE_LINE_SHIPPING_FORM = 'shipping' unless defined?(CONSUMER_INVOICE_LINE_SHIPPING_FORM)
          end

          attr_reader :discriminator

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:discriminator], 'ConsumerInvoiceLineForm')
            @discriminator = HttpClient::Preconditions.assert_class('discriminator', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of consumer_invoice_line_form directly - must use one of the specific types: consumer_invoice_line_item_form, consumer_invoice_line_discount_form, consumer_invoice_line_shipping_form'
          end

          def to_hash
            subtype_to_hash.merge(:discriminator => @discriminator)
          end

          def ConsumerInvoiceLineForm.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:discriminator].to_s.strip
            if discriminator.empty?
              raise "Union type[consumer_invoice_line_form] requires a field named 'discriminator'"
            end
            case discriminator
              when Types::CONSUMER_INVOICE_LINE_ITEM_FORM; ConsumerInvoiceLineItemForm.new(hash)
              when Types::CONSUMER_INVOICE_LINE_DISCOUNT_FORM; ConsumerInvoiceLineDiscountForm.new(hash)
              when Types::CONSUMER_INVOICE_LINE_SHIPPING_FORM; ConsumerInvoiceLineShippingForm.new(hash)
              else ConsumerInvoiceLineFormUndefinedType.new(:discriminator => discriminator)
            end
          end

        end

        class ConsumerInvoiceLineFormUndefinedType < ConsumerInvoiceLineForm

          attr_reader :name

          def initialize(incoming={})
            super(:discriminator => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        # A delivery represents a group of items that will be delivered together -
        # presenting a single price and delivery time frame, where applicable, to the
        # user. Deliveries commonly are created based on the type of item and, for
        # physical goods, their center of origin
        class Delivery

          module Types
            # Represents items that can be delivered electronically (e.g. a gift card
            # delivered via email)
            DIGITAL_DELIVERY = 'digital_delivery' unless defined?(DIGITAL_DELIVERY)
            # Represents items that are physical and require shipment
            PHYSICAL_DELIVERY = 'physical_delivery' unless defined?(PHYSICAL_DELIVERY)
          end

          attr_reader :discriminator

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @discriminator = HttpClient::Preconditions.assert_class('discriminator', opts.delete(:discriminator) || 'physical_delivery', String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of delivery directly - must use one of the specific types: digital_delivery, physical_delivery'
          end

          def to_hash
            subtype_to_hash.merge(:discriminator => @discriminator)
          end

          def Delivery.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:discriminator].to_s.strip
            if discriminator.empty?
              raise "Union type[delivery] requires a field named 'discriminator'"
            end
            case discriminator
              when Types::DIGITAL_DELIVERY; DigitalDelivery.new(hash)
              when Types::PHYSICAL_DELIVERY; PhysicalDelivery.new(hash)
              else DeliveryUndefinedType.new(:discriminator => discriminator)
            end
          end

        end

        class DeliveryUndefinedType < Delivery

          attr_reader :name

          def initialize(incoming={})
            super(:discriminator => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        # De Minimis describes the country specific rules for exactly how tax and duties
        # are calculated, as well as any exemptions that apply. See
        # https://en.wikipedia.org/wiki/De_minimis for more information.
        class Deminimis

          module Types
            DEMINIMIS_SIMPLE = 'deminimis_simple' unless defined?(DEMINIMIS_SIMPLE)
            DEMINIMIS_PER_ITEM = 'deminimis_per_item' unless defined?(DEMINIMIS_PER_ITEM)
          end

          attr_reader :discriminator

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:discriminator], 'Deminimis')
            @discriminator = HttpClient::Preconditions.assert_class('discriminator', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of deminimis directly - must use one of the specific types: deminimis_simple, deminimis_per_item'
          end

          def to_hash
            subtype_to_hash.merge(:discriminator => @discriminator)
          end

          def Deminimis.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:discriminator].to_s.strip
            if discriminator.empty?
              raise "Union type[deminimis] requires a field named 'discriminator'"
            end
            case discriminator
              when Types::DEMINIMIS_SIMPLE; DeminimisSimple.new(hash)
              when Types::DEMINIMIS_PER_ITEM; DeminimisPerItem.new(hash)
              else DeminimisUndefinedType.new(:discriminator => discriminator)
            end
          end

        end

        class DeminimisUndefinedType < Deminimis

          attr_reader :name

          def initialize(incoming={})
            super(:discriminator => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        class DeviceDetails

          module Types
            DEVICE_DETAILS_BROWSER = 'browser' unless defined?(DEVICE_DETAILS_BROWSER)
          end

          attr_reader :type

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:type], 'DeviceDetails')
            @type = HttpClient::Preconditions.assert_class('type', opts.delete(:type), String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of device_details directly - must use one of the specific types: device_details_browser'
          end

          def to_hash
            subtype_to_hash.merge(:type => @type)
          end

          def DeviceDetails.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:type].to_s.strip
            if discriminator.empty?
              raise "Union type[device_details] requires a field named 'type'"
            end
            case discriminator
              when Types::DEVICE_DETAILS_BROWSER; DeviceDetailsBrowser.new(hash)
              else DeviceDetailsUndefinedType.new(:type => discriminator)
            end
          end

        end

        class DeviceDetailsUndefinedType < DeviceDetails

          attr_reader :name

          def initialize(incoming={})
            super(:type => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:type), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        class DeviceFingerprintDetails

          module Types
            DEVICE_FINGERPRINT_DETAILS_BROWSER = 'browser' unless defined?(DEVICE_FINGERPRINT_DETAILS_BROWSER)
          end

          attr_reader :type

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:type], 'DeviceFingerprintDetails')
            @type = HttpClient::Preconditions.assert_class('type', opts.delete(:type), String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of device_fingerprint_details directly - must use one of the specific types: device_fingerprint_details_browser'
          end

          def to_hash
            subtype_to_hash.merge(:type => @type)
          end

          def DeviceFingerprintDetails.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:type].to_s.strip
            if discriminator.empty?
              raise "Union type[device_fingerprint_details] requires a field named 'type'"
            end
            case discriminator
              when Types::DEVICE_FINGERPRINT_DETAILS_BROWSER; DeviceFingerprintDetailsBrowser.new(hash)
              else DeviceFingerprintDetailsUndefinedType.new(:type => discriminator)
            end
          end

        end

        class DeviceFingerprintDetailsUndefinedType < DeviceFingerprintDetails

          attr_reader :name

          def initialize(incoming={})
            super(:type => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:type), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        class DiscountOffer

          module Types
            DISCOUNT_OFFER_FIXED = 'discount_offer_fixed' unless defined?(DISCOUNT_OFFER_FIXED)
            DISCOUNT_OFFER_PERCENT = 'discount_offer_percent' unless defined?(DISCOUNT_OFFER_PERCENT)
          end

          attr_reader :discriminator

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:discriminator], 'DiscountOffer')
            @discriminator = HttpClient::Preconditions.assert_class('discriminator', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of discount_offer directly - must use one of the specific types: discount_offer_fixed, discount_offer_percent'
          end

          def to_hash
            subtype_to_hash.merge(:discriminator => @discriminator)
          end

          def DiscountOffer.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:discriminator].to_s.strip
            if discriminator.empty?
              raise "Union type[discount_offer] requires a field named 'discriminator'"
            end
            case discriminator
              when Types::DISCOUNT_OFFER_FIXED; DiscountOfferFixed.new(hash)
              when Types::DISCOUNT_OFFER_PERCENT; DiscountOfferPercent.new(hash)
              else DiscountOfferUndefinedType.new(:discriminator => discriminator)
            end
          end

        end

        class DiscountOfferUndefinedType < DiscountOffer

          attr_reader :name

          def initialize(incoming={})
            super(:discriminator => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        class DiscountRuleEntitlement

          module Types
            DISCOUNT_RULE_SUBSIDY_ENTITLEMENT = 'subsidy' unless defined?(DISCOUNT_RULE_SUBSIDY_ENTITLEMENT)
          end

          attr_reader :discriminator

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:discriminator], 'DiscountRuleEntitlement')
            @discriminator = HttpClient::Preconditions.assert_class('discriminator', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of discount_rule_entitlement directly - must use one of the specific types: discount_rule_subsidy_entitlement'
          end

          def to_hash
            subtype_to_hash.merge(:discriminator => @discriminator)
          end

          def DiscountRuleEntitlement.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:discriminator].to_s.strip
            if discriminator.empty?
              raise "Union type[discount_rule_entitlement] requires a field named 'discriminator'"
            end
            case discriminator
              when Types::DISCOUNT_RULE_SUBSIDY_ENTITLEMENT; DiscountRuleSubsidyEntitlement.new(hash)
              else DiscountRuleEntitlementUndefinedType.new(:discriminator => discriminator)
            end
          end

        end

        class DiscountRuleEntitlementUndefinedType < DiscountRuleEntitlement

          attr_reader :name

          def initialize(incoming={})
            super(:discriminator => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        class Document

          module Types
            CATALOG_ITEM_DOCUMENT = 'catalog_item_document' unless defined?(CATALOG_ITEM_DOCUMENT)
            HARMONIZATION_DOCUMENT = 'harmonization_document' unless defined?(HARMONIZATION_DOCUMENT)
          end

          attr_reader :discriminator

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:discriminator], 'Document')
            @discriminator = HttpClient::Preconditions.assert_class('discriminator', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of document directly - must use one of the specific types: catalog_item_document, harmonization_document'
          end

          def to_hash
            subtype_to_hash.merge(:discriminator => @discriminator)
          end

          def Document.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:discriminator].to_s.strip
            if discriminator.empty?
              raise "Union type[document] requires a field named 'discriminator'"
            end
            case discriminator
              when Types::CATALOG_ITEM_DOCUMENT; CatalogItemDocument.new(hash)
              when Types::HARMONIZATION_DOCUMENT; HarmonizationDocument.new(hash)
              else DocumentUndefinedType.new(:discriminator => discriminator)
            end
          end

        end

        class DocumentUndefinedType < Document

          attr_reader :name

          def initialize(incoming={})
            super(:discriminator => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        class EmailNotificationData

          module Types
            EMAIL_NOTIFICATION_DATA_REFUND = 'refund' unless defined?(EMAIL_NOTIFICATION_DATA_REFUND)
            EMAIL_NOTIFICATION_ABANDONED_ORDER = 'abandoned_order' unless defined?(EMAIL_NOTIFICATION_ABANDONED_ORDER)
          end

          attr_reader :discriminator

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:discriminator], 'EmailNotificationData')
            @discriminator = HttpClient::Preconditions.assert_class('discriminator', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of email_notification_data directly - must use one of the specific types: email_notification_data_refund, email_notification_abandoned_order'
          end

          def to_hash
            subtype_to_hash.merge(:discriminator => @discriminator)
          end

          def EmailNotificationData.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:discriminator].to_s.strip
            if discriminator.empty?
              raise "Union type[email_notification_data] requires a field named 'discriminator'"
            end
            case discriminator
              when Types::EMAIL_NOTIFICATION_DATA_REFUND; EmailNotificationDataRefund.new(hash)
              when Types::EMAIL_NOTIFICATION_ABANDONED_ORDER; EmailNotificationAbandonedOrder.new(hash)
              else EmailNotificationDataUndefinedType.new(:discriminator => discriminator)
            end
          end

        end

        class EmailNotificationDataUndefinedType < EmailNotificationData

          attr_reader :name

          def initialize(incoming={})
            super(:discriminator => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        class Event

          module Types
            ATTRIBUTE_UPSERTED = 'attribute_upserted' unless defined?(ATTRIBUTE_UPSERTED)
            ATTRIBUTE_DELETED = 'attribute_deleted' unless defined?(ATTRIBUTE_DELETED)
            ATTRIBUTE_UPSERTED_V2 = 'attribute_upserted_v2' unless defined?(ATTRIBUTE_UPSERTED_V2)
            ATTRIBUTE_DELETED_V2 = 'attribute_deleted_v2' unless defined?(ATTRIBUTE_DELETED_V2)
            CATALOG_UPSERTED = 'catalog_upserted' unless defined?(CATALOG_UPSERTED)
            CATALOG_DELETED = 'catalog_deleted' unless defined?(CATALOG_DELETED)
            SUBCATALOG_UPSERTED = 'subcatalog_upserted' unless defined?(SUBCATALOG_UPSERTED)
            SUBCATALOG_DELETED = 'subcatalog_deleted' unless defined?(SUBCATALOG_DELETED)
            CATALOG_ITEM_UPSERTED = 'catalog_item_upserted' unless defined?(CATALOG_ITEM_UPSERTED)
            CATALOG_ITEM_DELETED = 'catalog_item_deleted' unless defined?(CATALOG_ITEM_DELETED)
            CATALOG_ITEM_UPSERTED_V2 = 'catalog_item_upserted_v2' unless defined?(CATALOG_ITEM_UPSERTED_V2)
            CATALOG_ITEM_DELETED_V2 = 'catalog_item_deleted_v2' unless defined?(CATALOG_ITEM_DELETED_V2)
            SUBCATALOG_ITEM_UPSERTED = 'subcatalog_item_upserted' unless defined?(SUBCATALOG_ITEM_UPSERTED)
            SUBCATALOG_ITEM_DELETED = 'subcatalog_item_deleted' unless defined?(SUBCATALOG_ITEM_DELETED)
            CHANNEL_UPSERTED = 'channel_upserted' unless defined?(CHANNEL_UPSERTED)
            CHANNEL_DELETED = 'channel_deleted' unless defined?(CHANNEL_DELETED)
            CHANNEL_CURRENCY_UPSERTED = 'channel_currency_upserted' unless defined?(CHANNEL_CURRENCY_UPSERTED)
            CHANNEL_CURRENCY_DELETED = 'channel_currency_deleted' unless defined?(CHANNEL_CURRENCY_DELETED)
            CHANNEL_ORGANIZATION_UPSERTED = 'channel_organization_upserted' unless defined?(CHANNEL_ORGANIZATION_UPSERTED)
            CHANNEL_ORGANIZATION_DELETED = 'channel_organization_deleted' unless defined?(CHANNEL_ORGANIZATION_DELETED)
            B2B_INVOICE_UPSERTED = 'b2b_invoice_upserted' unless defined?(B2B_INVOICE_UPSERTED)
            B2B_INVOICE_DELETED = 'b2b_invoice_deleted' unless defined?(B2B_INVOICE_DELETED)
            B2B_CREDIT_MEMO_UPSERTED = 'b2b_credit_memo_upserted' unless defined?(B2B_CREDIT_MEMO_UPSERTED)
            B2B_CREDIT_MEMO_DELETED = 'b2b_credit_memo_deleted' unless defined?(B2B_CREDIT_MEMO_DELETED)
            CONSUMER_INVOICE_UPSERTED = 'consumer_invoice_upserted' unless defined?(CONSUMER_INVOICE_UPSERTED)
            CONSUMER_INVOICE_DELETED = 'consumer_invoice_deleted' unless defined?(CONSUMER_INVOICE_DELETED)
            CREDIT_MEMO_UPSERTED = 'credit_memo_upserted' unless defined?(CREDIT_MEMO_UPSERTED)
            CREDIT_MEMO_DELETED = 'credit_memo_deleted' unless defined?(CREDIT_MEMO_DELETED)
            CROSSDOCK_SHIPMENT_UPSERTED = 'crossdock_shipment_upserted' unless defined?(CROSSDOCK_SHIPMENT_UPSERTED)
            RATE_DELETED = 'rate_deleted' unless defined?(RATE_DELETED)
            RATE_UPSERTED = 'rate_upserted' unless defined?(RATE_UPSERTED)
            RATE_DELETED_V3 = 'rate_deleted_v3' unless defined?(RATE_DELETED_V3)
            RATE_UPSERTED_V3 = 'rate_upserted_v3' unless defined?(RATE_UPSERTED_V3)
            CUSTOMER_UPSERTED = 'customer_upserted' unless defined?(CUSTOMER_UPSERTED)
            CUSTOMER_DELETED = 'customer_deleted' unless defined?(CUSTOMER_DELETED)
            CUSTOMER_ADDRESS_BOOK_CONTACT_UPSERTED = 'customer_address_book_contact_upserted' unless defined?(CUSTOMER_ADDRESS_BOOK_CONTACT_UPSERTED)
            CUSTOMER_ADDRESS_BOOK_CONTACT_DELETED = 'customer_address_book_contact_deleted' unless defined?(CUSTOMER_ADDRESS_BOOK_CONTACT_DELETED)
            EMAIL_NOTIFICATION_UPSERTED = 'email_notification_upserted' unless defined?(EMAIL_NOTIFICATION_UPSERTED)
            EMAIL_NOTIFICATION_DELETED = 'email_notification_deleted' unless defined?(EMAIL_NOTIFICATION_DELETED)
            AVAILABLE_PROMOTIONS_UPSERTED = 'available_promotions_upserted' unless defined?(AVAILABLE_PROMOTIONS_UPSERTED)
            AVAILABLE_PROMOTIONS_DELETED = 'available_promotions_deleted' unless defined?(AVAILABLE_PROMOTIONS_DELETED)
            AVAILABLE_PROMOTIONS_UPSERTED_V2 = 'available_promotions_upserted_v2' unless defined?(AVAILABLE_PROMOTIONS_UPSERTED_V2)
            AVAILABLE_PROMOTIONS_DELETED_V2 = 'available_promotions_deleted_v2' unless defined?(AVAILABLE_PROMOTIONS_DELETED_V2)
            ALLOCATION_DELETED_V2 = 'allocation_deleted_v2' unless defined?(ALLOCATION_DELETED_V2)
            ALLOCATION_UPSERTED_V2 = 'allocation_upserted_v2' unless defined?(ALLOCATION_UPSERTED_V2)
            CURRENCY_FORMAT_DELETED = 'currency_format_deleted' unless defined?(CURRENCY_FORMAT_DELETED)
            CURRENCY_FORMAT_UPSERTED = 'currency_format_upserted' unless defined?(CURRENCY_FORMAT_UPSERTED)
            EXPERIENCE_DELETED = 'experience_deleted' unless defined?(EXPERIENCE_DELETED)
            EXPERIENCE_UPSERTED = 'experience_upserted' unless defined?(EXPERIENCE_UPSERTED)
            EXPERIENCE_DELETED_V2 = 'experience_deleted_v2' unless defined?(EXPERIENCE_DELETED_V2)
            EXPERIENCE_UPSERTED_V2 = 'experience_upserted_v2' unless defined?(EXPERIENCE_UPSERTED_V2)
            COUNTRY_STATUS_UPSERTED = 'country_status_upserted' unless defined?(COUNTRY_STATUS_UPSERTED)
            COUNTRY_STATUS_DELETED = 'country_status_deleted' unless defined?(COUNTRY_STATUS_DELETED)
            EXPERIENCE_PRICE_BOOK_MAPPING_DELETED = 'experience_price_book_mapping_deleted' unless defined?(EXPERIENCE_PRICE_BOOK_MAPPING_DELETED)
            EXPERIENCE_PRICE_BOOK_MAPPING_UPSERTED = 'experience_price_book_mapping_upserted' unless defined?(EXPERIENCE_PRICE_BOOK_MAPPING_UPSERTED)
            EXPERIENCE_LOGISTICS_SETTINGS_UPSERTED = 'experience_logistics_settings_upserted' unless defined?(EXPERIENCE_LOGISTICS_SETTINGS_UPSERTED)
            EXPERIENCE_LOGISTICS_SETTINGS_DELETED = 'experience_logistics_settings_deleted' unless defined?(EXPERIENCE_LOGISTICS_SETTINGS_DELETED)
            ITEM_MARGIN_DELETED_V2 = 'item_margin_deleted_v2' unless defined?(ITEM_MARGIN_DELETED_V2)
            ITEM_MARGIN_UPSERTED_V2 = 'item_margin_upserted_v2' unless defined?(ITEM_MARGIN_UPSERTED_V2)
            ITEM_SALES_MARGIN_DELETED = 'item_sales_margin_deleted' unless defined?(ITEM_SALES_MARGIN_DELETED)
            ITEM_SALES_MARGIN_UPSERTED = 'item_sales_margin_upserted' unless defined?(ITEM_SALES_MARGIN_UPSERTED)
            LABEL_FORMAT_DELETED = 'label_format_deleted' unless defined?(LABEL_FORMAT_DELETED)
            LABEL_FORMAT_UPSERTED = 'label_format_upserted' unless defined?(LABEL_FORMAT_UPSERTED)
            ORDER_DELETED = 'order_deleted' unless defined?(ORDER_DELETED)
            ORDER_UPSERTED = 'order_upserted' unless defined?(ORDER_UPSERTED)
            ORDER_DELETED_V2 = 'order_deleted_v2' unless defined?(ORDER_DELETED_V2)
            ORDER_UPSERTED_V2 = 'order_upserted_v2' unless defined?(ORDER_UPSERTED_V2)
            ORDER_IDENTIFIER_DELETED = 'order_identifier_deleted' unless defined?(ORDER_IDENTIFIER_DELETED)
            ORDER_IDENTIFIER_UPSERTED = 'order_identifier_upserted' unless defined?(ORDER_IDENTIFIER_UPSERTED)
            ORDER_IDENTIFIER_DELETED_V2 = 'order_identifier_deleted_v2' unless defined?(ORDER_IDENTIFIER_DELETED_V2)
            ORDER_IDENTIFIER_UPSERTED_V2 = 'order_identifier_upserted_v2' unless defined?(ORDER_IDENTIFIER_UPSERTED_V2)
            ORDER_IDENTIFIER_UPSERTED_V3 = 'order_identifier_upserted_v3' unless defined?(ORDER_IDENTIFIER_UPSERTED_V3)
            ORDER_REPLACEMENT_UPSERTED = 'order_replacement_upserted' unless defined?(ORDER_REPLACEMENT_UPSERTED)
            ORDER_REPLACEMENT_DELETED = 'order_replacement_deleted' unless defined?(ORDER_REPLACEMENT_DELETED)
            PRICING_DELETED = 'pricing_deleted' unless defined?(PRICING_DELETED)
            PRICING_UPSERTED = 'pricing_upserted' unless defined?(PRICING_UPSERTED)
            ORDER_SERVICE_CHANGE_REQUEST = 'order_service_change_request' unless defined?(ORDER_SERVICE_CHANGE_REQUEST)
            FRAUD_STATUS_CHANGED = 'fraud_status_changed' unless defined?(FRAUD_STATUS_CHANGED)
            CENTER_UPSERTED = 'center_upserted' unless defined?(CENTER_UPSERTED)
            CENTER_DELETED = 'center_deleted' unless defined?(CENTER_DELETED)
            SHIPPING_CONFIGURATION_UPSERTED = 'shipping_configuration_upserted' unless defined?(SHIPPING_CONFIGURATION_UPSERTED)
            SHIPPING_CONFIGURATION_DELETED = 'shipping_configuration_deleted' unless defined?(SHIPPING_CONFIGURATION_DELETED)
            TIER_UPSERTED_V2 = 'tier_upserted_v2' unless defined?(TIER_UPSERTED_V2)
            TIER_DELETED_V2 = 'tier_deleted_v2' unless defined?(TIER_DELETED_V2)
            SHIPPING_LANE_UPSERTED = 'shipping_lane_upserted' unless defined?(SHIPPING_LANE_UPSERTED)
            SHIPPING_LANE_DELETED = 'shipping_lane_deleted' unless defined?(SHIPPING_LANE_DELETED)
            SHIPPING_CONFIGURATION_ITEM_AVAILABILITY_UPSERTED = 'shipping_configuration_item_availability_upserted' unless defined?(SHIPPING_CONFIGURATION_ITEM_AVAILABILITY_UPSERTED)
            SHIPPING_CONFIGURATION_ITEM_AVAILABILITY_DELETED = 'shipping_configuration_item_availability_deleted' unless defined?(SHIPPING_CONFIGURATION_ITEM_AVAILABILITY_DELETED)
            SHIPPING_CONFIGURATION_ITEM_SHIPPING_PRICING_UPSERTED = 'shipping_configuration_item_shipping_pricing_upserted' unless defined?(SHIPPING_CONFIGURATION_ITEM_SHIPPING_PRICING_UPSERTED)
            SHIPPING_CONFIGURATION_ITEM_SHIPPING_PRICING_DELETED = 'shipping_configuration_item_shipping_pricing_deleted' unless defined?(SHIPPING_CONFIGURATION_ITEM_SHIPPING_PRICING_DELETED)
            HS6_CODE_UPSERTED = 'hs6_code_upserted' unless defined?(HS6_CODE_UPSERTED)
            HS6_CODE_DELETED = 'hs6_code_deleted' unless defined?(HS6_CODE_DELETED)
            HS10_CODE_UPSERTED = 'hs10_code_upserted' unless defined?(HS10_CODE_UPSERTED)
            HS10_CODE_DELETED = 'hs10_code_deleted' unless defined?(HS10_CODE_DELETED)
            ITEM_ORIGIN_UPSERTED = 'item_origin_upserted' unless defined?(ITEM_ORIGIN_UPSERTED)
            ITEM_ORIGIN_DELETED = 'item_origin_deleted' unless defined?(ITEM_ORIGIN_DELETED)
            HARMONIZED_LANDED_COST_UPSERTED = 'harmonized_landed_cost_upserted' unless defined?(HARMONIZED_LANDED_COST_UPSERTED)
            FULLY_HARMONIZED_ITEM_UPSERTED = 'fully_harmonized_item_upserted' unless defined?(FULLY_HARMONIZED_ITEM_UPSERTED)
            RULE_UPSERTED = 'rule_upserted' unless defined?(RULE_UPSERTED)
            RULE_DELETED = 'rule_deleted' unless defined?(RULE_DELETED)
            SNAPSHOT_UPSERTED = 'snapshot_upserted' unless defined?(SNAPSHOT_UPSERTED)
            SNAPSHOT_DELETED = 'snapshot_deleted' unless defined?(SNAPSHOT_DELETED)
            LABEL_UPSERTED = 'label_upserted' unless defined?(LABEL_UPSERTED)
            LABEL_DELETED_V2 = 'label_deleted_v2' unless defined?(LABEL_DELETED_V2)
            LABEL_UPSERTED_V2 = 'label_upserted_v2' unless defined?(LABEL_UPSERTED_V2)
            NOTIFICATION_UPSERTED_V2 = 'notification_upserted_v2' unless defined?(NOTIFICATION_UPSERTED_V2)
            NOTIFICATION_DELETED_V2 = 'notification_deleted_v2' unless defined?(NOTIFICATION_DELETED_V2)
            MANIFESTED_LABEL_UPSERTED = 'manifested_label_upserted' unless defined?(MANIFESTED_LABEL_UPSERTED)
            MANIFESTED_LABEL_DELETED = 'manifested_label_deleted' unless defined?(MANIFESTED_LABEL_DELETED)
            LOCAL_ITEM_UPSERTED = 'local_item_upserted' unless defined?(LOCAL_ITEM_UPSERTED)
            LOCAL_ITEM_DELETED = 'local_item_deleted' unless defined?(LOCAL_ITEM_DELETED)
            CHECKOUT_OPTIN_RESPONSES_UPSERTED = 'checkout_optin_responses_upserted' unless defined?(CHECKOUT_OPTIN_RESPONSES_UPSERTED)
            CHECKOUT_OPTIN_RESPONSES_DELETED = 'checkout_optin_responses_deleted' unless defined?(CHECKOUT_OPTIN_RESPONSES_DELETED)
            BROWSE_OPTIN_RESPONSES_UPSERTED = 'browse_optin_responses_upserted' unless defined?(BROWSE_OPTIN_RESPONSES_UPSERTED)
            BROWSE_OPTIN_RESPONSES_DELETED = 'browse_optin_responses_deleted' unless defined?(BROWSE_OPTIN_RESPONSES_DELETED)
            ORDER_PLACED = 'order_placed' unless defined?(ORDER_PLACED)
            ORDER_PLACED_V2 = 'order_placed_v2' unless defined?(ORDER_PLACED_V2)
            READY_TO_FULFILL = 'ready_to_fulfill' unless defined?(READY_TO_FULFILL)
            READY_TO_FULFILL_V2 = 'ready_to_fulfill_v2' unless defined?(READY_TO_FULFILL_V2)
            MEMBERSHIP_UPSERTED_V2 = 'membership_upserted_v2' unless defined?(MEMBERSHIP_UPSERTED_V2)
            MEMBERSHIP_DELETED_V2 = 'membership_deleted_v2' unless defined?(MEMBERSHIP_DELETED_V2)
            ORGANIZATION_UPSERTED = 'organization_upserted' unless defined?(ORGANIZATION_UPSERTED)
            ORGANIZATION_DELETED = 'organization_deleted' unless defined?(ORGANIZATION_DELETED)
            ORGANIZATION_UPSERTED_V2 = 'organization_upserted_v2' unless defined?(ORGANIZATION_UPSERTED_V2)
            ORGANIZATION_DELETED_V2 = 'organization_deleted_v2' unless defined?(ORGANIZATION_DELETED_V2)
            ORGANIZATION_SHORT_ID_UPSERTED = 'organization_short_id_upserted' unless defined?(ORGANIZATION_SHORT_ID_UPSERTED)
            ORGANIZATION_SHORT_ID_DELETED = 'organization_short_id_deleted' unless defined?(ORGANIZATION_SHORT_ID_DELETED)
            SHORT_ID_UPSERTED = 'short_id_upserted' unless defined?(SHORT_ID_UPSERTED)
            SHORT_ID_DELETED = 'short_id_deleted' unless defined?(SHORT_ID_DELETED)
            ORGANIZATION_DEFAULT_CONFIGURATIONS_UPSERTED = 'organization_default_configurations_upserted' unless defined?(ORGANIZATION_DEFAULT_CONFIGURATIONS_UPSERTED)
            ORGANIZATION_DEFAULT_CONFIGURATIONS_DELETED = 'organization_default_configurations_deleted' unless defined?(ORGANIZATION_DEFAULT_CONFIGURATIONS_DELETED)
            ECOMMERCE_PLATFORM_UPSERTED = 'ecommerce_platform_upserted' unless defined?(ECOMMERCE_PLATFORM_UPSERTED)
            ECOMMERCE_PLATFORM_DELETED = 'ecommerce_platform_deleted' unless defined?(ECOMMERCE_PLATFORM_DELETED)
            AUTHORIZATION_DELETED_V2 = 'authorization_deleted_v2' unless defined?(AUTHORIZATION_DELETED_V2)
            # Trigger whenever an auth status changes (e.g. from pending to authorized).
            # Common use case is to subscribe to this event to know when an auth is cleared
            # from fraud review.
            AUTHORIZATION_STATUS_CHANGED = 'authorization_status_changed' unless defined?(AUTHORIZATION_STATUS_CHANGED)
            CARD_AUTHORIZATION_UPSERTED_V2 = 'card_authorization_upserted_v2' unless defined?(CARD_AUTHORIZATION_UPSERTED_V2)
            CARD_AUTHORIZATION_DELETED_V2 = 'card_authorization_deleted_v2' unless defined?(CARD_AUTHORIZATION_DELETED_V2)
            ONLINE_AUTHORIZATION_UPSERTED_V2 = 'online_authorization_upserted_v2' unless defined?(ONLINE_AUTHORIZATION_UPSERTED_V2)
            ONLINE_AUTHORIZATION_DELETED_V2 = 'online_authorization_deleted_v2' unless defined?(ONLINE_AUTHORIZATION_DELETED_V2)
            CAPTURE_UPSERTED_V2 = 'capture_upserted_v2' unless defined?(CAPTURE_UPSERTED_V2)
            CAPTURE_DELETED = 'capture_deleted' unless defined?(CAPTURE_DELETED)
            CARD_UPSERTED_V2 = 'card_upserted_v2' unless defined?(CARD_UPSERTED_V2)
            CARD_DELETED = 'card_deleted' unless defined?(CARD_DELETED)
            PAYMENT_UPSERTED = 'payment_upserted' unless defined?(PAYMENT_UPSERTED)
            PAYMENT_DELETED = 'payment_deleted' unless defined?(PAYMENT_DELETED)
            REFUND_UPSERTED_V2 = 'refund_upserted_v2' unless defined?(REFUND_UPSERTED_V2)
            REFUND_DELETED_V2 = 'refund_deleted_v2' unless defined?(REFUND_DELETED_V2)
            REFUND_CAPTURE_UPSERTED_V2 = 'refund_capture_upserted_v2' unless defined?(REFUND_CAPTURE_UPSERTED_V2)
            REVERSAL_UPSERTED = 'reversal_upserted' unless defined?(REVERSAL_UPSERTED)
            REVERSAL_DELETED = 'reversal_deleted' unless defined?(REVERSAL_DELETED)
            CAPTURE_IDENTIFIER_UPSERTED = 'capture_identifier_upserted' unless defined?(CAPTURE_IDENTIFIER_UPSERTED)
            CAPTURE_IDENTIFIER_DELETED = 'capture_identifier_deleted' unless defined?(CAPTURE_IDENTIFIER_DELETED)
            REFUND_IDENTIFIER_UPSERTED = 'refund_identifier_upserted' unless defined?(REFUND_IDENTIFIER_UPSERTED)
            REFUND_IDENTIFIER_DELETED = 'refund_identifier_deleted' unless defined?(REFUND_IDENTIFIER_DELETED)
            VIRTUAL_CARD_CAPTURE_UPSERTED = 'virtual_card_capture_upserted' unless defined?(VIRTUAL_CARD_CAPTURE_UPSERTED)
            VIRTUAL_CARD_CAPTURE_DELETED = 'virtual_card_capture_deleted' unless defined?(VIRTUAL_CARD_CAPTURE_DELETED)
            VIRTUAL_CARD_REFUND_UPSERTED = 'virtual_card_refund_upserted' unless defined?(VIRTUAL_CARD_REFUND_UPSERTED)
            VIRTUAL_CARD_REFUND_DELETED = 'virtual_card_refund_deleted' unless defined?(VIRTUAL_CARD_REFUND_DELETED)
            PAYMENT_REQUEST_UPSERTED = 'payment_request_upserted' unless defined?(PAYMENT_REQUEST_UPSERTED)
            PRICE_BOOK_UPSERTED = 'price_book_upserted' unless defined?(PRICE_BOOK_UPSERTED)
            PRICE_BOOK_DELETED = 'price_book_deleted' unless defined?(PRICE_BOOK_DELETED)
            PRICE_BOOK_ITEM_UPSERTED = 'price_book_item_upserted' unless defined?(PRICE_BOOK_ITEM_UPSERTED)
            PRICE_BOOK_ITEM_DELETED = 'price_book_item_deleted' unless defined?(PRICE_BOOK_ITEM_DELETED)
            ORGANIZATION_RATES_PUBLISHED = 'organization_rates_published' unless defined?(ORGANIZATION_RATES_PUBLISHED)
            RATECARD_LANE_UPSERTED = 'ratecard_lane_upserted' unless defined?(RATECARD_LANE_UPSERTED)
            RATECARD_LANE_DELETED = 'ratecard_lane_deleted' unless defined?(RATECARD_LANE_DELETED)
            RATECARD_UPSERTED = 'ratecard_upserted' unless defined?(RATECARD_UPSERTED)
            RATECARD_DELETED = 'ratecard_deleted' unless defined?(RATECARD_DELETED)
            RETURN_UPSERTED = 'return_upserted' unless defined?(RETURN_UPSERTED)
            RETURN_DELETED = 'return_deleted' unless defined?(RETURN_DELETED)
            RETURN_UPSERTED_V2 = 'return_upserted_v2' unless defined?(RETURN_UPSERTED_V2)
            RETURN_DELETED_V2 = 'return_deleted_v2' unless defined?(RETURN_DELETED_V2)
            SHOPIFY_LOCALIZATION_SETTING_UPSERTED = 'shopify_localization_setting_upserted' unless defined?(SHOPIFY_LOCALIZATION_SETTING_UPSERTED)
            SHOPIFY_LOCALIZATION_SETTING_DELETED = 'shopify_localization_setting_deleted' unless defined?(SHOPIFY_LOCALIZATION_SETTING_DELETED)
            TRACKING_LABEL_EVENT_UPSERTED = 'tracking_label_event_upserted' unless defined?(TRACKING_LABEL_EVENT_UPSERTED)
          end

          attr_reader :discriminator

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:discriminator], 'Event')
            @discriminator = HttpClient::Preconditions.assert_class('discriminator', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of event directly - must use one of the specific types: attribute_upserted, attribute_deleted, attribute_upserted_v2, attribute_deleted_v2, catalog_upserted, catalog_deleted, subcatalog_upserted, subcatalog_deleted, catalog_item_upserted, catalog_item_deleted, catalog_item_upserted_v2, catalog_item_deleted_v2, subcatalog_item_upserted, subcatalog_item_deleted, channel_upserted, channel_deleted, channel_currency_upserted, channel_currency_deleted, channel_organization_upserted, channel_organization_deleted, b2b_invoice_upserted, b2b_invoice_deleted, b2b_credit_memo_upserted, b2b_credit_memo_deleted, consumer_invoice_upserted, consumer_invoice_deleted, credit_memo_upserted, credit_memo_deleted, crossdock_shipment_upserted, rate_deleted, rate_upserted, rate_deleted_v3, rate_upserted_v3, customer_upserted, customer_deleted, customer_address_book_contact_upserted, customer_address_book_contact_deleted, email_notification_upserted, email_notification_deleted, available_promotions_upserted, available_promotions_deleted, available_promotions_upserted_v2, available_promotions_deleted_v2, allocation_deleted_v2, allocation_upserted_v2, currency_format_deleted, currency_format_upserted, experience_deleted, experience_upserted, experience_deleted_v2, experience_upserted_v2, country_status_upserted, country_status_deleted, experience_price_book_mapping_deleted, experience_price_book_mapping_upserted, experience_logistics_settings_upserted, experience_logistics_settings_deleted, item_margin_deleted_v2, item_margin_upserted_v2, item_sales_margin_deleted, item_sales_margin_upserted, label_format_deleted, label_format_upserted, order_deleted, order_upserted, order_deleted_v2, order_upserted_v2, order_identifier_deleted, order_identifier_upserted, order_identifier_deleted_v2, order_identifier_upserted_v2, order_identifier_upserted_v3, order_replacement_upserted, order_replacement_deleted, pricing_deleted, pricing_upserted, order_service_change_request, fraud_status_changed, center_upserted, center_deleted, shipping_configuration_upserted, shipping_configuration_deleted, tier_upserted_v2, tier_deleted_v2, shipping_lane_upserted, shipping_lane_deleted, shipping_configuration_item_availability_upserted, shipping_configuration_item_availability_deleted, shipping_configuration_item_shipping_pricing_upserted, shipping_configuration_item_shipping_pricing_deleted, hs6_code_upserted, hs6_code_deleted, hs10_code_upserted, hs10_code_deleted, item_origin_upserted, item_origin_deleted, harmonized_landed_cost_upserted, fully_harmonized_item_upserted, rule_upserted, rule_deleted, snapshot_upserted, snapshot_deleted, label_upserted, label_deleted_v2, label_upserted_v2, notification_upserted_v2, notification_deleted_v2, manifested_label_upserted, manifested_label_deleted, local_item_upserted, local_item_deleted, checkout_optin_responses_upserted, checkout_optin_responses_deleted, browse_optin_responses_upserted, browse_optin_responses_deleted, order_placed, order_placed_v2, ready_to_fulfill, ready_to_fulfill_v2, membership_upserted_v2, membership_deleted_v2, organization_upserted, organization_deleted, organization_upserted_v2, organization_deleted_v2, organization_short_id_upserted, organization_short_id_deleted, short_id_upserted, short_id_deleted, organization_default_configurations_upserted, organization_default_configurations_deleted, ecommerce_platform_upserted, ecommerce_platform_deleted, authorization_deleted_v2, authorization_status_changed, card_authorization_upserted_v2, card_authorization_deleted_v2, online_authorization_upserted_v2, online_authorization_deleted_v2, capture_upserted_v2, capture_deleted, card_upserted_v2, card_deleted, payment_upserted, payment_deleted, refund_upserted_v2, refund_deleted_v2, refund_capture_upserted_v2, reversal_upserted, reversal_deleted, capture_identifier_upserted, capture_identifier_deleted, refund_identifier_upserted, refund_identifier_deleted, virtual_card_capture_upserted, virtual_card_capture_deleted, virtual_card_refund_upserted, virtual_card_refund_deleted, payment_request_upserted, price_book_upserted, price_book_deleted, price_book_item_upserted, price_book_item_deleted, organization_rates_published, ratecard_lane_upserted, ratecard_lane_deleted, ratecard_upserted, ratecard_deleted, return_upserted, return_deleted, return_upserted_v2, return_deleted_v2, shopify_localization_setting_upserted, shopify_localization_setting_deleted, tracking_label_event_upserted'
          end

          def to_hash
            subtype_to_hash.merge(:discriminator => @discriminator)
          end

          def Event.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:discriminator].to_s.strip
            if discriminator.empty?
              raise "Union type[event] requires a field named 'discriminator'"
            end
            case discriminator
              when Types::ATTRIBUTE_UPSERTED; AttributeUpserted.new(hash)
              when Types::ATTRIBUTE_DELETED; AttributeDeleted.new(hash)
              when Types::ATTRIBUTE_UPSERTED_V2; AttributeUpsertedV2.new(hash)
              when Types::ATTRIBUTE_DELETED_V2; AttributeDeletedV2.new(hash)
              when Types::CATALOG_UPSERTED; CatalogUpserted.new(hash)
              when Types::CATALOG_DELETED; CatalogDeleted.new(hash)
              when Types::SUBCATALOG_UPSERTED; SubcatalogUpserted.new(hash)
              when Types::SUBCATALOG_DELETED; SubcatalogDeleted.new(hash)
              when Types::CATALOG_ITEM_UPSERTED; CatalogItemUpserted.new(hash)
              when Types::CATALOG_ITEM_DELETED; CatalogItemDeleted.new(hash)
              when Types::CATALOG_ITEM_UPSERTED_V2; CatalogItemUpsertedV2.new(hash)
              when Types::CATALOG_ITEM_DELETED_V2; CatalogItemDeletedV2.new(hash)
              when Types::SUBCATALOG_ITEM_UPSERTED; SubcatalogItemUpserted.new(hash)
              when Types::SUBCATALOG_ITEM_DELETED; SubcatalogItemDeleted.new(hash)
              when Types::CHANNEL_UPSERTED; ChannelUpserted.new(hash)
              when Types::CHANNEL_DELETED; ChannelDeleted.new(hash)
              when Types::CHANNEL_CURRENCY_UPSERTED; ChannelCurrencyUpserted.new(hash)
              when Types::CHANNEL_CURRENCY_DELETED; ChannelCurrencyDeleted.new(hash)
              when Types::CHANNEL_ORGANIZATION_UPSERTED; ChannelOrganizationUpserted.new(hash)
              when Types::CHANNEL_ORGANIZATION_DELETED; ChannelOrganizationDeleted.new(hash)
              when Types::B2B_INVOICE_UPSERTED; B2bInvoiceUpserted.new(hash)
              when Types::B2B_INVOICE_DELETED; B2bInvoiceDeleted.new(hash)
              when Types::B2B_CREDIT_MEMO_UPSERTED; B2bCreditMemoUpserted.new(hash)
              when Types::B2B_CREDIT_MEMO_DELETED; B2bCreditMemoDeleted.new(hash)
              when Types::CONSUMER_INVOICE_UPSERTED; ConsumerInvoiceUpserted.new(hash)
              when Types::CONSUMER_INVOICE_DELETED; ConsumerInvoiceDeleted.new(hash)
              when Types::CREDIT_MEMO_UPSERTED; CreditMemoUpserted.new(hash)
              when Types::CREDIT_MEMO_DELETED; CreditMemoDeleted.new(hash)
              when Types::CROSSDOCK_SHIPMENT_UPSERTED; CrossdockShipmentUpserted.new(hash)
              when Types::RATE_DELETED; RateDeleted.new(hash)
              when Types::RATE_UPSERTED; RateUpserted.new(hash)
              when Types::RATE_DELETED_V3; RateDeletedV3.new(hash)
              when Types::RATE_UPSERTED_V3; RateUpsertedV3.new(hash)
              when Types::CUSTOMER_UPSERTED; CustomerUpserted.new(hash)
              when Types::CUSTOMER_DELETED; CustomerDeleted.new(hash)
              when Types::CUSTOMER_ADDRESS_BOOK_CONTACT_UPSERTED; CustomerAddressBookContactUpserted.new(hash)
              when Types::CUSTOMER_ADDRESS_BOOK_CONTACT_DELETED; CustomerAddressBookContactDeleted.new(hash)
              when Types::EMAIL_NOTIFICATION_UPSERTED; EmailNotificationUpserted.new(hash)
              when Types::EMAIL_NOTIFICATION_DELETED; EmailNotificationDeleted.new(hash)
              when Types::AVAILABLE_PROMOTIONS_UPSERTED; AvailablePromotionsUpserted.new(hash)
              when Types::AVAILABLE_PROMOTIONS_DELETED; AvailablePromotionsDeleted.new(hash)
              when Types::AVAILABLE_PROMOTIONS_UPSERTED_V2; AvailablePromotionsUpsertedV2.new(hash)
              when Types::AVAILABLE_PROMOTIONS_DELETED_V2; AvailablePromotionsDeletedV2.new(hash)
              when Types::ALLOCATION_DELETED_V2; AllocationDeletedV2.new(hash)
              when Types::ALLOCATION_UPSERTED_V2; AllocationUpsertedV2.new(hash)
              when Types::CURRENCY_FORMAT_DELETED; CurrencyFormatDeleted.new(hash)
              when Types::CURRENCY_FORMAT_UPSERTED; CurrencyFormatUpserted.new(hash)
              when Types::EXPERIENCE_DELETED; ExperienceDeleted.new(hash)
              when Types::EXPERIENCE_UPSERTED; ExperienceUpserted.new(hash)
              when Types::EXPERIENCE_DELETED_V2; ExperienceDeletedV2.new(hash)
              when Types::EXPERIENCE_UPSERTED_V2; ExperienceUpsertedV2.new(hash)
              when Types::COUNTRY_STATUS_UPSERTED; CountryStatusUpserted.new(hash)
              when Types::COUNTRY_STATUS_DELETED; CountryStatusDeleted.new(hash)
              when Types::EXPERIENCE_PRICE_BOOK_MAPPING_DELETED; ExperiencePriceBookMappingDeleted.new(hash)
              when Types::EXPERIENCE_PRICE_BOOK_MAPPING_UPSERTED; ExperiencePriceBookMappingUpserted.new(hash)
              when Types::EXPERIENCE_LOGISTICS_SETTINGS_UPSERTED; ExperienceLogisticsSettingsUpserted.new(hash)
              when Types::EXPERIENCE_LOGISTICS_SETTINGS_DELETED; ExperienceLogisticsSettingsDeleted.new(hash)
              when Types::ITEM_MARGIN_DELETED_V2; ItemMarginDeletedV2.new(hash)
              when Types::ITEM_MARGIN_UPSERTED_V2; ItemMarginUpsertedV2.new(hash)
              when Types::ITEM_SALES_MARGIN_DELETED; ItemSalesMarginDeleted.new(hash)
              when Types::ITEM_SALES_MARGIN_UPSERTED; ItemSalesMarginUpserted.new(hash)
              when Types::LABEL_FORMAT_DELETED; LabelFormatDeleted.new(hash)
              when Types::LABEL_FORMAT_UPSERTED; LabelFormatUpserted.new(hash)
              when Types::ORDER_DELETED; OrderDeleted.new(hash)
              when Types::ORDER_UPSERTED; OrderUpserted.new(hash)
              when Types::ORDER_DELETED_V2; OrderDeletedV2.new(hash)
              when Types::ORDER_UPSERTED_V2; OrderUpsertedV2.new(hash)
              when Types::ORDER_IDENTIFIER_DELETED; OrderIdentifierDeleted.new(hash)
              when Types::ORDER_IDENTIFIER_UPSERTED; OrderIdentifierUpserted.new(hash)
              when Types::ORDER_IDENTIFIER_DELETED_V2; OrderIdentifierDeletedV2.new(hash)
              when Types::ORDER_IDENTIFIER_UPSERTED_V2; OrderIdentifierUpsertedV2.new(hash)
              when Types::ORDER_IDENTIFIER_UPSERTED_V3; OrderIdentifierUpsertedV3.new(hash)
              when Types::ORDER_REPLACEMENT_UPSERTED; OrderReplacementUpserted.new(hash)
              when Types::ORDER_REPLACEMENT_DELETED; OrderReplacementDeleted.new(hash)
              when Types::PRICING_DELETED; PricingDeleted.new(hash)
              when Types::PRICING_UPSERTED; PricingUpserted.new(hash)
              when Types::ORDER_SERVICE_CHANGE_REQUEST; OrderServiceChangeRequest.new(hash)
              when Types::FRAUD_STATUS_CHANGED; FraudStatusChanged.new(hash)
              when Types::CENTER_UPSERTED; CenterUpserted.new(hash)
              when Types::CENTER_DELETED; CenterDeleted.new(hash)
              when Types::SHIPPING_CONFIGURATION_UPSERTED; ShippingConfigurationUpserted.new(hash)
              when Types::SHIPPING_CONFIGURATION_DELETED; ShippingConfigurationDeleted.new(hash)
              when Types::TIER_UPSERTED_V2; TierUpsertedV2.new(hash)
              when Types::TIER_DELETED_V2; TierDeletedV2.new(hash)
              when Types::SHIPPING_LANE_UPSERTED; ShippingLaneUpserted.new(hash)
              when Types::SHIPPING_LANE_DELETED; ShippingLaneDeleted.new(hash)
              when Types::SHIPPING_CONFIGURATION_ITEM_AVAILABILITY_UPSERTED; ShippingConfigurationItemAvailabilityUpserted.new(hash)
              when Types::SHIPPING_CONFIGURATION_ITEM_AVAILABILITY_DELETED; ShippingConfigurationItemAvailabilityDeleted.new(hash)
              when Types::SHIPPING_CONFIGURATION_ITEM_SHIPPING_PRICING_UPSERTED; ShippingConfigurationItemShippingPricingUpserted.new(hash)
              when Types::SHIPPING_CONFIGURATION_ITEM_SHIPPING_PRICING_DELETED; ShippingConfigurationItemShippingPricingDeleted.new(hash)
              when Types::HS6_CODE_UPSERTED; Hs6CodeUpserted.new(hash)
              when Types::HS6_CODE_DELETED; Hs6CodeDeleted.new(hash)
              when Types::HS10_CODE_UPSERTED; Hs10CodeUpserted.new(hash)
              when Types::HS10_CODE_DELETED; Hs10CodeDeleted.new(hash)
              when Types::ITEM_ORIGIN_UPSERTED; ItemOriginUpserted.new(hash)
              when Types::ITEM_ORIGIN_DELETED; ItemOriginDeleted.new(hash)
              when Types::HARMONIZED_LANDED_COST_UPSERTED; HarmonizedLandedCostUpserted.new(hash)
              when Types::FULLY_HARMONIZED_ITEM_UPSERTED; FullyHarmonizedItemUpserted.new(hash)
              when Types::RULE_UPSERTED; RuleUpserted.new(hash)
              when Types::RULE_DELETED; RuleDeleted.new(hash)
              when Types::SNAPSHOT_UPSERTED; SnapshotUpserted.new(hash)
              when Types::SNAPSHOT_DELETED; SnapshotDeleted.new(hash)
              when Types::LABEL_UPSERTED; LabelUpserted.new(hash)
              when Types::LABEL_DELETED_V2; LabelDeletedV2.new(hash)
              when Types::LABEL_UPSERTED_V2; LabelUpsertedV2.new(hash)
              when Types::NOTIFICATION_UPSERTED_V2; NotificationUpsertedV2.new(hash)
              when Types::NOTIFICATION_DELETED_V2; NotificationDeletedV2.new(hash)
              when Types::MANIFESTED_LABEL_UPSERTED; ManifestedLabelUpserted.new(hash)
              when Types::MANIFESTED_LABEL_DELETED; ManifestedLabelDeleted.new(hash)
              when Types::LOCAL_ITEM_UPSERTED; LocalItemUpserted.new(hash)
              when Types::LOCAL_ITEM_DELETED; LocalItemDeleted.new(hash)
              when Types::CHECKOUT_OPTIN_RESPONSES_UPSERTED; CheckoutOptinResponsesUpserted.new(hash)
              when Types::CHECKOUT_OPTIN_RESPONSES_DELETED; CheckoutOptinResponsesDeleted.new(hash)
              when Types::BROWSE_OPTIN_RESPONSES_UPSERTED; BrowseOptinResponsesUpserted.new(hash)
              when Types::BROWSE_OPTIN_RESPONSES_DELETED; BrowseOptinResponsesDeleted.new(hash)
              when Types::ORDER_PLACED; OrderPlaced.new(hash)
              when Types::ORDER_PLACED_V2; OrderPlacedV2.new(hash)
              when Types::READY_TO_FULFILL; ReadyToFulfill.new(hash)
              when Types::READY_TO_FULFILL_V2; ReadyToFulfillV2.new(hash)
              when Types::MEMBERSHIP_UPSERTED_V2; MembershipUpsertedV2.new(hash)
              when Types::MEMBERSHIP_DELETED_V2; MembershipDeletedV2.new(hash)
              when Types::ORGANIZATION_UPSERTED; OrganizationUpserted.new(hash)
              when Types::ORGANIZATION_DELETED; OrganizationDeleted.new(hash)
              when Types::ORGANIZATION_UPSERTED_V2; OrganizationUpsertedV2.new(hash)
              when Types::ORGANIZATION_DELETED_V2; OrganizationDeletedV2.new(hash)
              when Types::ORGANIZATION_SHORT_ID_UPSERTED; OrganizationShortIdUpserted.new(hash)
              when Types::ORGANIZATION_SHORT_ID_DELETED; OrganizationShortIdDeleted.new(hash)
              when Types::SHORT_ID_UPSERTED; ShortIdUpserted.new(hash)
              when Types::SHORT_ID_DELETED; ShortIdDeleted.new(hash)
              when Types::ORGANIZATION_DEFAULT_CONFIGURATIONS_UPSERTED; OrganizationDefaultConfigurationsUpserted.new(hash)
              when Types::ORGANIZATION_DEFAULT_CONFIGURATIONS_DELETED; OrganizationDefaultConfigurationsDeleted.new(hash)
              when Types::ECOMMERCE_PLATFORM_UPSERTED; EcommercePlatformUpserted.new(hash)
              when Types::ECOMMERCE_PLATFORM_DELETED; EcommercePlatformDeleted.new(hash)
              when Types::AUTHORIZATION_DELETED_V2; AuthorizationDeletedV2.new(hash)
              when Types::AUTHORIZATION_STATUS_CHANGED; AuthorizationStatusChanged.new(hash)
              when Types::CARD_AUTHORIZATION_UPSERTED_V2; CardAuthorizationUpsertedV2.new(hash)
              when Types::CARD_AUTHORIZATION_DELETED_V2; CardAuthorizationDeletedV2.new(hash)
              when Types::ONLINE_AUTHORIZATION_UPSERTED_V2; OnlineAuthorizationUpsertedV2.new(hash)
              when Types::ONLINE_AUTHORIZATION_DELETED_V2; OnlineAuthorizationDeletedV2.new(hash)
              when Types::CAPTURE_UPSERTED_V2; CaptureUpsertedV2.new(hash)
              when Types::CAPTURE_DELETED; CaptureDeleted.new(hash)
              when Types::CARD_UPSERTED_V2; CardUpsertedV2.new(hash)
              when Types::CARD_DELETED; CardDeleted.new(hash)
              when Types::PAYMENT_UPSERTED; PaymentUpserted.new(hash)
              when Types::PAYMENT_DELETED; PaymentDeleted.new(hash)
              when Types::REFUND_UPSERTED_V2; RefundUpsertedV2.new(hash)
              when Types::REFUND_DELETED_V2; RefundDeletedV2.new(hash)
              when Types::REFUND_CAPTURE_UPSERTED_V2; RefundCaptureUpsertedV2.new(hash)
              when Types::REVERSAL_UPSERTED; ReversalUpserted.new(hash)
              when Types::REVERSAL_DELETED; ReversalDeleted.new(hash)
              when Types::CAPTURE_IDENTIFIER_UPSERTED; CaptureIdentifierUpserted.new(hash)
              when Types::CAPTURE_IDENTIFIER_DELETED; CaptureIdentifierDeleted.new(hash)
              when Types::REFUND_IDENTIFIER_UPSERTED; RefundIdentifierUpserted.new(hash)
              when Types::REFUND_IDENTIFIER_DELETED; RefundIdentifierDeleted.new(hash)
              when Types::VIRTUAL_CARD_CAPTURE_UPSERTED; VirtualCardCaptureUpserted.new(hash)
              when Types::VIRTUAL_CARD_CAPTURE_DELETED; VirtualCardCaptureDeleted.new(hash)
              when Types::VIRTUAL_CARD_REFUND_UPSERTED; VirtualCardRefundUpserted.new(hash)
              when Types::VIRTUAL_CARD_REFUND_DELETED; VirtualCardRefundDeleted.new(hash)
              when Types::PAYMENT_REQUEST_UPSERTED; PaymentRequestUpserted.new(hash)
              when Types::PRICE_BOOK_UPSERTED; PriceBookUpserted.new(hash)
              when Types::PRICE_BOOK_DELETED; PriceBookDeleted.new(hash)
              when Types::PRICE_BOOK_ITEM_UPSERTED; PriceBookItemUpserted.new(hash)
              when Types::PRICE_BOOK_ITEM_DELETED; PriceBookItemDeleted.new(hash)
              when Types::ORGANIZATION_RATES_PUBLISHED; OrganizationRatesPublished.new(hash)
              when Types::RATECARD_LANE_UPSERTED; RatecardLaneUpserted.new(hash)
              when Types::RATECARD_LANE_DELETED; RatecardLaneDeleted.new(hash)
              when Types::RATECARD_UPSERTED; RatecardUpserted.new(hash)
              when Types::RATECARD_DELETED; RatecardDeleted.new(hash)
              when Types::RETURN_UPSERTED; ReturnUpserted.new(hash)
              when Types::RETURN_DELETED; ReturnDeleted.new(hash)
              when Types::RETURN_UPSERTED_V2; ReturnUpsertedV2.new(hash)
              when Types::RETURN_DELETED_V2; ReturnDeletedV2.new(hash)
              when Types::SHOPIFY_LOCALIZATION_SETTING_UPSERTED; ShopifyLocalizationSettingUpserted.new(hash)
              when Types::SHOPIFY_LOCALIZATION_SETTING_DELETED; ShopifyLocalizationSettingDeleted.new(hash)
              when Types::TRACKING_LABEL_EVENT_UPSERTED; TrackingLabelEventUpserted.new(hash)
              else EventUndefinedType.new(:discriminator => discriminator)
            end
          end

        end

        class EventUndefinedType < Event

          attr_reader :name

          def initialize(incoming={})
            super(:discriminator => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        class ExpandableCard

          module Types
            CARD = 'card' unless defined?(CARD)
            CARD_REFERENCE = 'card_reference' unless defined?(CARD_REFERENCE)
            CARD_SUMMARY = 'card_summary' unless defined?(CARD_SUMMARY)
          end

          attr_reader :discriminator

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:discriminator], 'ExpandableCard')
            @discriminator = HttpClient::Preconditions.assert_class('discriminator', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of expandable_card directly - must use one of the specific types: card, card_reference, card_summary'
          end

          def to_hash
            subtype_to_hash.merge(:discriminator => @discriminator)
          end

          def ExpandableCard.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:discriminator].to_s.strip
            if discriminator.empty?
              raise "Union type[expandable_card] requires a field named 'discriminator'"
            end
            case discriminator
              when Types::CARD; Card.new(hash)
              when Types::CARD_REFERENCE; CardReference.new(hash)
              when Types::CARD_SUMMARY; CardSummary.new(hash)
              else ExpandableCardUndefinedType.new(:discriminator => discriminator)
            end
          end

        end

        class ExpandableCardUndefinedType < ExpandableCard

          attr_reader :name

          def initialize(incoming={})
            super(:discriminator => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        class ExpandableCenter

          module Types
            CENTER = 'center' unless defined?(CENTER)
            CENTER_REFERENCE = 'center_reference' unless defined?(CENTER_REFERENCE)
          end

          attr_reader :discriminator

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:discriminator], 'ExpandableCenter')
            @discriminator = HttpClient::Preconditions.assert_class('discriminator', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of expandable_center directly - must use one of the specific types: center, center_reference'
          end

          def to_hash
            subtype_to_hash.merge(:discriminator => @discriminator)
          end

          def ExpandableCenter.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:discriminator].to_s.strip
            if discriminator.empty?
              raise "Union type[expandable_center] requires a field named 'discriminator'"
            end
            case discriminator
              when Types::CENTER; Center.new(hash)
              when Types::CENTER_REFERENCE; CenterReference.new(hash)
              else ExpandableCenterUndefinedType.new(:discriminator => discriminator)
            end
          end

        end

        class ExpandableCenterUndefinedType < ExpandableCenter

          attr_reader :name

          def initialize(incoming={})
            super(:discriminator => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        class ExpandableExperience

          module Types
            EXPERIENCE = 'experience' unless defined?(EXPERIENCE)
            EXPERIENCE_REFERENCE = 'experience_reference' unless defined?(EXPERIENCE_REFERENCE)
          end

          attr_reader :discriminator

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:discriminator], 'ExpandableExperience')
            @discriminator = HttpClient::Preconditions.assert_class('discriminator', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of expandable_experience directly - must use one of the specific types: experience, experience_reference'
          end

          def to_hash
            subtype_to_hash.merge(:discriminator => @discriminator)
          end

          def ExpandableExperience.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:discriminator].to_s.strip
            if discriminator.empty?
              raise "Union type[expandable_experience] requires a field named 'discriminator'"
            end
            case discriminator
              when Types::EXPERIENCE; Experience.new(hash)
              when Types::EXPERIENCE_REFERENCE; ExperienceReference.new(hash)
              else ExpandableExperienceUndefinedType.new(:discriminator => discriminator)
            end
          end

        end

        class ExpandableExperienceUndefinedType < ExpandableExperience

          attr_reader :name

          def initialize(incoming={})
            super(:discriminator => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        class ExpandableOrder

          module Types
            ORDER = 'order' unless defined?(ORDER)
            ORDER_REFERENCE = 'order_reference' unless defined?(ORDER_REFERENCE)
          end

          attr_reader :discriminator

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:discriminator], 'ExpandableOrder')
            @discriminator = HttpClient::Preconditions.assert_class('discriminator', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of expandable_order directly - must use one of the specific types: order, order_reference'
          end

          def to_hash
            subtype_to_hash.merge(:discriminator => @discriminator)
          end

          def ExpandableOrder.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:discriminator].to_s.strip
            if discriminator.empty?
              raise "Union type[expandable_order] requires a field named 'discriminator'"
            end
            case discriminator
              when Types::ORDER; Order.new(hash)
              when Types::ORDER_REFERENCE; OrderReference.new(hash)
              else ExpandableOrderUndefinedType.new(:discriminator => discriminator)
            end
          end

        end

        class ExpandableOrderUndefinedType < ExpandableOrder

          attr_reader :name

          def initialize(incoming={})
            super(:discriminator => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        class ExpandableOrganization

          module Types
            ORGANIZATION = 'organization' unless defined?(ORGANIZATION)
            ORGANIZATION_REFERENCE = 'organization_reference' unless defined?(ORGANIZATION_REFERENCE)
          end

          attr_reader :discriminator

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:discriminator], 'ExpandableOrganization')
            @discriminator = HttpClient::Preconditions.assert_class('discriminator', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of expandable_organization directly - must use one of the specific types: organization, organization_reference'
          end

          def to_hash
            subtype_to_hash.merge(:discriminator => @discriminator)
          end

          def ExpandableOrganization.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:discriminator].to_s.strip
            if discriminator.empty?
              raise "Union type[expandable_organization] requires a field named 'discriminator'"
            end
            case discriminator
              when Types::ORGANIZATION; Organization.new(hash)
              when Types::ORGANIZATION_REFERENCE; OrganizationReference.new(hash)
              else ExpandableOrganizationUndefinedType.new(:discriminator => discriminator)
            end
          end

        end

        class ExpandableOrganizationUndefinedType < ExpandableOrganization

          attr_reader :name

          def initialize(incoming={})
            super(:discriminator => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        # Information about which payment processor performed the transaction and how it
        # can be tracked in their system
        class ExpandablePaymentProcessor

          module Types
            PAYMENT_PROCESSOR = 'payment_processor' unless defined?(PAYMENT_PROCESSOR)
            PAYMENT_PROCESSOR_REFERENCE = 'payment_processor_reference' unless defined?(PAYMENT_PROCESSOR_REFERENCE)
          end

          attr_reader :discriminator

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:discriminator], 'ExpandablePaymentProcessor')
            @discriminator = HttpClient::Preconditions.assert_class('discriminator', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of expandable_payment_processor directly - must use one of the specific types: payment_processor, payment_processor_reference'
          end

          def to_hash
            subtype_to_hash.merge(:discriminator => @discriminator)
          end

          def ExpandablePaymentProcessor.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:discriminator].to_s.strip
            if discriminator.empty?
              raise "Union type[expandable_payment_processor] requires a field named 'discriminator'"
            end
            case discriminator
              when Types::PAYMENT_PROCESSOR; PaymentProcessor.new(hash)
              when Types::PAYMENT_PROCESSOR_REFERENCE; PaymentProcessorReference.new(hash)
              else ExpandablePaymentProcessorUndefinedType.new(:discriminator => discriminator)
            end
          end

        end

        class ExpandablePaymentProcessorUndefinedType < ExpandablePaymentProcessor

          attr_reader :name

          def initialize(incoming={})
            super(:discriminator => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        # A subcatalog can be represented with just it's ID, or the entire model
        class ExpandableSubcatalog

          module Types
            SUBCATALOG = 'subcatalog' unless defined?(SUBCATALOG)
            SUBCATALOG_REFERENCE = 'subcatalog_reference' unless defined?(SUBCATALOG_REFERENCE)
          end

          attr_reader :discriminator

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:discriminator], 'ExpandableSubcatalog')
            @discriminator = HttpClient::Preconditions.assert_class('discriminator', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of expandable_subcatalog directly - must use one of the specific types: subcatalog, subcatalog_reference'
          end

          def to_hash
            subtype_to_hash.merge(:discriminator => @discriminator)
          end

          def ExpandableSubcatalog.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:discriminator].to_s.strip
            if discriminator.empty?
              raise "Union type[expandable_subcatalog] requires a field named 'discriminator'"
            end
            case discriminator
              when Types::SUBCATALOG; Subcatalog.new(hash)
              when Types::SUBCATALOG_REFERENCE; SubcatalogReference.new(hash)
              else ExpandableSubcatalogUndefinedType.new(:discriminator => discriminator)
            end
          end

        end

        class ExpandableSubcatalogUndefinedType < ExpandableSubcatalog

          attr_reader :name

          def initialize(incoming={})
            super(:discriminator => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        class ExpandableUser

          module Types
            USER = 'user' unless defined?(USER)
            USER_REFERENCE = 'user_reference' unless defined?(USER_REFERENCE)
          end

          attr_reader :discriminator

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:discriminator], 'ExpandableUser')
            @discriminator = HttpClient::Preconditions.assert_class('discriminator', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of expandable_user directly - must use one of the specific types: user, user_reference'
          end

          def to_hash
            subtype_to_hash.merge(:discriminator => @discriminator)
          end

          def ExpandableUser.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:discriminator].to_s.strip
            if discriminator.empty?
              raise "Union type[expandable_user] requires a field named 'discriminator'"
            end
            case discriminator
              when Types::USER; User.new(hash)
              when Types::USER_REFERENCE; UserReference.new(hash)
              else ExpandableUserUndefinedType.new(:discriminator => discriminator)
            end
          end

        end

        class ExpandableUserUndefinedType < ExpandableUser

          attr_reader :name

          def initialize(incoming={})
            super(:discriminator => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        # Export deliveries represent actions to take once a requested export has
        # completed. A common pattern would be to request delivery of the export via
        # email - you will then receive an email notification once the requested export
        # is ready
        class ExportDelivery

          module Types
            EXPORT_DELIVERY_EMAIL = 'export_delivery_email' unless defined?(EXPORT_DELIVERY_EMAIL)
          end

          attr_reader :discriminator

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:discriminator], 'ExportDelivery')
            @discriminator = HttpClient::Preconditions.assert_class('discriminator', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of export_delivery directly - must use one of the specific types: export_delivery_email'
          end

          def to_hash
            subtype_to_hash.merge(:discriminator => @discriminator)
          end

          def ExportDelivery.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:discriminator].to_s.strip
            if discriminator.empty?
              raise "Union type[export_delivery] requires a field named 'discriminator'"
            end
            case discriminator
              when Types::EXPORT_DELIVERY_EMAIL; ExportDeliveryEmail.new(hash)
              else ExportDeliveryUndefinedType.new(:discriminator => discriminator)
            end
          end

        end

        class ExportDeliveryUndefinedType < ExportDelivery

          attr_reader :name

          def initialize(incoming={})
            super(:discriminator => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        # Defines the specific export data that defines which records are exported and
        # into which format
        class ExportType

          module Types
            ACCOUNT_TRANSACTIONS_EXPORT_TYPE = 'account_transactions_export_type' unless defined?(ACCOUNT_TRANSACTIONS_EXPORT_TYPE)
            ACCOUNT_ORDERS_EXPORT_TYPE = 'account_orders_export_type' unless defined?(ACCOUNT_ORDERS_EXPORT_TYPE)
            ANALYTICS_EXPORT_TYPE = 'analytics_export_type' unless defined?(ANALYTICS_EXPORT_TYPE)
            CATALOG_ITEM_EXPORT_TYPE = 'catalog_item_export_type' unless defined?(CATALOG_ITEM_EXPORT_TYPE)
            EXPERIENCE_EXPORT_TYPE = 'experience_export_type' unless defined?(EXPERIENCE_EXPORT_TYPE)
            HARMONIZATION_OVERVIEW_EXPORT_TYPE = 'harmonization_overview_export_type' unless defined?(HARMONIZATION_OVERVIEW_EXPORT_TYPE)
            HARMONIZATION_HS6_EXPORT_TYPE = 'harmonization_hs6_export_type' unless defined?(HARMONIZATION_HS6_EXPORT_TYPE)
            HARMONIZATION_HS10_EXPORT_TYPE = 'harmonization_hs10_export_type' unless defined?(HARMONIZATION_HS10_EXPORT_TYPE)
            HARMONIZATION_TARIFF_CODES_EXPORT_TYPE = 'harmonization_tariff_codes_export_type' unless defined?(HARMONIZATION_TARIFF_CODES_EXPORT_TYPE)
            UNHARMONIZED_ITEM_EXPORT_TYPE = 'unharmonized_item_export_type' unless defined?(UNHARMONIZED_ITEM_EXPORT_TYPE)
            ORDER_EXPORT_TYPE = 'order_export_type' unless defined?(ORDER_EXPORT_TYPE)
            PRICE_BOOK_ITEM_EXPORT_TYPE = 'price_book_item_export_type' unless defined?(PRICE_BOOK_ITEM_EXPORT_TYPE)
            SOLIDUS_PRODUCT_EXPORT_TYPE = 'solidus_product_export_type' unless defined?(SOLIDUS_PRODUCT_EXPORT_TYPE)
            SOLIDUS_VARIANT_EXPORT_TYPE = 'solidus_variant_export_type' unless defined?(SOLIDUS_VARIANT_EXPORT_TYPE)
            LOCALIZED_ITEM_PRICES_EXPORT_TYPE = 'localized_item_prices_export_type' unless defined?(LOCALIZED_ITEM_PRICES_EXPORT_TYPE)
            MARKETING_FEEDS_EXPORT_TYPE = 'marketing_feeds_export_type' unless defined?(MARKETING_FEEDS_EXPORT_TYPE)
            EXCLUSION_RULES_EXPORT_TYPE = 'exclusion_rules_export_type' unless defined?(EXCLUSION_RULES_EXPORT_TYPE)
          end

          attr_reader :discriminator

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:discriminator], 'ExportType')
            @discriminator = HttpClient::Preconditions.assert_class('discriminator', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of export_type directly - must use one of the specific types: account_transactions_export_type, account_orders_export_type, analytics_export_type, catalog_item_export_type, experience_export_type, harmonization_overview_export_type, harmonization_hs6_export_type, harmonization_hs10_export_type, harmonization_tariff_codes_export_type, unharmonized_item_export_type, order_export_type, price_book_item_export_type, solidus_product_export_type, solidus_variant_export_type, localized_item_prices_export_type, marketing_feeds_export_type, exclusion_rules_export_type'
          end

          def to_hash
            subtype_to_hash.merge(:discriminator => @discriminator)
          end

          def ExportType.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:discriminator].to_s.strip
            if discriminator.empty?
              raise "Union type[export_type] requires a field named 'discriminator'"
            end
            case discriminator
              when Types::ACCOUNT_TRANSACTIONS_EXPORT_TYPE; AccountTransactionsExportType.new(hash)
              when Types::ACCOUNT_ORDERS_EXPORT_TYPE; AccountOrdersExportType.new(hash)
              when Types::ANALYTICS_EXPORT_TYPE; AnalyticsExportType.new(hash)
              when Types::CATALOG_ITEM_EXPORT_TYPE; CatalogItemExportType.new(hash)
              when Types::EXPERIENCE_EXPORT_TYPE; ExperienceExportType.new(hash)
              when Types::HARMONIZATION_OVERVIEW_EXPORT_TYPE; HarmonizationOverviewExportType.new(hash)
              when Types::HARMONIZATION_HS6_EXPORT_TYPE; HarmonizationHs6ExportType.new(hash)
              when Types::HARMONIZATION_HS10_EXPORT_TYPE; HarmonizationHs10ExportType.new(hash)
              when Types::HARMONIZATION_TARIFF_CODES_EXPORT_TYPE; HarmonizationTariffCodesExportType.new(hash)
              when Types::UNHARMONIZED_ITEM_EXPORT_TYPE; UnharmonizedItemExportType.new(hash)
              when Types::ORDER_EXPORT_TYPE; OrderExportType.new(hash)
              when Types::PRICE_BOOK_ITEM_EXPORT_TYPE; PriceBookItemExportType.new(hash)
              when Types::SOLIDUS_PRODUCT_EXPORT_TYPE; SolidusProductExportType.new(hash)
              when Types::SOLIDUS_VARIANT_EXPORT_TYPE; SolidusVariantExportType.new(hash)
              when Types::LOCALIZED_ITEM_PRICES_EXPORT_TYPE; LocalizedItemPricesExportType.new(hash)
              when Types::MARKETING_FEEDS_EXPORT_TYPE; MarketingFeedsExportType.new(hash)
              when Types::EXCLUSION_RULES_EXPORT_TYPE; ExclusionRulesExportType.new(hash)
              else ExportTypeUndefinedType.new(:discriminator => discriminator)
            end
          end

        end

        class ExportTypeUndefinedType < ExportType

          attr_reader :name

          def initialize(incoming={})
            super(:discriminator => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        class FieldValidationRule

          module Types
            FIELD_VALIDATION_REQUIRED = 'required' unless defined?(FIELD_VALIDATION_REQUIRED)
            FIELD_VALIDATION_REQUIRED_IF_PRESENT = 'required_if_present' unless defined?(FIELD_VALIDATION_REQUIRED_IF_PRESENT)
            FIELD_VALIDATION_MIN = 'min' unless defined?(FIELD_VALIDATION_MIN)
            FIELD_VALIDATION_MAX = 'max' unless defined?(FIELD_VALIDATION_MAX)
            FIELD_VALIDATION_PATTERN = 'pattern' unless defined?(FIELD_VALIDATION_PATTERN)
          end

          attr_reader :discriminator

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:discriminator], 'FieldValidationRule')
            @discriminator = HttpClient::Preconditions.assert_class('discriminator', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of field_validation_rule directly - must use one of the specific types: field_validation_required, field_validation_required_if_present, field_validation_min, field_validation_max, field_validation_pattern'
          end

          def to_hash
            subtype_to_hash.merge(:discriminator => @discriminator)
          end

          def FieldValidationRule.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:discriminator].to_s.strip
            if discriminator.empty?
              raise "Union type[field_validation_rule] requires a field named 'discriminator'"
            end
            case discriminator
              when Types::FIELD_VALIDATION_REQUIRED; FieldValidationRequired.new(hash)
              when Types::FIELD_VALIDATION_REQUIRED_IF_PRESENT; FieldValidationRequiredIfPresent.new(hash)
              when Types::FIELD_VALIDATION_MIN; FieldValidationMin.new(hash)
              when Types::FIELD_VALIDATION_MAX; FieldValidationMax.new(hash)
              when Types::FIELD_VALIDATION_PATTERN; FieldValidationPattern.new(hash)
              else FieldValidationRuleUndefinedType.new(:discriminator => discriminator)
            end
          end

        end

        class FieldValidationRuleUndefinedType < FieldValidationRule

          attr_reader :name

          def initialize(incoming={})
            super(:discriminator => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        class FraudOrderReference

          module Types
            # Use this option if you are integrated with Flow orders.
            FRAUD_FLOW_ORDER_REFERENCE = 'flow_order' unless defined?(FRAUD_FLOW_ORDER_REFERENCE)
            # Use this option if you are integrated with Flow Payment Gateway.
            FRAUD_PAYMENT_REQUEST_REFERENCE = 'payment_request' unless defined?(FRAUD_PAYMENT_REQUEST_REFERENCE)
          end

          attr_reader :discriminator

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:discriminator], 'FraudOrderReference')
            @discriminator = HttpClient::Preconditions.assert_class('discriminator', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of fraud_order_reference directly - must use one of the specific types: fraud_flow_order_reference, fraud_payment_request_reference'
          end

          def to_hash
            subtype_to_hash.merge(:discriminator => @discriminator)
          end

          def FraudOrderReference.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:discriminator].to_s.strip
            if discriminator.empty?
              raise "Union type[fraud_order_reference] requires a field named 'discriminator'"
            end
            case discriminator
              when Types::FRAUD_FLOW_ORDER_REFERENCE; FraudFlowOrderReference.new(hash)
              when Types::FRAUD_PAYMENT_REQUEST_REFERENCE; FraudPaymentRequestReference.new(hash)
              else FraudOrderReferenceUndefinedType.new(:discriminator => discriminator)
            end
          end

        end

        class FraudOrderReferenceUndefinedType < FraudOrderReference

          attr_reader :name

          def initialize(incoming={})
            super(:discriminator => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        class GatewayAuthenticationData

          module Types
            STRIPE_AUTHENTICATION_DATA = 'stripe_authentication_data' unless defined?(STRIPE_AUTHENTICATION_DATA)
          end

          attr_reader :discriminator

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:discriminator], 'GatewayAuthenticationData')
            @discriminator = HttpClient::Preconditions.assert_class('discriminator', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of gateway_authentication_data directly - must use one of the specific types: stripe_authentication_data'
          end

          def to_hash
            subtype_to_hash.merge(:discriminator => @discriminator)
          end

          def GatewayAuthenticationData.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:discriminator].to_s.strip
            if discriminator.empty?
              raise "Union type[gateway_authentication_data] requires a field named 'discriminator'"
            end
            case discriminator
              when Types::STRIPE_AUTHENTICATION_DATA; StripeAuthenticationData.new(hash)
              else GatewayAuthenticationDataUndefinedType.new(:discriminator => discriminator)
            end
          end

        end

        class GatewayAuthenticationDataUndefinedType < GatewayAuthenticationData

          attr_reader :name

          def initialize(incoming={})
            super(:discriminator => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        class GatewayAuthenticationDataForm

          module Types
            STRIPE_AUTHENTICATION_DATA_FORM = 'stripe_authentication_data_form' unless defined?(STRIPE_AUTHENTICATION_DATA_FORM)
          end

          attr_reader :discriminator

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:discriminator], 'GatewayAuthenticationDataForm')
            @discriminator = HttpClient::Preconditions.assert_class('discriminator', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of gateway_authentication_data_form directly - must use one of the specific types: stripe_authentication_data_form'
          end

          def to_hash
            subtype_to_hash.merge(:discriminator => @discriminator)
          end

          def GatewayAuthenticationDataForm.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:discriminator].to_s.strip
            if discriminator.empty?
              raise "Union type[gateway_authentication_data_form] requires a field named 'discriminator'"
            end
            case discriminator
              when Types::STRIPE_AUTHENTICATION_DATA_FORM; StripeAuthenticationDataForm.new(hash)
              else GatewayAuthenticationDataFormUndefinedType.new(:discriminator => discriminator)
            end
          end

        end

        class GatewayAuthenticationDataFormUndefinedType < GatewayAuthenticationDataForm

          attr_reader :name

          def initialize(incoming={})
            super(:discriminator => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        # Configurations to support inline payment authentication experiences. Mobile to
        # be supported at a future date.
        class InlineActionConfiguration

          module Types
            BROWSER_INLINE_ACTION_CONFIGURATION = 'browser_inline_action_configuration' unless defined?(BROWSER_INLINE_ACTION_CONFIGURATION)
          end

          attr_reader :discriminator

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:discriminator], 'InlineActionConfiguration')
            @discriminator = HttpClient::Preconditions.assert_class('discriminator', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of inline_action_configuration directly - must use one of the specific types: browser_inline_action_configuration'
          end

          def to_hash
            subtype_to_hash.merge(:discriminator => @discriminator)
          end

          def InlineActionConfiguration.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:discriminator].to_s.strip
            if discriminator.empty?
              raise "Union type[inline_action_configuration] requires a field named 'discriminator'"
            end
            case discriminator
              when Types::BROWSER_INLINE_ACTION_CONFIGURATION; BrowserInlineActionConfiguration.new(hash)
              else InlineActionConfigurationUndefinedType.new(:discriminator => discriminator)
            end
          end

        end

        class InlineActionConfigurationUndefinedType < InlineActionConfiguration

          attr_reader :name

          def initialize(incoming={})
            super(:discriminator => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        class InputSpecificationLimitation

          module Types
            INPUT_SPECIFICATION_LIMITATION_MAX = 'input_specification_limitation_max' unless defined?(INPUT_SPECIFICATION_LIMITATION_MAX)
          end

          attr_reader :discriminator

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:discriminator], 'InputSpecificationLimitation')
            @discriminator = HttpClient::Preconditions.assert_class('discriminator', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of input_specification_limitation directly - must use one of the specific types: input_specification_limitation_max'
          end

          def to_hash
            subtype_to_hash.merge(:discriminator => @discriminator)
          end

          def InputSpecificationLimitation.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:discriminator].to_s.strip
            if discriminator.empty?
              raise "Union type[input_specification_limitation] requires a field named 'discriminator'"
            end
            case discriminator
              when Types::INPUT_SPECIFICATION_LIMITATION_MAX; InputSpecificationLimitationMax.new(hash)
              else InputSpecificationLimitationUndefinedType.new(:discriminator => discriminator)
            end
          end

        end

        class InputSpecificationLimitationUndefinedType < InputSpecificationLimitation

          attr_reader :name

          def initialize(incoming={})
            super(:discriminator => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        # Types of rules used to apply on inventory to calculate available quantity
        class InventoryStrategy

          module Types
            # Enables backorders, setting an optional number of units that we allow for
            # backorder. For example, a backorder w/ quantity 10 will enable selling until
            # the actual inventory quantity is -10.
            INVENTORY_BACKORDER = 'inventory_backorder' unless defined?(INVENTORY_BACKORDER)
            # Treats inventory as available as long as the actual inventory quantity is >
            # the specified quantity. A common use case is to set quantity to zero to
            # indicate availability as long as there is at least 1 unit available.
            INVENTORY_STOCK = 'inventory_stock' unless defined?(INVENTORY_STOCK)
            # Items affected with rules pursuing an unlimited strategy will always be
            # available
            INVENTORY_UNLIMITED = 'inventory_unlimited' unless defined?(INVENTORY_UNLIMITED)
            # Items affected with rules pursuing an ecommerce platform strategy will always
            # follow the ecommerce platform inventory
            INVENTORY_FOLLOW_ECOMMERCE_PLATFORM = 'inventory_follow_ecommerce_platform' unless defined?(INVENTORY_FOLLOW_ECOMMERCE_PLATFORM)
          end

          attr_reader :discriminator

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:discriminator], 'InventoryStrategy')
            @discriminator = HttpClient::Preconditions.assert_class('discriminator', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of inventory_strategy directly - must use one of the specific types: inventory_backorder, inventory_stock, inventory_unlimited, inventory_follow_ecommerce_platform'
          end

          def to_hash
            subtype_to_hash.merge(:discriminator => @discriminator)
          end

          def InventoryStrategy.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:discriminator].to_s.strip
            if discriminator.empty?
              raise "Union type[inventory_strategy] requires a field named 'discriminator'"
            end
            case discriminator
              when Types::INVENTORY_BACKORDER; InventoryBackorder.new(hash)
              when Types::INVENTORY_STOCK; InventoryStock.new(hash)
              when Types::INVENTORY_UNLIMITED; InventoryUnlimited.new(hash)
              when Types::INVENTORY_FOLLOW_ECOMMERCE_PLATFORM; InventoryFollowEcommercePlatform.new(hash)
              else InventoryStrategyUndefinedType.new(:discriminator => discriminator)
            end
          end

        end

        class InventoryStrategyUndefinedType < InventoryStrategy

          attr_reader :name

          def initialize(incoming={})
            super(:discriminator => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        # The localized prices for an item are returned as a list - the key of each
        # element is defined here
        class LocalizedPrice

          module Types
            LOCALIZED_ITEM_PRICE = 'localized_item_price' unless defined?(LOCALIZED_ITEM_PRICE)
            LOCALIZED_ITEM_VAT = 'localized_item_vat' unless defined?(LOCALIZED_ITEM_VAT)
            LOCALIZED_ITEM_DUTY = 'localized_item_duty' unless defined?(LOCALIZED_ITEM_DUTY)
            LOCALIZED_TOTAL = 'localized_total' unless defined?(LOCALIZED_TOTAL)
          end

          attr_reader :key

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:key], 'LocalizedPrice')
            @key = HttpClient::Preconditions.assert_class('key', opts.delete(:key), String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of localized_price directly - must use one of the specific types: localized_item_price, localized_item_vat, localized_item_duty, localized_total'
          end

          def to_hash
            subtype_to_hash.merge(:key => @key)
          end

          def LocalizedPrice.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:key].to_s.strip
            if discriminator.empty?
              raise "Union type[localized_price] requires a field named 'key'"
            end
            case discriminator
              when Types::LOCALIZED_ITEM_PRICE; LocalizedItemPrice.new(hash)
              when Types::LOCALIZED_ITEM_VAT; LocalizedItemVat.new(hash)
              when Types::LOCALIZED_ITEM_DUTY; LocalizedItemDuty.new(hash)
              when Types::LOCALIZED_TOTAL; LocalizedTotal.new(hash)
              else LocalizedPriceUndefinedType.new(:key => discriminator)
            end
          end

        end

        class LocalizedPriceUndefinedType < LocalizedPrice

          attr_reader :name

          def initialize(incoming={})
            super(:key => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:key), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        class OnlineAuthorizationDetails

          module Types
            CRYPTOPAY_AUTHORIZATION_DETAILS = 'cryptopay_authorization_details' unless defined?(CRYPTOPAY_AUTHORIZATION_DETAILS)
            PAYPAL_AUTHORIZATION_DETAILS = 'paypal_authorization_details' unless defined?(PAYPAL_AUTHORIZATION_DETAILS)
            REDIRECT_AUTHORIZATION_DETAILS = 'redirect_authorization_details' unless defined?(REDIRECT_AUTHORIZATION_DETAILS)
            INLINE_AUTHORIZATION_DETAILS = 'inline_authorization_details' unless defined?(INLINE_AUTHORIZATION_DETAILS)
          end

          attr_reader :discriminator

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:discriminator], 'OnlineAuthorizationDetails')
            @discriminator = HttpClient::Preconditions.assert_class('discriminator', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of online_authorization_details directly - must use one of the specific types: cryptopay_authorization_details, paypal_authorization_details, redirect_authorization_details, inline_authorization_details'
          end

          def to_hash
            subtype_to_hash.merge(:discriminator => @discriminator)
          end

          def OnlineAuthorizationDetails.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:discriminator].to_s.strip
            if discriminator.empty?
              raise "Union type[online_authorization_details] requires a field named 'discriminator'"
            end
            case discriminator
              when Types::CRYPTOPAY_AUTHORIZATION_DETAILS; CryptopayAuthorizationDetails.new(hash)
              when Types::PAYPAL_AUTHORIZATION_DETAILS; PaypalAuthorizationDetails.new(hash)
              when Types::REDIRECT_AUTHORIZATION_DETAILS; RedirectAuthorizationDetails.new(hash)
              when Types::INLINE_AUTHORIZATION_DETAILS; InlineAuthorizationDetails.new(hash)
              else OnlineAuthorizationDetailsUndefinedType.new(:discriminator => discriminator)
            end
          end

        end

        class OnlineAuthorizationDetailsUndefinedType < OnlineAuthorizationDetails

          attr_reader :name

          def initialize(incoming={})
            super(:discriminator => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        class OrderInformation

          module Types
            # Use this option if you are integrated with Flow orders.
            ORDER_INFORMATION_FLOW = 'flow' unless defined?(ORDER_INFORMATION_FLOW)
            ORDER_INFORMATION_DETAILS = 'details' unless defined?(ORDER_INFORMATION_DETAILS)
          end

          attr_reader :type

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:type], 'OrderInformation')
            @type = HttpClient::Preconditions.assert_class('type', opts.delete(:type), String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of order_information directly - must use one of the specific types: order_information_flow, order_information_details'
          end

          def to_hash
            subtype_to_hash.merge(:type => @type)
          end

          def OrderInformation.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:type].to_s.strip
            if discriminator.empty?
              raise "Union type[order_information] requires a field named 'type'"
            end
            case discriminator
              when Types::ORDER_INFORMATION_FLOW; OrderInformationFlow.new(hash)
              when Types::ORDER_INFORMATION_DETAILS; OrderInformationDetails.new(hash)
              else OrderInformationUndefinedType.new(:type => discriminator)
            end
          end

        end

        class OrderInformationUndefinedType < OrderInformation

          attr_reader :name

          def initialize(incoming={})
            super(:type => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:type), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        class OrderNumberGenerator

          module Types
            ORDER_NUMBER_GENERATOR_UUID = 'uuid' unless defined?(ORDER_NUMBER_GENERATOR_UUID)
            ORDER_NUMBER_GENERATOR_HEXADECIMAL = 'hexadecimal' unless defined?(ORDER_NUMBER_GENERATOR_HEXADECIMAL)
            ORDER_NUMBER_GENERATOR_PREFIX_SUFFIX = 'prefix_suffix' unless defined?(ORDER_NUMBER_GENERATOR_PREFIX_SUFFIX)
          end

          attr_reader :discriminator

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:discriminator], 'OrderNumberGenerator')
            @discriminator = HttpClient::Preconditions.assert_class('discriminator', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of order_number_generator directly - must use one of the specific types: order_number_generator_uuid, order_number_generator_hexadecimal, order_number_generator_prefix_suffix'
          end

          def to_hash
            subtype_to_hash.merge(:discriminator => @discriminator)
          end

          def OrderNumberGenerator.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:discriminator].to_s.strip
            if discriminator.empty?
              raise "Union type[order_number_generator] requires a field named 'discriminator'"
            end
            case discriminator
              when Types::ORDER_NUMBER_GENERATOR_UUID; OrderNumberGeneratorUuid.new(hash)
              when Types::ORDER_NUMBER_GENERATOR_HEXADECIMAL; OrderNumberGeneratorHexadecimal.new(hash)
              when Types::ORDER_NUMBER_GENERATOR_PREFIX_SUFFIX; OrderNumberGeneratorPrefixSuffix.new(hash)
              else OrderNumberGeneratorUndefinedType.new(:discriminator => discriminator)
            end
          end

        end

        class OrderNumberGeneratorUndefinedType < OrderNumberGenerator

          attr_reader :name

          def initialize(incoming={})
            super(:discriminator => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        class OrderPromotion

          module Types
            FREE_SHIPPING_ORDER_PROMOTION = 'free_shipping_order_promotion' unless defined?(FREE_SHIPPING_ORDER_PROMOTION)
          end

          attr_reader :discriminator

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:discriminator], 'OrderPromotion')
            @discriminator = HttpClient::Preconditions.assert_class('discriminator', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of order_promotion directly - must use one of the specific types: free_shipping_order_promotion'
          end

          def to_hash
            subtype_to_hash.merge(:discriminator => @discriminator)
          end

          def OrderPromotion.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:discriminator].to_s.strip
            if discriminator.empty?
              raise "Union type[order_promotion] requires a field named 'discriminator'"
            end
            case discriminator
              when Types::FREE_SHIPPING_ORDER_PROMOTION; FreeShippingOrderPromotion.new(hash)
              else OrderPromotionUndefinedType.new(:discriminator => discriminator)
            end
          end

        end

        class OrderPromotionUndefinedType < OrderPromotion

          attr_reader :name

          def initialize(incoming={})
            super(:discriminator => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        class OrderPromotionForm

          module Types
            FREE_SHIPPING_ORDER_PROMOTION_FORM = 'free_shipping_order_promotion_form' unless defined?(FREE_SHIPPING_ORDER_PROMOTION_FORM)
          end

          attr_reader :discriminator

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:discriminator], 'OrderPromotionForm')
            @discriminator = HttpClient::Preconditions.assert_class('discriminator', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of order_promotion_form directly - must use one of the specific types: free_shipping_order_promotion_form'
          end

          def to_hash
            subtype_to_hash.merge(:discriminator => @discriminator)
          end

          def OrderPromotionForm.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:discriminator].to_s.strip
            if discriminator.empty?
              raise "Union type[order_promotion_form] requires a field named 'discriminator'"
            end
            case discriminator
              when Types::FREE_SHIPPING_ORDER_PROMOTION_FORM; FreeShippingOrderPromotionForm.new(hash)
              else OrderPromotionFormUndefinedType.new(:discriminator => discriminator)
            end
          end

        end

        class OrderPromotionFormUndefinedType < OrderPromotionForm

          attr_reader :name

          def initialize(incoming={})
            super(:discriminator => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        class OrderQuotePrice

          module Types
            ORDER_QUOTE_PRICE_FREE = 'free' unless defined?(ORDER_QUOTE_PRICE_FREE)
            ORDER_QUOTE_PRICE_NOT_YET_KNOWN = 'not_yet_known' unless defined?(ORDER_QUOTE_PRICE_NOT_YET_KNOWN)
            ORDER_QUOTE_PRICE_INCLUDED = 'included' unless defined?(ORDER_QUOTE_PRICE_INCLUDED)
            ORDER_QUOTE_PRICE_STANDARD = 'price' unless defined?(ORDER_QUOTE_PRICE_STANDARD)
            ORDER_QUOTE_PRICE_ESTIMATED = 'estimated' unless defined?(ORDER_QUOTE_PRICE_ESTIMATED)
          end

          attr_reader :discriminator

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:discriminator], 'OrderQuotePrice')
            @discriminator = HttpClient::Preconditions.assert_class('discriminator', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of order_quote_price directly - must use one of the specific types: order_quote_price_free, order_quote_price_not_yet_known, order_quote_price_included, order_quote_price_standard, order_quote_price_estimated'
          end

          def to_hash
            subtype_to_hash.merge(:discriminator => @discriminator)
          end

          def OrderQuotePrice.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:discriminator].to_s.strip
            if discriminator.empty?
              raise "Union type[order_quote_price] requires a field named 'discriminator'"
            end
            case discriminator
              when Types::ORDER_QUOTE_PRICE_FREE; OrderQuotePriceFree.new(hash)
              when Types::ORDER_QUOTE_PRICE_NOT_YET_KNOWN; OrderQuotePriceNotYetKnown.new(hash)
              when Types::ORDER_QUOTE_PRICE_INCLUDED; OrderQuotePriceIncluded.new(hash)
              when Types::ORDER_QUOTE_PRICE_STANDARD; OrderQuotePriceStandard.new(hash)
              when Types::ORDER_QUOTE_PRICE_ESTIMATED; OrderQuotePriceEstimated.new(hash)
              else OrderQuotePriceUndefinedType.new(:discriminator => discriminator)
            end
          end

        end

        class OrderQuotePriceUndefinedType < OrderQuotePrice

          attr_reader :name

          def initialize(incoming={})
            super(:discriminator => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        class OrderRefundSummaryForm

          module Types
            ORDER_REFUND_SUMMARY_FULL_FORM = 'order_refund_summary_full_form' unless defined?(ORDER_REFUND_SUMMARY_FULL_FORM)
            ORDER_REFUND_SUMMARY_PARTIAL_FORM = 'order_refund_summary_partial_form' unless defined?(ORDER_REFUND_SUMMARY_PARTIAL_FORM)
          end

          attr_reader :discriminator

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:discriminator], 'OrderRefundSummaryForm')
            @discriminator = HttpClient::Preconditions.assert_class('discriminator', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of order_refund_summary_form directly - must use one of the specific types: order_refund_summary_full_form, order_refund_summary_partial_form'
          end

          def to_hash
            subtype_to_hash.merge(:discriminator => @discriminator)
          end

          def OrderRefundSummaryForm.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:discriminator].to_s.strip
            if discriminator.empty?
              raise "Union type[order_refund_summary_form] requires a field named 'discriminator'"
            end
            case discriminator
              when Types::ORDER_REFUND_SUMMARY_FULL_FORM; OrderRefundSummaryFullForm.new(hash)
              when Types::ORDER_REFUND_SUMMARY_PARTIAL_FORM; OrderRefundSummaryPartialForm.new(hash)
              else OrderRefundSummaryFormUndefinedType.new(:discriminator => discriminator)
            end
          end

        end

        class OrderRefundSummaryFormUndefinedType < OrderRefundSummaryForm

          attr_reader :name

          def initialize(incoming={})
            super(:discriminator => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        class PartnerCenterFee

          module Types
            COMMERCIAL_INVOICE_FEE = 'commercial_invoice_fee' unless defined?(COMMERCIAL_INVOICE_FEE)
            INBOUND_CARTON_FEE = 'inbound_carton_fee' unless defined?(INBOUND_CARTON_FEE)
            OUTBOUND_CARTON_FEE = 'outbound_carton_fee' unless defined?(OUTBOUND_CARTON_FEE)
          end

          attr_reader :discriminator

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:discriminator], 'PartnerCenterFee')
            @discriminator = HttpClient::Preconditions.assert_class('discriminator', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of partner_center_fee directly - must use one of the specific types: commercial_invoice_fee, inbound_carton_fee, outbound_carton_fee'
          end

          def to_hash
            subtype_to_hash.merge(:discriminator => @discriminator)
          end

          def PartnerCenterFee.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:discriminator].to_s.strip
            if discriminator.empty?
              raise "Union type[partner_center_fee] requires a field named 'discriminator'"
            end
            case discriminator
              when Types::COMMERCIAL_INVOICE_FEE; CommercialInvoiceFee.new(hash)
              when Types::INBOUND_CARTON_FEE; InboundCartonFee.new(hash)
              when Types::OUTBOUND_CARTON_FEE; OutboundCartonFee.new(hash)
              else PartnerCenterFeeUndefinedType.new(:discriminator => discriminator)
            end
          end

        end

        class PartnerCenterFeeUndefinedType < PartnerCenterFee

          attr_reader :name

          def initialize(incoming={})
            super(:discriminator => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        # Represents data for a specific online payment method
        class Payment

          module Types
            PAYMENT_PAYPAL = 'payment_paypal' unless defined?(PAYMENT_PAYPAL)
            PAYMENT_CRYPTOPAY = 'payment_cryptopay' unless defined?(PAYMENT_CRYPTOPAY)
          end

          attr_reader :discriminator

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:discriminator], 'Payment')
            @discriminator = HttpClient::Preconditions.assert_class('discriminator', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of payment directly - must use one of the specific types: payment_paypal, payment_cryptopay'
          end

          def to_hash
            subtype_to_hash.merge(:discriminator => @discriminator)
          end

          def Payment.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:discriminator].to_s.strip
            if discriminator.empty?
              raise "Union type[payment] requires a field named 'discriminator'"
            end
            case discriminator
              when Types::PAYMENT_PAYPAL; PaymentPaypal.new(hash)
              when Types::PAYMENT_CRYPTOPAY; PaymentCryptopay.new(hash)
              else PaymentUndefinedType.new(:discriminator => discriminator)
            end
          end

        end

        class PaymentUndefinedType < Payment

          attr_reader :name

          def initialize(incoming={})
            super(:discriminator => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        class PaymentCaptureOption

          module Types
            PAYMENT_CAPTURE_OPTION_AUTOMATIC_IMMEDIATE = 'automatic_immediate' unless defined?(PAYMENT_CAPTURE_OPTION_AUTOMATIC_IMMEDIATE)
            # Capture manually e.g. on fulfillment
            PAYMENT_CAPTURE_OPTION_MANUAL = 'manual' unless defined?(PAYMENT_CAPTURE_OPTION_MANUAL)
          end

          attr_reader :type

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:type], 'PaymentCaptureOption')
            @type = HttpClient::Preconditions.assert_class('type', opts.delete(:type), String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of payment_capture_option directly - must use one of the specific types: payment_capture_option_automatic_immediate, payment_capture_option_manual'
          end

          def to_hash
            subtype_to_hash.merge(:type => @type)
          end

          def PaymentCaptureOption.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:type].to_s.strip
            if discriminator.empty?
              raise "Union type[payment_capture_option] requires a field named 'type'"
            end
            case discriminator
              when Types::PAYMENT_CAPTURE_OPTION_AUTOMATIC_IMMEDIATE; PaymentCaptureOptionAutomaticImmediate.new(hash)
              when Types::PAYMENT_CAPTURE_OPTION_MANUAL; PaymentCaptureOptionManual.new(hash)
              else PaymentCaptureOptionUndefinedType.new(:type => discriminator)
            end
          end

        end

        class PaymentCaptureOptionUndefinedType < PaymentCaptureOption

          attr_reader :name

          def initialize(incoming={})
            super(:type => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:type), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        # Represents the data needed to initiate an online payment
        class PaymentForm

          module Types
            MERCHANT_OF_RECORD_PAYMENT_FORM = 'merchant_of_record_payment_form' unless defined?(MERCHANT_OF_RECORD_PAYMENT_FORM)
          end

          attr_reader :discriminator

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:discriminator], 'PaymentForm')
            @discriminator = HttpClient::Preconditions.assert_class('discriminator', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of payment_form directly - must use one of the specific types: merchant_of_record_payment_form'
          end

          def to_hash
            subtype_to_hash.merge(:discriminator => @discriminator)
          end

          def PaymentForm.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:discriminator].to_s.strip
            if discriminator.empty?
              raise "Union type[payment_form] requires a field named 'discriminator'"
            end
            case discriminator
              when Types::MERCHANT_OF_RECORD_PAYMENT_FORM; MerchantOfRecordPaymentForm.new(hash)
              else PaymentFormUndefinedType.new(:discriminator => discriminator)
            end
          end

        end

        class PaymentFormUndefinedType < PaymentForm

          attr_reader :name

          def initialize(incoming={})
            super(:discriminator => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        class PaymentMethodCard

          module Types
            PAYMENT_METHOD_CARD_PCI_DETAILS = 'card_pci_details' unless defined?(PAYMENT_METHOD_CARD_PCI_DETAILS)
            PAYMENT_METHOD_CARD_TOKEN = 'token' unless defined?(PAYMENT_METHOD_CARD_TOKEN)
          end

          attr_reader :type

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:type], 'PaymentMethodCard')
            @type = HttpClient::Preconditions.assert_class('type', opts.delete(:type), String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of payment_method_card directly - must use one of the specific types: payment_method_card_pci_details, payment_method_card_token'
          end

          def to_hash
            subtype_to_hash.merge(:type => @type)
          end

          def PaymentMethodCard.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:type].to_s.strip
            if discriminator.empty?
              raise "Union type[payment_method_card] requires a field named 'type'"
            end
            case discriminator
              when Types::PAYMENT_METHOD_CARD_PCI_DETAILS; PaymentMethodCardPciDetails.new(hash)
              when Types::PAYMENT_METHOD_CARD_TOKEN; PaymentMethodCardToken.new(hash)
              else PaymentMethodCardUndefinedType.new(:type => discriminator)
            end
          end

        end

        class PaymentMethodCardUndefinedType < PaymentMethodCard

          attr_reader :name

          def initialize(incoming={})
            super(:type => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:type), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        class PaymentMethodData

          module Types
            PAYMENT_METHOD_DATA_INIT_KLARNA = 'init_klarna' unless defined?(PAYMENT_METHOD_DATA_INIT_KLARNA)
            PAYMENT_METHOD_DATA_INIT_AFTERPAY = 'init_afterpay' unless defined?(PAYMENT_METHOD_DATA_INIT_AFTERPAY)
            PAYMENT_METHOD_DATA_INIT_APPLEPAY = 'init_applepay' unless defined?(PAYMENT_METHOD_DATA_INIT_APPLEPAY)
            PAYMENT_METHOD_DATA_INIT_GOOGLEPAY = 'init_googlepay' unless defined?(PAYMENT_METHOD_DATA_INIT_GOOGLEPAY)
            PAYMENT_METHOD_DATA_INIT_PAYPAL = 'init_paypal' unless defined?(PAYMENT_METHOD_DATA_INIT_PAYPAL)
            PAYMENT_METHOD_DATA_INIT_IDEAL = 'init_ideal' unless defined?(PAYMENT_METHOD_DATA_INIT_IDEAL)
            PAYMENT_METHOD_DATA_VALIDATE_APPLEPAY = 'validate_applepay' unless defined?(PAYMENT_METHOD_DATA_VALIDATE_APPLEPAY)
            PAYMENT_METHOD_DATA_AUTHORIZE_CARD = 'authorize_card' unless defined?(PAYMENT_METHOD_DATA_AUTHORIZE_CARD)
            PAYMENT_METHOD_DATA_AUTHORIZE_GOOGLEPAY = 'authorize_googlepay' unless defined?(PAYMENT_METHOD_DATA_AUTHORIZE_GOOGLEPAY)
            PAYMENT_METHOD_DATA_AUTHORIZE_APPLEPAY = 'authorize_applepay' unless defined?(PAYMENT_METHOD_DATA_AUTHORIZE_APPLEPAY)
            PAYMENT_METHOD_DATA_AUTHORIZE_PAYPAL = 'authorize_paypal' unless defined?(PAYMENT_METHOD_DATA_AUTHORIZE_PAYPAL)
            PAYMENT_METHOD_DATA_AUTHORIZE_KLARNA = 'authorize_klarna' unless defined?(PAYMENT_METHOD_DATA_AUTHORIZE_KLARNA)
            PAYMENT_METHOD_DATA_COMPLETE_AUTHORIZATION_CARD = 'complete_authorization_card' unless defined?(PAYMENT_METHOD_DATA_COMPLETE_AUTHORIZATION_CARD)
          end

          attr_reader :type

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:type], 'PaymentMethodData')
            @type = HttpClient::Preconditions.assert_class('type', opts.delete(:type), String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of payment_method_data directly - must use one of the specific types: payment_method_data_init_klarna, payment_method_data_init_afterpay, payment_method_data_init_applepay, payment_method_data_init_googlepay, payment_method_data_init_paypal, payment_method_data_init_ideal, payment_method_data_validate_applepay, payment_method_data_authorize_card, payment_method_data_authorize_googlepay, payment_method_data_authorize_applepay, payment_method_data_authorize_paypal, payment_method_data_authorize_klarna, payment_method_data_complete_authorization_card'
          end

          def to_hash
            subtype_to_hash.merge(:type => @type)
          end

          def PaymentMethodData.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:type].to_s.strip
            if discriminator.empty?
              raise "Union type[payment_method_data] requires a field named 'type'"
            end
            case discriminator
              when Types::PAYMENT_METHOD_DATA_INIT_KLARNA; PaymentMethodDataInitKlarna.new(hash)
              when Types::PAYMENT_METHOD_DATA_INIT_AFTERPAY; PaymentMethodDataInitAfterpay.new(hash)
              when Types::PAYMENT_METHOD_DATA_INIT_APPLEPAY; PaymentMethodDataInitApplepay.new(hash)
              when Types::PAYMENT_METHOD_DATA_INIT_GOOGLEPAY; PaymentMethodDataInitGooglepay.new(hash)
              when Types::PAYMENT_METHOD_DATA_INIT_PAYPAL; PaymentMethodDataInitPaypal.new(hash)
              when Types::PAYMENT_METHOD_DATA_INIT_IDEAL; PaymentMethodDataInitIdeal.new(hash)
              when Types::PAYMENT_METHOD_DATA_VALIDATE_APPLEPAY; PaymentMethodDataValidateApplepay.new(hash)
              when Types::PAYMENT_METHOD_DATA_AUTHORIZE_CARD; PaymentMethodDataAuthorizeCard.new(hash)
              when Types::PAYMENT_METHOD_DATA_AUTHORIZE_GOOGLEPAY; PaymentMethodDataAuthorizeGooglepay.new(hash)
              when Types::PAYMENT_METHOD_DATA_AUTHORIZE_APPLEPAY; PaymentMethodDataAuthorizeApplepay.new(hash)
              when Types::PAYMENT_METHOD_DATA_AUTHORIZE_PAYPAL; PaymentMethodDataAuthorizePaypal.new(hash)
              when Types::PAYMENT_METHOD_DATA_AUTHORIZE_KLARNA; PaymentMethodDataAuthorizeKlarna.new(hash)
              when Types::PAYMENT_METHOD_DATA_COMPLETE_AUTHORIZATION_CARD; PaymentMethodDataCompleteAuthorizationCard.new(hash)
              else PaymentMethodDataUndefinedType.new(:type => discriminator)
            end
          end

        end

        class PaymentMethodDataUndefinedType < PaymentMethodData

          attr_reader :name

          def initialize(incoming={})
            super(:type => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:type), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        class PaymentMethodDataAuthorizeKlarnaResult

          module Types
            PAYMENT_METHOD_DATA_AUTHORIZE_KLARNA_RESULT_SUCCESS = 'success' unless defined?(PAYMENT_METHOD_DATA_AUTHORIZE_KLARNA_RESULT_SUCCESS)
            PAYMENT_METHOD_DATA_AUTHORIZE_KLARNA_RESULT_FAILURE = 'failure' unless defined?(PAYMENT_METHOD_DATA_AUTHORIZE_KLARNA_RESULT_FAILURE)
          end

          attr_reader :type

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:type], 'PaymentMethodDataAuthorizeKlarnaResult')
            @type = HttpClient::Preconditions.assert_class('type', opts.delete(:type), String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of payment_method_data_authorize_klarna_result directly - must use one of the specific types: payment_method_data_authorize_klarna_result_success, payment_method_data_authorize_klarna_result_failure'
          end

          def to_hash
            subtype_to_hash.merge(:type => @type)
          end

          def PaymentMethodDataAuthorizeKlarnaResult.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:type].to_s.strip
            if discriminator.empty?
              raise "Union type[payment_method_data_authorize_klarna_result] requires a field named 'type'"
            end
            case discriminator
              when Types::PAYMENT_METHOD_DATA_AUTHORIZE_KLARNA_RESULT_SUCCESS; PaymentMethodDataAuthorizeKlarnaResultSuccess.new(hash)
              when Types::PAYMENT_METHOD_DATA_AUTHORIZE_KLARNA_RESULT_FAILURE; PaymentMethodDataAuthorizeKlarnaResultFailure.new(hash)
              else PaymentMethodDataAuthorizeKlarnaResultUndefinedType.new(:type => discriminator)
            end
          end

        end

        class PaymentMethodDataAuthorizeKlarnaResultUndefinedType < PaymentMethodDataAuthorizeKlarnaResult

          attr_reader :name

          def initialize(incoming={})
            super(:type => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:type), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        class PaymentMethodSummary

          module Types
            PAYMENT_METHOD_SUMMARY_CARD = 'card' unless defined?(PAYMENT_METHOD_SUMMARY_CARD)
            PAYMENT_METHOD_SUMMARY_KLARNA = 'klarna' unless defined?(PAYMENT_METHOD_SUMMARY_KLARNA)
            PAYMENT_METHOD_SUMMARY_AFTERPAY = 'afterpay' unless defined?(PAYMENT_METHOD_SUMMARY_AFTERPAY)
            PAYMENT_METHOD_SUMMARY_APPLEPAY = 'applepay' unless defined?(PAYMENT_METHOD_SUMMARY_APPLEPAY)
            PAYMENT_METHOD_SUMMARY_GOOGLEPAY = 'googlepay' unless defined?(PAYMENT_METHOD_SUMMARY_GOOGLEPAY)
            PAYMENT_METHOD_SUMMARY_PAYPAL = 'paypal' unless defined?(PAYMENT_METHOD_SUMMARY_PAYPAL)
            PAYMENT_METHOD_SUMMARY_IDEAL = 'ideal' unless defined?(PAYMENT_METHOD_SUMMARY_IDEAL)
          end

          attr_reader :type

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:type], 'PaymentMethodSummary')
            @type = HttpClient::Preconditions.assert_class('type', opts.delete(:type), String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of payment_method_summary directly - must use one of the specific types: payment_method_summary_card, payment_method_summary_klarna, payment_method_summary_afterpay, payment_method_summary_applepay, payment_method_summary_googlepay, payment_method_summary_paypal, payment_method_summary_ideal'
          end

          def to_hash
            subtype_to_hash.merge(:type => @type)
          end

          def PaymentMethodSummary.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:type].to_s.strip
            if discriminator.empty?
              raise "Union type[payment_method_summary] requires a field named 'type'"
            end
            case discriminator
              when Types::PAYMENT_METHOD_SUMMARY_CARD; PaymentMethodSummaryCard.new(hash)
              when Types::PAYMENT_METHOD_SUMMARY_KLARNA; PaymentMethodSummaryKlarna.new(hash)
              when Types::PAYMENT_METHOD_SUMMARY_AFTERPAY; PaymentMethodSummaryAfterpay.new(hash)
              when Types::PAYMENT_METHOD_SUMMARY_APPLEPAY; PaymentMethodSummaryApplepay.new(hash)
              when Types::PAYMENT_METHOD_SUMMARY_GOOGLEPAY; PaymentMethodSummaryGooglepay.new(hash)
              when Types::PAYMENT_METHOD_SUMMARY_PAYPAL; PaymentMethodSummaryPaypal.new(hash)
              when Types::PAYMENT_METHOD_SUMMARY_IDEAL; PaymentMethodSummaryIdeal.new(hash)
              else PaymentMethodSummaryUndefinedType.new(:type => discriminator)
            end
          end

        end

        class PaymentMethodSummaryUndefinedType < PaymentMethodSummary

          attr_reader :name

          def initialize(incoming={})
            super(:type => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:type), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        class PaymentMethodTag

          module Types
            ORGANIZATION_PAYMENT_METHOD_TAG = 'organization_payment_method_tag' unless defined?(ORGANIZATION_PAYMENT_METHOD_TAG)
            EXPERIENCE_PAYMENT_METHOD_TAG = 'experience_payment_method_tag' unless defined?(EXPERIENCE_PAYMENT_METHOD_TAG)
          end

          attr_reader :discriminator

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:discriminator], 'PaymentMethodTag')
            @discriminator = HttpClient::Preconditions.assert_class('discriminator', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of payment_method_tag directly - must use one of the specific types: organization_payment_method_tag, experience_payment_method_tag'
          end

          def to_hash
            subtype_to_hash.merge(:discriminator => @discriminator)
          end

          def PaymentMethodTag.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:discriminator].to_s.strip
            if discriminator.empty?
              raise "Union type[payment_method_tag] requires a field named 'discriminator'"
            end
            case discriminator
              when Types::ORGANIZATION_PAYMENT_METHOD_TAG; OrganizationPaymentMethodTag.new(hash)
              when Types::EXPERIENCE_PAYMENT_METHOD_TAG; ExperiencePaymentMethodTag.new(hash)
              else PaymentMethodTagUndefinedType.new(:discriminator => discriminator)
            end
          end

        end

        class PaymentMethodTagUndefinedType < PaymentMethodTag

          attr_reader :name

          def initialize(incoming={})
            super(:discriminator => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        class PaymentOrderReference

          module Types
            # Use this option if you are integrated with Flow orders.
            AUTHORIZATION_ORDER_REFERENCE = 'flow_order' unless defined?(AUTHORIZATION_ORDER_REFERENCE)
            # Use this option if you are integrated with Flow Payment Gateway.
            PAYMENT_PAYMENT_REQUEST_REFERENCE = 'payment_request' unless defined?(PAYMENT_PAYMENT_REQUEST_REFERENCE)
          end

          attr_reader :discriminator

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:discriminator], 'PaymentOrderReference')
            @discriminator = HttpClient::Preconditions.assert_class('discriminator', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of payment_order_reference directly - must use one of the specific types: authorization_order_reference, payment_payment_request_reference'
          end

          def to_hash
            subtype_to_hash.merge(:discriminator => @discriminator)
          end

          def PaymentOrderReference.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:discriminator].to_s.strip
            if discriminator.empty?
              raise "Union type[payment_order_reference] requires a field named 'discriminator'"
            end
            case discriminator
              when Types::AUTHORIZATION_ORDER_REFERENCE; AuthorizationOrderReference.new(hash)
              when Types::PAYMENT_PAYMENT_REQUEST_REFERENCE; PaymentPaymentRequestReference.new(hash)
              else PaymentOrderReferenceUndefinedType.new(:discriminator => discriminator)
            end
          end

        end

        class PaymentOrderReferenceUndefinedType < PaymentOrderReference

          attr_reader :name

          def initialize(incoming={})
            super(:discriminator => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        # Represents a source of payment that can be saved and used in the future.
        class PaymentSource

          module Types
            CARD_PAYMENT_SOURCE = 'card_payment_source' unless defined?(CARD_PAYMENT_SOURCE)
          end

          attr_reader :discriminator

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:discriminator], 'PaymentSource')
            @discriminator = HttpClient::Preconditions.assert_class('discriminator', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of payment_source directly - must use one of the specific types: card_payment_source'
          end

          def to_hash
            subtype_to_hash.merge(:discriminator => @discriminator)
          end

          def PaymentSource.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:discriminator].to_s.strip
            if discriminator.empty?
              raise "Union type[payment_source] requires a field named 'discriminator'"
            end
            case discriminator
              when Types::CARD_PAYMENT_SOURCE; CardPaymentSource.new(hash)
              else PaymentSourceUndefinedType.new(:discriminator => discriminator)
            end
          end

        end

        class PaymentSourceUndefinedType < PaymentSource

          attr_reader :name

          def initialize(incoming={})
            super(:discriminator => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        class PaymentSourceForm

          module Types
            CARD_PAYMENT_SOURCE_FORM = 'card_payment_source_form' unless defined?(CARD_PAYMENT_SOURCE_FORM)
          end

          attr_reader :discriminator

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:discriminator], 'PaymentSourceForm')
            @discriminator = HttpClient::Preconditions.assert_class('discriminator', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of payment_source_form directly - must use one of the specific types: card_payment_source_form'
          end

          def to_hash
            subtype_to_hash.merge(:discriminator => @discriminator)
          end

          def PaymentSourceForm.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:discriminator].to_s.strip
            if discriminator.empty?
              raise "Union type[payment_source_form] requires a field named 'discriminator'"
            end
            case discriminator
              when Types::CARD_PAYMENT_SOURCE_FORM; CardPaymentSourceForm.new(hash)
              else PaymentSourceFormUndefinedType.new(:discriminator => discriminator)
            end
          end

        end

        class PaymentSourceFormUndefinedType < PaymentSourceForm

          attr_reader :name

          def initialize(incoming={})
            super(:discriminator => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        class PriceSource

          module Types
            PRICE_SOURCE_PRICE_BOOK = 'price_book' unless defined?(PRICE_SOURCE_PRICE_BOOK)
            PRICE_SOURCE_CATALOG = 'catalog' unless defined?(PRICE_SOURCE_CATALOG)
            PRICE_SOURCE_PROVIDED = 'provided' unless defined?(PRICE_SOURCE_PROVIDED)
          end

          attr_reader :discriminator

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:discriminator], 'PriceSource')
            @discriminator = HttpClient::Preconditions.assert_class('discriminator', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of price_source directly - must use one of the specific types: price_source_price_book, price_source_catalog, price_source_provided'
          end

          def to_hash
            subtype_to_hash.merge(:discriminator => @discriminator)
          end

          def PriceSource.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:discriminator].to_s.strip
            if discriminator.empty?
              raise "Union type[price_source] requires a field named 'discriminator'"
            end
            case discriminator
              when Types::PRICE_SOURCE_PRICE_BOOK; PriceSourcePriceBook.new(hash)
              when Types::PRICE_SOURCE_CATALOG; PriceSourceCatalog.new(hash)
              when Types::PRICE_SOURCE_PROVIDED; PriceSourceProvided.new(hash)
              else PriceSourceUndefinedType.new(:discriminator => discriminator)
            end
          end

        end

        class PriceSourceUndefinedType < PriceSource

          attr_reader :name

          def initialize(incoming={})
            super(:discriminator => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        class Promotion

          module Types
            FREE_SHIPPING = 'free_shipping' unless defined?(FREE_SHIPPING)
            DISCOUNT = 'discount' unless defined?(DISCOUNT)
          end

          attr_reader :discriminator

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:discriminator], 'Promotion')
            @discriminator = HttpClient::Preconditions.assert_class('discriminator', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of promotion directly - must use one of the specific types: free_shipping, discount'
          end

          def to_hash
            subtype_to_hash.merge(:discriminator => @discriminator)
          end

          def Promotion.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:discriminator].to_s.strip
            if discriminator.empty?
              raise "Union type[promotion] requires a field named 'discriminator'"
            end
            case discriminator
              when Types::FREE_SHIPPING; FreeShipping.new(hash)
              when Types::DISCOUNT; Discount.new(hash)
              else PromotionUndefinedType.new(:discriminator => discriminator)
            end
          end

        end

        class PromotionUndefinedType < Promotion

          attr_reader :name

          def initialize(incoming={})
            super(:discriminator => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        class QueryBuilderForm

          module Types
            QUERY_BUILDER_FILTER_FORM = 'filter' unless defined?(QUERY_BUILDER_FILTER_FORM)
            QUERY_BUILDER_QUERY_FORM = 'query' unless defined?(QUERY_BUILDER_QUERY_FORM)
          end

          attr_reader :discriminator

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:discriminator], 'QueryBuilderForm')
            @discriminator = HttpClient::Preconditions.assert_class('discriminator', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of query_builder_form directly - must use one of the specific types: query_builder_filter_form, query_builder_query_form'
          end

          def to_hash
            subtype_to_hash.merge(:discriminator => @discriminator)
          end

          def QueryBuilderForm.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:discriminator].to_s.strip
            if discriminator.empty?
              raise "Union type[query_builder_form] requires a field named 'discriminator'"
            end
            case discriminator
              when Types::QUERY_BUILDER_FILTER_FORM; QueryBuilderFilterForm.new(hash)
              when Types::QUERY_BUILDER_QUERY_FORM; QueryBuilderQueryForm.new(hash)
              else QueryBuilderFormUndefinedType.new(:discriminator => discriminator)
            end
          end

        end

        class QueryBuilderFormUndefinedType < QueryBuilderForm

          attr_reader :name

          def initialize(incoming={})
            super(:discriminator => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        class QueryFilter

          module Types
            QUERY_FILTER_STRUCTURED = 'structured' unless defined?(QUERY_FILTER_STRUCTURED)
            QUERY_FILTER_UNSTRUCTURED = 'unstructured' unless defined?(QUERY_FILTER_UNSTRUCTURED)
          end

          attr_reader :discriminator

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @discriminator = HttpClient::Preconditions.assert_class('discriminator', opts.delete(:discriminator) || 'query_filter_structured', String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of query_filter directly - must use one of the specific types: query_filter_structured, query_filter_unstructured'
          end

          def to_hash
            subtype_to_hash.merge(:discriminator => @discriminator)
          end

          def QueryFilter.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:discriminator].to_s.strip
            if discriminator.empty?
              raise "Union type[query_filter] requires a field named 'discriminator'"
            end
            case discriminator
              when Types::QUERY_FILTER_STRUCTURED; QueryFilterStructured.new(hash)
              when Types::QUERY_FILTER_UNSTRUCTURED; QueryFilterUnstructured.new(hash)
              else QueryFilterUndefinedType.new(:discriminator => discriminator)
            end
          end

        end

        class QueryFilterUndefinedType < QueryFilter

          attr_reader :name

          def initialize(incoming={})
            super(:discriminator => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        class QueryFilterForm

          module Types
            QUERY_FILTER_STRUCTURED_FORM = 'structured' unless defined?(QUERY_FILTER_STRUCTURED_FORM)
            QUERY_FILTER_UNSTRUCTURED_FORM = 'unstructured' unless defined?(QUERY_FILTER_UNSTRUCTURED_FORM)
          end

          attr_reader :discriminator

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @discriminator = HttpClient::Preconditions.assert_class('discriminator', opts.delete(:discriminator) || 'query_filter_structured_form', String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of query_filter_form directly - must use one of the specific types: query_filter_structured_form, query_filter_unstructured_form'
          end

          def to_hash
            subtype_to_hash.merge(:discriminator => @discriminator)
          end

          def QueryFilterForm.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:discriminator].to_s.strip
            if discriminator.empty?
              raise "Union type[query_filter_form] requires a field named 'discriminator'"
            end
            case discriminator
              when Types::QUERY_FILTER_STRUCTURED_FORM; QueryFilterStructuredForm.new(hash)
              when Types::QUERY_FILTER_UNSTRUCTURED_FORM; QueryFilterUnstructuredForm.new(hash)
              else QueryFilterFormUndefinedType.new(:discriminator => discriminator)
            end
          end

        end

        class QueryFilterFormUndefinedType < QueryFilterForm

          attr_reader :name

          def initialize(incoming={})
            super(:discriminator => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        # Here for backards compatibility with estimates we store in databases
        class RatecardEstimate

          module Types
            RATECARD_ESTIMATE_V1 = 'ratecard_estimate_v1' unless defined?(RATECARD_ESTIMATE_V1)
            RATECARD_ESTIMATE_V2 = 'ratecard_estimate_v2' unless defined?(RATECARD_ESTIMATE_V2)
            RATECARD_ESTIMATE_V3 = 'ratecard_estimate_v3' unless defined?(RATECARD_ESTIMATE_V3)
            RATECARD_ESTIMATE_V4 = 'ratecard_estimate_v4' unless defined?(RATECARD_ESTIMATE_V4)
          end

          attr_reader :discriminator

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @discriminator = HttpClient::Preconditions.assert_class('discriminator', opts.delete(:discriminator) || 'ratecard_estimate_v1', String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of ratecard_estimate directly - must use one of the specific types: ratecard_estimate_v1, ratecard_estimate_v2, ratecard_estimate_v3, ratecard_estimate_v4'
          end

          def to_hash
            subtype_to_hash.merge(:discriminator => @discriminator)
          end

          def RatecardEstimate.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:discriminator].to_s.strip
            if discriminator.empty?
              raise "Union type[ratecard_estimate] requires a field named 'discriminator'"
            end
            case discriminator
              when Types::RATECARD_ESTIMATE_V1; RatecardEstimateV1.new(hash)
              when Types::RATECARD_ESTIMATE_V2; RatecardEstimateV2.new(hash)
              when Types::RATECARD_ESTIMATE_V3; RatecardEstimateV3.new(hash)
              when Types::RATECARD_ESTIMATE_V4; RatecardEstimateV4.new(hash)
              else RatecardEstimateUndefinedType.new(:discriminator => discriminator)
            end
          end

        end

        class RatecardEstimateUndefinedType < RatecardEstimate

          attr_reader :name

          def initialize(incoming={})
            super(:discriminator => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        class RatecardFee

          module Types
            DDP_RATECARD_FEE = 'ddp_ratecard_fee' unless defined?(DDP_RATECARD_FEE)
            FUEL_SURCHARGE_RATECARD_FEE = 'fuel_surcharge_ratecard_fee' unless defined?(FUEL_SURCHARGE_RATECARD_FEE)
            OVERSIZED_SHIPMENT_RATECARD_FEE = 'oversized_shipment_ratecard_fee' unless defined?(OVERSIZED_SHIPMENT_RATECARD_FEE)
            RETURN_PACKAGE_RATECARD_FEE = 'return_package_ratecard_fee' unless defined?(RETURN_PACKAGE_RATECARD_FEE)
            CROSSDOCK_RATECARD_FEE = 'crossdock_ratecard_fee' unless defined?(CROSSDOCK_RATECARD_FEE)
            REMOTE_AREA_RATECARD_FEE = 'remote_area_ratecard_fee' unless defined?(REMOTE_AREA_RATECARD_FEE)
            EMERGENCY_SITUATION_SURCHARGE_RATECARD_FEE = 'emergency_situation_surcharge_ratecard_fee' unless defined?(EMERGENCY_SITUATION_SURCHARGE_RATECARD_FEE)
            PEAK_SURCHARGE_RATECARD_FEE = 'peak_surcharge_ratecard_fee' unless defined?(PEAK_SURCHARGE_RATECARD_FEE)
            DUTIES_TAXES_PAID_SURCHARGE_RATECARD_FEE = 'duties_taxes_paid_surcharge_ratecard_fee' unless defined?(DUTIES_TAXES_PAID_SURCHARGE_RATECARD_FEE)
          end

          attr_reader :discriminator

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:discriminator], 'RatecardFee')
            @discriminator = HttpClient::Preconditions.assert_class('discriminator', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of ratecard_fee directly - must use one of the specific types: ddp_ratecard_fee, fuel_surcharge_ratecard_fee, oversized_shipment_ratecard_fee, return_package_ratecard_fee, crossdock_ratecard_fee, remote_area_ratecard_fee, emergency_situation_surcharge_ratecard_fee, peak_surcharge_ratecard_fee, duties_taxes_paid_surcharge_ratecard_fee'
          end

          def to_hash
            subtype_to_hash.merge(:discriminator => @discriminator)
          end

          def RatecardFee.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:discriminator].to_s.strip
            if discriminator.empty?
              raise "Union type[ratecard_fee] requires a field named 'discriminator'"
            end
            case discriminator
              when Types::DDP_RATECARD_FEE; DdpRatecardFee.new(hash)
              when Types::FUEL_SURCHARGE_RATECARD_FEE; FuelSurchargeRatecardFee.new(hash)
              when Types::OVERSIZED_SHIPMENT_RATECARD_FEE; OversizedShipmentRatecardFee.new(hash)
              when Types::RETURN_PACKAGE_RATECARD_FEE; ReturnPackageRatecardFee.new(hash)
              when Types::CROSSDOCK_RATECARD_FEE; CrossdockRatecardFee.new(hash)
              when Types::REMOTE_AREA_RATECARD_FEE; RemoteAreaRatecardFee.new(hash)
              when Types::EMERGENCY_SITUATION_SURCHARGE_RATECARD_FEE; EmergencySituationSurchargeRatecardFee.new(hash)
              when Types::PEAK_SURCHARGE_RATECARD_FEE; PeakSurchargeRatecardFee.new(hash)
              when Types::DUTIES_TAXES_PAID_SURCHARGE_RATECARD_FEE; DutiesTaxesPaidSurchargeRatecardFee.new(hash)
              else RatecardFeeUndefinedType.new(:discriminator => discriminator)
            end
          end

        end

        class RatecardFeeUndefinedType < RatecardFee

          attr_reader :name

          def initialize(incoming={})
            super(:discriminator => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        class RepeatSchedule

          module Types
            REPEAT_HOURLY = 'repeat_hourly' unless defined?(REPEAT_HOURLY)
            REPEAT_DAILY = 'repeat_daily' unless defined?(REPEAT_DAILY)
            REPEAT_WEEKLY = 'repeat_weekly' unless defined?(REPEAT_WEEKLY)
            REPEAT_MONTHLY = 'repeat_monthly' unless defined?(REPEAT_MONTHLY)
          end

          attr_reader :discriminator

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:discriminator], 'RepeatSchedule')
            @discriminator = HttpClient::Preconditions.assert_class('discriminator', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of repeat_schedule directly - must use one of the specific types: repeat_hourly, repeat_daily, repeat_weekly, repeat_monthly'
          end

          def to_hash
            subtype_to_hash.merge(:discriminator => @discriminator)
          end

          def RepeatSchedule.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:discriminator].to_s.strip
            if discriminator.empty?
              raise "Union type[repeat_schedule] requires a field named 'discriminator'"
            end
            case discriminator
              when Types::REPEAT_HOURLY; RepeatHourly.new(hash)
              when Types::REPEAT_DAILY; RepeatDaily.new(hash)
              when Types::REPEAT_WEEKLY; RepeatWeekly.new(hash)
              when Types::REPEAT_MONTHLY; RepeatMonthly.new(hash)
              else RepeatScheduleUndefinedType.new(:discriminator => discriminator)
            end
          end

        end

        class RepeatScheduleUndefinedType < RepeatSchedule

          attr_reader :name

          def initialize(incoming={})
            super(:discriminator => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        # Types of failed inventory reservation reasons
        class ReservationError

          module Types
            # Inventory is not available for all or subset of item quantities requested
            NO_INVENTORY_RESERVATION_ERROR = 'no_inventory' unless defined?(NO_INVENTORY_RESERVATION_ERROR)
            # API call to external API (ex: PFS) timed out
            EXTERNAL_API_TIMEOUT_RESERVATION_ERROR = 'external_api_timeout' unless defined?(EXTERNAL_API_TIMEOUT_RESERVATION_ERROR)
            # Generic reservation error
            GENERIC_RESERVATION_ERROR = 'generic_reservation_error' unless defined?(GENERIC_RESERVATION_ERROR)
          end

          attr_reader :code

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:code], 'ReservationError')
            @code = HttpClient::Preconditions.assert_class('code', opts.delete(:code), String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of reservation_error directly - must use one of the specific types: no_inventory_reservation_error, external_api_timeout_reservation_error, generic_reservation_error'
          end

          def to_hash
            subtype_to_hash.merge(:code => @code)
          end

          def ReservationError.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:code].to_s.strip
            if discriminator.empty?
              raise "Union type[reservation_error] requires a field named 'code'"
            end
            case discriminator
              when Types::NO_INVENTORY_RESERVATION_ERROR; NoInventoryReservationError.new(hash)
              when Types::EXTERNAL_API_TIMEOUT_RESERVATION_ERROR; ExternalApiTimeoutReservationError.new(hash)
              when Types::GENERIC_RESERVATION_ERROR; GenericReservationError.new(hash)
              else ReservationErrorUndefinedType.new(:code => discriminator)
            end
          end

        end

        class ReservationErrorUndefinedType < ReservationError

          attr_reader :name

          def initialize(incoming={})
            super(:code => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:code), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        class ReturnSource

          module Types
            RETURN_SOURCE_FLOW = 'return_source_flow' unless defined?(RETURN_SOURCE_FLOW)
            RETURN_SOURCE_EXTERNAL_VENDOR = 'return_source_external_vendor' unless defined?(RETURN_SOURCE_EXTERNAL_VENDOR)
          end

          attr_reader :discriminator

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:discriminator], 'ReturnSource')
            @discriminator = HttpClient::Preconditions.assert_class('discriminator', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of return_source directly - must use one of the specific types: return_source_flow, return_source_external_vendor'
          end

          def to_hash
            subtype_to_hash.merge(:discriminator => @discriminator)
          end

          def ReturnSource.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:discriminator].to_s.strip
            if discriminator.empty?
              raise "Union type[return_source] requires a field named 'discriminator'"
            end
            case discriminator
              when Types::RETURN_SOURCE_FLOW; ReturnSourceFlow.new(hash)
              when Types::RETURN_SOURCE_EXTERNAL_VENDOR; ReturnSourceExternalVendor.new(hash)
              else ReturnSourceUndefinedType.new(:discriminator => discriminator)
            end
          end

        end

        class ReturnSourceUndefinedType < ReturnSource

          attr_reader :name

          def initialize(incoming={})
            super(:discriminator => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        class SdkAdyenV3AuthenticationToken

          module Types
            ADYEN_V3_FINGERPRINT_TOKEN = 'fingerprint' unless defined?(ADYEN_V3_FINGERPRINT_TOKEN)
            ADYEN_V3_CHALLENGE_TOKEN = 'token' unless defined?(ADYEN_V3_CHALLENGE_TOKEN)
          end

          attr_reader :type

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:type], 'SdkAdyenV3AuthenticationToken')
            @type = HttpClient::Preconditions.assert_class('type', opts.delete(:type), String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of sdk_adyen_v3_authentication_token directly - must use one of the specific types: adyen_v3_fingerprint_token, adyen_v3_challenge_token'
          end

          def to_hash
            subtype_to_hash.merge(:type => @type)
          end

          def SdkAdyenV3AuthenticationToken.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:type].to_s.strip
            if discriminator.empty?
              raise "Union type[sdk_adyen_v3_authentication_token] requires a field named 'type'"
            end
            case discriminator
              when Types::ADYEN_V3_FINGERPRINT_TOKEN; AdyenV3FingerprintToken.new(hash)
              when Types::ADYEN_V3_CHALLENGE_TOKEN; AdyenV3ChallengeToken.new(hash)
              else SdkAdyenV3AuthenticationTokenUndefinedType.new(:type => discriminator)
            end
          end

        end

        class SdkAdyenV3AuthenticationTokenUndefinedType < SdkAdyenV3AuthenticationToken

          attr_reader :name

          def initialize(incoming={})
            super(:type => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:type), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        class ServiceFee

          module Types
            FUEL_SURCHARGE_SERVICE_FEE = 'fuel_surcharge_service_fee' unless defined?(FUEL_SURCHARGE_SERVICE_FEE)
            REMOTE_AREA_SERVICE_FEE = 'remote_area_service_fee' unless defined?(REMOTE_AREA_SERVICE_FEE)
            EMERGENCY_SITUATION_SURCHARGE_SERVICE_FEE = 'emergency_situation_surcharge_service_fee' unless defined?(EMERGENCY_SITUATION_SURCHARGE_SERVICE_FEE)
            PEAK_SURCHARGE_SERVICE_FEE = 'peak_surcharge_service_fee' unless defined?(PEAK_SURCHARGE_SERVICE_FEE)
            PEAK_SURCHARGE_BY_WEIGHT_SERVICE_FEE = 'peak_surcharge_by_weight_service_fee' unless defined?(PEAK_SURCHARGE_BY_WEIGHT_SERVICE_FEE)
            DUTIES_TAXES_PAID_SURCHARGE_SERVICE_FEE = 'duties_taxes_paid_surcharge_service_fee' unless defined?(DUTIES_TAXES_PAID_SURCHARGE_SERVICE_FEE)
          end

          attr_reader :discriminator

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:discriminator], 'ServiceFee')
            @discriminator = HttpClient::Preconditions.assert_class('discriminator', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of service_fee directly - must use one of the specific types: fuel_surcharge_service_fee, remote_area_service_fee, emergency_situation_surcharge_service_fee, peak_surcharge_service_fee, peak_surcharge_by_weight_service_fee, duties_taxes_paid_surcharge_service_fee'
          end

          def to_hash
            subtype_to_hash.merge(:discriminator => @discriminator)
          end

          def ServiceFee.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:discriminator].to_s.strip
            if discriminator.empty?
              raise "Union type[service_fee] requires a field named 'discriminator'"
            end
            case discriminator
              when Types::FUEL_SURCHARGE_SERVICE_FEE; FuelSurchargeServiceFee.new(hash)
              when Types::REMOTE_AREA_SERVICE_FEE; RemoteAreaServiceFee.new(hash)
              when Types::EMERGENCY_SITUATION_SURCHARGE_SERVICE_FEE; EmergencySituationSurchargeServiceFee.new(hash)
              when Types::PEAK_SURCHARGE_SERVICE_FEE; PeakSurchargeServiceFee.new(hash)
              when Types::PEAK_SURCHARGE_BY_WEIGHT_SERVICE_FEE; PeakSurchargeByWeightServiceFee.new(hash)
              when Types::DUTIES_TAXES_PAID_SURCHARGE_SERVICE_FEE; DutiesTaxesPaidSurchargeServiceFee.new(hash)
              else ServiceFeeUndefinedType.new(:discriminator => discriminator)
            end
          end

        end

        class ServiceFeeUndefinedType < ServiceFee

          attr_reader :name

          def initialize(incoming={})
            super(:discriminator => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        class Session

          module Types
            ORGANIZATION_SESSION = 'organization_session' unless defined?(ORGANIZATION_SESSION)
          end

          attr_reader :discriminator

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:discriminator], 'Session')
            @discriminator = HttpClient::Preconditions.assert_class('discriminator', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of session directly - must use one of the specific types: organization_session'
          end

          def to_hash
            subtype_to_hash.merge(:discriminator => @discriminator)
          end

          def Session.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:discriminator].to_s.strip
            if discriminator.empty?
              raise "Union type[session] requires a field named 'discriminator'"
            end
            case discriminator
              when Types::ORGANIZATION_SESSION; OrganizationSession.new(hash)
              else SessionUndefinedType.new(:discriminator => discriminator)
            end
          end

        end

        class SessionUndefinedType < Session

          attr_reader :name

          def initialize(incoming={})
            super(:discriminator => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        class SessionAuthorization

          module Types
            ORGANIZATION_SESSION_AUTHORIZATION = 'organization_session_authorization' unless defined?(ORGANIZATION_SESSION_AUTHORIZATION)
          end

          attr_reader :discriminator

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:discriminator], 'SessionAuthorization')
            @discriminator = HttpClient::Preconditions.assert_class('discriminator', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of session_authorization directly - must use one of the specific types: organization_session_authorization'
          end

          def to_hash
            subtype_to_hash.merge(:discriminator => @discriminator)
          end

          def SessionAuthorization.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:discriminator].to_s.strip
            if discriminator.empty?
              raise "Union type[session_authorization] requires a field named 'discriminator'"
            end
            case discriminator
              when Types::ORGANIZATION_SESSION_AUTHORIZATION; OrganizationSessionAuthorization.new(hash)
              else SessionAuthorizationUndefinedType.new(:discriminator => discriminator)
            end
          end

        end

        class SessionAuthorizationUndefinedType < SessionAuthorization

          attr_reader :name

          def initialize(incoming={})
            super(:discriminator => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        # Different models for forms to create shipping labels
        class ShippingLabelForm

          module Types
            DETAILED_SHIPPING_LABEL_FORM = 'detailed_shipping_label_form' unless defined?(DETAILED_SHIPPING_LABEL_FORM)
            SUMMARY_SHIPPING_LABEL_FORM = 'summary_shipping_label_form' unless defined?(SUMMARY_SHIPPING_LABEL_FORM)
          end

          attr_reader :discriminator

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @discriminator = HttpClient::Preconditions.assert_class('discriminator', opts.delete(:discriminator) || 'detailed_shipping_label_form', String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of shipping_label_form directly - must use one of the specific types: detailed_shipping_label_form, summary_shipping_label_form'
          end

          def to_hash
            subtype_to_hash.merge(:discriminator => @discriminator)
          end

          def ShippingLabelForm.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:discriminator].to_s.strip
            if discriminator.empty?
              raise "Union type[shipping_label_form] requires a field named 'discriminator'"
            end
            case discriminator
              when Types::DETAILED_SHIPPING_LABEL_FORM; DetailedShippingLabelForm.new(hash)
              when Types::SUMMARY_SHIPPING_LABEL_FORM; SummaryShippingLabelForm.new(hash)
              else ShippingLabelFormUndefinedType.new(:discriminator => discriminator)
            end
          end

        end

        class ShippingLabelFormUndefinedType < ShippingLabelForm

          attr_reader :name

          def initialize(incoming={})
            super(:discriminator => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        # Form for information about a client-facilitated shipment where the shipping
        # label and fulfillment was not handled by Flow. For merchant-of-record and
        # tracking purposes, clients doing their own shipping will need to notify Flow
        # of shipped packages.
        class ShippingNotificationForm

          module Types
            DETAILED_SHIPPING_NOTIFICATION_FORM = 'detailed_shipping_notification_form' unless defined?(DETAILED_SHIPPING_NOTIFICATION_FORM)
            SINGLE_PACKAGE_SHIPPING_NOTIFICATION_FORM = 'single_package_shipping_notification_form' unless defined?(SINGLE_PACKAGE_SHIPPING_NOTIFICATION_FORM)
            SUMMARY_SHIPPING_NOTIFICATION_FORM = 'summary_shipping_notification_form' unless defined?(SUMMARY_SHIPPING_NOTIFICATION_FORM)
          end

          attr_reader :discriminator

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @discriminator = HttpClient::Preconditions.assert_class('discriminator', opts.delete(:discriminator) || 'detailed_shipping_notification_form', String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of shipping_notification_form directly - must use one of the specific types: detailed_shipping_notification_form, single_package_shipping_notification_form, summary_shipping_notification_form'
          end

          def to_hash
            subtype_to_hash.merge(:discriminator => @discriminator)
          end

          def ShippingNotificationForm.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:discriminator].to_s.strip
            if discriminator.empty?
              raise "Union type[shipping_notification_form] requires a field named 'discriminator'"
            end
            case discriminator
              when Types::DETAILED_SHIPPING_NOTIFICATION_FORM; DetailedShippingNotificationForm.new(hash)
              when Types::SINGLE_PACKAGE_SHIPPING_NOTIFICATION_FORM; SinglePackageShippingNotificationForm.new(hash)
              when Types::SUMMARY_SHIPPING_NOTIFICATION_FORM; SummaryShippingNotificationForm.new(hash)
              else ShippingNotificationFormUndefinedType.new(:discriminator => discriminator)
            end
          end

        end

        class ShippingNotificationFormUndefinedType < ShippingNotificationForm

          attr_reader :name

          def initialize(incoming={})
            super(:discriminator => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        class ShopifyCartAddForm

          module Types
            SHOPIFY_CART_ADD_SINGLE_FORM = 'shopify_cart_add_single_form' unless defined?(SHOPIFY_CART_ADD_SINGLE_FORM)
            SHOPIFY_CART_ADD_MULTIPLE_FORM = 'shopify_cart_add_multiple_form' unless defined?(SHOPIFY_CART_ADD_MULTIPLE_FORM)
          end

          attr_reader :discriminator

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @discriminator = HttpClient::Preconditions.assert_class('discriminator', opts.delete(:discriminator) || 'shopify_cart_add_single_form', String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of shopify_cart_add_form directly - must use one of the specific types: shopify_cart_add_single_form, shopify_cart_add_multiple_form'
          end

          def to_hash
            subtype_to_hash.merge(:discriminator => @discriminator)
          end

          def ShopifyCartAddForm.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:discriminator].to_s.strip
            if discriminator.empty?
              raise "Union type[shopify_cart_add_form] requires a field named 'discriminator'"
            end
            case discriminator
              when Types::SHOPIFY_CART_ADD_SINGLE_FORM; ShopifyCartAddSingleForm.new(hash)
              when Types::SHOPIFY_CART_ADD_MULTIPLE_FORM; ShopifyCartAddMultipleForm.new(hash)
              else ShopifyCartAddFormUndefinedType.new(:discriminator => discriminator)
            end
          end

        end

        class ShopifyCartAddFormUndefinedType < ShopifyCartAddForm

          attr_reader :name

          def initialize(incoming={})
            super(:discriminator => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        class ShopifyEventBucket

          module Types
            SHOPIFY_ITEM_EVENT_BUCKET = 'shopify_item_event_bucket' unless defined?(SHOPIFY_ITEM_EVENT_BUCKET)
          end

          attr_reader :discriminator

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @discriminator = HttpClient::Preconditions.assert_class('discriminator', opts.delete(:discriminator) || 'shopify_item_event_bucket', String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of shopify_event_bucket directly - must use one of the specific types: shopify_item_event_bucket'
          end

          def to_hash
            subtype_to_hash.merge(:discriminator => @discriminator)
          end

          def ShopifyEventBucket.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:discriminator].to_s.strip
            if discriminator.empty?
              raise "Union type[shopify_event_bucket] requires a field named 'discriminator'"
            end
            case discriminator
              when Types::SHOPIFY_ITEM_EVENT_BUCKET; ShopifyItemEventBucket.new(hash)
              else ShopifyEventBucketUndefinedType.new(:discriminator => discriminator)
            end
          end

        end

        class ShopifyEventBucketUndefinedType < ShopifyEventBucket

          attr_reader :name

          def initialize(incoming={})
            super(:discriminator => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        # The quoted value for a tax or duty, with supporting information.
        class TaxDutyQuoteLevyValue

          module Types
            TAX_DUTY_QUOTE_SIMPLE_LEVY_VALUE = 'tax_duty_quote_simple_levy_value' unless defined?(TAX_DUTY_QUOTE_SIMPLE_LEVY_VALUE)
          end

          attr_reader :discriminator

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:discriminator], 'TaxDutyQuoteLevyValue')
            @discriminator = HttpClient::Preconditions.assert_class('discriminator', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of tax_duty_quote_levy_value directly - must use one of the specific types: tax_duty_quote_simple_levy_value'
          end

          def to_hash
            subtype_to_hash.merge(:discriminator => @discriminator)
          end

          def TaxDutyQuoteLevyValue.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:discriminator].to_s.strip
            if discriminator.empty?
              raise "Union type[tax_duty_quote_levy_value] requires a field named 'discriminator'"
            end
            case discriminator
              when Types::TAX_DUTY_QUOTE_SIMPLE_LEVY_VALUE; TaxDutyQuoteSimpleLevyValue.new(hash)
              else TaxDutyQuoteLevyValueUndefinedType.new(:discriminator => discriminator)
            end
          end

        end

        class TaxDutyQuoteLevyValueUndefinedType < TaxDutyQuoteLevyValue

          attr_reader :name

          def initialize(incoming={})
            super(:discriminator => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        class TaxSetting

          module Types
            AVALARA_TAX_SETTING = 'avalara_tax_setting' unless defined?(AVALARA_TAX_SETTING)
            AVALARA_TAX_CSV_SETTING = 'avalara_tax_csv_setting' unless defined?(AVALARA_TAX_CSV_SETTING)
          end

          attr_reader :discriminator

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:discriminator], 'TaxSetting')
            @discriminator = HttpClient::Preconditions.assert_class('discriminator', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of tax_setting directly - must use one of the specific types: avalara_tax_setting, avalara_tax_csv_setting'
          end

          def to_hash
            subtype_to_hash.merge(:discriminator => @discriminator)
          end

          def TaxSetting.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:discriminator].to_s.strip
            if discriminator.empty?
              raise "Union type[tax_setting] requires a field named 'discriminator'"
            end
            case discriminator
              when Types::AVALARA_TAX_SETTING; AvalaraTaxSetting.new(hash)
              when Types::AVALARA_TAX_CSV_SETTING; AvalaraTaxCsvSetting.new(hash)
              else TaxSettingUndefinedType.new(:discriminator => discriminator)
            end
          end

        end

        class TaxSettingUndefinedType < TaxSetting

          attr_reader :name

          def initialize(incoming={})
            super(:discriminator => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        # Different version sets of 3ds challenge actions.
        class ThreedsChallengeAction

          module Types
            # Used for 2.1 and 2.2 versions of 3ds
            THREEDS_TWO_CHALLENGE_REQUEST = 'threeds_two_challenge_request' unless defined?(THREEDS_TWO_CHALLENGE_REQUEST)
          end

          attr_reader :discriminator

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:discriminator], 'ThreedsChallengeAction')
            @discriminator = HttpClient::Preconditions.assert_class('discriminator', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of threeds_challenge_action directly - must use one of the specific types: threeds_two_challenge_request'
          end

          def to_hash
            subtype_to_hash.merge(:discriminator => @discriminator)
          end

          def ThreedsChallengeAction.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:discriminator].to_s.strip
            if discriminator.empty?
              raise "Union type[threeds_challenge_action] requires a field named 'discriminator'"
            end
            case discriminator
              when Types::THREEDS_TWO_CHALLENGE_REQUEST; ThreedsTwoChallengeRequest.new(hash)
              else ThreedsChallengeActionUndefinedType.new(:discriminator => discriminator)
            end
          end

        end

        class ThreedsChallengeActionUndefinedType < ThreedsChallengeAction

          attr_reader :name

          def initialize(incoming={})
            super(:discriminator => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        # Different version sets of 3ds identify actions.
        class ThreedsIdentifyAction

          module Types
            # Used for 2.1 and 2.2 versions of 3ds
            THREEDS_TWO_METHOD = 'threeds_two_method' unless defined?(THREEDS_TWO_METHOD)
          end

          attr_reader :discriminator

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:discriminator], 'ThreedsIdentifyAction')
            @discriminator = HttpClient::Preconditions.assert_class('discriminator', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of threeds_identify_action directly - must use one of the specific types: threeds_two_method'
          end

          def to_hash
            subtype_to_hash.merge(:discriminator => @discriminator)
          end

          def ThreedsIdentifyAction.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:discriminator].to_s.strip
            if discriminator.empty?
              raise "Union type[threeds_identify_action] requires a field named 'discriminator'"
            end
            case discriminator
              when Types::THREEDS_TWO_METHOD; ThreedsTwoMethod.new(hash)
              else ThreedsIdentifyActionUndefinedType.new(:discriminator => discriminator)
            end
          end

        end

        class ThreedsIdentifyActionUndefinedType < ThreedsIdentifyAction

          attr_reader :name

          def initialize(incoming={})
            super(:discriminator => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        # Possible outcome types from a tier rule
        class TierRuleOutcome

          module Types
            # Add a certain amount on the actual base cost
            AMOUNT_MARGIN = 'amount_margin' unless defined?(AMOUNT_MARGIN)
            AT_COST = 'at_cost' unless defined?(AT_COST)
            FLAT_RATE = 'flat_rate' unless defined?(FLAT_RATE)
            # Add a certain percentage of the actual base cost
            PERCENT_MARGIN = 'percent_margin' unless defined?(PERCENT_MARGIN)
          end

          attr_reader :discriminator

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:discriminator], 'TierRuleOutcome')
            @discriminator = HttpClient::Preconditions.assert_class('discriminator', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of tier_rule_outcome directly - must use one of the specific types: amount_margin, at_cost, flat_rate, percent_margin'
          end

          def to_hash
            subtype_to_hash.merge(:discriminator => @discriminator)
          end

          def TierRuleOutcome.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:discriminator].to_s.strip
            if discriminator.empty?
              raise "Union type[tier_rule_outcome] requires a field named 'discriminator'"
            end
            case discriminator
              when Types::AMOUNT_MARGIN; AmountMargin.new(hash)
              when Types::AT_COST; AtCost.new(hash)
              when Types::FLAT_RATE; FlatRate.new(hash)
              when Types::PERCENT_MARGIN; PercentMargin.new(hash)
              else TierRuleOutcomeUndefinedType.new(:discriminator => discriminator)
            end
          end

        end

        class TierRuleOutcomeUndefinedType < TierRuleOutcome

          attr_reader :name

          def initialize(incoming={})
            super(:discriminator => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        class TierRuleOutcomeForm

          module Types
            AMOUNT_MARGIN_FORM = 'amount_margin_form' unless defined?(AMOUNT_MARGIN_FORM)
            FLAT_RATE_FORM = 'flat_rate_form' unless defined?(FLAT_RATE_FORM)
            AT_COST = 'at_cost' unless defined?(AT_COST)
            PERCENT_MARGIN = 'percent_margin' unless defined?(PERCENT_MARGIN)
          end

          attr_reader :discriminator

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:discriminator], 'TierRuleOutcomeForm')
            @discriminator = HttpClient::Preconditions.assert_class('discriminator', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of tier_rule_outcome_form directly - must use one of the specific types: amount_margin_form, flat_rate_form, at_cost, percent_margin'
          end

          def to_hash
            subtype_to_hash.merge(:discriminator => @discriminator)
          end

          def TierRuleOutcomeForm.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:discriminator].to_s.strip
            if discriminator.empty?
              raise "Union type[tier_rule_outcome_form] requires a field named 'discriminator'"
            end
            case discriminator
              when Types::AMOUNT_MARGIN_FORM; AmountMarginForm.new(hash)
              when Types::FLAT_RATE_FORM; FlatRateForm.new(hash)
              when Types::AT_COST; AtCost.new(hash)
              when Types::PERCENT_MARGIN; PercentMargin.new(hash)
              else TierRuleOutcomeFormUndefinedType.new(:discriminator => discriminator)
            end
          end

        end

        class TierRuleOutcomeFormUndefinedType < TierRuleOutcomeForm

          attr_reader :name

          def initialize(incoming={})
            super(:discriminator => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        class Token

          module Types
            CHANNEL_TOKEN = 'channel_token' unless defined?(CHANNEL_TOKEN)
            ORGANIZATION_TOKEN = 'organization_token' unless defined?(ORGANIZATION_TOKEN)
            ORGANIZATION_TOKEN_V2 = 'organization_token_v2' unless defined?(ORGANIZATION_TOKEN_V2)
            PARTNER_TOKEN = 'partner_token' unless defined?(PARTNER_TOKEN)
          end

          attr_reader :discriminator

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:discriminator], 'Token')
            @discriminator = HttpClient::Preconditions.assert_class('discriminator', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of token directly - must use one of the specific types: channel_token, organization_token, organization_token_v2, partner_token'
          end

          def to_hash
            subtype_to_hash.merge(:discriminator => @discriminator)
          end

          def Token.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:discriminator].to_s.strip
            if discriminator.empty?
              raise "Union type[token] requires a field named 'discriminator'"
            end
            case discriminator
              when Types::CHANNEL_TOKEN; ChannelToken.new(hash)
              when Types::ORGANIZATION_TOKEN; OrganizationToken.new(hash)
              when Types::ORGANIZATION_TOKEN_V2; OrganizationTokenV2.new(hash)
              when Types::PARTNER_TOKEN; PartnerToken.new(hash)
              else TokenUndefinedType.new(:discriminator => discriminator)
            end
          end

        end

        class TokenUndefinedType < Token

          attr_reader :name

          def initialize(incoming={})
            super(:discriminator => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        class TokenReference

          module Types
            CHANNEL_TOKEN_REFERENCE = 'channel_token_reference' unless defined?(CHANNEL_TOKEN_REFERENCE)
            ORGANIZATION_TOKEN_REFERENCE = 'organization_token_reference' unless defined?(ORGANIZATION_TOKEN_REFERENCE)
            ORGANIZATION_TOKEN_V2_REFERENCE = 'organization_token_v2_reference' unless defined?(ORGANIZATION_TOKEN_V2_REFERENCE)
            PARTNER_TOKEN_REFERENCE = 'partner_token_reference' unless defined?(PARTNER_TOKEN_REFERENCE)
          end

          attr_reader :discriminator

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:discriminator], 'TokenReference')
            @discriminator = HttpClient::Preconditions.assert_class('discriminator', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Cannot serialize an instance of token_reference directly - must use one of the specific types: channel_token_reference, organization_token_reference, organization_token_v2_reference, partner_token_reference'
          end

          def to_hash
            subtype_to_hash.merge(:discriminator => @discriminator)
          end

          def TokenReference.from_json(hash)
            HttpClient::Preconditions.assert_class('hash', hash, Hash)
            discriminator = HttpClient::Helper.symbolize_keys(hash)[:discriminator].to_s.strip
            if discriminator.empty?
              raise "Union type[token_reference] requires a field named 'discriminator'"
            end
            case discriminator
              when Types::CHANNEL_TOKEN_REFERENCE; ChannelTokenReference.new(hash)
              when Types::ORGANIZATION_TOKEN_REFERENCE; OrganizationTokenReference.new(hash)
              when Types::ORGANIZATION_TOKEN_V2_REFERENCE; OrganizationTokenV2Reference.new(hash)
              when Types::PARTNER_TOKEN_REFERENCE; PartnerTokenReference.new(hash)
              else TokenReferenceUndefinedType.new(:discriminator => discriminator)
            end
          end

        end

        class TokenReferenceUndefinedType < TokenReference

          attr_reader :name

          def initialize(incoming={})
            super(:discriminator => 'undefined_type')
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:discriminator), String)
          end

          def subtype_to_hash
            raise 'Unable to serialize undefined type to json'
          end

          def copy(incoming={})
            raise 'Operation not supported for undefined type'
          end

          def to_hash
            raise 'Operation not supported for undefined type'
          end

        end

        class AbandonedOrderPromotionStatus

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of AbandonedOrderPromotionStatus for this value, creating a new instance for an unknown value
          def AbandonedOrderPromotionStatus.apply(value)
            if value.instance_of?(AbandonedOrderPromotionStatus)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || AbandonedOrderPromotionStatus.new(value))
            end
          end

          # Returns the instance of AbandonedOrderPromotionStatus for this value, or nil if not found
          def AbandonedOrderPromotionStatus.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            AbandonedOrderPromotionStatus.ALL.find { |v| v.value == value }
          end

          def AbandonedOrderPromotionStatus.ALL
            @@all ||= [AbandonedOrderPromotionStatus.active, AbandonedOrderPromotionStatus.inactive]
          end

          def AbandonedOrderPromotionStatus.active
            @@_active ||= AbandonedOrderPromotionStatus.new('active')
          end

          def AbandonedOrderPromotionStatus.inactive
            @@_inactive ||= AbandonedOrderPromotionStatus.new('inactive')
          end

          def to_hash
            value
          end

        end

        class AbandonedOrderSettingStatus

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of AbandonedOrderSettingStatus for this value, creating a new instance for an unknown value
          def AbandonedOrderSettingStatus.apply(value)
            if value.instance_of?(AbandonedOrderSettingStatus)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || AbandonedOrderSettingStatus.new(value))
            end
          end

          # Returns the instance of AbandonedOrderSettingStatus for this value, or nil if not found
          def AbandonedOrderSettingStatus.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            AbandonedOrderSettingStatus.ALL.find { |v| v.value == value }
          end

          def AbandonedOrderSettingStatus.ALL
            @@all ||= [AbandonedOrderSettingStatus.active, AbandonedOrderSettingStatus.inactive]
          end

          def AbandonedOrderSettingStatus.active
            @@_active ||= AbandonedOrderSettingStatus.new('active')
          end

          def AbandonedOrderSettingStatus.inactive
            @@_inactive ||= AbandonedOrderSettingStatus.new('inactive')
          end

          def to_hash
            value
          end

        end

        class AddressFieldName

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of AddressFieldName for this value, creating a new instance for an unknown value
          def AddressFieldName.apply(value)
            if value.instance_of?(AddressFieldName)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || AddressFieldName.new(value))
            end
          end

          # Returns the instance of AddressFieldName for this value, or nil if not found
          def AddressFieldName.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            AddressFieldName.ALL.find { |v| v.value == value }
          end

          def AddressFieldName.ALL
            @@all ||= [AddressFieldName.first_name, AddressFieldName.last_name, AddressFieldName.street_1, AddressFieldName.street_2, AddressFieldName.city, AddressFieldName.province, AddressFieldName.postal, AddressFieldName.country, AddressFieldName.phone, AddressFieldName.company, AddressFieldName.vat_registration_number]
          end

          def AddressFieldName.first_name
            @@_first_name ||= AddressFieldName.new('first_name')
          end

          def AddressFieldName.last_name
            @@_last_name ||= AddressFieldName.new('last_name')
          end

          def AddressFieldName.street_1
            @@_street_1 ||= AddressFieldName.new('street_1')
          end

          def AddressFieldName.street_2
            @@_street_2 ||= AddressFieldName.new('street_2')
          end

          def AddressFieldName.city
            @@_city ||= AddressFieldName.new('city')
          end

          def AddressFieldName.province
            @@_province ||= AddressFieldName.new('province')
          end

          def AddressFieldName.postal
            @@_postal ||= AddressFieldName.new('postal')
          end

          def AddressFieldName.country
            @@_country ||= AddressFieldName.new('country')
          end

          def AddressFieldName.phone
            @@_phone ||= AddressFieldName.new('phone')
          end

          def AddressFieldName.company
            @@_company ||= AddressFieldName.new('company')
          end

          def AddressFieldName.vat_registration_number
            @@_vat_registration_number ||= AddressFieldName.new('vat_registration_number')
          end

          def to_hash
            value
          end

        end

        class AdjustmentReasonKey

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of AdjustmentReasonKey for this value, creating a new instance for an unknown value
          def AdjustmentReasonKey.apply(value)
            if value.instance_of?(AdjustmentReasonKey)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || AdjustmentReasonKey.new(value))
            end
          end

          # Returns the instance of AdjustmentReasonKey for this value, or nil if not found
          def AdjustmentReasonKey.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            AdjustmentReasonKey.ALL.find { |v| v.value == value }
          end

          def AdjustmentReasonKey.ALL
            @@all ||= [AdjustmentReasonKey.duty_deminimis, AdjustmentReasonKey.vat_deminimis]
          end

          # If the duty de minimis value has not been met, an adjustment may be made to
          # offset any previously calculated duty.
          def AdjustmentReasonKey.duty_deminimis
            @@_duty_deminimis ||= AdjustmentReasonKey.new('duty_deminimis')
          end

          # If the VAT de minimis value has not been met, an adjustment may be made to
          # offset any previously calculated VAT.
          def AdjustmentReasonKey.vat_deminimis
            @@_vat_deminimis ||= AdjustmentReasonKey.new('vat_deminimis')
          end

          def to_hash
            value
          end

        end

        class Aggregate

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of Aggregate for this value, creating a new instance for an unknown value
          def Aggregate.apply(value)
            if value.instance_of?(Aggregate)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || Aggregate.new(value))
            end
          end

          # Returns the instance of Aggregate for this value, or nil if not found
          def Aggregate.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            Aggregate.ALL.find { |v| v.value == value }
          end

          def Aggregate.ALL
            @@all ||= [Aggregate.maximum, Aggregate.minimum]
          end

          def Aggregate.maximum
            @@_maximum ||= Aggregate.new('maximum')
          end

          def Aggregate.minimum
            @@_minimum ||= Aggregate.new('minimum')
          end

          def to_hash
            value
          end

        end

        class AttributeDataType

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of AttributeDataType for this value, creating a new instance for an unknown value
          def AttributeDataType.apply(value)
            if value.instance_of?(AttributeDataType)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || AttributeDataType.new(value))
            end
          end

          # Returns the instance of AttributeDataType for this value, or nil if not found
          def AttributeDataType.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            AttributeDataType.ALL.find { |v| v.value == value }
          end

          def AttributeDataType.ALL
            @@all ||= [AttributeDataType.boolean, AttributeDataType.integer, AttributeDataType.decimal, AttributeDataType.string, AttributeDataType.json_array]
          end

          # Boolean true/false data type
          def AttributeDataType.boolean
            @@_boolean ||= AttributeDataType.new('boolean')
          end

          # Value of the attribute must be an integer
          def AttributeDataType.integer
            @@_integer ||= AttributeDataType.new('integer')
          end

          # Decimal datatype without size or precision restrictions. Commonly used for
          # currency values.
          def AttributeDataType.decimal
            @@_decimal ||= AttributeDataType.new('decimal')
          end

          # Unvalidated string of characters.
          def AttributeDataType.string
            @@_string ||= AttributeDataType.new('string')
          end

          # An example ["Cotton", "Wool"]
          def AttributeDataType.json_array
            @@_json_array ||= AttributeDataType.new('json_array')
          end

          def to_hash
            value
          end

        end

        class AttributeIntent

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of AttributeIntent for this value, creating a new instance for an unknown value
          def AttributeIntent.apply(value)
            if value.instance_of?(AttributeIntent)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || AttributeIntent.new(value))
            end
          end

          # Returns the instance of AttributeIntent for this value, or nil if not found
          def AttributeIntent.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            AttributeIntent.ALL.find { |v| v.value == value }
          end

          def AttributeIntent.ALL
            @@all ||= [AttributeIntent.brand, AttributeIntent.color, AttributeIntent.countries_of_origin, AttributeIntent.product_id, AttributeIntent.fulfillment_method, AttributeIntent.hazardous, AttributeIntent.price, AttributeIntent.size, AttributeIntent.sku, AttributeIntent.taxability, AttributeIntent.consumer_url, AttributeIntent.gtin, AttributeIntent.mpn, AttributeIntent.facet, AttributeIntent.eccn, AttributeIntent.returnable, AttributeIntent.searchable, AttributeIntent.barcode, AttributeIntent.min_days_to_ship, AttributeIntent.max_days_to_ship, AttributeIntent.commercial_invoice_item_number, AttributeIntent.include_in_product_feeds]
          end

          # A brand name of the item (for retailers that sell multiple brands)
          def AttributeIntent.brand
            @@_brand ||= AttributeIntent.new('brand')
          end

          # The color of the item
          def AttributeIntent.color
            @@_color ||= AttributeIntent.new('color')
          end

          # A space separated list of the countries of origin for this item
          def AttributeIntent.countries_of_origin
            @@_countries_of_origin ||= AttributeIntent.new('countries_of_origin')
          end

          # An identifier used to group items that are variations of the same product,
          # such as different sizes or colors of the same shirt
          def AttributeIntent.product_id
            @@_product_id ||= AttributeIntent.new('product_id')
          end

          # Identifies whether the item is a physical or digital good
          def AttributeIntent.fulfillment_method
            @@_fulfillment_method ||= AttributeIntent.new('fulfillment_method')
          end

          # Identifies whether this item may contain hazardous materials
          def AttributeIntent.hazardous
            @@_hazardous ||= AttributeIntent.new('hazardous')
          end

          # A price for the item in the organization's base currency (will be localized
          # based on each Experience's pricing policy)
          def AttributeIntent.price
            @@_price ||= AttributeIntent.new('price')
          end

          # A size label of the item
          def AttributeIntent.size
            @@_size ||= AttributeIntent.new('size')
          end

          # An SKU for the item
          def AttributeIntent.sku
            @@_sku ||= AttributeIntent.new('sku')
          end

          # Identifies whether taxes are applicable to an item
          def AttributeIntent.taxability
            @@_taxability ||= AttributeIntent.new('taxability')
          end

          # A URL of the product detail page of the item
          def AttributeIntent.consumer_url
            @@_consumer_url ||= AttributeIntent.new('consumer_url')
          end

          # The Global Trade Item Number of this item.
          def AttributeIntent.gtin
            @@_gtin ||= AttributeIntent.new('gtin')
          end

          # The Manufacturer Part Number of this item.
          def AttributeIntent.mpn
            @@_mpn ||= AttributeIntent.new('mpn')
          end

          # Identifies a facet.
          def AttributeIntent.facet
            @@_facet ||= AttributeIntent.new('facet')
          end

          # An Export Control Classification Number (ECCN) is a five-character
          # alphanumeric key used in the Commerce Control List (CCL) to classify U.S.
          # exports and determine whether an export license is needed from the Department
          # of Commerce. If exempt, then EAR99 is used as the item’s ECCN. EAR99 is a
          # classification that indicates that an item is subject to the Export
          # Administration Regulations (EAR), but not listed with a specific Export
          # Control Classification Number (ECCN) on the Commerce Control List (CCL).
          def AttributeIntent.eccn
            @@_eccn ||= AttributeIntent.new('eccn')
          end

          # Identifies whether the item can be returned. If not present on an item, it is
          # assumed to be returnable.
          def AttributeIntent.returnable
            @@_returnable ||= AttributeIntent.new('returnable')
          end

          # Identifies whether the attribute can be used to search for an item.
          def AttributeIntent.searchable
            @@_searchable ||= AttributeIntent.new('searchable')
          end

          # The barcode of this item.
          def AttributeIntent.barcode
            @@_barcode ||= AttributeIntent.new('barcode')
          end

          # Indicates a lead time to prepare an item for shipment. If specified, we will
          # include this lead time in the delivery window calculation
          def AttributeIntent.min_days_to_ship
            @@_min_days_to_ship ||= AttributeIntent.new('min_days_to_ship')
          end

          # Indicates a lead time to prepare an item for shipment. If specified, we will
          # include this lead time in the delivery window calculation
          def AttributeIntent.max_days_to_ship
            @@_max_days_to_ship ||= AttributeIntent.new('max_days_to_ship')
          end

          # Identifies the attribute is used as an item number in the commercial invoice.
          def AttributeIntent.commercial_invoice_item_number
            @@_commercial_invoice_item_number ||= AttributeIntent.new('commercial_invoice_item_number')
          end

          # Attribute to indicate whether an item should explicitly be included in a
          # product feed
          def AttributeIntent.include_in_product_feeds
            @@_include_in_product_feeds ||= AttributeIntent.new('include_in_product_feeds')
          end

          def to_hash
            value
          end

        end

        class AuthenticationTechnique

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of AuthenticationTechnique for this value, creating a new instance for an unknown value
          def AuthenticationTechnique.apply(value)
            if value.instance_of?(AuthenticationTechnique)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || AuthenticationTechnique.new(value))
            end
          end

          # Returns the instance of AuthenticationTechnique for this value, or nil if not found
          def AuthenticationTechnique.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            AuthenticationTechnique.ALL.find { |v| v.value == value }
          end

          def AuthenticationTechnique.ALL
            @@all ||= [AuthenticationTechnique.anonymous, AuthenticationTechnique.session, AuthenticationTechnique.token, AuthenticationTechnique.partner_token, AuthenticationTechnique.user]
          end

          # No authentication necessary.
          def AuthenticationTechnique.anonymous
            @@_anonymous ||= AuthenticationTechnique.new('anonymous')
          end

          # A browser has been assigned an identifier by Flow to track their use of our
          # service for an organization.
          def AuthenticationTechnique.session
            @@_session ||= AuthenticationTechnique.new('session')
          end

          # A token. Tokens carry the same permissions as the user who originally created
          # them.
          def AuthenticationTechnique.token
            @@_token ||= AuthenticationTechnique.new('token')
          end

          # A partner token. Partner Tokens can only access anonymous endpoints and the
          # endpoints of the partner api.
          def AuthenticationTechnique.partner_token
            @@_partner_token ||= AuthenticationTechnique.new('partner_token')
          end

          # A user logs into Flow.
          def AuthenticationTechnique.user
            @@_user ||= AuthenticationTechnique.new('user')
          end

          def to_hash
            value
          end

        end

        class AuthorizationDeclineCode

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of AuthorizationDeclineCode for this value, creating a new instance for an unknown value
          def AuthorizationDeclineCode.apply(value)
            if value.instance_of?(AuthorizationDeclineCode)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || AuthorizationDeclineCode.new(value))
            end
          end

          # Returns the instance of AuthorizationDeclineCode for this value, or nil if not found
          def AuthorizationDeclineCode.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            AuthorizationDeclineCode.ALL.find { |v| v.value == value }
          end

          def AuthorizationDeclineCode.ALL
            @@all ||= [AuthorizationDeclineCode.expired, AuthorizationDeclineCode.invalid_name, AuthorizationDeclineCode.invalid_number, AuthorizationDeclineCode.invalid_expiration, AuthorizationDeclineCode.invalid_address, AuthorizationDeclineCode.invalid_token_type, AuthorizationDeclineCode.invalid_token, AuthorizationDeclineCode.no_account, AuthorizationDeclineCode.avs, AuthorizationDeclineCode.cvv, AuthorizationDeclineCode.fraud, AuthorizationDeclineCode.duplicate, AuthorizationDeclineCode.not_supported, AuthorizationDeclineCode.unknown, AuthorizationDeclineCode.online_payment_error]
          end

          # Payment method has expired
          def AuthorizationDeclineCode.expired
            @@_expired ||= AuthorizationDeclineCode.new('expired')
          end

          # Invalid card holder name
          def AuthorizationDeclineCode.invalid_name
            @@_invalid_name ||= AuthorizationDeclineCode.new('invalid_name')
          end

          # Invalid payment number
          def AuthorizationDeclineCode.invalid_number
            @@_invalid_number ||= AuthorizationDeclineCode.new('invalid_number')
          end

          # Invalid expiration date
          def AuthorizationDeclineCode.invalid_expiration
            @@_invalid_expiration ||= AuthorizationDeclineCode.new('invalid_expiration')
          end

          # Invalid billing address
          def AuthorizationDeclineCode.invalid_address
            @@_invalid_address ||= AuthorizationDeclineCode.new('invalid_address')
          end

          # Cannot create a permanent card via an unauthorized request
          def AuthorizationDeclineCode.invalid_token_type
            @@_invalid_token_type ||= AuthorizationDeclineCode.new('invalid_token_type')
          end

          # The provided card token is invalid or it does not exist.
          def AuthorizationDeclineCode.invalid_token
            @@_invalid_token ||= AuthorizationDeclineCode.new('invalid_token')
          end

          # The provided payment method is not known by the issuing bank (the account does
          # not exist)
          def AuthorizationDeclineCode.no_account
            @@_no_account ||= AuthorizationDeclineCode.new('no_account')
          end

          # Declined due to avs mismatch)
          def AuthorizationDeclineCode.avs
            @@_avs ||= AuthorizationDeclineCode.new('avs')
          end

          # Declined due to cvv mismatch)
          def AuthorizationDeclineCode.cvv
            @@_cvv ||= AuthorizationDeclineCode.new('cvv')
          end

          # Declined due to suspected fraud
          def AuthorizationDeclineCode.fraud
            @@_fraud ||= AuthorizationDeclineCode.new('fraud')
          end

          # Declined due to suspected duplicate transaction
          def AuthorizationDeclineCode.duplicate
            @@_duplicate ||= AuthorizationDeclineCode.new('duplicate')
          end

          # Declined as payment method is not supported
          def AuthorizationDeclineCode.not_supported
            @@_not_supported ||= AuthorizationDeclineCode.new('not_supported')
          end

          # Declined due to another reason (details not known)
          def AuthorizationDeclineCode.unknown
            @@_unknown ||= AuthorizationDeclineCode.new('unknown')
          end

          # Indicates an online payment error
          def AuthorizationDeclineCode.online_payment_error
            @@_online_payment_error ||= AuthorizationDeclineCode.new('online_payment_error')
          end

          def to_hash
            value
          end

        end

        class AuthorizationOption

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of AuthorizationOption for this value, creating a new instance for an unknown value
          def AuthorizationOption.apply(value)
            if value.instance_of?(AuthorizationOption)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || AuthorizationOption.new(value))
            end
          end

          # Returns the instance of AuthorizationOption for this value, or nil if not found
          def AuthorizationOption.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            AuthorizationOption.ALL.find { |v| v.value == value }
          end

          def AuthorizationOption.ALL
            @@all ||= [AuthorizationOption.store_card]
          end

          # If set, and the authorization is created using a one time nonce, we
          # automatically tokenize and store the card. In these cases you will want to
          # store the new card token in the authorization response (card object)
          def AuthorizationOption.store_card
            @@_store_card ||= AuthorizationOption.new('store_card')
          end

          def to_hash
            value
          end

        end

        class AuthorizationResultActionType

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of AuthorizationResultActionType for this value, creating a new instance for an unknown value
          def AuthorizationResultActionType.apply(value)
            if value.instance_of?(AuthorizationResultActionType)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || AuthorizationResultActionType.new(value))
            end
          end

          # Returns the instance of AuthorizationResultActionType for this value, or nil if not found
          def AuthorizationResultActionType.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            AuthorizationResultActionType.ALL.find { |v| v.value == value }
          end

          def AuthorizationResultActionType.ALL
            @@all ||= [AuthorizationResultActionType.native, AuthorizationResultActionType.redirect, AuthorizationResultActionType.wait]
          end

          # Indicates an authorization action should be presented to the user natively in
          # the browser via an sdk or other mechanism.
          def AuthorizationResultActionType.native
            @@_native ||= AuthorizationResultActionType.new('native')
          end

          # Indicates that the user should be redirected to the provided URL.
          def AuthorizationResultActionType.redirect
            @@_redirect ||= AuthorizationResultActionType.new('redirect')
          end

          # Indicates that more time is needed before the authorization result is known.
          # In the case of 3D Secure, this means the authorization status should be polled
          # until it is no longer pending.
          def AuthorizationResultActionType.wait
            @@_wait ||= AuthorizationResultActionType.new('wait')
          end

          def to_hash
            value
          end

        end

        class AuthorizationStatus

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of AuthorizationStatus for this value, creating a new instance for an unknown value
          def AuthorizationStatus.apply(value)
            if value.instance_of?(AuthorizationStatus)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || AuthorizationStatus.new(value))
            end
          end

          # Returns the instance of AuthorizationStatus for this value, or nil if not found
          def AuthorizationStatus.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            AuthorizationStatus.ALL.find { |v| v.value == value }
          end

          def AuthorizationStatus.ALL
            @@all ||= [AuthorizationStatus.initiated, AuthorizationStatus.pending, AuthorizationStatus.expired, AuthorizationStatus.authorized, AuthorizationStatus.review, AuthorizationStatus.declined, AuthorizationStatus.reversed]
          end

          # When the customer has selected a type of payment method to attempt a
          # transaction, e.g. by clicking a payment method button, an authorization is
          # created in the `initiated` status. This will transition to another status once
          # the user's exact method of payment is determined (a specific card or bank
          # account). Often, the checkout experience will need to take additional action
          # to enable this transition, like redirecting to a payment provider's page;
          # consult `result_action` to understand what to do next.
          def AuthorizationStatus.initiated
            @@_initiated ||= AuthorizationStatus.new('initiated')
          end

          # After the customer has filled in their payment information, like their card or
          # their bank account, the payment provider may need additional verification like
          # cardholder authentication or may need more time to complete processing. The
          # checkout experience may need to take additional actions expressed in
          # `result_action` to complete the transaction. If no `result_action` is present,
          # the authorization will update asynchronously based on payment processor
          # notifications. In this case, the payment should be considered provisional; you
          # can display a Thank You page to the customer, but the order should not be
          # fulfilled until the authorization updates to a final status.
          def AuthorizationStatus.pending
            @@_pending ||= AuthorizationStatus.new('pending')
          end

          # The authorization has expired or was explicitly cancelled by the customer.
          def AuthorizationStatus.expired
            @@_expired ||= AuthorizationStatus.new('expired')
          end

          # The authorization was successful. This means that the authorization hold has
          # been placed on the customer's account or the the customer has fully paid for
          # the transaction.
          def AuthorizationStatus.authorized
            @@_authorized ||= AuthorizationStatus.new('authorized')
          end

          # The authorization has been completed, but it needs to go through a fraud
          # review process. You can show a Thank You page to the customer, but you should
          # not fulfill the order until the status has updated to `authorized`.
          def AuthorizationStatus.review
            @@_review ||= AuthorizationStatus.new('review')
          end

          # The authorization has been declined by the issuing bank. See the authorization
          # decline code for more details as to the reason for decline.
          def AuthorizationStatus.declined
            @@_declined ||= AuthorizationStatus.new('declined')
          end

          # The authorization has been fully reversed. You can fully reverse an
          # authorization up until the moment you capture funds; once you have captured
          # funds you must create refunds.
          def AuthorizationStatus.reversed
            @@_reversed ||= AuthorizationStatus.new('reversed')
          end

          def to_hash
            value
          end

        end

        class AvailabilityStatus

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of AvailabilityStatus for this value, creating a new instance for an unknown value
          def AvailabilityStatus.apply(value)
            if value.instance_of?(AvailabilityStatus)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || AvailabilityStatus.new(value))
            end
          end

          # Returns the instance of AvailabilityStatus for this value, or nil if not found
          def AvailabilityStatus.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            AvailabilityStatus.ALL.find { |v| v.value == value }
          end

          def AvailabilityStatus.ALL
            @@all ||= [AvailabilityStatus.enabled, AvailabilityStatus.disabled]
          end

          def AvailabilityStatus.enabled
            @@_enabled ||= AvailabilityStatus.new('enabled')
          end

          def AvailabilityStatus.disabled
            @@_disabled ||= AvailabilityStatus.new('disabled')
          end

          def to_hash
            value
          end

        end

        class AvailableFilterFormat

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of AvailableFilterFormat for this value, creating a new instance for an unknown value
          def AvailableFilterFormat.apply(value)
            if value.instance_of?(AvailableFilterFormat)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || AvailableFilterFormat.new(value))
            end
          end

          # Returns the instance of AvailableFilterFormat for this value, or nil if not found
          def AvailableFilterFormat.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            AvailableFilterFormat.ALL.find { |v| v.value == value }
          end

          def AvailableFilterFormat.ALL
            @@all ||= [AvailableFilterFormat.boolean, AvailableFilterFormat.date, AvailableFilterFormat.money, AvailableFilterFormat.decimal, AvailableFilterFormat.string, AvailableFilterFormat.unit_of_length, AvailableFilterFormat.unit_of_mass]
          end

          def AvailableFilterFormat.boolean
            @@_boolean ||= AvailableFilterFormat.new('boolean')
          end

          # Expects date in format YYYY-MM-DD
          def AvailableFilterFormat.date
            @@_date ||= AvailableFilterFormat.new('date')
          end

          def AvailableFilterFormat.money
            @@_money ||= AvailableFilterFormat.new('money')
          end

          def AvailableFilterFormat.decimal
            @@_decimal ||= AvailableFilterFormat.new('decimal')
          end

          def AvailableFilterFormat.string
            @@_string ||= AvailableFilterFormat.new('string')
          end

          def AvailableFilterFormat.unit_of_length
            @@_unit_of_length ||= AvailableFilterFormat.new('unit_of_length')
          end

          def AvailableFilterFormat.unit_of_mass
            @@_unit_of_mass ||= AvailableFilterFormat.new('unit_of_mass')
          end

          def to_hash
            value
          end

        end

        class AvsCode

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of AvsCode for this value, creating a new instance for an unknown value
          def AvsCode.apply(value)
            if value.instance_of?(AvsCode)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || AvsCode.new(value))
            end
          end

          # Returns the instance of AvsCode for this value, or nil if not found
          def AvsCode.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            AvsCode.ALL.find { |v| v.value == value }
          end

          def AvsCode.ALL
            @@all ||= [AvsCode.match, AvsCode.partial, AvsCode.unsupported, AvsCode.no_match]
          end

          # Full match
          def AvsCode.match
            @@_match ||= AvsCode.new('match')
          end

          # Partial match; see details in 'avs' model to understand which components
          # matched
          def AvsCode.partial
            @@_partial ||= AvsCode.new('partial')
          end

          # Issuer does not support address verification
          def AvsCode.unsupported
            @@_unsupported ||= AvsCode.new('unsupported')
          end

          # Address does not match expected card values
          def AvsCode.no_match
            @@_no_match ||= AvsCode.new('no_match')
          end

          def to_hash
            value
          end

        end

        class B2bInvoiceType

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of B2bInvoiceType for this value, creating a new instance for an unknown value
          def B2bInvoiceType.apply(value)
            if value.instance_of?(B2bInvoiceType)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || B2bInvoiceType.new(value))
            end
          end

          # Returns the instance of B2bInvoiceType for this value, or nil if not found
          def B2bInvoiceType.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            B2bInvoiceType.ALL.find { |v| v.value == value }
          end

          def B2bInvoiceType.ALL
            @@all ||= [B2bInvoiceType.self_bill_invoice, B2bInvoiceType.invoice]
          end

          def B2bInvoiceType.self_bill_invoice
            @@_self_bill_invoice ||= B2bInvoiceType.new('self_bill_invoice')
          end

          def B2bInvoiceType.invoice
            @@_invoice ||= B2bInvoiceType.new('invoice')
          end

          def to_hash
            value
          end

        end

        class Calendar

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of Calendar for this value, creating a new instance for an unknown value
          def Calendar.apply(value)
            if value.instance_of?(Calendar)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || Calendar.new(value))
            end
          end

          # Returns the instance of Calendar for this value, or nil if not found
          def Calendar.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            Calendar.ALL.find { |v| v.value == value }
          end

          def Calendar.ALL
            @@all ||= [Calendar.weekdays, Calendar.everyday]
          end

          # Mon - Fri
          def Calendar.weekdays
            @@_weekdays ||= Calendar.new('weekdays')
          end

          # 7 days per week
          def Calendar.everyday
            @@_everyday ||= Calendar.new('everyday')
          end

          def to_hash
            value
          end

        end

        class CancelReason

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of CancelReason for this value, creating a new instance for an unknown value
          def CancelReason.apply(value)
            if value.instance_of?(CancelReason)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || CancelReason.new(value))
            end
          end

          # Returns the instance of CancelReason for this value, or nil if not found
          def CancelReason.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            CancelReason.ALL.find { |v| v.value == value }
          end

          def CancelReason.ALL
            @@all ||= [CancelReason.out_of_stock, CancelReason.consumer_requested, CancelReason.flow_cancel]
          end

          # Out of stock is a permanent cancel of the fulfillment of an item qty. If no
          # other fulfillment parties exist, this will cancel the ordered quantity and
          # reduce or refund the consumer's payment.
          def CancelReason.out_of_stock
            @@_out_of_stock ||= CancelReason.new('out_of_stock')
          end

          # A consumer requested cancellation of an item qty and the fulfillment party has
          # acknowledged that the qty will not be shipped. This is a cancel of the ordered
          # quantity and will reduce or refund the consumer's payment
          def CancelReason.consumer_requested
            @@_consumer_requested ||= CancelReason.new('consumer_requested')
          end

          # Flow has had to cancel an order, possibly due to fraud activity or inability
          # to collect payment. This will cancel the ordered quantity. All known parties
          # will be notified.
          def CancelReason.flow_cancel
            @@_flow_cancel ||= CancelReason.new('flow_cancel')
          end

          def to_hash
            value
          end

        end

        class Capability

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of Capability for this value, creating a new instance for an unknown value
          def Capability.apply(value)
            if value.instance_of?(Capability)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || Capability.new(value))
            end
          end

          # Returns the instance of Capability for this value, or nil if not found
          def Capability.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            Capability.ALL.find { |v| v.value == value }
          end

          def Capability.ALL
            @@all ||= [Capability.crossdock]
          end

          def Capability.crossdock
            @@_crossdock ||= Capability.new('crossdock')
          end

          def to_hash
            value
          end

        end

        class CaptureDeclineCode

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of CaptureDeclineCode for this value, creating a new instance for an unknown value
          def CaptureDeclineCode.apply(value)
            if value.instance_of?(CaptureDeclineCode)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || CaptureDeclineCode.new(value))
            end
          end

          # Returns the instance of CaptureDeclineCode for this value, or nil if not found
          def CaptureDeclineCode.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            CaptureDeclineCode.ALL.find { |v| v.value == value }
          end

          def CaptureDeclineCode.ALL
            @@all ||= [CaptureDeclineCode.expired, CaptureDeclineCode.insufficient_funds, CaptureDeclineCode.unknown]
          end

          # Payment authorization has expired
          def CaptureDeclineCode.expired
            @@_expired ||= CaptureDeclineCode.new('expired')
          end

          # The amount to capture exceeded the amount authorized and not yet captured
          def CaptureDeclineCode.insufficient_funds
            @@_insufficient_funds ||= CaptureDeclineCode.new('insufficient_funds')
          end

          # Failed due to another reason (details not known)
          def CaptureDeclineCode.unknown
            @@_unknown ||= CaptureDeclineCode.new('unknown')
          end

          def to_hash
            value
          end

        end

        class CaptureStatus

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of CaptureStatus for this value, creating a new instance for an unknown value
          def CaptureStatus.apply(value)
            if value.instance_of?(CaptureStatus)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || CaptureStatus.new(value))
            end
          end

          # Returns the instance of CaptureStatus for this value, or nil if not found
          def CaptureStatus.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            CaptureStatus.ALL.find { |v| v.value == value }
          end

          def CaptureStatus.ALL
            @@all ||= [CaptureStatus.pending, CaptureStatus.succeeded, CaptureStatus.failed, CaptureStatus.canceled]
          end

          # The capture has been initiated and requires time to complete.
          def CaptureStatus.pending
            @@_pending ||= CaptureStatus.new('pending')
          end

          # The capture has been processed successfully.
          def CaptureStatus.succeeded
            @@_succeeded ||= CaptureStatus.new('succeeded')
          end

          # The capture failed to process.
          def CaptureStatus.failed
            @@_failed ||= CaptureStatus.new('failed')
          end

          # The capture was canceled.
          def CaptureStatus.canceled
            @@_canceled ||= CaptureStatus.new('canceled')
          end

          def to_hash
            value
          end

        end

        class CardErrorCode

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of CardErrorCode for this value, creating a new instance for an unknown value
          def CardErrorCode.apply(value)
            if value.instance_of?(CardErrorCode)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || CardErrorCode.new(value))
            end
          end

          # Returns the instance of CardErrorCode for this value, or nil if not found
          def CardErrorCode.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            CardErrorCode.ALL.find { |v| v.value == value }
          end

          def CardErrorCode.ALL
            @@all ||= [CardErrorCode.invalid_address, CardErrorCode.invalid_currency, CardErrorCode.invalid_name, CardErrorCode.invalid_number, CardErrorCode.invalid_expiration, CardErrorCode.invalid_token_type, CardErrorCode.avs, CardErrorCode.cvv, CardErrorCode.fraud, CardErrorCode.unknown]
          end

          # Invalid billing address
          def CardErrorCode.invalid_address
            @@_invalid_address ||= CardErrorCode.new('invalid_address')
          end

          # Invalid requested currency
          def CardErrorCode.invalid_currency
            @@_invalid_currency ||= CardErrorCode.new('invalid_currency')
          end

          # Invalid cardholder name
          def CardErrorCode.invalid_name
            @@_invalid_name ||= CardErrorCode.new('invalid_name')
          end

          # Invalid payment number
          def CardErrorCode.invalid_number
            @@_invalid_number ||= CardErrorCode.new('invalid_number')
          end

          # Invalid expiration date
          def CardErrorCode.invalid_expiration
            @@_invalid_expiration ||= CardErrorCode.new('invalid_expiration')
          end

          # Cannot create a permanent card via an unauthorized request
          def CardErrorCode.invalid_token_type
            @@_invalid_token_type ||= CardErrorCode.new('invalid_token_type')
          end

          # Declined due to avs mismatch
          def CardErrorCode.avs
            @@_avs ||= CardErrorCode.new('avs')
          end

          # Declined due to cvv mismatch
          def CardErrorCode.cvv
            @@_cvv ||= CardErrorCode.new('cvv')
          end

          # Declined due to suspected fraud
          def CardErrorCode.fraud
            @@_fraud ||= CardErrorCode.new('fraud')
          end

          # Declined due to another reason (details not known)
          def CardErrorCode.unknown
            @@_unknown ||= CardErrorCode.new('unknown')
          end

          def to_hash
            value
          end

        end

        class CardType

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of CardType for this value, creating a new instance for an unknown value
          def CardType.apply(value)
            if value.instance_of?(CardType)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || CardType.new(value))
            end
          end

          # Returns the instance of CardType for this value, or nil if not found
          def CardType.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            CardType.ALL.find { |v| v.value == value }
          end

          def CardType.ALL
            @@all ||= [CardType.american_express, CardType.cartes_bancaires, CardType.china_union_pay, CardType.dankort, CardType.diners_club, CardType.discover, CardType.jcb, CardType.maestro, CardType.mastercard, CardType.visa]
          end

          def CardType.american_express
            @@_american_express ||= CardType.new('american_express')
          end

          def CardType.cartes_bancaires
            @@_cartes_bancaires ||= CardType.new('cartes_bancaires')
          end

          def CardType.china_union_pay
            @@_china_union_pay ||= CardType.new('china_union_pay')
          end

          def CardType.dankort
            @@_dankort ||= CardType.new('dankort')
          end

          def CardType.diners_club
            @@_diners_club ||= CardType.new('diners_club')
          end

          def CardType.discover
            @@_discover ||= CardType.new('discover')
          end

          def CardType.jcb
            @@_jcb ||= CardType.new('jcb')
          end

          def CardType.maestro
            @@_maestro ||= CardType.new('maestro')
          end

          def CardType.mastercard
            @@_mastercard ||= CardType.new('mastercard')
          end

          def CardType.visa
            @@_visa ||= CardType.new('visa')
          end

          def to_hash
            value
          end

        end

        class CenterCapability

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of CenterCapability for this value, creating a new instance for an unknown value
          def CenterCapability.apply(value)
            if value.instance_of?(CenterCapability)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || CenterCapability.new(value))
            end
          end

          # Returns the instance of CenterCapability for this value, or nil if not found
          def CenterCapability.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            CenterCapability.ALL.find { |v| v.value == value }
          end

          def CenterCapability.ALL
            @@all ||= [CenterCapability.international, CenterCapability.domestic, CenterCapability.crossdock, CenterCapability.commercial_invoice]
          end

          def CenterCapability.international
            @@_international ||= CenterCapability.new('international')
          end

          def CenterCapability.domestic
            @@_domestic ||= CenterCapability.new('domestic')
          end

          def CenterCapability.crossdock
            @@_crossdock ||= CenterCapability.new('crossdock')
          end

          def CenterCapability.commercial_invoice
            @@_commercial_invoice ||= CenterCapability.new('commercial_invoice')
          end

          def to_hash
            value
          end

        end

        class ChangeType

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of ChangeType for this value, creating a new instance for an unknown value
          def ChangeType.apply(value)
            if value.instance_of?(ChangeType)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || ChangeType.new(value))
            end
          end

          # Returns the instance of ChangeType for this value, or nil if not found
          def ChangeType.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            ChangeType.ALL.find { |v| v.value == value }
          end

          def ChangeType.ALL
            @@all ||= [ChangeType.insert, ChangeType.update, ChangeType.delete]
          end

          def ChangeType.insert
            @@_insert ||= ChangeType.new('insert')
          end

          def ChangeType.update
            @@_update ||= ChangeType.new('update')
          end

          def ChangeType.delete
            @@_delete ||= ChangeType.new('delete')
          end

          def to_hash
            value
          end

        end

        class ConsumerInvoiceCustomerType

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of ConsumerInvoiceCustomerType for this value, creating a new instance for an unknown value
          def ConsumerInvoiceCustomerType.apply(value)
            if value.instance_of?(ConsumerInvoiceCustomerType)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || ConsumerInvoiceCustomerType.new(value))
            end
          end

          # Returns the instance of ConsumerInvoiceCustomerType for this value, or nil if not found
          def ConsumerInvoiceCustomerType.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            ConsumerInvoiceCustomerType.ALL.find { |v| v.value == value }
          end

          def ConsumerInvoiceCustomerType.ALL
            @@all ||= [ConsumerInvoiceCustomerType.business_eu_verified, ConsumerInvoiceCustomerType.business_non_verified, ConsumerInvoiceCustomerType.individual]
          end

          # A business that have been verified in the European Union
          def ConsumerInvoiceCustomerType.business_eu_verified
            @@_business_eu_verified ||= ConsumerInvoiceCustomerType.new('business_eu_verified')
          end

          # A business, but with no additional verification
          def ConsumerInvoiceCustomerType.business_non_verified
            @@_business_non_verified ||= ConsumerInvoiceCustomerType.new('business_non_verified')
          end

          def ConsumerInvoiceCustomerType.individual
            @@_individual ||= ConsumerInvoiceCustomerType.new('individual')
          end

          def to_hash
            value
          end

        end

        class ConsumerInvoiceDocumentType

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of ConsumerInvoiceDocumentType for this value, creating a new instance for an unknown value
          def ConsumerInvoiceDocumentType.apply(value)
            if value.instance_of?(ConsumerInvoiceDocumentType)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || ConsumerInvoiceDocumentType.new(value))
            end
          end

          # Returns the instance of ConsumerInvoiceDocumentType for this value, or nil if not found
          def ConsumerInvoiceDocumentType.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            ConsumerInvoiceDocumentType.ALL.find { |v| v.value == value }
          end

          def ConsumerInvoiceDocumentType.ALL
            @@all ||= [ConsumerInvoiceDocumentType.pdf]
          end

          def ConsumerInvoiceDocumentType.pdf
            @@_pdf ||= ConsumerInvoiceDocumentType.new('pdf')
          end

          def to_hash
            value
          end

        end

        class ConsumerInvoiceStatus

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of ConsumerInvoiceStatus for this value, creating a new instance for an unknown value
          def ConsumerInvoiceStatus.apply(value)
            if value.instance_of?(ConsumerInvoiceStatus)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || ConsumerInvoiceStatus.new(value))
            end
          end

          # Returns the instance of ConsumerInvoiceStatus for this value, or nil if not found
          def ConsumerInvoiceStatus.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            ConsumerInvoiceStatus.ALL.find { |v| v.value == value }
          end

          def ConsumerInvoiceStatus.ALL
            @@all ||= [ConsumerInvoiceStatus.pending, ConsumerInvoiceStatus.available, ConsumerInvoiceStatus.invalid]
          end

          # Indicates that the credit memo has been created but validation is pending
          # (e.g. waiting for the associated refund to be confirmed)
          def ConsumerInvoiceStatus.pending
            @@_pending ||= ConsumerInvoiceStatus.new('pending')
          end

          # Indicates that the credit memo is fully validated and available for the end
          # consumer
          def ConsumerInvoiceStatus.available
            @@_available ||= ConsumerInvoiceStatus.new('available')
          end

          # Indicates that the credit memo failed to validate after multiple attempts and
          # time
          def ConsumerInvoiceStatus.invalid
            @@_invalid ||= ConsumerInvoiceStatus.new('invalid')
          end

          def to_hash
            value
          end

        end

        class CountryPickerSource

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of CountryPickerSource for this value, creating a new instance for an unknown value
          def CountryPickerSource.apply(value)
            if value.instance_of?(CountryPickerSource)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || CountryPickerSource.new(value))
            end
          end

          # Returns the instance of CountryPickerSource for this value, or nil if not found
          def CountryPickerSource.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            CountryPickerSource.ALL.find { |v| v.value == value }
          end

          def CountryPickerSource.ALL
            @@all ||= [CountryPickerSource.experience, CountryPickerSource.destination]
          end

          # Indicates we should build the list of countries based on each active
          # experience country
          def CountryPickerSource.experience
            @@_experience ||= CountryPickerSource.new('experience')
          end

          # Indicates we should build the list of countries based on all countries to
          # which you have a rate card (ie. all valid destination countries)
          def CountryPickerSource.destination
            @@_destination ||= CountryPickerSource.new('destination')
          end

          def to_hash
            value
          end

        end

        class CreditPaymentErrorCode

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of CreditPaymentErrorCode for this value, creating a new instance for an unknown value
          def CreditPaymentErrorCode.apply(value)
            if value.instance_of?(CreditPaymentErrorCode)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || CreditPaymentErrorCode.new(value))
            end
          end

          # Returns the instance of CreditPaymentErrorCode for this value, or nil if not found
          def CreditPaymentErrorCode.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            CreditPaymentErrorCode.ALL.find { |v| v.value == value }
          end

          def CreditPaymentErrorCode.ALL
            @@all ||= [CreditPaymentErrorCode.generic_error, CreditPaymentErrorCode.invalid_order_number, CreditPaymentErrorCode.invalid_currency, CreditPaymentErrorCode.invalid_description, CreditPaymentErrorCode.duplicate, CreditPaymentErrorCode.amount_must_be_positive, CreditPaymentErrorCode.amount_exceeds_balance, CreditPaymentErrorCode.insufficient_amount]
          end

          def CreditPaymentErrorCode.generic_error
            @@_generic_error ||= CreditPaymentErrorCode.new('generic_error')
          end

          # Indicates the specified order does not exist
          def CreditPaymentErrorCode.invalid_order_number
            @@_invalid_order_number ||= CreditPaymentErrorCode.new('invalid_order_number')
          end

          # Indicates that the specified currency code is not valid
          def CreditPaymentErrorCode.invalid_currency
            @@_invalid_currency ||= CreditPaymentErrorCode.new('invalid_currency')
          end

          # Indicates that the description is invalid (must be non-empty)
          def CreditPaymentErrorCode.invalid_description
            @@_invalid_description ||= CreditPaymentErrorCode.new('invalid_description')
          end

          # Indicates that a credit payment with the specified key already exists
          def CreditPaymentErrorCode.duplicate
            @@_duplicate ||= CreditPaymentErrorCode.new('duplicate')
          end

          # Indicates the provided credit amount was <= 0
          def CreditPaymentErrorCode.amount_must_be_positive
            @@_amount_must_be_positive ||= CreditPaymentErrorCode.new('amount_must_be_positive')
          end

          # Indicates the provided credit amount exceeds the remaining balance on the
          # order
          def CreditPaymentErrorCode.amount_exceeds_balance
            @@_amount_exceeds_balance ||= CreditPaymentErrorCode.new('amount_exceeds_balance')
          end

          # Indicates the provided credit amount exceeds the maximum amount of applicable
          # credit
          def CreditPaymentErrorCode.insufficient_amount
            @@_insufficient_amount ||= CreditPaymentErrorCode.new('insufficient_amount')
          end

          def to_hash
            value
          end

        end

        class CurrencyLabelFormatter

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of CurrencyLabelFormatter for this value, creating a new instance for an unknown value
          def CurrencyLabelFormatter.apply(value)
            if value.instance_of?(CurrencyLabelFormatter)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || CurrencyLabelFormatter.new(value))
            end
          end

          # Returns the instance of CurrencyLabelFormatter for this value, or nil if not found
          def CurrencyLabelFormatter.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            CurrencyLabelFormatter.ALL.find { |v| v.value == value }
          end

          def CurrencyLabelFormatter.ALL
            @@all ||= [CurrencyLabelFormatter.strip_trailing_zeros, CurrencyLabelFormatter.symbol_prefix, CurrencyLabelFormatter.symbol_suffix]
          end

          # If a price ends in '.00' or ',00', we remove the cents and just display the
          # price as a whole number. e.g. 'A$100.00' becomes 'A$100'
          def CurrencyLabelFormatter.strip_trailing_zeros
            @@_strip_trailing_zeros ||= CurrencyLabelFormatter.new('strip_trailing_zeros')
          end

          # Indicates that a currency symbol should appear as a prefix to the price label.
          # e.g $100
          def CurrencyLabelFormatter.symbol_prefix
            @@_symbol_prefix ||= CurrencyLabelFormatter.new('symbol_prefix')
          end

          # Indicates that a currency symbol should appear as a suffix to the price label.
          # e.g 100 $
          def CurrencyLabelFormatter.symbol_suffix
            @@_symbol_suffix ||= CurrencyLabelFormatter.new('symbol_suffix')
          end

          def to_hash
            value
          end

        end

        class CurrencySymbolFormat

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of CurrencySymbolFormat for this value, creating a new instance for an unknown value
          def CurrencySymbolFormat.apply(value)
            if value.instance_of?(CurrencySymbolFormat)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || CurrencySymbolFormat.new(value))
            end
          end

          # Returns the instance of CurrencySymbolFormat for this value, or nil if not found
          def CurrencySymbolFormat.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            CurrencySymbolFormat.ALL.find { |v| v.value == value }
          end

          def CurrencySymbolFormat.ALL
            @@all ||= [CurrencySymbolFormat.narrow, CurrencySymbolFormat.primary]
          end

          # The narrow format refers to the Unicode Common Locale Data Repository (CLDR)
          # 'narrow' symbols (e.g. '$' for CAD and AUD)
          def CurrencySymbolFormat.narrow
            @@_narrow ||= CurrencySymbolFormat.new('narrow')
          end

          # The primary format refers to the Unicode Common Locale Data Repository (CLDR)
          # 'primary' symbols (e.g. 'CA$' for CAD and 'A$' for AUD)
          def CurrencySymbolFormat.primary
            @@_primary ||= CurrencySymbolFormat.new('primary')
          end

          def to_hash
            value
          end

        end

        class CustomerAddressType

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of CustomerAddressType for this value, creating a new instance for an unknown value
          def CustomerAddressType.apply(value)
            if value.instance_of?(CustomerAddressType)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || CustomerAddressType.new(value))
            end
          end

          # Returns the instance of CustomerAddressType for this value, or nil if not found
          def CustomerAddressType.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            CustomerAddressType.ALL.find { |v| v.value == value }
          end

          def CustomerAddressType.ALL
            @@all ||= [CustomerAddressType.billing, CustomerAddressType.invoice, CustomerAddressType.shipping]
          end

          def CustomerAddressType.billing
            @@_billing ||= CustomerAddressType.new('billing')
          end

          def CustomerAddressType.invoice
            @@_invoice ||= CustomerAddressType.new('invoice')
          end

          def CustomerAddressType.shipping
            @@_shipping ||= CustomerAddressType.new('shipping')
          end

          def to_hash
            value
          end

        end

        class CvvCode

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of CvvCode for this value, creating a new instance for an unknown value
          def CvvCode.apply(value)
            if value.instance_of?(CvvCode)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || CvvCode.new(value))
            end
          end

          # Returns the instance of CvvCode for this value, or nil if not found
          def CvvCode.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            CvvCode.ALL.find { |v| v.value == value }
          end

          def CvvCode.ALL
            @@all ||= [CvvCode.match, CvvCode.suspicious, CvvCode.unsupported, CvvCode.no_match]
          end

          # CVV matches
          def CvvCode.match
            @@_match ||= CvvCode.new('match')
          end

          # CVV did not match; Transaction is possibly fraudulent
          def CvvCode.suspicious
            @@_suspicious ||= CvvCode.new('suspicious')
          end

          # CVV did not match; Issuer does not support card verification numbers
          def CvvCode.unsupported
            @@_unsupported ||= CvvCode.new('unsupported')
          end

          # CVV did not match; Specific reason not available
          def CvvCode.no_match
            @@_no_match ||= CvvCode.new('no_match')
          end

          def to_hash
            value
          end

        end

        class DayOfWeek

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of DayOfWeek for this value, creating a new instance for an unknown value
          def DayOfWeek.apply(value)
            if value.instance_of?(DayOfWeek)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || DayOfWeek.new(value))
            end
          end

          # Returns the instance of DayOfWeek for this value, or nil if not found
          def DayOfWeek.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            DayOfWeek.ALL.find { |v| v.value == value }
          end

          def DayOfWeek.ALL
            @@all ||= [DayOfWeek.sunday, DayOfWeek.monday, DayOfWeek.tuesday, DayOfWeek.wednesday, DayOfWeek.thursday, DayOfWeek.friday, DayOfWeek.saturday]
          end

          def DayOfWeek.sunday
            @@_sunday ||= DayOfWeek.new('sunday')
          end

          def DayOfWeek.monday
            @@_monday ||= DayOfWeek.new('monday')
          end

          def DayOfWeek.tuesday
            @@_tuesday ||= DayOfWeek.new('tuesday')
          end

          def DayOfWeek.wednesday
            @@_wednesday ||= DayOfWeek.new('wednesday')
          end

          def DayOfWeek.thursday
            @@_thursday ||= DayOfWeek.new('thursday')
          end

          def DayOfWeek.friday
            @@_friday ||= DayOfWeek.new('friday')
          end

          def DayOfWeek.saturday
            @@_saturday ||= DayOfWeek.new('saturday')
          end

          def to_hash
            value
          end

        end

        class DeliveredDuty

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of DeliveredDuty for this value, creating a new instance for an unknown value
          def DeliveredDuty.apply(value)
            if value.instance_of?(DeliveredDuty)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || DeliveredDuty.new(value))
            end
          end

          # Returns the instance of DeliveredDuty for this value, or nil if not found
          def DeliveredDuty.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            DeliveredDuty.ALL.find { |v| v.value == value }
          end

          def DeliveredDuty.ALL
            @@all ||= [DeliveredDuty.paid, DeliveredDuty.unpaid]
          end

          # Delivered Duty Paid (DDP). See https://en.wikipedia.org/wiki/Incoterms for
          # more information
          def DeliveredDuty.paid
            @@_paid ||= DeliveredDuty.new('paid')
          end

          # Delivered Duty Unpaid (DDU). See https://en.wikipedia.org/wiki/Incoterms for
          # more information
          def DeliveredDuty.unpaid
            @@_unpaid ||= DeliveredDuty.new('unpaid')
          end

          def to_hash
            value
          end

        end

        class DeliveredDutyDisplayType

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of DeliveredDutyDisplayType for this value, creating a new instance for an unknown value
          def DeliveredDutyDisplayType.apply(value)
            if value.instance_of?(DeliveredDutyDisplayType)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || DeliveredDutyDisplayType.new(value))
            end
          end

          # Returns the instance of DeliveredDutyDisplayType for this value, or nil if not found
          def DeliveredDutyDisplayType.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            DeliveredDutyDisplayType.ALL.find { |v| v.value == value }
          end

          def DeliveredDutyDisplayType.ALL
            @@all ||= [DeliveredDutyDisplayType.all, DeliveredDutyDisplayType.single]
          end

          # Displays all available options to the customer.
          def DeliveredDutyDisplayType.all
            @@_all ||= DeliveredDutyDisplayType.new('all')
          end

          # Displays a single option (either DDU or DDP), while the other can be displayed
          # by changing duties and tax preferences at checkout.
          def DeliveredDutyDisplayType.single
            @@_single ||= DeliveredDutyDisplayType.new('single')
          end

          def to_hash
            value
          end

        end

        class DeliveryOptionCostDetailComponentKey

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of DeliveryOptionCostDetailComponentKey for this value, creating a new instance for an unknown value
          def DeliveryOptionCostDetailComponentKey.apply(value)
            if value.instance_of?(DeliveryOptionCostDetailComponentKey)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || DeliveryOptionCostDetailComponentKey.new(value))
            end
          end

          # Returns the instance of DeliveryOptionCostDetailComponentKey for this value, or nil if not found
          def DeliveryOptionCostDetailComponentKey.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            DeliveryOptionCostDetailComponentKey.ALL.find { |v| v.value == value }
          end

          def DeliveryOptionCostDetailComponentKey.ALL
            @@all ||= [DeliveryOptionCostDetailComponentKey.ratecard_base_cost, DeliveryOptionCostDetailComponentKey.ratecard_ddp_fee, DeliveryOptionCostDetailComponentKey.ratecard_fuel_surcharge, DeliveryOptionCostDetailComponentKey.ratecard_oversized_shipment_fee, DeliveryOptionCostDetailComponentKey.ratecard_rural_shipment_fee, DeliveryOptionCostDetailComponentKey.ratecard_emergency_situation_surcharge_fee, DeliveryOptionCostDetailComponentKey.ratecard_peak_surcharge_fee, DeliveryOptionCostDetailComponentKey.ratecard_duties_taxes_paid_surcharge_fee, DeliveryOptionCostDetailComponentKey.center_commercial_invoice_fee, DeliveryOptionCostDetailComponentKey.center_inbound_carton_fee, DeliveryOptionCostDetailComponentKey.center_outbound_carton_fee]
          end

          def DeliveryOptionCostDetailComponentKey.ratecard_base_cost
            @@_ratecard_base_cost ||= DeliveryOptionCostDetailComponentKey.new('ratecard_base_cost')
          end

          def DeliveryOptionCostDetailComponentKey.ratecard_ddp_fee
            @@_ratecard_ddp_fee ||= DeliveryOptionCostDetailComponentKey.new('ratecard_ddp_fee')
          end

          def DeliveryOptionCostDetailComponentKey.ratecard_fuel_surcharge
            @@_ratecard_fuel_surcharge ||= DeliveryOptionCostDetailComponentKey.new('ratecard_fuel_surcharge')
          end

          def DeliveryOptionCostDetailComponentKey.ratecard_oversized_shipment_fee
            @@_ratecard_oversized_shipment_fee ||= DeliveryOptionCostDetailComponentKey.new('ratecard_oversized_shipment_fee')
          end

          def DeliveryOptionCostDetailComponentKey.ratecard_rural_shipment_fee
            @@_ratecard_rural_shipment_fee ||= DeliveryOptionCostDetailComponentKey.new('ratecard_rural_shipment_fee')
          end

          def DeliveryOptionCostDetailComponentKey.ratecard_emergency_situation_surcharge_fee
            @@_ratecard_emergency_situation_surcharge_fee ||= DeliveryOptionCostDetailComponentKey.new('ratecard_emergency_situation_surcharge_fee')
          end

          def DeliveryOptionCostDetailComponentKey.ratecard_peak_surcharge_fee
            @@_ratecard_peak_surcharge_fee ||= DeliveryOptionCostDetailComponentKey.new('ratecard_peak_surcharge_fee')
          end

          def DeliveryOptionCostDetailComponentKey.ratecard_duties_taxes_paid_surcharge_fee
            @@_ratecard_duties_taxes_paid_surcharge_fee ||= DeliveryOptionCostDetailComponentKey.new('ratecard_duties_taxes_paid_surcharge_fee')
          end

          def DeliveryOptionCostDetailComponentKey.center_commercial_invoice_fee
            @@_center_commercial_invoice_fee ||= DeliveryOptionCostDetailComponentKey.new('center_commercial_invoice_fee')
          end

          def DeliveryOptionCostDetailComponentKey.center_inbound_carton_fee
            @@_center_inbound_carton_fee ||= DeliveryOptionCostDetailComponentKey.new('center_inbound_carton_fee')
          end

          def DeliveryOptionCostDetailComponentKey.center_outbound_carton_fee
            @@_center_outbound_carton_fee ||= DeliveryOptionCostDetailComponentKey.new('center_outbound_carton_fee')
          end

          def to_hash
            value
          end

        end

        class DeliveryOptionCostDetailSource

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of DeliveryOptionCostDetailSource for this value, creating a new instance for an unknown value
          def DeliveryOptionCostDetailSource.apply(value)
            if value.instance_of?(DeliveryOptionCostDetailSource)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || DeliveryOptionCostDetailSource.new(value))
            end
          end

          # Returns the instance of DeliveryOptionCostDetailSource for this value, or nil if not found
          def DeliveryOptionCostDetailSource.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            DeliveryOptionCostDetailSource.ALL.find { |v| v.value == value }
          end

          def DeliveryOptionCostDetailSource.ALL
            @@all ||= [DeliveryOptionCostDetailSource.center, DeliveryOptionCostDetailSource.ratecard]
          end

          def DeliveryOptionCostDetailSource.center
            @@_center ||= DeliveryOptionCostDetailSource.new('center')
          end

          def DeliveryOptionCostDetailSource.ratecard
            @@_ratecard ||= DeliveryOptionCostDetailSource.new('ratecard')
          end

          def to_hash
            value
          end

        end

        class DeliveryWindowComponentSource

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of DeliveryWindowComponentSource for this value, creating a new instance for an unknown value
          def DeliveryWindowComponentSource.apply(value)
            if value.instance_of?(DeliveryWindowComponentSource)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || DeliveryWindowComponentSource.new(value))
            end
          end

          # Returns the instance of DeliveryWindowComponentSource for this value, or nil if not found
          def DeliveryWindowComponentSource.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            DeliveryWindowComponentSource.ALL.find { |v| v.value == value }
          end

          def DeliveryWindowComponentSource.ALL
            @@all ||= [DeliveryWindowComponentSource.flow, DeliveryWindowComponentSource.organization, DeliveryWindowComponentSource.carrier, DeliveryWindowComponentSource.center, DeliveryWindowComponentSource.mixed]
          end

          def DeliveryWindowComponentSource.flow
            @@_flow ||= DeliveryWindowComponentSource.new('flow')
          end

          def DeliveryWindowComponentSource.organization
            @@_organization ||= DeliveryWindowComponentSource.new('organization')
          end

          def DeliveryWindowComponentSource.carrier
            @@_carrier ||= DeliveryWindowComponentSource.new('carrier')
          end

          def DeliveryWindowComponentSource.center
            @@_center ||= DeliveryWindowComponentSource.new('center')
          end

          # A delivery estimate may be a combination of multiple sources
          def DeliveryWindowComponentSource.mixed
            @@_mixed ||= DeliveryWindowComponentSource.new('mixed')
          end

          def to_hash
            value
          end

        end

        class DeliveryWindowLocation

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of DeliveryWindowLocation for this value, creating a new instance for an unknown value
          def DeliveryWindowLocation.apply(value)
            if value.instance_of?(DeliveryWindowLocation)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || DeliveryWindowLocation.new(value))
            end
          end

          # Returns the instance of DeliveryWindowLocation for this value, or nil if not found
          def DeliveryWindowLocation.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            DeliveryWindowLocation.ALL.find { |v| v.value == value }
          end

          def DeliveryWindowLocation.ALL
            @@all ||= [DeliveryWindowLocation.center, DeliveryWindowLocation.crossdock, DeliveryWindowLocation.customer]
          end

          def DeliveryWindowLocation.center
            @@_center ||= DeliveryWindowLocation.new('center')
          end

          def DeliveryWindowLocation.crossdock
            @@_crossdock ||= DeliveryWindowLocation.new('crossdock')
          end

          def DeliveryWindowLocation.customer
            @@_customer ||= DeliveryWindowLocation.new('customer')
          end

          def to_hash
            value
          end

        end

        class Direction

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of Direction for this value, creating a new instance for an unknown value
          def Direction.apply(value)
            if value.instance_of?(Direction)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || Direction.new(value))
            end
          end

          # Returns the instance of Direction for this value, or nil if not found
          def Direction.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            Direction.ALL.find { |v| v.value == value }
          end

          def Direction.ALL
            @@all ||= [Direction.outbound, Direction.return]
          end

          # Outbound shipment to typically fulfill a customer order
          def Direction.outbound
            @@_outbound ||= Direction.new('outbound')
          end

          # Inbound or return shipment
          def Direction.return
            @@_return ||= Direction.new('return')
          end

          def to_hash
            value
          end

        end

        class DiscountRuleStatus

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of DiscountRuleStatus for this value, creating a new instance for an unknown value
          def DiscountRuleStatus.apply(value)
            if value.instance_of?(DiscountRuleStatus)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || DiscountRuleStatus.new(value))
            end
          end

          # Returns the instance of DiscountRuleStatus for this value, or nil if not found
          def DiscountRuleStatus.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            DiscountRuleStatus.ALL.find { |v| v.value == value }
          end

          def DiscountRuleStatus.ALL
            @@all ||= [DiscountRuleStatus.active, DiscountRuleStatus.scheduled, DiscountRuleStatus.expired]
          end

          def DiscountRuleStatus.active
            @@_active ||= DiscountRuleStatus.new('active')
          end

          def DiscountRuleStatus.scheduled
            @@_scheduled ||= DiscountRuleStatus.new('scheduled')
          end

          def DiscountRuleStatus.expired
            @@_expired ||= DiscountRuleStatus.new('expired')
          end

          def to_hash
            value
          end

        end

        class DiscountRuleSubsidyTarget

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of DiscountRuleSubsidyTarget for this value, creating a new instance for an unknown value
          def DiscountRuleSubsidyTarget.apply(value)
            if value.instance_of?(DiscountRuleSubsidyTarget)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || DiscountRuleSubsidyTarget.new(value))
            end
          end

          # Returns the instance of DiscountRuleSubsidyTarget for this value, or nil if not found
          def DiscountRuleSubsidyTarget.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            DiscountRuleSubsidyTarget.ALL.find { |v| v.value == value }
          end

          def DiscountRuleSubsidyTarget.ALL
            @@all ||= [DiscountRuleSubsidyTarget.vat, DiscountRuleSubsidyTarget.duty]
          end

          # VAT subsidy
          def DiscountRuleSubsidyTarget.vat
            @@_vat ||= DiscountRuleSubsidyTarget.new('vat')
          end

          # Duty subsidy
          def DiscountRuleSubsidyTarget.duty
            @@_duty ||= DiscountRuleSubsidyTarget.new('duty')
          end

          def to_hash
            value
          end

        end

        class DiscountTarget

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of DiscountTarget for this value, creating a new instance for an unknown value
          def DiscountTarget.apply(value)
            if value.instance_of?(DiscountTarget)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || DiscountTarget.new(value))
            end
          end

          # Returns the instance of DiscountTarget for this value, or nil if not found
          def DiscountTarget.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            DiscountTarget.ALL.find { |v| v.value == value }
          end

          def DiscountTarget.ALL
            @@all ||= [DiscountTarget.item, DiscountTarget.shipping]
          end

          # Discount is targeted to an item.
          def DiscountTarget.item
            @@_item ||= DiscountTarget.new('item')
          end

          # Discount is targeting to shipping. Only applicable if the discount is provided
          # at the order level.
          def DiscountTarget.shipping
            @@_shipping ||= DiscountTarget.new('shipping')
          end

          def to_hash
            value
          end

        end

        class DutyItemApprovalStatus

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of DutyItemApprovalStatus for this value, creating a new instance for an unknown value
          def DutyItemApprovalStatus.apply(value)
            if value.instance_of?(DutyItemApprovalStatus)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || DutyItemApprovalStatus.new(value))
            end
          end

          # Returns the instance of DutyItemApprovalStatus for this value, or nil if not found
          def DutyItemApprovalStatus.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            DutyItemApprovalStatus.ALL.find { |v| v.value == value }
          end

          def DutyItemApprovalStatus.ALL
            @@all ||= [DutyItemApprovalStatus.pending, DutyItemApprovalStatus.certified, DutyItemApprovalStatus.decertified]
          end

          def DutyItemApprovalStatus.pending
            @@_pending ||= DutyItemApprovalStatus.new('pending')
          end

          def DutyItemApprovalStatus.certified
            @@_certified ||= DutyItemApprovalStatus.new('certified')
          end

          def DutyItemApprovalStatus.decertified
            @@_decertified ||= DutyItemApprovalStatus.new('decertified')
          end

          def to_hash
            value
          end

        end

        class EcommercePlatformType

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of EcommercePlatformType for this value, creating a new instance for an unknown value
          def EcommercePlatformType.apply(value)
            if value.instance_of?(EcommercePlatformType)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || EcommercePlatformType.new(value))
            end
          end

          # Returns the instance of EcommercePlatformType for this value, or nil if not found
          def EcommercePlatformType.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            EcommercePlatformType.ALL.find { |v| v.value == value }
          end

          def EcommercePlatformType.ALL
            @@all ||= [EcommercePlatformType.commercetools, EcommercePlatformType.custom, EcommercePlatformType.hybris, EcommercePlatformType.magento, EcommercePlatformType.shopify, EcommercePlatformType.shopify_markets, EcommercePlatformType.sfcc, EcommercePlatformType.solidus, EcommercePlatformType.workarea]
          end

          def EcommercePlatformType.commercetools
            @@_commercetools ||= EcommercePlatformType.new('commercetools')
          end

          def EcommercePlatformType.custom
            @@_custom ||= EcommercePlatformType.new('custom')
          end

          def EcommercePlatformType.hybris
            @@_hybris ||= EcommercePlatformType.new('hybris')
          end

          def EcommercePlatformType.magento
            @@_magento ||= EcommercePlatformType.new('magento')
          end

          def EcommercePlatformType.shopify
            @@_shopify ||= EcommercePlatformType.new('shopify')
          end

          # Indicates that the organization is participating in the Shopify Markets
          # channel - See
          def EcommercePlatformType.shopify_markets
            @@_shopify_markets ||= EcommercePlatformType.new('shopify_markets')
          end

          def EcommercePlatformType.sfcc
            @@_sfcc ||= EcommercePlatformType.new('sfcc')
          end

          def EcommercePlatformType.solidus
            @@_solidus ||= EcommercePlatformType.new('solidus')
          end

          def EcommercePlatformType.workarea
            @@_workarea ||= EcommercePlatformType.new('workarea')
          end

          def to_hash
            value
          end

        end

        class EconomicTitleLocation

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of EconomicTitleLocation for this value, creating a new instance for an unknown value
          def EconomicTitleLocation.apply(value)
            if value.instance_of?(EconomicTitleLocation)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || EconomicTitleLocation.new(value))
            end
          end

          # Returns the instance of EconomicTitleLocation for this value, or nil if not found
          def EconomicTitleLocation.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            EconomicTitleLocation.ALL.find { |v| v.value == value }
          end

          def EconomicTitleLocation.ALL
            @@all ||= [EconomicTitleLocation.high_seas, EconomicTitleLocation.origination, EconomicTitleLocation.destination]
          end

          # Indicates title transferred on the high seas
          def EconomicTitleLocation.high_seas
            @@_high_seas ||= EconomicTitleLocation.new('high_seas')
          end

          # Indicates title transferred at the originating fulfillment center
          def EconomicTitleLocation.origination
            @@_origination ||= EconomicTitleLocation.new('origination')
          end

          # Indicates title transferred at the destination
          def EconomicTitleLocation.destination
            @@_destination ||= EconomicTitleLocation.new('destination')
          end

          def to_hash
            value
          end

        end

        class EntityIdentifierType

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of EntityIdentifierType for this value, creating a new instance for an unknown value
          def EntityIdentifierType.apply(value)
            if value.instance_of?(EntityIdentifierType)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || EntityIdentifierType.new(value))
            end
          end

          # Returns the instance of EntityIdentifierType for this value, or nil if not found
          def EntityIdentifierType.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            EntityIdentifierType.ALL.find { |v| v.value == value }
          end

          def EntityIdentifierType.ALL
            @@all ||= [EntityIdentifierType.ioss, EntityIdentifierType.voec]
          end

          # The Import One-Stop Shop (IOSS) to comply with VAT on imported goods. see:
          # https://ec.europa.eu/taxation_customs/business/vat/ioss_en
          def EntityIdentifierType.ioss
            @@_ioss ||= EntityIdentifierType.new('ioss')
          end

          # The VAT on Electronic Commerce (VOEC) to comply with VAT on imported goods.
          # see:
          # https://www.skatteetaten.no/globalassets/bedrift-og-organisasjon/voec/voec-guidelines-20200807.pdf
          def EntityIdentifierType.voec
            @@_voec ||= EntityIdentifierType.new('voec')
          end

          def to_hash
            value
          end

        end

        class Environment

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of Environment for this value, creating a new instance for an unknown value
          def Environment.apply(value)
            if value.instance_of?(Environment)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || Environment.new(value))
            end
          end

          # Returns the instance of Environment for this value, or nil if not found
          def Environment.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            Environment.ALL.find { |v| v.value == value }
          end

          def Environment.ALL
            @@all ||= [Environment.sandbox, Environment.production]
          end

          # In sandbox, no external services (e.g. orders, payments, logistics) will
          # generate real transactions
          def Environment.sandbox
            @@_sandbox ||= Environment.new('sandbox')
          end

          # In production, all external services are live and will generate real
          # transactions
          def Environment.production
            @@_production ||= Environment.new('production')
          end

          def to_hash
            value
          end

        end

        class EventType

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of EventType for this value, creating a new instance for an unknown value
          def EventType.apply(value)
            if value.instance_of?(EventType)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || EventType.new(value))
            end
          end

          # Returns the instance of EventType for this value, or nil if not found
          def EventType.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            EventType.ALL.find { |v| v.value == value }
          end

          def EventType.ALL
            @@all ||= [EventType.attribute_upserted, EventType.attribute_deleted, EventType.attribute_upserted_v2, EventType.attribute_deleted_v2, EventType.catalog_upserted, EventType.catalog_deleted, EventType.subcatalog_upserted, EventType.subcatalog_deleted, EventType.catalog_item_upserted, EventType.catalog_item_deleted, EventType.catalog_item_upserted_v2, EventType.catalog_item_deleted_v2, EventType.subcatalog_item_upserted, EventType.subcatalog_item_deleted, EventType.channel_upserted, EventType.channel_deleted, EventType.channel_currency_upserted, EventType.channel_currency_deleted, EventType.channel_organization_upserted, EventType.channel_organization_deleted, EventType.b2b_invoice_upserted, EventType.b2b_invoice_deleted, EventType.b2b_credit_memo_upserted, EventType.b2b_credit_memo_deleted, EventType.consumer_invoice_upserted, EventType.consumer_invoice_deleted, EventType.credit_memo_upserted, EventType.credit_memo_deleted, EventType.crossdock_shipment_upserted, EventType.rate_deleted, EventType.rate_upserted, EventType.rate_deleted_v3, EventType.rate_upserted_v3, EventType.customer_upserted, EventType.customer_deleted, EventType.customer_address_book_contact_upserted, EventType.customer_address_book_contact_deleted, EventType.email_notification_upserted, EventType.email_notification_deleted, EventType.available_promotions_upserted, EventType.available_promotions_deleted, EventType.available_promotions_upserted_v2, EventType.available_promotions_deleted_v2, EventType.allocation_deleted_v2, EventType.allocation_upserted_v2, EventType.currency_format_deleted, EventType.currency_format_upserted, EventType.experience_deleted, EventType.experience_upserted, EventType.experience_deleted_v2, EventType.experience_upserted_v2, EventType.country_status_upserted, EventType.country_status_deleted, EventType.experience_price_book_mapping_deleted, EventType.experience_price_book_mapping_upserted, EventType.experience_logistics_settings_upserted, EventType.experience_logistics_settings_deleted, EventType.item_margin_deleted_v2, EventType.item_margin_upserted_v2, EventType.item_sales_margin_deleted, EventType.item_sales_margin_upserted, EventType.label_format_deleted, EventType.label_format_upserted, EventType.order_deleted, EventType.order_upserted, EventType.order_deleted_v2, EventType.order_upserted_v2, EventType.order_identifier_deleted, EventType.order_identifier_upserted, EventType.order_identifier_deleted_v2, EventType.order_identifier_upserted_v2, EventType.order_identifier_upserted_v3, EventType.order_replacement_upserted, EventType.order_replacement_deleted, EventType.pricing_deleted, EventType.pricing_upserted, EventType.order_service_change_request, EventType.fraud_status_changed, EventType.center_upserted, EventType.center_deleted, EventType.shipping_configuration_upserted, EventType.shipping_configuration_deleted, EventType.tier_upserted_v2, EventType.tier_deleted_v2, EventType.shipping_lane_upserted, EventType.shipping_lane_deleted, EventType.shipping_configuration_item_availability_upserted, EventType.shipping_configuration_item_availability_deleted, EventType.shipping_configuration_item_shipping_pricing_upserted, EventType.shipping_configuration_item_shipping_pricing_deleted, EventType.hs6_code_upserted, EventType.hs6_code_deleted, EventType.hs10_code_upserted, EventType.hs10_code_deleted, EventType.item_origin_upserted, EventType.item_origin_deleted, EventType.harmonized_landed_cost_upserted, EventType.fully_harmonized_item_upserted, EventType.rule_upserted, EventType.rule_deleted, EventType.snapshot_upserted, EventType.snapshot_deleted, EventType.label_upserted, EventType.label_deleted_v2, EventType.label_upserted_v2, EventType.notification_upserted_v2, EventType.notification_deleted_v2, EventType.manifested_label_upserted, EventType.manifested_label_deleted, EventType.local_item_upserted, EventType.local_item_deleted, EventType.checkout_optin_responses_upserted, EventType.checkout_optin_responses_deleted, EventType.browse_optin_responses_upserted, EventType.browse_optin_responses_deleted, EventType.order_placed, EventType.order_placed_v2, EventType.ready_to_fulfill, EventType.ready_to_fulfill_v2, EventType.membership_upserted_v2, EventType.membership_deleted_v2, EventType.organization_upserted, EventType.organization_deleted, EventType.organization_upserted_v2, EventType.organization_deleted_v2, EventType.organization_short_id_upserted, EventType.organization_short_id_deleted, EventType.short_id_upserted, EventType.short_id_deleted, EventType.organization_default_configurations_upserted, EventType.organization_default_configurations_deleted, EventType.ecommerce_platform_upserted, EventType.ecommerce_platform_deleted, EventType.authorization_deleted_v2, EventType.authorization_status_changed, EventType.card_authorization_upserted_v2, EventType.card_authorization_deleted_v2, EventType.online_authorization_upserted_v2, EventType.online_authorization_deleted_v2, EventType.capture_upserted_v2, EventType.capture_deleted, EventType.card_upserted_v2, EventType.card_deleted, EventType.payment_upserted, EventType.payment_deleted, EventType.refund_upserted_v2, EventType.refund_deleted_v2, EventType.refund_capture_upserted_v2, EventType.reversal_upserted, EventType.reversal_deleted, EventType.capture_identifier_upserted, EventType.capture_identifier_deleted, EventType.refund_identifier_upserted, EventType.refund_identifier_deleted, EventType.virtual_card_capture_upserted, EventType.virtual_card_capture_deleted, EventType.virtual_card_refund_upserted, EventType.virtual_card_refund_deleted, EventType.payment_request_upserted, EventType.price_book_upserted, EventType.price_book_deleted, EventType.price_book_item_upserted, EventType.price_book_item_deleted, EventType.organization_rates_published, EventType.ratecard_lane_upserted, EventType.ratecard_lane_deleted, EventType.ratecard_upserted, EventType.ratecard_deleted, EventType.return_upserted, EventType.return_deleted, EventType.return_upserted_v2, EventType.return_deleted_v2, EventType.shopify_localization_setting_upserted, EventType.shopify_localization_setting_deleted, EventType.tracking_label_event_upserted]
          end

          def EventType.attribute_upserted
            @@_attribute_upserted ||= EventType.new('attribute_upserted')
          end

          def EventType.attribute_deleted
            @@_attribute_deleted ||= EventType.new('attribute_deleted')
          end

          def EventType.attribute_upserted_v2
            @@_attribute_upserted_v2 ||= EventType.new('attribute_upserted_v2')
          end

          def EventType.attribute_deleted_v2
            @@_attribute_deleted_v2 ||= EventType.new('attribute_deleted_v2')
          end

          def EventType.catalog_upserted
            @@_catalog_upserted ||= EventType.new('catalog_upserted')
          end

          def EventType.catalog_deleted
            @@_catalog_deleted ||= EventType.new('catalog_deleted')
          end

          def EventType.subcatalog_upserted
            @@_subcatalog_upserted ||= EventType.new('subcatalog_upserted')
          end

          def EventType.subcatalog_deleted
            @@_subcatalog_deleted ||= EventType.new('subcatalog_deleted')
          end

          def EventType.catalog_item_upserted
            @@_catalog_item_upserted ||= EventType.new('catalog_item_upserted')
          end

          def EventType.catalog_item_deleted
            @@_catalog_item_deleted ||= EventType.new('catalog_item_deleted')
          end

          def EventType.catalog_item_upserted_v2
            @@_catalog_item_upserted_v2 ||= EventType.new('catalog_item_upserted_v2')
          end

          def EventType.catalog_item_deleted_v2
            @@_catalog_item_deleted_v2 ||= EventType.new('catalog_item_deleted_v2')
          end

          def EventType.subcatalog_item_upserted
            @@_subcatalog_item_upserted ||= EventType.new('subcatalog_item_upserted')
          end

          def EventType.subcatalog_item_deleted
            @@_subcatalog_item_deleted ||= EventType.new('subcatalog_item_deleted')
          end

          def EventType.channel_upserted
            @@_channel_upserted ||= EventType.new('channel_upserted')
          end

          def EventType.channel_deleted
            @@_channel_deleted ||= EventType.new('channel_deleted')
          end

          def EventType.channel_currency_upserted
            @@_channel_currency_upserted ||= EventType.new('channel_currency_upserted')
          end

          def EventType.channel_currency_deleted
            @@_channel_currency_deleted ||= EventType.new('channel_currency_deleted')
          end

          def EventType.channel_organization_upserted
            @@_channel_organization_upserted ||= EventType.new('channel_organization_upserted')
          end

          def EventType.channel_organization_deleted
            @@_channel_organization_deleted ||= EventType.new('channel_organization_deleted')
          end

          def EventType.b2b_invoice_upserted
            @@_b2b_invoice_upserted ||= EventType.new('b2b_invoice_upserted')
          end

          def EventType.b2b_invoice_deleted
            @@_b2b_invoice_deleted ||= EventType.new('b2b_invoice_deleted')
          end

          def EventType.b2b_credit_memo_upserted
            @@_b2b_credit_memo_upserted ||= EventType.new('b2b_credit_memo_upserted')
          end

          def EventType.b2b_credit_memo_deleted
            @@_b2b_credit_memo_deleted ||= EventType.new('b2b_credit_memo_deleted')
          end

          def EventType.consumer_invoice_upserted
            @@_consumer_invoice_upserted ||= EventType.new('consumer_invoice_upserted')
          end

          def EventType.consumer_invoice_deleted
            @@_consumer_invoice_deleted ||= EventType.new('consumer_invoice_deleted')
          end

          def EventType.credit_memo_upserted
            @@_credit_memo_upserted ||= EventType.new('credit_memo_upserted')
          end

          def EventType.credit_memo_deleted
            @@_credit_memo_deleted ||= EventType.new('credit_memo_deleted')
          end

          def EventType.crossdock_shipment_upserted
            @@_crossdock_shipment_upserted ||= EventType.new('crossdock_shipment_upserted')
          end

          def EventType.rate_deleted
            @@_rate_deleted ||= EventType.new('rate_deleted')
          end

          def EventType.rate_upserted
            @@_rate_upserted ||= EventType.new('rate_upserted')
          end

          def EventType.rate_deleted_v3
            @@_rate_deleted_v3 ||= EventType.new('rate_deleted_v3')
          end

          def EventType.rate_upserted_v3
            @@_rate_upserted_v3 ||= EventType.new('rate_upserted_v3')
          end

          def EventType.customer_upserted
            @@_customer_upserted ||= EventType.new('customer_upserted')
          end

          def EventType.customer_deleted
            @@_customer_deleted ||= EventType.new('customer_deleted')
          end

          def EventType.customer_address_book_contact_upserted
            @@_customer_address_book_contact_upserted ||= EventType.new('customer_address_book_contact_upserted')
          end

          def EventType.customer_address_book_contact_deleted
            @@_customer_address_book_contact_deleted ||= EventType.new('customer_address_book_contact_deleted')
          end

          def EventType.email_notification_upserted
            @@_email_notification_upserted ||= EventType.new('email_notification_upserted')
          end

          def EventType.email_notification_deleted
            @@_email_notification_deleted ||= EventType.new('email_notification_deleted')
          end

          def EventType.available_promotions_upserted
            @@_available_promotions_upserted ||= EventType.new('available_promotions_upserted')
          end

          def EventType.available_promotions_deleted
            @@_available_promotions_deleted ||= EventType.new('available_promotions_deleted')
          end

          def EventType.available_promotions_upserted_v2
            @@_available_promotions_upserted_v2 ||= EventType.new('available_promotions_upserted_v2')
          end

          def EventType.available_promotions_deleted_v2
            @@_available_promotions_deleted_v2 ||= EventType.new('available_promotions_deleted_v2')
          end

          def EventType.allocation_deleted_v2
            @@_allocation_deleted_v2 ||= EventType.new('allocation_deleted_v2')
          end

          def EventType.allocation_upserted_v2
            @@_allocation_upserted_v2 ||= EventType.new('allocation_upserted_v2')
          end

          def EventType.currency_format_deleted
            @@_currency_format_deleted ||= EventType.new('currency_format_deleted')
          end

          def EventType.currency_format_upserted
            @@_currency_format_upserted ||= EventType.new('currency_format_upserted')
          end

          def EventType.experience_deleted
            @@_experience_deleted ||= EventType.new('experience_deleted')
          end

          def EventType.experience_upserted
            @@_experience_upserted ||= EventType.new('experience_upserted')
          end

          def EventType.experience_deleted_v2
            @@_experience_deleted_v2 ||= EventType.new('experience_deleted_v2')
          end

          def EventType.experience_upserted_v2
            @@_experience_upserted_v2 ||= EventType.new('experience_upserted_v2')
          end

          def EventType.country_status_upserted
            @@_country_status_upserted ||= EventType.new('country_status_upserted')
          end

          def EventType.country_status_deleted
            @@_country_status_deleted ||= EventType.new('country_status_deleted')
          end

          def EventType.experience_price_book_mapping_deleted
            @@_experience_price_book_mapping_deleted ||= EventType.new('experience_price_book_mapping_deleted')
          end

          def EventType.experience_price_book_mapping_upserted
            @@_experience_price_book_mapping_upserted ||= EventType.new('experience_price_book_mapping_upserted')
          end

          def EventType.experience_logistics_settings_upserted
            @@_experience_logistics_settings_upserted ||= EventType.new('experience_logistics_settings_upserted')
          end

          def EventType.experience_logistics_settings_deleted
            @@_experience_logistics_settings_deleted ||= EventType.new('experience_logistics_settings_deleted')
          end

          def EventType.item_margin_deleted_v2
            @@_item_margin_deleted_v2 ||= EventType.new('item_margin_deleted_v2')
          end

          def EventType.item_margin_upserted_v2
            @@_item_margin_upserted_v2 ||= EventType.new('item_margin_upserted_v2')
          end

          def EventType.item_sales_margin_deleted
            @@_item_sales_margin_deleted ||= EventType.new('item_sales_margin_deleted')
          end

          def EventType.item_sales_margin_upserted
            @@_item_sales_margin_upserted ||= EventType.new('item_sales_margin_upserted')
          end

          def EventType.label_format_deleted
            @@_label_format_deleted ||= EventType.new('label_format_deleted')
          end

          def EventType.label_format_upserted
            @@_label_format_upserted ||= EventType.new('label_format_upserted')
          end

          def EventType.order_deleted
            @@_order_deleted ||= EventType.new('order_deleted')
          end

          def EventType.order_upserted
            @@_order_upserted ||= EventType.new('order_upserted')
          end

          def EventType.order_deleted_v2
            @@_order_deleted_v2 ||= EventType.new('order_deleted_v2')
          end

          def EventType.order_upserted_v2
            @@_order_upserted_v2 ||= EventType.new('order_upserted_v2')
          end

          def EventType.order_identifier_deleted
            @@_order_identifier_deleted ||= EventType.new('order_identifier_deleted')
          end

          def EventType.order_identifier_upserted
            @@_order_identifier_upserted ||= EventType.new('order_identifier_upserted')
          end

          def EventType.order_identifier_deleted_v2
            @@_order_identifier_deleted_v2 ||= EventType.new('order_identifier_deleted_v2')
          end

          def EventType.order_identifier_upserted_v2
            @@_order_identifier_upserted_v2 ||= EventType.new('order_identifier_upserted_v2')
          end

          def EventType.order_identifier_upserted_v3
            @@_order_identifier_upserted_v3 ||= EventType.new('order_identifier_upserted_v3')
          end

          def EventType.order_replacement_upserted
            @@_order_replacement_upserted ||= EventType.new('order_replacement_upserted')
          end

          def EventType.order_replacement_deleted
            @@_order_replacement_deleted ||= EventType.new('order_replacement_deleted')
          end

          def EventType.pricing_deleted
            @@_pricing_deleted ||= EventType.new('pricing_deleted')
          end

          def EventType.pricing_upserted
            @@_pricing_upserted ||= EventType.new('pricing_upserted')
          end

          def EventType.order_service_change_request
            @@_order_service_change_request ||= EventType.new('order_service_change_request')
          end

          def EventType.fraud_status_changed
            @@_fraud_status_changed ||= EventType.new('fraud_status_changed')
          end

          def EventType.center_upserted
            @@_center_upserted ||= EventType.new('center_upserted')
          end

          def EventType.center_deleted
            @@_center_deleted ||= EventType.new('center_deleted')
          end

          def EventType.shipping_configuration_upserted
            @@_shipping_configuration_upserted ||= EventType.new('shipping_configuration_upserted')
          end

          def EventType.shipping_configuration_deleted
            @@_shipping_configuration_deleted ||= EventType.new('shipping_configuration_deleted')
          end

          def EventType.tier_upserted_v2
            @@_tier_upserted_v2 ||= EventType.new('tier_upserted_v2')
          end

          def EventType.tier_deleted_v2
            @@_tier_deleted_v2 ||= EventType.new('tier_deleted_v2')
          end

          def EventType.shipping_lane_upserted
            @@_shipping_lane_upserted ||= EventType.new('shipping_lane_upserted')
          end

          def EventType.shipping_lane_deleted
            @@_shipping_lane_deleted ||= EventType.new('shipping_lane_deleted')
          end

          def EventType.shipping_configuration_item_availability_upserted
            @@_shipping_configuration_item_availability_upserted ||= EventType.new('shipping_configuration_item_availability_upserted')
          end

          def EventType.shipping_configuration_item_availability_deleted
            @@_shipping_configuration_item_availability_deleted ||= EventType.new('shipping_configuration_item_availability_deleted')
          end

          def EventType.shipping_configuration_item_shipping_pricing_upserted
            @@_shipping_configuration_item_shipping_pricing_upserted ||= EventType.new('shipping_configuration_item_shipping_pricing_upserted')
          end

          def EventType.shipping_configuration_item_shipping_pricing_deleted
            @@_shipping_configuration_item_shipping_pricing_deleted ||= EventType.new('shipping_configuration_item_shipping_pricing_deleted')
          end

          def EventType.hs6_code_upserted
            @@_hs6_code_upserted ||= EventType.new('hs6_code_upserted')
          end

          def EventType.hs6_code_deleted
            @@_hs6_code_deleted ||= EventType.new('hs6_code_deleted')
          end

          def EventType.hs10_code_upserted
            @@_hs10_code_upserted ||= EventType.new('hs10_code_upserted')
          end

          def EventType.hs10_code_deleted
            @@_hs10_code_deleted ||= EventType.new('hs10_code_deleted')
          end

          def EventType.item_origin_upserted
            @@_item_origin_upserted ||= EventType.new('item_origin_upserted')
          end

          def EventType.item_origin_deleted
            @@_item_origin_deleted ||= EventType.new('item_origin_deleted')
          end

          def EventType.harmonized_landed_cost_upserted
            @@_harmonized_landed_cost_upserted ||= EventType.new('harmonized_landed_cost_upserted')
          end

          def EventType.fully_harmonized_item_upserted
            @@_fully_harmonized_item_upserted ||= EventType.new('fully_harmonized_item_upserted')
          end

          def EventType.rule_upserted
            @@_rule_upserted ||= EventType.new('rule_upserted')
          end

          def EventType.rule_deleted
            @@_rule_deleted ||= EventType.new('rule_deleted')
          end

          def EventType.snapshot_upserted
            @@_snapshot_upserted ||= EventType.new('snapshot_upserted')
          end

          def EventType.snapshot_deleted
            @@_snapshot_deleted ||= EventType.new('snapshot_deleted')
          end

          def EventType.label_upserted
            @@_label_upserted ||= EventType.new('label_upserted')
          end

          def EventType.label_deleted_v2
            @@_label_deleted_v2 ||= EventType.new('label_deleted_v2')
          end

          def EventType.label_upserted_v2
            @@_label_upserted_v2 ||= EventType.new('label_upserted_v2')
          end

          def EventType.notification_upserted_v2
            @@_notification_upserted_v2 ||= EventType.new('notification_upserted_v2')
          end

          def EventType.notification_deleted_v2
            @@_notification_deleted_v2 ||= EventType.new('notification_deleted_v2')
          end

          def EventType.manifested_label_upserted
            @@_manifested_label_upserted ||= EventType.new('manifested_label_upserted')
          end

          def EventType.manifested_label_deleted
            @@_manifested_label_deleted ||= EventType.new('manifested_label_deleted')
          end

          def EventType.local_item_upserted
            @@_local_item_upserted ||= EventType.new('local_item_upserted')
          end

          def EventType.local_item_deleted
            @@_local_item_deleted ||= EventType.new('local_item_deleted')
          end

          def EventType.checkout_optin_responses_upserted
            @@_checkout_optin_responses_upserted ||= EventType.new('checkout_optin_responses_upserted')
          end

          def EventType.checkout_optin_responses_deleted
            @@_checkout_optin_responses_deleted ||= EventType.new('checkout_optin_responses_deleted')
          end

          def EventType.browse_optin_responses_upserted
            @@_browse_optin_responses_upserted ||= EventType.new('browse_optin_responses_upserted')
          end

          def EventType.browse_optin_responses_deleted
            @@_browse_optin_responses_deleted ||= EventType.new('browse_optin_responses_deleted')
          end

          def EventType.order_placed
            @@_order_placed ||= EventType.new('order_placed')
          end

          def EventType.order_placed_v2
            @@_order_placed_v2 ||= EventType.new('order_placed_v2')
          end

          def EventType.ready_to_fulfill
            @@_ready_to_fulfill ||= EventType.new('ready_to_fulfill')
          end

          def EventType.ready_to_fulfill_v2
            @@_ready_to_fulfill_v2 ||= EventType.new('ready_to_fulfill_v2')
          end

          def EventType.membership_upserted_v2
            @@_membership_upserted_v2 ||= EventType.new('membership_upserted_v2')
          end

          def EventType.membership_deleted_v2
            @@_membership_deleted_v2 ||= EventType.new('membership_deleted_v2')
          end

          def EventType.organization_upserted
            @@_organization_upserted ||= EventType.new('organization_upserted')
          end

          def EventType.organization_deleted
            @@_organization_deleted ||= EventType.new('organization_deleted')
          end

          def EventType.organization_upserted_v2
            @@_organization_upserted_v2 ||= EventType.new('organization_upserted_v2')
          end

          def EventType.organization_deleted_v2
            @@_organization_deleted_v2 ||= EventType.new('organization_deleted_v2')
          end

          def EventType.organization_short_id_upserted
            @@_organization_short_id_upserted ||= EventType.new('organization_short_id_upserted')
          end

          def EventType.organization_short_id_deleted
            @@_organization_short_id_deleted ||= EventType.new('organization_short_id_deleted')
          end

          def EventType.short_id_upserted
            @@_short_id_upserted ||= EventType.new('short_id_upserted')
          end

          def EventType.short_id_deleted
            @@_short_id_deleted ||= EventType.new('short_id_deleted')
          end

          def EventType.organization_default_configurations_upserted
            @@_organization_default_configurations_upserted ||= EventType.new('organization_default_configurations_upserted')
          end

          def EventType.organization_default_configurations_deleted
            @@_organization_default_configurations_deleted ||= EventType.new('organization_default_configurations_deleted')
          end

          def EventType.ecommerce_platform_upserted
            @@_ecommerce_platform_upserted ||= EventType.new('ecommerce_platform_upserted')
          end

          def EventType.ecommerce_platform_deleted
            @@_ecommerce_platform_deleted ||= EventType.new('ecommerce_platform_deleted')
          end

          def EventType.authorization_deleted_v2
            @@_authorization_deleted_v2 ||= EventType.new('authorization_deleted_v2')
          end

          def EventType.authorization_status_changed
            @@_authorization_status_changed ||= EventType.new('authorization_status_changed')
          end

          def EventType.card_authorization_upserted_v2
            @@_card_authorization_upserted_v2 ||= EventType.new('card_authorization_upserted_v2')
          end

          def EventType.card_authorization_deleted_v2
            @@_card_authorization_deleted_v2 ||= EventType.new('card_authorization_deleted_v2')
          end

          def EventType.online_authorization_upserted_v2
            @@_online_authorization_upserted_v2 ||= EventType.new('online_authorization_upserted_v2')
          end

          def EventType.online_authorization_deleted_v2
            @@_online_authorization_deleted_v2 ||= EventType.new('online_authorization_deleted_v2')
          end

          def EventType.capture_upserted_v2
            @@_capture_upserted_v2 ||= EventType.new('capture_upserted_v2')
          end

          def EventType.capture_deleted
            @@_capture_deleted ||= EventType.new('capture_deleted')
          end

          def EventType.card_upserted_v2
            @@_card_upserted_v2 ||= EventType.new('card_upserted_v2')
          end

          def EventType.card_deleted
            @@_card_deleted ||= EventType.new('card_deleted')
          end

          def EventType.payment_upserted
            @@_payment_upserted ||= EventType.new('payment_upserted')
          end

          def EventType.payment_deleted
            @@_payment_deleted ||= EventType.new('payment_deleted')
          end

          def EventType.refund_upserted_v2
            @@_refund_upserted_v2 ||= EventType.new('refund_upserted_v2')
          end

          def EventType.refund_deleted_v2
            @@_refund_deleted_v2 ||= EventType.new('refund_deleted_v2')
          end

          def EventType.refund_capture_upserted_v2
            @@_refund_capture_upserted_v2 ||= EventType.new('refund_capture_upserted_v2')
          end

          def EventType.reversal_upserted
            @@_reversal_upserted ||= EventType.new('reversal_upserted')
          end

          def EventType.reversal_deleted
            @@_reversal_deleted ||= EventType.new('reversal_deleted')
          end

          def EventType.capture_identifier_upserted
            @@_capture_identifier_upserted ||= EventType.new('capture_identifier_upserted')
          end

          def EventType.capture_identifier_deleted
            @@_capture_identifier_deleted ||= EventType.new('capture_identifier_deleted')
          end

          def EventType.refund_identifier_upserted
            @@_refund_identifier_upserted ||= EventType.new('refund_identifier_upserted')
          end

          def EventType.refund_identifier_deleted
            @@_refund_identifier_deleted ||= EventType.new('refund_identifier_deleted')
          end

          def EventType.virtual_card_capture_upserted
            @@_virtual_card_capture_upserted ||= EventType.new('virtual_card_capture_upserted')
          end

          def EventType.virtual_card_capture_deleted
            @@_virtual_card_capture_deleted ||= EventType.new('virtual_card_capture_deleted')
          end

          def EventType.virtual_card_refund_upserted
            @@_virtual_card_refund_upserted ||= EventType.new('virtual_card_refund_upserted')
          end

          def EventType.virtual_card_refund_deleted
            @@_virtual_card_refund_deleted ||= EventType.new('virtual_card_refund_deleted')
          end

          def EventType.payment_request_upserted
            @@_payment_request_upserted ||= EventType.new('payment_request_upserted')
          end

          def EventType.price_book_upserted
            @@_price_book_upserted ||= EventType.new('price_book_upserted')
          end

          def EventType.price_book_deleted
            @@_price_book_deleted ||= EventType.new('price_book_deleted')
          end

          def EventType.price_book_item_upserted
            @@_price_book_item_upserted ||= EventType.new('price_book_item_upserted')
          end

          def EventType.price_book_item_deleted
            @@_price_book_item_deleted ||= EventType.new('price_book_item_deleted')
          end

          def EventType.organization_rates_published
            @@_organization_rates_published ||= EventType.new('organization_rates_published')
          end

          def EventType.ratecard_lane_upserted
            @@_ratecard_lane_upserted ||= EventType.new('ratecard_lane_upserted')
          end

          def EventType.ratecard_lane_deleted
            @@_ratecard_lane_deleted ||= EventType.new('ratecard_lane_deleted')
          end

          def EventType.ratecard_upserted
            @@_ratecard_upserted ||= EventType.new('ratecard_upserted')
          end

          def EventType.ratecard_deleted
            @@_ratecard_deleted ||= EventType.new('ratecard_deleted')
          end

          def EventType.return_upserted
            @@_return_upserted ||= EventType.new('return_upserted')
          end

          def EventType.return_deleted
            @@_return_deleted ||= EventType.new('return_deleted')
          end

          def EventType.return_upserted_v2
            @@_return_upserted_v2 ||= EventType.new('return_upserted_v2')
          end

          def EventType.return_deleted_v2
            @@_return_deleted_v2 ||= EventType.new('return_deleted_v2')
          end

          def EventType.shopify_localization_setting_upserted
            @@_shopify_localization_setting_upserted ||= EventType.new('shopify_localization_setting_upserted')
          end

          def EventType.shopify_localization_setting_deleted
            @@_shopify_localization_setting_deleted ||= EventType.new('shopify_localization_setting_deleted')
          end

          def EventType.tracking_label_event_upserted
            @@_tracking_label_event_upserted ||= EventType.new('tracking_label_event_upserted')
          end

          def to_hash
            value
          end

        end

        class ExceptionType

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of ExceptionType for this value, creating a new instance for an unknown value
          def ExceptionType.apply(value)
            if value.instance_of?(ExceptionType)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || ExceptionType.new(value))
            end
          end

          # Returns the instance of ExceptionType for this value, or nil if not found
          def ExceptionType.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            ExceptionType.ALL.find { |v| v.value == value }
          end

          def ExceptionType.ALL
            @@all ||= [ExceptionType.open, ExceptionType.closed]
          end

          def ExceptionType.open
            @@_open ||= ExceptionType.new('open')
          end

          def ExceptionType.closed
            @@_closed ||= ExceptionType.new('closed')
          end

          def to_hash
            value
          end

        end

        class ExclusionRuleState

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of ExclusionRuleState for this value, creating a new instance for an unknown value
          def ExclusionRuleState.apply(value)
            if value.instance_of?(ExclusionRuleState)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || ExclusionRuleState.new(value))
            end
          end

          # Returns the instance of ExclusionRuleState for this value, or nil if not found
          def ExclusionRuleState.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            ExclusionRuleState.ALL.find { |v| v.value == value }
          end

          def ExclusionRuleState.ALL
            @@all ||= [ExclusionRuleState.current, ExclusionRuleState.deleting, ExclusionRuleState.updating]
          end

          def ExclusionRuleState.current
            @@_current ||= ExclusionRuleState.new('current')
          end

          def ExclusionRuleState.deleting
            @@_deleting ||= ExclusionRuleState.new('deleting')
          end

          def ExclusionRuleState.updating
            @@_updating ||= ExclusionRuleState.new('updating')
          end

          def to_hash
            value
          end

        end

        class ExperienceCloneStatus

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of ExperienceCloneStatus for this value, creating a new instance for an unknown value
          def ExperienceCloneStatus.apply(value)
            if value.instance_of?(ExperienceCloneStatus)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || ExperienceCloneStatus.new(value))
            end
          end

          # Returns the instance of ExperienceCloneStatus for this value, or nil if not found
          def ExperienceCloneStatus.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            ExperienceCloneStatus.ALL.find { |v| v.value == value }
          end

          def ExperienceCloneStatus.ALL
            @@all ||= [ExperienceCloneStatus.pending, ExperienceCloneStatus.updating, ExperienceCloneStatus.completed, ExperienceCloneStatus.failed]
          end

          def ExperienceCloneStatus.pending
            @@_pending ||= ExperienceCloneStatus.new('pending')
          end

          def ExperienceCloneStatus.updating
            @@_updating ||= ExperienceCloneStatus.new('updating')
          end

          def ExperienceCloneStatus.completed
            @@_completed ||= ExperienceCloneStatus.new('completed')
          end

          def ExperienceCloneStatus.failed
            @@_failed ||= ExperienceCloneStatus.new('failed')
          end

          def to_hash
            value
          end

        end

        class ExperienceCountryStatus

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of ExperienceCountryStatus for this value, creating a new instance for an unknown value
          def ExperienceCountryStatus.apply(value)
            if value.instance_of?(ExperienceCountryStatus)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || ExperienceCountryStatus.new(value))
            end
          end

          # Returns the instance of ExperienceCountryStatus for this value, or nil if not found
          def ExperienceCountryStatus.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            ExperienceCountryStatus.ALL.find { |v| v.value == value }
          end

          def ExperienceCountryStatus.ALL
            @@all ||= [ExperienceCountryStatus.enabled, ExperienceCountryStatus.disabled]
          end

          def ExperienceCountryStatus.enabled
            @@_enabled ||= ExperienceCountryStatus.new('enabled')
          end

          def ExperienceCountryStatus.disabled
            @@_disabled ||= ExperienceCountryStatus.new('disabled')
          end

          def to_hash
            value
          end

        end

        class ExperiencePaymentMethodTag < PaymentMethodTag

          attr_reader :value

          def initialize(value)
            super(:name => PaymentMethodTag::Types::EXPERIENCE_PAYMENT_METHOD_TAG, :discriminator => 'experience_payment_method_tag')
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of ExperiencePaymentMethodTag for this value, creating a new instance for an unknown value
          def ExperiencePaymentMethodTag.apply(value)
            if value.instance_of?(ExperiencePaymentMethodTag)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || ExperiencePaymentMethodTag.new(value))
            end
          end

          # Returns the instance of ExperiencePaymentMethodTag for this value, or nil if not found
          def ExperiencePaymentMethodTag.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            ExperiencePaymentMethodTag.ALL.find { |v| v.value == value }
          end

          def ExperiencePaymentMethodTag.ALL
            @@all ||= [ExperiencePaymentMethodTag.display]
          end

          # A displayed payment method will be highlighted during the checkout process for
          # an experience.
          def ExperiencePaymentMethodTag.display
            @@_display ||= ExperiencePaymentMethodTag.new('display')
          end

          def subtype_to_hash
            value
          end

        end

        class ExperienceStatus

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of ExperienceStatus for this value, creating a new instance for an unknown value
          def ExperienceStatus.apply(value)
            if value.instance_of?(ExperienceStatus)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || ExperienceStatus.new(value))
            end
          end

          # Returns the instance of ExperienceStatus for this value, or nil if not found
          def ExperienceStatus.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            ExperienceStatus.ALL.find { |v| v.value == value }
          end

          def ExperienceStatus.ALL
            @@all ||= [ExperienceStatus.draft, ExperienceStatus.active, ExperienceStatus.archiving, ExperienceStatus.archived]
          end

          def ExperienceStatus.draft
            @@_draft ||= ExperienceStatus.new('draft')
          end

          def ExperienceStatus.active
            @@_active ||= ExperienceStatus.new('active')
          end

          # Archiving indicates an experience has been archived. We allow some time for
          # sessions to expire before fully marking the experience archived.
          def ExperienceStatus.archiving
            @@_archiving ||= ExperienceStatus.new('archiving')
          end

          def ExperienceStatus.archived
            @@_archived ||= ExperienceStatus.new('archived')
          end

          def to_hash
            value
          end

        end

        class ExportStatus

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of ExportStatus for this value, creating a new instance for an unknown value
          def ExportStatus.apply(value)
            if value.instance_of?(ExportStatus)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || ExportStatus.new(value))
            end
          end

          # Returns the instance of ExportStatus for this value, or nil if not found
          def ExportStatus.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            ExportStatus.ALL.find { |v| v.value == value }
          end

          def ExportStatus.ALL
            @@all ||= [ExportStatus.created, ExportStatus.processing, ExportStatus.completed, ExportStatus.failed]
          end

          def ExportStatus.created
            @@_created ||= ExportStatus.new('created')
          end

          def ExportStatus.processing
            @@_processing ||= ExportStatus.new('processing')
          end

          def ExportStatus.completed
            @@_completed ||= ExportStatus.new('completed')
          end

          def ExportStatus.failed
            @@_failed ||= ExportStatus.new('failed')
          end

          def to_hash
            value
          end

        end

        class ExporterOfRecord

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of ExporterOfRecord for this value, creating a new instance for an unknown value
          def ExporterOfRecord.apply(value)
            if value.instance_of?(ExporterOfRecord)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || ExporterOfRecord.new(value))
            end
          end

          # Returns the instance of ExporterOfRecord for this value, or nil if not found
          def ExporterOfRecord.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            ExporterOfRecord.ALL.find { |v| v.value == value }
          end

          def ExporterOfRecord.ALL
            @@all ||= [ExporterOfRecord.flow, ExporterOfRecord.organization]
          end

          def ExporterOfRecord.flow
            @@_flow ||= ExporterOfRecord.new('flow')
          end

          def ExporterOfRecord.organization
            @@_organization ||= ExporterOfRecord.new('organization')
          end

          def to_hash
            value
          end

        end

        class FlowBehavior

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of FlowBehavior for this value, creating a new instance for an unknown value
          def FlowBehavior.apply(value)
            if value.instance_of?(FlowBehavior)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || FlowBehavior.new(value))
            end
          end

          # Returns the instance of FlowBehavior for this value, or nil if not found
          def FlowBehavior.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            FlowBehavior.ALL.find { |v| v.value == value }
          end

          def FlowBehavior.ALL
            @@all ||= [FlowBehavior.view_consumer_data]
          end

          # Allows user to view consumers' personal data.
          def FlowBehavior.view_consumer_data
            @@_view_consumer_data ||= FlowBehavior.new('view_consumer_data')
          end

          def to_hash
            value
          end

        end

        class FlowEntity

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of FlowEntity for this value, creating a new instance for an unknown value
          def FlowEntity.apply(value)
            if value.instance_of?(FlowEntity)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || FlowEntity.new(value))
            end
          end

          # Returns the instance of FlowEntity for this value, or nil if not found
          def FlowEntity.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            FlowEntity.ALL.find { |v| v.value == value }
          end

          def FlowEntity.ALL
            @@all ||= [FlowEntity.flow_usa, FlowEntity.flow_irl, FlowEntity.flow_can]
          end

          # Flow Commerce Inc., Hoboken, NJ, USA
          def FlowEntity.flow_usa
            @@_flow_usa ||= FlowEntity.new('flow-usa')
          end

          # Flow Commerce Ltd., Dublin, IRL
          def FlowEntity.flow_irl
            @@_flow_irl ||= FlowEntity.new('flow-irl')
          end

          # Flow Commerce Canada Inc., Vancouver, BC, CAN
          def FlowEntity.flow_can
            @@_flow_can ||= FlowEntity.new('flow-can')
          end

          def to_hash
            value
          end

        end

        class FlowRole

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of FlowRole for this value, creating a new instance for an unknown value
          def FlowRole.apply(value)
            if value.instance_of?(FlowRole)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || FlowRole.new(value))
            end
          end

          # Returns the instance of FlowRole for this value, or nil if not found
          def FlowRole.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            FlowRole.ALL.find { |v| v.value == value }
          end

          def FlowRole.ALL
            @@all ||= [FlowRole.organization_admin, FlowRole.organization_merchant, FlowRole.organization_customer_service, FlowRole.organization_fulfillment, FlowRole.organization_marketing, FlowRole.organization_finance, FlowRole.flow_operations, FlowRole.channel_admin, FlowRole.channel_organization_admin]
          end

          # Can fully administrate a merchant organization.
          def FlowRole.organization_admin
            @@_organization_admin ||= FlowRole.new('organization_admin')
          end

          # Can access merchant functions such as analytics, billing, experiences.
          def FlowRole.organization_merchant
            @@_organization_merchant ||= FlowRole.new('organization_merchant')
          end

          # Can access customer service functions and retreive relevant data.
          def FlowRole.organization_customer_service
            @@_organization_customer_service ||= FlowRole.new('organization_customer_service')
          end

          # Can access fulfillment functions and retreive relevant data.
          def FlowRole.organization_fulfillment
            @@_organization_fulfillment ||= FlowRole.new('organization_fulfillment')
          end

          # Can access marketing functions and retreive relevant data.
          def FlowRole.organization_marketing
            @@_organization_marketing ||= FlowRole.new('organization_marketing')
          end

          # Can access billing and reconcilliation functions and retreive relevant data.
          def FlowRole.organization_finance
            @@_organization_finance ||= FlowRole.new('organization_finance')
          end

          # Can access Flow internal functions.
          def FlowRole.flow_operations
            @@_flow_operations ||= FlowRole.new('flow_operations')
          end

          # Can fully administrate a channel
          def FlowRole.channel_admin
            @@_channel_admin ||= FlowRole.new('channel_admin')
          end

          # Can fully administrate a channel organization
          def FlowRole.channel_organization_admin
            @@_channel_organization_admin ||= FlowRole.new('channel_organization_admin')
          end

          def to_hash
            value
          end

        end

        class FraudEmailRuleDecision

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of FraudEmailRuleDecision for this value, creating a new instance for an unknown value
          def FraudEmailRuleDecision.apply(value)
            if value.instance_of?(FraudEmailRuleDecision)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || FraudEmailRuleDecision.new(value))
            end
          end

          # Returns the instance of FraudEmailRuleDecision for this value, or nil if not found
          def FraudEmailRuleDecision.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            FraudEmailRuleDecision.ALL.find { |v| v.value == value }
          end

          def FraudEmailRuleDecision.ALL
            @@all ||= [FraudEmailRuleDecision.approved, FraudEmailRuleDecision.declined]
          end

          # Approve all orders matching the customers email address.
          def FraudEmailRuleDecision.approved
            @@_approved ||= FraudEmailRuleDecision.new('approved')
          end

          # Decline all orders matching the customers email address.
          def FraudEmailRuleDecision.declined
            @@_declined ||= FraudEmailRuleDecision.new('declined')
          end

          def to_hash
            value
          end

        end

        class FraudLiability

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of FraudLiability for this value, creating a new instance for an unknown value
          def FraudLiability.apply(value)
            if value.instance_of?(FraudLiability)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || FraudLiability.new(value))
            end
          end

          # Returns the instance of FraudLiability for this value, or nil if not found
          def FraudLiability.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            FraudLiability.ALL.find { |v| v.value == value }
          end

          def FraudLiability.ALL
            @@all ||= [FraudLiability.flow, FraudLiability.organization]
          end

          # Flow takes any fraud liability for the order.
          def FraudLiability.flow
            @@_flow ||= FraudLiability.new('flow')
          end

          # The merchant takes any fraud liability for the order.
          def FraudLiability.organization
            @@_organization ||= FraudLiability.new('organization')
          end

          def to_hash
            value
          end

        end

        class FraudStatus

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of FraudStatus for this value, creating a new instance for an unknown value
          def FraudStatus.apply(value)
            if value.instance_of?(FraudStatus)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || FraudStatus.new(value))
            end
          end

          # Returns the instance of FraudStatus for this value, or nil if not found
          def FraudStatus.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            FraudStatus.ALL.find { |v| v.value == value }
          end

          def FraudStatus.ALL
            @@all ||= [FraudStatus.pending, FraudStatus.approved, FraudStatus.declined, FraudStatus.review]
          end

          # If an immediate response is not available, the state will be 'pending'.
          def FraudStatus.pending
            @@_pending ||= FraudStatus.new('pending')
          end

          # Fraud check has passed and the order is approved.
          def FraudStatus.approved
            @@_approved ||= FraudStatus.new('approved')
          end

          # Indicates the fraud check has been declined by the fraud providing service.
          def FraudStatus.declined
            @@_declined ||= FraudStatus.new('declined')
          end

          # Indicates the fraud check decision from the fraud providing service is being
          # reviewed.
          def FraudStatus.review
            @@_review ||= FraudStatus.new('review')
          end

          def to_hash
            value
          end

        end

        class FtpFileSource

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of FtpFileSource for this value, creating a new instance for an unknown value
          def FtpFileSource.apply(value)
            if value.instance_of?(FtpFileSource)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || FtpFileSource.new(value))
            end
          end

          # Returns the instance of FtpFileSource for this value, or nil if not found
          def FtpFileSource.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            FtpFileSource.ALL.find { |v| v.value == value }
          end

          def FtpFileSource.ALL
            @@all ||= [FtpFileSource.flow, FtpFileSource.organization]
          end

          # Indicates flow created this file
          def FtpFileSource.flow
            @@_flow ||= FtpFileSource.new('flow')
          end

          # Indicates the organization created this file
          def FtpFileSource.organization
            @@_organization ||= FtpFileSource.new('organization')
          end

          def to_hash
            value
          end

        end

        class FulfillmentItemQuantityStatus

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of FulfillmentItemQuantityStatus for this value, creating a new instance for an unknown value
          def FulfillmentItemQuantityStatus.apply(value)
            if value.instance_of?(FulfillmentItemQuantityStatus)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || FulfillmentItemQuantityStatus.new(value))
            end
          end

          # Returns the instance of FulfillmentItemQuantityStatus for this value, or nil if not found
          def FulfillmentItemQuantityStatus.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            FulfillmentItemQuantityStatus.ALL.find { |v| v.value == value }
          end

          def FulfillmentItemQuantityStatus.ALL
            @@all ||= [FulfillmentItemQuantityStatus.new, FulfillmentItemQuantityStatus.shipped, FulfillmentItemQuantityStatus.cancelled]
          end

          # Item may be shipped or cancelled
          def FulfillmentItemQuantityStatus.new
            @@_new ||= FulfillmentItemQuantityStatus.new('new')
          end

          # Item has been packaged for shipment; can no longer be cancelled.
          def FulfillmentItemQuantityStatus.shipped
            @@_shipped ||= FulfillmentItemQuantityStatus.new('shipped')
          end

          # Item will not be fulfilled.
          def FulfillmentItemQuantityStatus.cancelled
            @@_cancelled ||= FulfillmentItemQuantityStatus.new('cancelled')
          end

          def to_hash
            value
          end

        end

        class FulfillmentMethodType

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of FulfillmentMethodType for this value, creating a new instance for an unknown value
          def FulfillmentMethodType.apply(value)
            if value.instance_of?(FulfillmentMethodType)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || FulfillmentMethodType.new(value))
            end
          end

          # Returns the instance of FulfillmentMethodType for this value, or nil if not found
          def FulfillmentMethodType.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            FulfillmentMethodType.ALL.find { |v| v.value == value }
          end

          def FulfillmentMethodType.ALL
            @@all ||= [FulfillmentMethodType.fulfillment_method]
          end

          # Indicates how an item will be shipped or fulfilled.  Acceptable values are
          # defined by the 'fulfillment_method_value' enum.
          def FulfillmentMethodType.fulfillment_method
            @@_fulfillment_method ||= FulfillmentMethodType.new('fulfillment_method')
          end

          def to_hash
            value
          end

        end

        class FulfillmentMethodValue

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of FulfillmentMethodValue for this value, creating a new instance for an unknown value
          def FulfillmentMethodValue.apply(value)
            if value.instance_of?(FulfillmentMethodValue)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || FulfillmentMethodValue.new(value))
            end
          end

          # Returns the instance of FulfillmentMethodValue for this value, or nil if not found
          def FulfillmentMethodValue.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            FulfillmentMethodValue.ALL.find { |v| v.value == value }
          end

          def FulfillmentMethodValue.ALL
            @@all ||= [FulfillmentMethodValue.digital, FulfillmentMethodValue.physical]
          end

          # Indicates item will be fulfilled digitally and no shipment is required (e.g.
          # Gift Card).
          def FulfillmentMethodValue.digital
            @@_digital ||= FulfillmentMethodValue.new('digital')
          end

          # Indicates item will be shipped in a physical package.
          def FulfillmentMethodValue.physical
            @@_physical ||= FulfillmentMethodValue.new('physical')
          end

          def to_hash
            value
          end

        end

        class GenericErrorCode

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of GenericErrorCode for this value, creating a new instance for an unknown value
          def GenericErrorCode.apply(value)
            if value.instance_of?(GenericErrorCode)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || GenericErrorCode.new(value))
            end
          end

          # Returns the instance of GenericErrorCode for this value, or nil if not found
          def GenericErrorCode.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            GenericErrorCode.ALL.find { |v| v.value == value }
          end

          def GenericErrorCode.ALL
            @@all ||= [GenericErrorCode.generic_error, GenericErrorCode.client_error, GenericErrorCode.server_error]
          end

          # Generic errors are the default type. The accompanying message will provide
          # details on the failure.
          def GenericErrorCode.generic_error
            @@_generic_error ||= GenericErrorCode.new('generic_error')
          end

          # A client error has occurred. This represents a misconfiguration of the client
          def GenericErrorCode.client_error
            @@_client_error ||= GenericErrorCode.new('client_error')
          end

          # A server error has occurred. The Flow tech team is automatically notified of
          # all server errors
          def GenericErrorCode.server_error
            @@_server_error ||= GenericErrorCode.new('server_error')
          end

          def to_hash
            value
          end

        end

        class GoodsSupply

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of GoodsSupply for this value, creating a new instance for an unknown value
          def GoodsSupply.apply(value)
            if value.instance_of?(GoodsSupply)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || GoodsSupply.new(value))
            end
          end

          # Returns the instance of GoodsSupply for this value, or nil if not found
          def GoodsSupply.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            GoodsSupply.ALL.find { |v| v.value == value }
          end

          def GoodsSupply.ALL
            @@all ||= [GoodsSupply.export, GoodsSupply.intra_community, GoodsSupply.local]
          end

          # Goods will be supplied from a DC from outside the national and customs
          # boundaries of the destination.
          def GoodsSupply.export
            @@_export ||= GoodsSupply.new('export')
          end

          # Goods will be supplied from a DC outside the national boundries of the
          # destination, but within the same customs union.
          def GoodsSupply.intra_community
            @@_intra_community ||= GoodsSupply.new('intra_community')
          end

          # Goods will be supplied from a DC within the same country as the destination.
          def GoodsSupply.local
            @@_local ||= GoodsSupply.new('local')
          end

          def to_hash
            value
          end

        end

        class HolidayCalendar

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of HolidayCalendar for this value, creating a new instance for an unknown value
          def HolidayCalendar.apply(value)
            if value.instance_of?(HolidayCalendar)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || HolidayCalendar.new(value))
            end
          end

          # Returns the instance of HolidayCalendar for this value, or nil if not found
          def HolidayCalendar.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            HolidayCalendar.ALL.find { |v| v.value == value }
          end

          def HolidayCalendar.ALL
            @@all ||= [HolidayCalendar.us_bank_holidays, HolidayCalendar.jewish_holidays]
          end

          def HolidayCalendar.us_bank_holidays
            @@_us_bank_holidays ||= HolidayCalendar.new('us_bank_holidays')
          end

          def HolidayCalendar.jewish_holidays
            @@_jewish_holidays ||= HolidayCalendar.new('jewish_holidays')
          end

          def to_hash
            value
          end

        end

        class ImageTag

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of ImageTag for this value, creating a new instance for an unknown value
          def ImageTag.apply(value)
            if value.instance_of?(ImageTag)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || ImageTag.new(value))
            end
          end

          # Returns the instance of ImageTag for this value, or nil if not found
          def ImageTag.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            ImageTag.ALL.find { |v| v.value == value }
          end

          def ImageTag.ALL
            @@all ||= [ImageTag.thumbnail, ImageTag.checkout]
          end

          # Thumbnail images identify the image to use when displaying products in the
          # Flow Console.
          def ImageTag.thumbnail
            @@_thumbnail ||= ImageTag.new('thumbnail')
          end

          # Checkout images identify the item image to use when displaying the item in the
          # context of a consumer checkout (e.g. cart, checkout page).
          def ImageTag.checkout
            @@_checkout ||= ImageTag.new('checkout')
          end

          def to_hash
            value
          end

        end

        class ImportType

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of ImportType for this value, creating a new instance for an unknown value
          def ImportType.apply(value)
            if value.instance_of?(ImportType)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || ImportType.new(value))
            end
          end

          # Returns the instance of ImportType for this value, or nil if not found
          def ImportType.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            ImportType.ALL.find { |v| v.value == value }
          end

          def ImportType.ALL
            @@all ||= [ImportType.catalog_items, ImportType.catalog_items_external, ImportType.customs_descriptions, ImportType.customs_description_tariffs, ImportType.experiences_with_settings, ImportType.harmonization_codes, ImportType.item_prices, ImportType.item_form_overlays, ImportType.price_book_items, ImportType.price_book_items_query, ImportType.ratecard_lanes, ImportType.order_service_changes]
          end

          # Provides bulk upsert of items into an organization's catalog.
          def ImportType.catalog_items
            @@_catalog_items ||= ImportType.new('catalog_items')
          end

          # Provides bulk list of items from an external resource to be upserted into an
          # organization’s catalog.
          def ImportType.catalog_items_external
            @@_catalog_items_external ||= ImportType.new('catalog_items_external')
          end

          # Provides upload of customs descriptions for the products in a catalog.
          def ImportType.customs_descriptions
            @@_customs_descriptions ||= ImportType.new('customs_descriptions')
          end

          # Provides upload of customs descriptions and corresponding tariffs. These are
          # independent of any catalog, product, or item.
          def ImportType.customs_description_tariffs
            @@_customs_description_tariffs ||= ImportType.new('customs_description_tariffs')
          end

          # Provides bulk upsert of experiences with associated settings.
          def ImportType.experiences_with_settings
            @@_experiences_with_settings ||= ImportType.new('experiences_with_settings')
          end

          # Provides upload of HS-6 and HS-10 codes for the items in a catalog
          def ImportType.harmonization_codes
            @@_harmonization_codes ||= ImportType.new('harmonization_codes')
          end

          # Provides bulk upsert of item pricing into an organization's catalog, updating
          # only the prices and associated price attributes while preserving all other
          # item information.
          def ImportType.item_prices
            @@_item_prices ||= ImportType.new('item_prices')
          end

          # Item form overlays allow you to upload additional catalog item information
          # that will be applied to each catalog item, even if you later modify the item.
          # You can think of this import as providing catalog item data that will be
          # overlaid on top of the content in your core catalog.
          def ImportType.item_form_overlays
            @@_item_form_overlays ||= ImportType.new('item_form_overlays')
          end

          # Provides bulk upsert of price book items based on item number.
          def ImportType.price_book_items
            @@_price_book_items ||= ImportType.new('price_book_items')
          end

          # Provides bulk upsert of price book items based on a query (e.g. update all
          # items by sku or product id).
          def ImportType.price_book_items_query
            @@_price_book_items_query ||= ImportType.new('price_book_items_query')
          end

          # Provides way to upload a new ratecard with lanes and rates for a service
          # level.
          def ImportType.ratecard_lanes
            @@_ratecard_lanes ||= ImportType.new('ratecard_lanes')
          end

          # Provides way to upload service level changes for orders that require updated
          # shipping methods.
          def ImportType.order_service_changes
            @@_order_service_changes ||= ImportType.new('order_service_changes')
          end

          def to_hash
            value
          end

        end

        class IncludedLevyKey

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of IncludedLevyKey for this value, creating a new instance for an unknown value
          def IncludedLevyKey.apply(value)
            if value.instance_of?(IncludedLevyKey)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || IncludedLevyKey.new(value))
            end
          end

          # Returns the instance of IncludedLevyKey for this value, or nil if not found
          def IncludedLevyKey.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            IncludedLevyKey.ALL.find { |v| v.value == value }
          end

          def IncludedLevyKey.ALL
            @@all ||= [IncludedLevyKey.duty, IncludedLevyKey.vat, IncludedLevyKey.vat_and_duty, IncludedLevyKey.none]
          end

          def IncludedLevyKey.duty
            @@_duty ||= IncludedLevyKey.new('duty')
          end

          def IncludedLevyKey.vat
            @@_vat ||= IncludedLevyKey.new('vat')
          end

          def IncludedLevyKey.vat_and_duty
            @@_vat_and_duty ||= IncludedLevyKey.new('vat_and_duty')
          end

          def IncludedLevyKey.none
            @@_none ||= IncludedLevyKey.new('none')
          end

          def to_hash
            value
          end

        end

        class Incoterm

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of Incoterm for this value, creating a new instance for an unknown value
          def Incoterm.apply(value)
            if value.instance_of?(Incoterm)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || Incoterm.new(value))
            end
          end

          # Returns the instance of Incoterm for this value, or nil if not found
          def Incoterm.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            Incoterm.ALL.find { |v| v.value == value }
          end

          def Incoterm.ALL
            @@all ||= [Incoterm.exw, Incoterm.fca, Incoterm.cpt, Incoterm.cip, Incoterm.dat, Incoterm.dap, Incoterm.ddp, Incoterm.fas, Incoterm.fob, Incoterm.cfr, Incoterm.cif, Incoterm.daf, Incoterm.des, Incoterm.deq, Incoterm.ddu]
          end

          # Ex Works (named place of delivery)
          def Incoterm.exw
            @@_exw ||= Incoterm.new('EXW')
          end

          # Free Carrier (named place of delivery)
          def Incoterm.fca
            @@_fca ||= Incoterm.new('FCA')
          end

          # Carriage Paid To (named place of destination)
          def Incoterm.cpt
            @@_cpt ||= Incoterm.new('CPT')
          end

          # Carriage and Insurance Paid to (named place of destination)
          def Incoterm.cip
            @@_cip ||= Incoterm.new('CIP')
          end

          # Delivered At Terminal (named terminal at port or place of destination)
          def Incoterm.dat
            @@_dat ||= Incoterm.new('DAT')
          end

          # Delivered At Place (named place of destination)
          def Incoterm.dap
            @@_dap ||= Incoterm.new('DAP')
          end

          # Delivered Duty Paid (named place of destination)
          def Incoterm.ddp
            @@_ddp ||= Incoterm.new('DDP')
          end

          # Free Alongside Ship (named port of shipment)
          def Incoterm.fas
            @@_fas ||= Incoterm.new('FAS')
          end

          # Free on Board (named port of shipment)
          def Incoterm.fob
            @@_fob ||= Incoterm.new('FOB')
          end

          # Cost and Freight (named port of destination)
          def Incoterm.cfr
            @@_cfr ||= Incoterm.new('CFR')
          end

          # Cost, Insurance & Freight (named port of destination)
          def Incoterm.cif
            @@_cif ||= Incoterm.new('CIF')
          end

          # Delivered at Frontier (named place of delivery)
          def Incoterm.daf
            @@_daf ||= Incoterm.new('DAF')
          end

          # Delivered Ex Ship
          def Incoterm.des
            @@_des ||= Incoterm.new('DES')
          end

          # Delivered Ex Quay (named port of delivery)
          def Incoterm.deq
            @@_deq ||= Incoterm.new('DEQ')
          end

          # Delivered Duty Unpaid (named place of destination)
          def Incoterm.ddu
            @@_ddu ||= Incoterm.new('DDU')
          end

          def to_hash
            value
          end

        end

        class InlineWindowViewportSize

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of InlineWindowViewportSize for this value, creating a new instance for an unknown value
          def InlineWindowViewportSize.apply(value)
            if value.instance_of?(InlineWindowViewportSize)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || InlineWindowViewportSize.new(value))
            end
          end

          # Returns the instance of InlineWindowViewportSize for this value, or nil if not found
          def InlineWindowViewportSize.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            InlineWindowViewportSize.ALL.find { |v| v.value == value }
          end

          def InlineWindowViewportSize.ALL
            @@all ||= [InlineWindowViewportSize.xxx_small, InlineWindowViewportSize.xx_small, InlineWindowViewportSize.x_small, InlineWindowViewportSize.small, InlineWindowViewportSize.fullscreen, InlineWindowViewportSize.responsive]
          end

          # 250x400
          def InlineWindowViewportSize.xxx_small
            @@_xxx_small ||= InlineWindowViewportSize.new('xxx_small')
          end

          # 390x400
          def InlineWindowViewportSize.xx_small
            @@_xx_small ||= InlineWindowViewportSize.new('xx_small')
          end

          # 500x600
          def InlineWindowViewportSize.x_small
            @@_x_small ||= InlineWindowViewportSize.new('x_small')
          end

          # 600x400
          def InlineWindowViewportSize.small
            @@_small ||= InlineWindowViewportSize.new('small')
          end

          # Full Screen.
          def InlineWindowViewportSize.fullscreen
            @@_fullscreen ||= InlineWindowViewportSize.new('fullscreen')
          end

          # Responsive layout, fits into whatever size the container is.
          def InlineWindowViewportSize.responsive
            @@_responsive ||= InlineWindowViewportSize.new('responsive')
          end

          def to_hash
            value
          end

        end

        class InputSpecificationType

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of InputSpecificationType for this value, creating a new instance for an unknown value
          def InputSpecificationType.apply(value)
            if value.instance_of?(InputSpecificationType)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || InputSpecificationType.new(value))
            end
          end

          # Returns the instance of InputSpecificationType for this value, or nil if not found
          def InputSpecificationType.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            InputSpecificationType.ALL.find { |v| v.value == value }
          end

          def InputSpecificationType.ALL
            @@all ||= [InputSpecificationType.text, InputSpecificationType.number]
          end

          def InputSpecificationType.text
            @@_text ||= InputSpecificationType.new('text')
          end

          def InputSpecificationType.number
            @@_number ||= InputSpecificationType.new('number')
          end

          def to_hash
            value
          end

        end

        class InventoryStatus

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of InventoryStatus for this value, creating a new instance for an unknown value
          def InventoryStatus.apply(value)
            if value.instance_of?(InventoryStatus)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || InventoryStatus.new(value))
            end
          end

          # Returns the instance of InventoryStatus for this value, or nil if not found
          def InventoryStatus.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            InventoryStatus.ALL.find { |v| v.value == value }
          end

          def InventoryStatus.ALL
            @@all ||= [InventoryStatus.has_inventory, InventoryStatus.no_inventory]
          end

          def InventoryStatus.has_inventory
            @@_has_inventory ||= InventoryStatus.new('has_inventory')
          end

          def InventoryStatus.no_inventory
            @@_no_inventory ||= InventoryStatus.new('no_inventory')
          end

          def to_hash
            value
          end

        end

        class InvitationErrorCode

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of InvitationErrorCode for this value, creating a new instance for an unknown value
          def InvitationErrorCode.apply(value)
            if value.instance_of?(InvitationErrorCode)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || InvitationErrorCode.new(value))
            end
          end

          # Returns the instance of InvitationErrorCode for this value, or nil if not found
          def InvitationErrorCode.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            InvitationErrorCode.ALL.find { |v| v.value == value }
          end

          def InvitationErrorCode.ALL
            @@all ||= [InvitationErrorCode.expired, InvitationErrorCode.invalid_email]
          end

          def InvitationErrorCode.expired
            @@_expired ||= InvitationErrorCode.new('expired')
          end

          def InvitationErrorCode.invalid_email
            @@_invalid_email ||= InvitationErrorCode.new('invalid_email')
          end

          def to_hash
            value
          end

        end

        class ItemAvailabilityStatus

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of ItemAvailabilityStatus for this value, creating a new instance for an unknown value
          def ItemAvailabilityStatus.apply(value)
            if value.instance_of?(ItemAvailabilityStatus)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || ItemAvailabilityStatus.new(value))
            end
          end

          # Returns the instance of ItemAvailabilityStatus for this value, or nil if not found
          def ItemAvailabilityStatus.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            ItemAvailabilityStatus.ALL.find { |v| v.value == value }
          end

          def ItemAvailabilityStatus.ALL
            @@all ||= [ItemAvailabilityStatus.available, ItemAvailabilityStatus.low, ItemAvailabilityStatus.out_of_stock]
          end

          # Inventory is generally available for purchase
          def ItemAvailabilityStatus.available
            @@_available ||= ItemAvailabilityStatus.new('available')
          end

          # Inventory is low and may soon become unavailable for purchase (# inventory
          # items <= 5). Unless there is a specific use case for low inventory, it can be
          # treated the same as 'available'
          def ItemAvailabilityStatus.low
            @@_low ||= ItemAvailabilityStatus.new('low')
          end

          # There is no inventory available and is not available for purchase. Sample
          # actions that can be taken are hiding the item or marking as `sold out` on the
          # frontend
          def ItemAvailabilityStatus.out_of_stock
            @@_out_of_stock ||= ItemAvailabilityStatus.new('out_of_stock')
          end

          def to_hash
            value
          end

        end

        class ItemIdentifier

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of ItemIdentifier for this value, creating a new instance for an unknown value
          def ItemIdentifier.apply(value)
            if value.instance_of?(ItemIdentifier)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || ItemIdentifier.new(value))
            end
          end

          # Returns the instance of ItemIdentifier for this value, or nil if not found
          def ItemIdentifier.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            ItemIdentifier.ALL.find { |v| v.value == value }
          end

          def ItemIdentifier.ALL
            @@all ||= [ItemIdentifier.item_number, ItemIdentifier.sku]
          end

          def ItemIdentifier.item_number
            @@_item_number ||= ItemIdentifier.new('item_number')
          end

          def ItemIdentifier.sku
            @@_sku ||= ItemIdentifier.new('sku')
          end

          def to_hash
            value
          end

        end

        class LaneDirection

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of LaneDirection for this value, creating a new instance for an unknown value
          def LaneDirection.apply(value)
            if value.instance_of?(LaneDirection)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || LaneDirection.new(value))
            end
          end

          # Returns the instance of LaneDirection for this value, or nil if not found
          def LaneDirection.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            LaneDirection.ALL.find { |v| v.value == value }
          end

          def LaneDirection.ALL
            @@all ||= [LaneDirection.outbound, LaneDirection.return]
          end

          def LaneDirection.outbound
            @@_outbound ||= LaneDirection.new('outbound')
          end

          def LaneDirection.return
            @@_return ||= LaneDirection.new('return')
          end

          def to_hash
            value
          end

        end

        class LanePreselectPreference

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of LanePreselectPreference for this value, creating a new instance for an unknown value
          def LanePreselectPreference.apply(value)
            if value.instance_of?(LanePreselectPreference)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || LanePreselectPreference.new(value))
            end
          end

          # Returns the instance of LanePreselectPreference for this value, or nil if not found
          def LanePreselectPreference.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            LanePreselectPreference.ALL.find { |v| v.value == value }
          end

          def LanePreselectPreference.ALL
            @@all ||= [LanePreselectPreference.lowest_cost, LanePreselectPreference.default_tier]
          end

          # Preselect the lowest cost tier in the shipping lane
          def LanePreselectPreference.lowest_cost
            @@_lowest_cost ||= LanePreselectPreference.new('lowest_cost')
          end

          # Manually designate a tier in the shipping lane as the default
          def LanePreselectPreference.default_tier
            @@_default_tier ||= LanePreselectPreference.new('default_tier')
          end

          def to_hash
            value
          end

        end

        class LaneStrategy

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of LaneStrategy for this value, creating a new instance for an unknown value
          def LaneStrategy.apply(value)
            if value.instance_of?(LaneStrategy)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || LaneStrategy.new(value))
            end
          end

          # Returns the instance of LaneStrategy for this value, or nil if not found
          def LaneStrategy.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            LaneStrategy.ALL.find { |v| v.value == value }
          end

          def LaneStrategy.ALL
            @@all ||= [LaneStrategy.oldest, LaneStrategy.fastest, LaneStrategy.lowest_cost, LaneStrategy.highest_priority]
          end

          # Use the oldest center by creation date.
          def LaneStrategy.oldest
            @@_oldest ||= LaneStrategy.new('oldest')
          end

          # Optimize for fastest average time in transit across all tiers from the center
          # on the lane
          def LaneStrategy.fastest
            @@_fastest ||= LaneStrategy.new('fastest')
          end

          # Optimize for lowest average cost across all tiers from the center on the lane
          def LaneStrategy.lowest_cost
            @@_lowest_cost ||= LaneStrategy.new('lowest_cost')
          end

          # Get the highest priority center for the shipping lane
          def LaneStrategy.highest_priority
            @@_highest_priority ||= LaneStrategy.new('highest_priority')
          end

          def to_hash
            value
          end

        end

        class LevyComponent

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of LevyComponent for this value, creating a new instance for an unknown value
          def LevyComponent.apply(value)
            if value.instance_of?(LevyComponent)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || LevyComponent.new(value))
            end
          end

          # Returns the instance of LevyComponent for this value, or nil if not found
          def LevyComponent.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            LevyComponent.ALL.find { |v| v.value == value }
          end

          def LevyComponent.ALL
            @@all ||= [LevyComponent.goods, LevyComponent.duty, LevyComponent.insurance, LevyComponent.freight, LevyComponent.vat]
          end

          # The value of goods
          def LevyComponent.goods
            @@_goods ||= LevyComponent.new('goods')
          end

          def LevyComponent.duty
            @@_duty ||= LevyComponent.new('duty')
          end

          def LevyComponent.insurance
            @@_insurance ||= LevyComponent.new('insurance')
          end

          def LevyComponent.freight
            @@_freight ||= LevyComponent.new('freight')
          end

          # Value-Added Tax
          def LevyComponent.vat
            @@_vat ||= LevyComponent.new('vat')
          end

          def to_hash
            value
          end

        end

        class LevyInclusion

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of LevyInclusion for this value, creating a new instance for an unknown value
          def LevyInclusion.apply(value)
            if value.instance_of?(LevyInclusion)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || LevyInclusion.new(value))
            end
          end

          # Returns the instance of LevyInclusion for this value, or nil if not found
          def LevyInclusion.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            LevyInclusion.ALL.find { |v| v.value == value }
          end

          def LevyInclusion.ALL
            @@all ||= [LevyInclusion.tax, LevyInclusion.duty]
          end

          def LevyInclusion.tax
            @@_tax ||= LevyInclusion.new('tax')
          end

          def LevyInclusion.duty
            @@_duty ||= LevyInclusion.new('duty')
          end

          def to_hash
            value
          end

        end

        class LevyStrategy

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of LevyStrategy for this value, creating a new instance for an unknown value
          def LevyStrategy.apply(value)
            if value.instance_of?(LevyStrategy)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || LevyStrategy.new(value))
            end
          end

          # Returns the instance of LevyStrategy for this value, or nil if not found
          def LevyStrategy.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            LevyStrategy.ALL.find { |v| v.value == value }
          end

          def LevyStrategy.ALL
            @@all ||= [LevyStrategy.minimum, LevyStrategy.average, LevyStrategy.maximum]
          end

          def LevyStrategy.minimum
            @@_minimum ||= LevyStrategy.new('minimum')
          end

          def LevyStrategy.average
            @@_average ||= LevyStrategy.new('average')
          end

          def LevyStrategy.maximum
            @@_maximum ||= LevyStrategy.new('maximum')
          end

          def to_hash
            value
          end

        end

        class LocationErrorCode

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of LocationErrorCode for this value, creating a new instance for an unknown value
          def LocationErrorCode.apply(value)
            if value.instance_of?(LocationErrorCode)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || LocationErrorCode.new(value))
            end
          end

          # Returns the instance of LocationErrorCode for this value, or nil if not found
          def LocationErrorCode.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            LocationErrorCode.ALL.find { |v| v.value == value }
          end

          def LocationErrorCode.ALL
            @@all ||= [LocationErrorCode.address_required, LocationErrorCode.ip_invalid, LocationErrorCode.ip_required, LocationErrorCode.timezone_unavailable]
          end

          # Indicates that a non empty address was not specified when required
          def LocationErrorCode.address_required
            @@_address_required ||= LocationErrorCode.new('address_required')
          end

          # Indicates the specified IP Address is invalid
          def LocationErrorCode.ip_invalid
            @@_ip_invalid ||= LocationErrorCode.new('ip_invalid')
          end

          # Indicates that a non empty IP Address was not specified when required
          def LocationErrorCode.ip_required
            @@_ip_required ||= LocationErrorCode.new('ip_required')
          end

          # Indicates that there is no timezone information available for the specified IP
          # Address
          def LocationErrorCode.timezone_unavailable
            @@_timezone_unavailable ||= LocationErrorCode.new('timezone_unavailable')
          end

          def to_hash
            value
          end

        end

        class MarginType

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of MarginType for this value, creating a new instance for an unknown value
          def MarginType.apply(value)
            if value.instance_of?(MarginType)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || MarginType.new(value))
            end
          end

          # Returns the instance of MarginType for this value, or nil if not found
          def MarginType.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            MarginType.ALL.find { |v| v.value == value }
          end

          def MarginType.ALL
            @@all ||= [MarginType.fixed, MarginType.percent]
          end

          # A fixed amount to add, e.g 2.5 would add an absolute margin of 2.5 in the base
          # currency of your item.
          def MarginType.fixed
            @@_fixed ||= MarginType.new('fixed')
          end

          # A percent of the base cost to add, e.g. 1.2 would represent a 1.2% increase.
          def MarginType.percent
            @@_percent ||= MarginType.new('percent')
          end

          def to_hash
            value
          end

        end

        class MeasurementSystem

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of MeasurementSystem for this value, creating a new instance for an unknown value
          def MeasurementSystem.apply(value)
            if value.instance_of?(MeasurementSystem)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || MeasurementSystem.new(value))
            end
          end

          # Returns the instance of MeasurementSystem for this value, or nil if not found
          def MeasurementSystem.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            MeasurementSystem.ALL.find { |v| v.value == value }
          end

          def MeasurementSystem.ALL
            @@all ||= [MeasurementSystem.imperial, MeasurementSystem.metric]
          end

          def MeasurementSystem.imperial
            @@_imperial ||= MeasurementSystem.new('imperial')
          end

          def MeasurementSystem.metric
            @@_metric ||= MeasurementSystem.new('metric')
          end

          def to_hash
            value
          end

        end

        class MerchantGiftCardErrorCode

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of MerchantGiftCardErrorCode for this value, creating a new instance for an unknown value
          def MerchantGiftCardErrorCode.apply(value)
            if value.instance_of?(MerchantGiftCardErrorCode)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || MerchantGiftCardErrorCode.new(value))
            end
          end

          # Returns the instance of MerchantGiftCardErrorCode for this value, or nil if not found
          def MerchantGiftCardErrorCode.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            MerchantGiftCardErrorCode.ALL.find { |v| v.value == value }
          end

          def MerchantGiftCardErrorCode.ALL
            @@all ||= [MerchantGiftCardErrorCode.invalid, MerchantGiftCardErrorCode.expired, MerchantGiftCardErrorCode.empty, MerchantGiftCardErrorCode.insufficient_funds, MerchantGiftCardErrorCode.unsupported_currency]
          end

          # Generic error type
          def MerchantGiftCardErrorCode.invalid
            @@_invalid ||= MerchantGiftCardErrorCode.new('invalid')
          end

          def MerchantGiftCardErrorCode.expired
            @@_expired ||= MerchantGiftCardErrorCode.new('expired')
          end

          # Balance is 0
          def MerchantGiftCardErrorCode.empty
            @@_empty ||= MerchantGiftCardErrorCode.new('empty')
          end

          # Redemption amount greater than balance
          def MerchantGiftCardErrorCode.insufficient_funds
            @@_insufficient_funds ||= MerchantGiftCardErrorCode.new('insufficient_funds')
          end

          # Redemption or reversal currency is not supported
          def MerchantGiftCardErrorCode.unsupported_currency
            @@_unsupported_currency ||= MerchantGiftCardErrorCode.new('unsupported_currency')
          end

          def to_hash
            value
          end

        end

        class MerchantOfRecord

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of MerchantOfRecord for this value, creating a new instance for an unknown value
          def MerchantOfRecord.apply(value)
            if value.instance_of?(MerchantOfRecord)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || MerchantOfRecord.new(value))
            end
          end

          # Returns the instance of MerchantOfRecord for this value, or nil if not found
          def MerchantOfRecord.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            MerchantOfRecord.ALL.find { |v| v.value == value }
          end

          def MerchantOfRecord.ALL
            @@all ||= [MerchantOfRecord.flow, MerchantOfRecord.organization]
          end

          def MerchantOfRecord.flow
            @@_flow ||= MerchantOfRecord.new('flow')
          end

          def MerchantOfRecord.organization
            @@_organization ||= MerchantOfRecord.new('organization')
          end

          def to_hash
            value
          end

        end

        class Method

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of Method for this value, creating a new instance for an unknown value
          def Method.apply(value)
            if value.instance_of?(Method)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || Method.new(value))
            end
          end

          # Returns the instance of Method for this value, or nil if not found
          def Method.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            Method.ALL.find { |v| v.value == value }
          end

          def Method.ALL
            @@all ||= [Method.post]
          end

          def Method.post
            @@_post ||= Method.new('post')
          end

          def to_hash
            value
          end

        end

        class OptinResponseType

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of OptinResponseType for this value, creating a new instance for an unknown value
          def OptinResponseType.apply(value)
            if value.instance_of?(OptinResponseType)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || OptinResponseType.new(value))
            end
          end

          # Returns the instance of OptinResponseType for this value, or nil if not found
          def OptinResponseType.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            OptinResponseType.ALL.find { |v| v.value == value }
          end

          def OptinResponseType.ALL
            @@all ||= [OptinResponseType.not_shown, OptinResponseType.opted_in, OptinResponseType.opted_out]
          end

          def OptinResponseType.not_shown
            @@_not_shown ||= OptinResponseType.new('not_shown')
          end

          def OptinResponseType.opted_in
            @@_opted_in ||= OptinResponseType.new('opted_in')
          end

          def OptinResponseType.opted_out
            @@_opted_out ||= OptinResponseType.new('opted_out')
          end

          def to_hash
            value
          end

        end

        class OrderChangeSource

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of OrderChangeSource for this value, creating a new instance for an unknown value
          def OrderChangeSource.apply(value)
            if value.instance_of?(OrderChangeSource)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || OrderChangeSource.new(value))
            end
          end

          # Returns the instance of OrderChangeSource for this value, or nil if not found
          def OrderChangeSource.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            OrderChangeSource.ALL.find { |v| v.value == value }
          end

          def OrderChangeSource.ALL
            @@all ||= [OrderChangeSource.consumer, OrderChangeSource.retailer, OrderChangeSource.fulfillment, OrderChangeSource.flow, OrderChangeSource.carrier]
          end

          # The party that placed an order
          def OrderChangeSource.consumer
            @@_consumer ||= OrderChangeSource.new('consumer')
          end

          # The party that owns the processing of the order
          def OrderChangeSource.retailer
            @@_retailer ||= OrderChangeSource.new('retailer')
          end

          # A party providing fulfillment for an order
          def OrderChangeSource.fulfillment
            @@_fulfillment ||= OrderChangeSource.new('fulfillment')
          end

          # Flow may provide anti-fraud or payment services for an order
          def OrderChangeSource.flow
            @@_flow ||= OrderChangeSource.new('flow')
          end

          # A party providing carriage for an order
          def OrderChangeSource.carrier
            @@_carrier ||= OrderChangeSource.new('carrier')
          end

          def to_hash
            value
          end

        end

        class OrderErrorCode

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of OrderErrorCode for this value, creating a new instance for an unknown value
          def OrderErrorCode.apply(value)
            if value.instance_of?(OrderErrorCode)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || OrderErrorCode.new(value))
            end
          end

          # Returns the instance of OrderErrorCode for this value, or nil if not found
          def OrderErrorCode.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            OrderErrorCode.ALL.find { |v| v.value == value }
          end

          def OrderErrorCode.ALL
            @@all ||= [OrderErrorCode.generic_error, OrderErrorCode.order_item_not_available, OrderErrorCode.order_identifier_error, OrderErrorCode.authorization_invalid, OrderErrorCode.domestic_shipping_unavailable, OrderErrorCode.shipping_unavailable, OrderErrorCode.value_threshold_exceeded, OrderErrorCode.invalid_currency, OrderErrorCode.invalid_country, OrderErrorCode.invalid_region, OrderErrorCode.invalid_language, OrderErrorCode.item_out_of_stock, OrderErrorCode.gift_card_not_accepted, OrderErrorCode.total_changed]
          end

          def OrderErrorCode.generic_error
            @@_generic_error ||= OrderErrorCode.new('generic_error')
          end

          # When creating an order, if a particular item is not available in the country /
          # destination (either because it was restricted or excluded from that country),
          # we return this error code and list the specific item numbers which are not
          # available in the 'numbers' field.
          def OrderErrorCode.order_item_not_available
            @@_order_item_not_available ||= OrderErrorCode.new('order_item_not_available')
          end

          # Indicates that there is no order with the specified number (nor an order for
          # which an order identifier with that number has been created)
          def OrderErrorCode.order_identifier_error
            @@_order_identifier_error ||= OrderErrorCode.new('order_identifier_error')
          end

          # The authorization key specified is invalid - either because it does not exist
          # or is not associated with this order
          def OrderErrorCode.authorization_invalid
            @@_authorization_invalid ||= OrderErrorCode.new('authorization_invalid')
          end

          # Indicates that an order was created for a country for one of your domicile
          # countries and you have asked Flow not to accept orders for this country.
          def OrderErrorCode.domestic_shipping_unavailable
            @@_domestic_shipping_unavailable ||= OrderErrorCode.new('domestic_shipping_unavailable')
          end

          # Indicates that an order was created for a country to which you have asked Flow
          # not to ship.
          def OrderErrorCode.shipping_unavailable
            @@_shipping_unavailable ||= OrderErrorCode.new('shipping_unavailable')
          end

          # Indicates the order value exceeds the value threshold for destination and
          # cannot be shipped. When specified, the order will also populate the threshold
          # attribute.
          def OrderErrorCode.value_threshold_exceeded
            @@_value_threshold_exceeded ||= OrderErrorCode.new('value_threshold_exceeded')
          end

          # Indicates that the specified currency code is not valid
          def OrderErrorCode.invalid_currency
            @@_invalid_currency ||= OrderErrorCode.new('invalid_currency')
          end

          # Indicates that the specified country code is not valid
          def OrderErrorCode.invalid_country
            @@_invalid_country ||= OrderErrorCode.new('invalid_country')
          end

          # Indicates that the specified region code is not valid
          def OrderErrorCode.invalid_region
            @@_invalid_region ||= OrderErrorCode.new('invalid_region')
          end

          # Indicates that the specified language code is not valid
          def OrderErrorCode.invalid_language
            @@_invalid_language ||= OrderErrorCode.new('invalid_language')
          end

          # Indicates that one or more ordered items is marked as out-of-stock or
          # otherwise cannot be reserved. We will list the specific out-of-stock items in
          # the numbers field
          def OrderErrorCode.item_out_of_stock
            @@_item_out_of_stock ||= OrderErrorCode.new('item_out_of_stock')
          end

          # Indicates a failure to charge a gift card. Error message will indicate when
          # retries are possible.
          def OrderErrorCode.gift_card_not_accepted
            @@_gift_card_not_accepted ||= OrderErrorCode.new('gift_card_not_accepted')
          end

          # Indicates that the order total has changed, likely due to pricebook update or
          # rate change. This is not an error but the consumer should be shown the new
          # price before continuing checkout.
          def OrderErrorCode.total_changed
            @@_total_changed ||= OrderErrorCode.new('total_changed')
          end

          def to_hash
            value
          end

        end

        class OrderMerchantOfRecord

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of OrderMerchantOfRecord for this value, creating a new instance for an unknown value
          def OrderMerchantOfRecord.apply(value)
            if value.instance_of?(OrderMerchantOfRecord)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || OrderMerchantOfRecord.new(value))
            end
          end

          # Returns the instance of OrderMerchantOfRecord for this value, or nil if not found
          def OrderMerchantOfRecord.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            OrderMerchantOfRecord.ALL.find { |v| v.value == value }
          end

          def OrderMerchantOfRecord.ALL
            @@all ||= [OrderMerchantOfRecord.flow, OrderMerchantOfRecord.organization, OrderMerchantOfRecord.mixed]
          end

          def OrderMerchantOfRecord.flow
            @@_flow ||= OrderMerchantOfRecord.new('flow')
          end

          def OrderMerchantOfRecord.organization
            @@_organization ||= OrderMerchantOfRecord.new('organization')
          end

          def OrderMerchantOfRecord.mixed
            @@_mixed ||= OrderMerchantOfRecord.new('mixed')
          end

          def to_hash
            value
          end

        end

        class OrderPaymentType

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of OrderPaymentType for this value, creating a new instance for an unknown value
          def OrderPaymentType.apply(value)
            if value.instance_of?(OrderPaymentType)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || OrderPaymentType.new(value))
            end
          end

          # Returns the instance of OrderPaymentType for this value, or nil if not found
          def OrderPaymentType.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            OrderPaymentType.ALL.find { |v| v.value == value }
          end

          def OrderPaymentType.ALL
            @@all ||= [OrderPaymentType.card, OrderPaymentType.online, OrderPaymentType.credit, OrderPaymentType.subsidized, OrderPaymentType.installment_plan, OrderPaymentType.cash_on_delivery]
          end

          # Represents a payment in the form of a credit or debit card
          def OrderPaymentType.card
            @@_card ||= OrderPaymentType.new('card')
          end

          # Represents an online payment (e.g. paypal, alipay, etc)
          def OrderPaymentType.online
            @@_online ||= OrderPaymentType.new('online')
          end

          # A payment in the form of a credit of some type (e.g. a store credit, gift
          # card) applied to an order
          def OrderPaymentType.credit
            @@_credit ||= OrderPaymentType.new('credit')
          end

          # Subsidized indicates that this payment is being subsidized by the organization
          # - and Flow's billing system will directly invoice the client for this payment.
          # This is intended to identify payment for replacement orders and in the future
          # other types of orders (eg. influencer orders).
          def OrderPaymentType.subsidized
            @@_subsidized ||= OrderPaymentType.new('subsidized')
          end

          # An installment plan payment represents that the user has elected an
          # installment plan to pay for this order. For the purposes of the order, the
          # balance will reflect fully paid for the total value of the installment plan,
          # even though individual installments may be created in the future. Note this
          # feature was deprecated in early 2020.
          def OrderPaymentType.installment_plan
            @@_installment_plan ||= OrderPaymentType.new('installment_plan')
          end

          # Request to pay the balance with cash on delivery. Offered only when the final
          # mile carriers support cash on delivery.
          def OrderPaymentType.cash_on_delivery
            @@_cash_on_delivery ||= OrderPaymentType.new('cash_on_delivery')
          end

          def to_hash
            value
          end

        end

        class OrderPriceDetailComponentKey

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of OrderPriceDetailComponentKey for this value, creating a new instance for an unknown value
          def OrderPriceDetailComponentKey.apply(value)
            if value.instance_of?(OrderPriceDetailComponentKey)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || OrderPriceDetailComponentKey.new(value))
            end
          end

          # Returns the instance of OrderPriceDetailComponentKey for this value, or nil if not found
          def OrderPriceDetailComponentKey.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            OrderPriceDetailComponentKey.ALL.find { |v| v.value == value }
          end

          def OrderPriceDetailComponentKey.ALL
            @@all ||= [OrderPriceDetailComponentKey.adjustment, OrderPriceDetailComponentKey.vat_deminimis, OrderPriceDetailComponentKey.duty_deminimis, OrderPriceDetailComponentKey.duties_item_price, OrderPriceDetailComponentKey.duties_freight, OrderPriceDetailComponentKey.duties_insurance, OrderPriceDetailComponentKey.vat_item_price, OrderPriceDetailComponentKey.vat_freight, OrderPriceDetailComponentKey.vat_insurance, OrderPriceDetailComponentKey.vat_duties_item_price, OrderPriceDetailComponentKey.vat_duties_freight, OrderPriceDetailComponentKey.vat_duties_insurance, OrderPriceDetailComponentKey.item_price, OrderPriceDetailComponentKey.item_discount, OrderPriceDetailComponentKey.rounding, OrderPriceDetailComponentKey.insurance, OrderPriceDetailComponentKey.shipping, OrderPriceDetailComponentKey.shipping_discount, OrderPriceDetailComponentKey.order_discount, OrderPriceDetailComponentKey.subtotal_percent_sales_margin, OrderPriceDetailComponentKey.subtotal_vat_percent_sales_margin, OrderPriceDetailComponentKey.subtotal_duty_percent_sales_margin, OrderPriceDetailComponentKey.vat_subsidy, OrderPriceDetailComponentKey.duty_subsidy, OrderPriceDetailComponentKey.remote_area_surcharge, OrderPriceDetailComponentKey.fuel_surcharge, OrderPriceDetailComponentKey.emergency_situation_surcharge, OrderPriceDetailComponentKey.peak_surcharge, OrderPriceDetailComponentKey.duties_taxes_paid_surcharge]
          end

          # A general purpose adjustment applied to the order.
          def OrderPriceDetailComponentKey.adjustment
            @@_adjustment ||= OrderPriceDetailComponentKey.new('adjustment')
          end

          # An adjustment based on whether the VAT de minimis applies to the order.
          def OrderPriceDetailComponentKey.vat_deminimis
            @@_vat_deminimis ||= OrderPriceDetailComponentKey.new('vat_deminimis')
          end

          # An adjustment based on whether the duty de minimis applies to the order.
          def OrderPriceDetailComponentKey.duty_deminimis
            @@_duty_deminimis ||= OrderPriceDetailComponentKey.new('duty_deminimis')
          end

          # The duty owed on the price of the order's items, including any added margins
          # and rounding.
          def OrderPriceDetailComponentKey.duties_item_price
            @@_duties_item_price ||= OrderPriceDetailComponentKey.new('duties_item_price')
          end

          # The duty owed on the freight cost of the order.
          def OrderPriceDetailComponentKey.duties_freight
            @@_duties_freight ||= OrderPriceDetailComponentKey.new('duties_freight')
          end

          # The duty owed on the insurance cost of the order.
          def OrderPriceDetailComponentKey.duties_insurance
            @@_duties_insurance ||= OrderPriceDetailComponentKey.new('duties_insurance')
          end

          # The VAT owed on the price of the order's items, including any added margins
          # and rounding.
          def OrderPriceDetailComponentKey.vat_item_price
            @@_vat_item_price ||= OrderPriceDetailComponentKey.new('vat_item_price')
          end

          # The VAT owed on the freight cost of the order.
          def OrderPriceDetailComponentKey.vat_freight
            @@_vat_freight ||= OrderPriceDetailComponentKey.new('vat_freight')
          end

          # The VAT owed on the insurance cost of the order.
          def OrderPriceDetailComponentKey.vat_insurance
            @@_vat_insurance ||= OrderPriceDetailComponentKey.new('vat_insurance')
          end

          # The VAT owed on the duties on the price of the order's items, including any
          # added margins and rounding.
          def OrderPriceDetailComponentKey.vat_duties_item_price
            @@_vat_duties_item_price ||= OrderPriceDetailComponentKey.new('vat_duties_item_price')
          end

          # The VAT owed on the duties on the freight cost of the order.
          def OrderPriceDetailComponentKey.vat_duties_freight
            @@_vat_duties_freight ||= OrderPriceDetailComponentKey.new('vat_duties_freight')
          end

          # The VAT owed on the duties on the insurance cost of the order.
          def OrderPriceDetailComponentKey.vat_duties_insurance
            @@_vat_duties_insurance ||= OrderPriceDetailComponentKey.new('vat_duties_insurance')
          end

          # The sum of the price of the order's items with their currency margins, percent
          # margins, and fixed margins included.
          def OrderPriceDetailComponentKey.item_price
            @@_item_price ||= OrderPriceDetailComponentKey.new('item_price')
          end

          # The sum of all discounts applied to the order's items.
          def OrderPriceDetailComponentKey.item_discount
            @@_item_discount ||= OrderPriceDetailComponentKey.new('item_discount')
          end

          # The sum of any rounding applied to the order's items.
          def OrderPriceDetailComponentKey.rounding
            @@_rounding ||= OrderPriceDetailComponentKey.new('rounding')
          end

          # The insurance cost for the order.
          def OrderPriceDetailComponentKey.insurance
            @@_insurance ||= OrderPriceDetailComponentKey.new('insurance')
          end

          # The shipping cost for the order.
          def OrderPriceDetailComponentKey.shipping
            @@_shipping ||= OrderPriceDetailComponentKey.new('shipping')
          end

          # A shipping discount applied to the entire order.
          def OrderPriceDetailComponentKey.shipping_discount
            @@_shipping_discount ||= OrderPriceDetailComponentKey.new('shipping_discount')
          end

          # A discount applied to the entire order.
          def OrderPriceDetailComponentKey.order_discount
            @@_order_discount ||= OrderPriceDetailComponentKey.new('order_discount')
          end

          # The sum of adjustments to item price, margin and rounding made due to
          # percentage sales margins.
          def OrderPriceDetailComponentKey.subtotal_percent_sales_margin
            @@_subtotal_percent_sales_margin ||= OrderPriceDetailComponentKey.new('subtotal_percent_sales_margin')
          end

          # The sum of adjustments to VAT owed made due to percentage sales margins.
          def OrderPriceDetailComponentKey.subtotal_vat_percent_sales_margin
            @@_subtotal_vat_percent_sales_margin ||= OrderPriceDetailComponentKey.new('subtotal_vat_percent_sales_margin')
          end

          # The sum of adjustments to duty owed made due to percentage sales margins.
          def OrderPriceDetailComponentKey.subtotal_duty_percent_sales_margin
            @@_subtotal_duty_percent_sales_margin ||= OrderPriceDetailComponentKey.new('subtotal_duty_percent_sales_margin')
          end

          # An offset to account for any VAT subsidized by the organization. For example,
          # if VAT is included in an item price and changes at the order level (due to
          # passing de minimis threshold, or the destination having a more specific VAT
          # rate), the difference will be represented here.
          def OrderPriceDetailComponentKey.vat_subsidy
            @@_vat_subsidy ||= OrderPriceDetailComponentKey.new('vat_subsidy')
          end

          # An offset to account for any duty subsidized by the organization. For example,
          # if duty is included in an item price and changes at the order level (due to
          # passing de minimis threshold, or the destination having a more specific duty
          # rate), the difference will be represented here.
          def OrderPriceDetailComponentKey.duty_subsidy
            @@_duty_subsidy ||= OrderPriceDetailComponentKey.new('duty_subsidy')
          end

          # Surcharge applied to a shipment for delivery to a remote area determined by
          # the carrier.
          def OrderPriceDetailComponentKey.remote_area_surcharge
            @@_remote_area_surcharge ||= OrderPriceDetailComponentKey.new('remote_area_surcharge')
          end

          # Surcharge applied to a shipment for fuel consumption by the carrier.
          def OrderPriceDetailComponentKey.fuel_surcharge
            @@_fuel_surcharge ||= OrderPriceDetailComponentKey.new('fuel_surcharge')
          end

          # Surcharge applied to a shipment during emergency circumstances, such as
          # covid19.
          def OrderPriceDetailComponentKey.emergency_situation_surcharge
            @@_emergency_situation_surcharge ||= OrderPriceDetailComponentKey.new('emergency_situation_surcharge')
          end

          # Surcharge applied per package during peak times.
          def OrderPriceDetailComponentKey.peak_surcharge
            @@_peak_surcharge ||= OrderPriceDetailComponentKey.new('peak_surcharge')
          end

          # Surcharge applied per shipment for all shipment that are sent DDP
          def OrderPriceDetailComponentKey.duties_taxes_paid_surcharge
            @@_duties_taxes_paid_surcharge ||= OrderPriceDetailComponentKey.new('duties_taxes_paid_surcharge')
          end

          def to_hash
            value
          end

        end

        class OrderPriceDetailKey

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of OrderPriceDetailKey for this value, creating a new instance for an unknown value
          def OrderPriceDetailKey.apply(value)
            if value.instance_of?(OrderPriceDetailKey)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || OrderPriceDetailKey.new(value))
            end
          end

          # Returns the instance of OrderPriceDetailKey for this value, or nil if not found
          def OrderPriceDetailKey.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            OrderPriceDetailKey.ALL.find { |v| v.value == value }
          end

          def OrderPriceDetailKey.ALL
            @@all ||= [OrderPriceDetailKey.adjustment, OrderPriceDetailKey.subtotal, OrderPriceDetailKey.vat, OrderPriceDetailKey.duty, OrderPriceDetailKey.shipping, OrderPriceDetailKey.insurance, OrderPriceDetailKey.discount, OrderPriceDetailKey.surcharges]
          end

          # The details of any adjustments made to the order.
          def OrderPriceDetailKey.adjustment
            @@_adjustment ||= OrderPriceDetailKey.new('adjustment')
          end

          # The details of the subtotal for the order, including item prices, margins, and
          # rounding.
          def OrderPriceDetailKey.subtotal
            @@_subtotal ||= OrderPriceDetailKey.new('subtotal')
          end

          # The details of any VAT owed on the order.
          def OrderPriceDetailKey.vat
            @@_vat ||= OrderPriceDetailKey.new('vat')
          end

          # The details of any duties owed on the order.
          def OrderPriceDetailKey.duty
            @@_duty ||= OrderPriceDetailKey.new('duty')
          end

          # The details of shipping costs for the order.
          def OrderPriceDetailKey.shipping
            @@_shipping ||= OrderPriceDetailKey.new('shipping')
          end

          # The details of insurance costs for the order.
          def OrderPriceDetailKey.insurance
            @@_insurance ||= OrderPriceDetailKey.new('insurance')
          end

          # The details of any discount applied to the order.
          def OrderPriceDetailKey.discount
            @@_discount ||= OrderPriceDetailKey.new('discount')
          end

          # Additional fees and levies applied to the order
          def OrderPriceDetailKey.surcharges
            @@_surcharges ||= OrderPriceDetailKey.new('surcharges')
          end

          def to_hash
            value
          end

        end

        class OrderQuoteAddressType

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of OrderQuoteAddressType for this value, creating a new instance for an unknown value
          def OrderQuoteAddressType.apply(value)
            if value.instance_of?(OrderQuoteAddressType)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || OrderQuoteAddressType.new(value))
            end
          end

          # Returns the instance of OrderQuoteAddressType for this value, or nil if not found
          def OrderQuoteAddressType.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            OrderQuoteAddressType.ALL.find { |v| v.value == value }
          end

          def OrderQuoteAddressType.ALL
            @@all ||= [OrderQuoteAddressType.shipping]
          end

          def OrderQuoteAddressType.shipping
            @@_shipping ||= OrderQuoteAddressType.new('shipping')
          end

          def to_hash
            value
          end

        end

        class OrderQuoteErrorCode

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of OrderQuoteErrorCode for this value, creating a new instance for an unknown value
          def OrderQuoteErrorCode.apply(value)
            if value.instance_of?(OrderQuoteErrorCode)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || OrderQuoteErrorCode.new(value))
            end
          end

          # Returns the instance of OrderQuoteErrorCode for this value, or nil if not found
          def OrderQuoteErrorCode.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            OrderQuoteErrorCode.ALL.find { |v| v.value == value }
          end

          def OrderQuoteErrorCode.ALL
            @@all ||= [OrderQuoteErrorCode.contact_email_invalid, OrderQuoteErrorCode.contact_email_required, OrderQuoteErrorCode.contact_phone_invalid, OrderQuoteErrorCode.contact_phone_required, OrderQuoteErrorCode.country_not_supported, OrderQuoteErrorCode.currency_invalid, OrderQuoteErrorCode.first_name_invalid, OrderQuoteErrorCode.first_name_required, OrderQuoteErrorCode.geo_required_when_no_session, OrderQuoteErrorCode.language_invalid, OrderQuoteErrorCode.last_name_invalid, OrderQuoteErrorCode.last_name_required, OrderQuoteErrorCode.line_item_number_invalid, OrderQuoteErrorCode.line_item_number_not_available, OrderQuoteErrorCode.line_not_found, OrderQuoteErrorCode.line_quantity_invalid, OrderQuoteErrorCode.line_value_threshold_exceeded, OrderQuoteErrorCode.name_missing_first_or_last, OrderQuoteErrorCode.name_required, OrderQuoteErrorCode.order_quote_requires_at_least_one_line, OrderQuoteErrorCode.session_not_found, OrderQuoteErrorCode.session_organization_mismatch]
          end

          def OrderQuoteErrorCode.contact_email_invalid
            @@_contact_email_invalid ||= OrderQuoteErrorCode.new('contact_email_invalid')
          end

          def OrderQuoteErrorCode.contact_email_required
            @@_contact_email_required ||= OrderQuoteErrorCode.new('contact_email_required')
          end

          def OrderQuoteErrorCode.contact_phone_invalid
            @@_contact_phone_invalid ||= OrderQuoteErrorCode.new('contact_phone_invalid')
          end

          def OrderQuoteErrorCode.contact_phone_required
            @@_contact_phone_required ||= OrderQuoteErrorCode.new('contact_phone_required')
          end

          def OrderQuoteErrorCode.country_not_supported
            @@_country_not_supported ||= OrderQuoteErrorCode.new('country_not_supported')
          end

          def OrderQuoteErrorCode.currency_invalid
            @@_currency_invalid ||= OrderQuoteErrorCode.new('currency_invalid')
          end

          def OrderQuoteErrorCode.first_name_invalid
            @@_first_name_invalid ||= OrderQuoteErrorCode.new('first_name_invalid')
          end

          def OrderQuoteErrorCode.first_name_required
            @@_first_name_required ||= OrderQuoteErrorCode.new('first_name_required')
          end

          def OrderQuoteErrorCode.geo_required_when_no_session
            @@_geo_required_when_no_session ||= OrderQuoteErrorCode.new('geo_required_when_no_session')
          end

          def OrderQuoteErrorCode.language_invalid
            @@_language_invalid ||= OrderQuoteErrorCode.new('language_invalid')
          end

          def OrderQuoteErrorCode.last_name_invalid
            @@_last_name_invalid ||= OrderQuoteErrorCode.new('last_name_invalid')
          end

          def OrderQuoteErrorCode.last_name_required
            @@_last_name_required ||= OrderQuoteErrorCode.new('last_name_required')
          end

          def OrderQuoteErrorCode.line_item_number_invalid
            @@_line_item_number_invalid ||= OrderQuoteErrorCode.new('line_item_number_invalid')
          end

          def OrderQuoteErrorCode.line_item_number_not_available
            @@_line_item_number_not_available ||= OrderQuoteErrorCode.new('line_item_number_not_available')
          end

          def OrderQuoteErrorCode.line_not_found
            @@_line_not_found ||= OrderQuoteErrorCode.new('line_not_found')
          end

          def OrderQuoteErrorCode.line_quantity_invalid
            @@_line_quantity_invalid ||= OrderQuoteErrorCode.new('line_quantity_invalid')
          end

          def OrderQuoteErrorCode.line_value_threshold_exceeded
            @@_line_value_threshold_exceeded ||= OrderQuoteErrorCode.new('line_value_threshold_exceeded')
          end

          def OrderQuoteErrorCode.name_missing_first_or_last
            @@_name_missing_first_or_last ||= OrderQuoteErrorCode.new('name_missing_first_or_last')
          end

          def OrderQuoteErrorCode.name_required
            @@_name_required ||= OrderQuoteErrorCode.new('name_required')
          end

          def OrderQuoteErrorCode.order_quote_requires_at_least_one_line
            @@_order_quote_requires_at_least_one_line ||= OrderQuoteErrorCode.new('order_quote_requires_at_least_one_line')
          end

          def OrderQuoteErrorCode.session_not_found
            @@_session_not_found ||= OrderQuoteErrorCode.new('session_not_found')
          end

          def OrderQuoteErrorCode.session_organization_mismatch
            @@_session_organization_mismatch ||= OrderQuoteErrorCode.new('session_organization_mismatch')
          end

          def to_hash
            value
          end

        end

        class OrderQuoteLineErrorCode

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of OrderQuoteLineErrorCode for this value, creating a new instance for an unknown value
          def OrderQuoteLineErrorCode.apply(value)
            if value.instance_of?(OrderQuoteLineErrorCode)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || OrderQuoteLineErrorCode.new(value))
            end
          end

          # Returns the instance of OrderQuoteLineErrorCode for this value, or nil if not found
          def OrderQuoteLineErrorCode.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            OrderQuoteLineErrorCode.ALL.find { |v| v.value == value }
          end

          def OrderQuoteLineErrorCode.ALL
            @@all ||= [OrderQuoteLineErrorCode.line_item_number_invalid, OrderQuoteLineErrorCode.line_item_number_not_available, OrderQuoteLineErrorCode.line_quantity_invalid, OrderQuoteLineErrorCode.line_value_threshold_exceeded]
          end

          def OrderQuoteLineErrorCode.line_item_number_invalid
            @@_line_item_number_invalid ||= OrderQuoteLineErrorCode.new('line_item_number_invalid')
          end

          def OrderQuoteLineErrorCode.line_item_number_not_available
            @@_line_item_number_not_available ||= OrderQuoteLineErrorCode.new('line_item_number_not_available')
          end

          def OrderQuoteLineErrorCode.line_quantity_invalid
            @@_line_quantity_invalid ||= OrderQuoteLineErrorCode.new('line_quantity_invalid')
          end

          def OrderQuoteLineErrorCode.line_value_threshold_exceeded
            @@_line_value_threshold_exceeded ||= OrderQuoteLineErrorCode.new('line_value_threshold_exceeded')
          end

          def to_hash
            value
          end

        end

        class OrderRefundSummaryIncludes

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of OrderRefundSummaryIncludes for this value, creating a new instance for an unknown value
          def OrderRefundSummaryIncludes.apply(value)
            if value.instance_of?(OrderRefundSummaryIncludes)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || OrderRefundSummaryIncludes.new(value))
            end
          end

          # Returns the instance of OrderRefundSummaryIncludes for this value, or nil if not found
          def OrderRefundSummaryIncludes.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            OrderRefundSummaryIncludes.ALL.find { |v| v.value == value }
          end

          def OrderRefundSummaryIncludes.ALL
            @@all ||= [OrderRefundSummaryIncludes.duties, OrderRefundSummaryIncludes.vat, OrderRefundSummaryIncludes.shipping]
          end

          def OrderRefundSummaryIncludes.duties
            @@_duties ||= OrderRefundSummaryIncludes.new('duties')
          end

          def OrderRefundSummaryIncludes.vat
            @@_vat ||= OrderRefundSummaryIncludes.new('vat')
          end

          def OrderRefundSummaryIncludes.shipping
            @@_shipping ||= OrderRefundSummaryIncludes.new('shipping')
          end

          def to_hash
            value
          end

        end

        class OrderRefundSummaryPartialCharged

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of OrderRefundSummaryPartialCharged for this value, creating a new instance for an unknown value
          def OrderRefundSummaryPartialCharged.apply(value)
            if value.instance_of?(OrderRefundSummaryPartialCharged)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || OrderRefundSummaryPartialCharged.new(value))
            end
          end

          # Returns the instance of OrderRefundSummaryPartialCharged for this value, or nil if not found
          def OrderRefundSummaryPartialCharged.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            OrderRefundSummaryPartialCharged.ALL.find { |v| v.value == value }
          end

          def OrderRefundSummaryPartialCharged.ALL
            @@all ||= [OrderRefundSummaryPartialCharged.per_item, OrderRefundSummaryPartialCharged.for_order, OrderRefundSummaryPartialCharged.by_value_percentage, OrderRefundSummaryPartialCharged.by_quantity_percentage]
          end

          def OrderRefundSummaryPartialCharged.per_item
            @@_per_item ||= OrderRefundSummaryPartialCharged.new('per_item')
          end

          def OrderRefundSummaryPartialCharged.for_order
            @@_for_order ||= OrderRefundSummaryPartialCharged.new('for_order')
          end

          def OrderRefundSummaryPartialCharged.by_value_percentage
            @@_by_value_percentage ||= OrderRefundSummaryPartialCharged.new('by_value_percentage')
          end

          def OrderRefundSummaryPartialCharged.by_quantity_percentage
            @@_by_quantity_percentage ||= OrderRefundSummaryPartialCharged.new('by_quantity_percentage')
          end

          def to_hash
            value
          end

        end

        class OrderStatus

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of OrderStatus for this value, creating a new instance for an unknown value
          def OrderStatus.apply(value)
            if value.instance_of?(OrderStatus)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || OrderStatus.new(value))
            end
          end

          # Returns the instance of OrderStatus for this value, or nil if not found
          def OrderStatus.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            OrderStatus.ALL.find { |v| v.value == value }
          end

          def OrderStatus.ALL
            @@all ||= [OrderStatus.open, OrderStatus.submitted]
          end

          def OrderStatus.open
            @@_open ||= OrderStatus.new('open')
          end

          def OrderStatus.submitted
            @@_submitted ||= OrderStatus.new('submitted')
          end

          def to_hash
            value
          end

        end

        class OrderStorage

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of OrderStorage for this value, creating a new instance for an unknown value
          def OrderStorage.apply(value)
            if value.instance_of?(OrderStorage)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || OrderStorage.new(value))
            end
          end

          # Returns the instance of OrderStorage for this value, or nil if not found
          def OrderStorage.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            OrderStorage.ALL.find { |v| v.value == value }
          end

          def OrderStorage.ALL
            @@all ||= [OrderStorage.do_not_persist, OrderStorage.persist]
          end

          # Indicates to not persist the order.
          def OrderStorage.do_not_persist
            @@_do_not_persist ||= OrderStorage.new('do_not_persist')
          end

          # Indicates to persist the order.
          def OrderStorage.persist
            @@_persist ||= OrderStorage.new('persist')
          end

          def to_hash
            value
          end

        end

        class OrderType

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of OrderType for this value, creating a new instance for an unknown value
          def OrderType.apply(value)
            if value.instance_of?(OrderType)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || OrderType.new(value))
            end
          end

          # Returns the instance of OrderType for this value, or nil if not found
          def OrderType.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            OrderType.ALL.find { |v| v.value == value }
          end

          def OrderType.ALL
            @@all ||= [OrderType.standard, OrderType.replacement]
          end

          def OrderType.standard
            @@_standard ||= OrderType.new('standard')
          end

          def OrderType.replacement
            @@_replacement ||= OrderType.new('replacement')
          end

          def to_hash
            value
          end

        end

        class OrganizationPaymentMethodTag < PaymentMethodTag

          attr_reader :value

          def initialize(value)
            super(:name => PaymentMethodTag::Types::ORGANIZATION_PAYMENT_METHOD_TAG, :discriminator => 'organization_payment_method_tag')
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of OrganizationPaymentMethodTag for this value, creating a new instance for an unknown value
          def OrganizationPaymentMethodTag.apply(value)
            if value.instance_of?(OrganizationPaymentMethodTag)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || OrganizationPaymentMethodTag.new(value))
            end
          end

          # Returns the instance of OrganizationPaymentMethodTag for this value, or nil if not found
          def OrganizationPaymentMethodTag.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            OrganizationPaymentMethodTag.ALL.find { |v| v.value == value }
          end

          def OrganizationPaymentMethodTag.ALL
            @@all ||= [OrganizationPaymentMethodTag.deny]
          end

          # A denied payment method cannot be used for an organization in any experience.
          def OrganizationPaymentMethodTag.deny
            @@_deny ||= OrganizationPaymentMethodTag.new('deny')
          end

          def subtype_to_hash
            value
          end

        end

        class OrganizationStatus

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of OrganizationStatus for this value, creating a new instance for an unknown value
          def OrganizationStatus.apply(value)
            if value.instance_of?(OrganizationStatus)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || OrganizationStatus.new(value))
            end
          end

          # Returns the instance of OrganizationStatus for this value, or nil if not found
          def OrganizationStatus.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            OrganizationStatus.ALL.find { |v| v.value == value }
          end

          def OrganizationStatus.ALL
            @@all ||= [OrganizationStatus.active, OrganizationStatus.inactive, OrganizationStatus.deactivated, OrganizationStatus.provisioned]
          end

          def OrganizationStatus.active
            @@_active ||= OrganizationStatus.new('active')
          end

          # Determined by usage: ex: orders placed, experience updated, catalog items
          # updated, etc...
          def OrganizationStatus.inactive
            @@_inactive ||= OrganizationStatus.new('inactive')
          end

          # Manually deactivated
          def OrganizationStatus.deactivated
            @@_deactivated ||= OrganizationStatus.new('deactivated')
          end

          # Created but not ready for transactions.
          def OrganizationStatus.provisioned
            @@_provisioned ||= OrganizationStatus.new('provisioned')
          end

          def to_hash
            value
          end

        end

        class PaymentActionType

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of PaymentActionType for this value, creating a new instance for an unknown value
          def PaymentActionType.apply(value)
            if value.instance_of?(PaymentActionType)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || PaymentActionType.new(value))
            end
          end

          # Returns the instance of PaymentActionType for this value, or nil if not found
          def PaymentActionType.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            PaymentActionType.ALL.find { |v| v.value == value }
          end

          def PaymentActionType.ALL
            @@all ||= [PaymentActionType.redirect, PaymentActionType.use_sdk_klarna_v1, PaymentActionType.use_sdk_applepay_js, PaymentActionType.use_sdk_googlepay, PaymentActionType.use_sdk_paypal, PaymentActionType.use_sdk_stripe_v3, PaymentActionType.use_sdk_adyen_v3, PaymentActionType.use_sdk_adyen_v4, PaymentActionType.execute_script, PaymentActionType.display_inline_window]
          end

          # Redirect the customer to the payment provider's url. After the payment process
          # is finished, the customer will be redirected back to the `returnUrl`.
          def PaymentActionType.redirect
            @@_redirect ||= PaymentActionType.new('redirect')
          end

          # Use the Klarna Payment SDK (v1) to render the Klarna widgets for each type of
          # payment offering. After the decision has been made, the payment request will
          # be updated asynchronously.
          def PaymentActionType.use_sdk_klarna_v1
            @@_use_sdk_klarna_v1 ||= PaymentActionType.new('use_sdk_klarna_v1')
          end

          # Use the Apple Pay Javscript SDK to render the Apple Pay experience. To finish
          # the process, you will update the `payment_method_data` to
          # `authorize_applepay`.
          def PaymentActionType.use_sdk_applepay_js
            @@_use_sdk_applepay_js ||= PaymentActionType.new('use_sdk_applepay_js')
          end

          # Use a Google Pay SDK to render the Google Pay button and experience. To finish
          # the process, you will update the `payment_method_data` to
          # `authorize_googlepay`.
          def PaymentActionType.use_sdk_googlepay
            @@_use_sdk_googlepay ||= PaymentActionType.new('use_sdk_googlepay')
          end

          # Use a Paypal Checkout SDK to render the Paypal button and experience. To
          # finish the process, you will update the `payment_method_data` to
          # `authorize_paypal`
          def PaymentActionType.use_sdk_paypal
            @@_use_sdk_paypal ||= PaymentActionType.new('use_sdk_paypal')
          end

          # Use the Stripe SDK (v3) to manage card 3ds. After the decision has been made,
          # the payment request will update asynchronously.
          def PaymentActionType.use_sdk_stripe_v3
            @@_use_sdk_stripe_v3 ||= PaymentActionType.new('use_sdk_stripe_v3')
          end

          # Use the Adyen Web Component (v3) to manage card 3ds. After the decision has
          # been made, the payment request will update asynchronously.
          def PaymentActionType.use_sdk_adyen_v3
            @@_use_sdk_adyen_v3 ||= PaymentActionType.new('use_sdk_adyen_v3')
          end

          # Use the Adyen Web Component (v4) to manage card 3ds. After the decision has
          # been made, the payment request will update asynchronously.
          def PaymentActionType.use_sdk_adyen_v4
            @@_use_sdk_adyen_v4 ||= PaymentActionType.new('use_sdk_adyen_v4')
          end

          # Render the returned HTML script from the payment provider. After a decision
          # has been made, the payment request will be updated asynchronously.
          def PaymentActionType.execute_script
            @@_execute_script ||= PaymentActionType.new('execute_script')
          end

          # Render a visible window or iframe to load the payment provider's url. After
          # the payment process is finished, the payment request will be updated
          # asynchronously.
          def PaymentActionType.display_inline_window
            @@_display_inline_window ||= PaymentActionType.new('display_inline_window')
          end

          def to_hash
            value
          end

        end

        class PaymentErrorCode

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of PaymentErrorCode for this value, creating a new instance for an unknown value
          def PaymentErrorCode.apply(value)
            if value.instance_of?(PaymentErrorCode)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || PaymentErrorCode.new(value))
            end
          end

          # Returns the instance of PaymentErrorCode for this value, or nil if not found
          def PaymentErrorCode.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            PaymentErrorCode.ALL.find { |v| v.value == value }
          end

          def PaymentErrorCode.ALL
            @@all ||= [PaymentErrorCode.duplicate, PaymentErrorCode.invalid_amount, PaymentErrorCode.invalid_currency, PaymentErrorCode.invalid_method, PaymentErrorCode.invalid_order, PaymentErrorCode.invalid_customer, PaymentErrorCode.invalid_destination, PaymentErrorCode.unknown]
          end

          def PaymentErrorCode.duplicate
            @@_duplicate ||= PaymentErrorCode.new('duplicate')
          end

          # Amount is not valid (e.g. for merchant of record payments, the amount
          # specified must match the order). This typically is handled by refreshing the
          # order amount and reconfirming with the user as something has changed.
          def PaymentErrorCode.invalid_amount
            @@_invalid_amount ||= PaymentErrorCode.new('invalid_amount')
          end

          # Currency is either not known or invalid (e.g. for merchant of record payments,
          # the currency specified must match the order).
          def PaymentErrorCode.invalid_currency
            @@_invalid_currency ||= PaymentErrorCode.new('invalid_currency')
          end

          # Invalid payment method
          def PaymentErrorCode.invalid_method
            @@_invalid_method ||= PaymentErrorCode.new('invalid_method')
          end

          # The specified order number was not found
          def PaymentErrorCode.invalid_order
            @@_invalid_order ||= PaymentErrorCode.new('invalid_order')
          end

          # Customer information is invalid (e.g. email specified but not a valid email)
          def PaymentErrorCode.invalid_customer
            @@_invalid_customer ||= PaymentErrorCode.new('invalid_customer')
          end

          # Destination/shipping address is not valid
          def PaymentErrorCode.invalid_destination
            @@_invalid_destination ||= PaymentErrorCode.new('invalid_destination')
          end

          # Failed due to another reason (details not known)
          def PaymentErrorCode.unknown
            @@_unknown ||= PaymentErrorCode.new('unknown')
          end

          def to_hash
            value
          end

        end

        class PaymentFailureCode

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of PaymentFailureCode for this value, creating a new instance for an unknown value
          def PaymentFailureCode.apply(value)
            if value.instance_of?(PaymentFailureCode)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || PaymentFailureCode.new(value))
            end
          end

          # Returns the instance of PaymentFailureCode for this value, or nil if not found
          def PaymentFailureCode.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            PaymentFailureCode.ALL.find { |v| v.value == value }
          end

          def PaymentFailureCode.ALL
            @@all ||= [PaymentFailureCode.action_expired, PaymentFailureCode.action_cancelled, PaymentFailureCode.action_failed, PaymentFailureCode.authorization_declined, PaymentFailureCode.not_supported, PaymentFailureCode.fraudulent, PaymentFailureCode.error]
          end

          # The previous action was not completed and expired.
          def PaymentFailureCode.action_expired
            @@_action_expired ||= PaymentFailureCode.new('action_expired')
          end

          # The previous action was cancelled by the customer.
          def PaymentFailureCode.action_cancelled
            @@_action_cancelled ||= PaymentFailureCode.new('action_cancelled')
          end

          # The previous action could not be completed due to a failure returned by the
          # payment processor.
          def PaymentFailureCode.action_failed
            @@_action_failed ||= PaymentFailureCode.new('action_failed')
          end

          # The previous authorization was declined by the payment provider. The consumer
          # should contact their payment provider.
          def PaymentFailureCode.authorization_declined
            @@_authorization_declined ||= PaymentFailureCode.new('authorization_declined')
          end

          # The payment request cannot be processed using this payment method due to an
          # unsupported combination of currency, country, amount, or merchant of record.
          def PaymentFailureCode.not_supported
            @@_not_supported ||= PaymentFailureCode.new('not_supported')
          end

          # The payment could not be completed because it appeared to be fraudulent.
          def PaymentFailureCode.fraudulent
            @@_fraudulent ||= PaymentFailureCode.new('fraudulent')
          end

          # An unexpected error occurred during the payment process.
          def PaymentFailureCode.error
            @@_error ||= PaymentFailureCode.new('error')
          end

          def to_hash
            value
          end

        end

        class PaymentMethodCapability

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of PaymentMethodCapability for this value, creating a new instance for an unknown value
          def PaymentMethodCapability.apply(value)
            if value.instance_of?(PaymentMethodCapability)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || PaymentMethodCapability.new(value))
            end
          end

          # Returns the instance of PaymentMethodCapability for this value, or nil if not found
          def PaymentMethodCapability.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            PaymentMethodCapability.ALL.find { |v| v.value == value }
          end

          def PaymentMethodCapability.ALL
            @@all ||= [PaymentMethodCapability.credit, PaymentMethodCapability.debit]
          end

          # Credit cards provide access to a line of debt issued by a bank.
          def PaymentMethodCapability.credit
            @@_credit ||= PaymentMethodCapability.new('credit')
          end

          # Debit cards deduct money directly from a bank account.
          def PaymentMethodCapability.debit
            @@_debit ||= PaymentMethodCapability.new('debit')
          end

          def to_hash
            value
          end

        end

        class PaymentMethodRuleContentKey

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of PaymentMethodRuleContentKey for this value, creating a new instance for an unknown value
          def PaymentMethodRuleContentKey.apply(value)
            if value.instance_of?(PaymentMethodRuleContentKey)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || PaymentMethodRuleContentKey.new(value))
            end
          end

          # Returns the instance of PaymentMethodRuleContentKey for this value, or nil if not found
          def PaymentMethodRuleContentKey.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            PaymentMethodRuleContentKey.ALL.find { |v| v.value == value }
          end

          def PaymentMethodRuleContentKey.ALL
            @@all ||= [PaymentMethodRuleContentKey.description]
          end

          def PaymentMethodRuleContentKey.description
            @@_description ||= PaymentMethodRuleContentKey.new('description')
          end

          def to_hash
            value
          end

        end

        class PaymentMethodType

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of PaymentMethodType for this value, creating a new instance for an unknown value
          def PaymentMethodType.apply(value)
            if value.instance_of?(PaymentMethodType)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || PaymentMethodType.new(value))
            end
          end

          # Returns the instance of PaymentMethodType for this value, or nil if not found
          def PaymentMethodType.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            PaymentMethodType.ALL.find { |v| v.value == value }
          end

          def PaymentMethodType.ALL
            @@all ||= [PaymentMethodType.card, PaymentMethodType.online, PaymentMethodType.offline]
          end

          # Represents all form of card payment (e.g. credit, debit, etc.)
          def PaymentMethodType.card
            @@_card ||= PaymentMethodType.new('card')
          end

          # Represents the most common form of alternative payment methods which require
          # some degree of integration online (e.g. a redirect) to complete payment.
          def PaymentMethodType.online
            @@_online ||= PaymentMethodType.new('online')
          end

          # Offline payment method types represent payments like Cash On Delivery which
          # require offline collection
          def PaymentMethodType.offline
            @@_offline ||= PaymentMethodType.new('offline')
          end

          def to_hash
            value
          end

        end

        class PaymentSourceConfirmationActionType

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of PaymentSourceConfirmationActionType for this value, creating a new instance for an unknown value
          def PaymentSourceConfirmationActionType.apply(value)
            if value.instance_of?(PaymentSourceConfirmationActionType)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || PaymentSourceConfirmationActionType.new(value))
            end
          end

          # Returns the instance of PaymentSourceConfirmationActionType for this value, or nil if not found
          def PaymentSourceConfirmationActionType.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            PaymentSourceConfirmationActionType.ALL.find { |v| v.value == value }
          end

          def PaymentSourceConfirmationActionType.ALL
            @@all ||= [PaymentSourceConfirmationActionType.cvv, PaymentSourceConfirmationActionType.billing_address, PaymentSourceConfirmationActionType.number]
          end

          def PaymentSourceConfirmationActionType.cvv
            @@_cvv ||= PaymentSourceConfirmationActionType.new('cvv')
          end

          def PaymentSourceConfirmationActionType.billing_address
            @@_billing_address ||= PaymentSourceConfirmationActionType.new('billing_address')
          end

          def PaymentSourceConfirmationActionType.number
            @@_number ||= PaymentSourceConfirmationActionType.new('number')
          end

          def to_hash
            value
          end

        end

        class PaymentStatus

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of PaymentStatus for this value, creating a new instance for an unknown value
          def PaymentStatus.apply(value)
            if value.instance_of?(PaymentStatus)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || PaymentStatus.new(value))
            end
          end

          # Returns the instance of PaymentStatus for this value, or nil if not found
          def PaymentStatus.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            PaymentStatus.ALL.find { |v| v.value == value }
          end

          def PaymentStatus.ALL
            @@all ||= [PaymentStatus.requires_payment_method, PaymentStatus.requires_action, PaymentStatus.processing, PaymentStatus.cancelled, PaymentStatus.expired, PaymentStatus.authorized, PaymentStatus.reversed, PaymentStatus.captured, PaymentStatus.refunded, PaymentStatus.in_dispute, PaymentStatus.charged_back]
          end

          # The initial state of payment request if no `payment_method_data` is provided,
          # if an authorization couldn't be completed, or if the payment request details
          # are changed beyond certain thesholds (e.g. currency changed). If a payment
          # method is not added, this payment request will change to `expired`.
          def PaymentStatus.requires_payment_method
            @@_requires_payment_method ||= PaymentStatus.new('requires_payment_method')
          end

          # In order to process a payment for a given payment method, an action needs to
          # be rendered on the consumer's device so that they can interact with the
          # payment provider or authenticate themselves. If the action is not completed,
          # the action will expire and the payment request will change to
          # `requires_payment_method`.
          def PaymentStatus.requires_action
            @@_requires_action ||= PaymentStatus.new('requires_action')
          end

          # The payment attempt is processing. Eventually it will update with the results
          # of the transaction. Sometimes, this may take hours or days to finish
          # processing - if that is the case, the consumer can have their order reserved
          # provisionally until the payment is processed.
          def PaymentStatus.processing
            @@_processing ||= PaymentStatus.new('processing')
          end

          # The payment request was cancelled before any transaction was authorized. The
          # consumer will not be charged for any transactions that were in progress.
          def PaymentStatus.cancelled
            @@_cancelled ||= PaymentStatus.new('cancelled')
          end

          # The payment request expired due to inactivity before any transaction was
          # authorized.
          def PaymentStatus.expired
            @@_expired ||= PaymentStatus.new('expired')
          end

          # A hold has been placed on the consumer's payment method for the amount of the
          # payment request. The funds have not yet been withdrawn - they must be captured
          # separately. The full balance of the payment request must be captured in order
          # to update the status to `captured`. Any outstanding balance that is not
          # captured will eventually be reversed. If an order is found to be fraudulent,
          # the payment request can be cancelled and the status will change to `reversed`.
          def PaymentStatus.authorized
            @@_authorized ||= PaymentStatus.new('authorized')
          end

          # The entire balance of the payment request was reversed without being captured.
          # The consumer has not had any funds withdrawn and any authorization hold has
          # been removed.
          def PaymentStatus.reversed
            @@_reversed ||= PaymentStatus.new('reversed')
          end

          # The entire balance of the payment request has been captured. The funds have
          # been withdrawn from the consumer and will be transferred to the merchant. With
          # some payment methods, this occurs automatically after authorization without
          # taking steps to capture. Any funds captured can be returned to the customer by
          # refunding them. The consumer can issue a dispute for any captured funds.
          def PaymentStatus.captured
            @@_captured ||= PaymentStatus.new('captured')
          end

          # The entire balance of the payment request has been refunded back to the
          # consumer. No further actions can be taken with this payment request.
          def PaymentStatus.refunded
            @@_refunded ||= PaymentStatus.new('refunded')
          end

          # The consumer has placed a dispute with their payment provider to reclaim any
          # captured funds due to breach of service with the merchant. The status of the
          # payment request will update to `charged_back` or `dispute_won` after the
          # payment provider makes a decision.
          def PaymentStatus.in_dispute
            @@_in_dispute ||= PaymentStatus.new('in_dispute')
          end

          # The payment provider has decided that the merchant breached terms of service
          # will claim back all captured funds for the consumer.
          def PaymentStatus.charged_back
            @@_charged_back ||= PaymentStatus.new('charged_back')
          end

          def to_hash
            value
          end

        end

        class PaymentType

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of PaymentType for this value, creating a new instance for an unknown value
          def PaymentType.apply(value)
            if value.instance_of?(PaymentType)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || PaymentType.new(value))
            end
          end

          # Returns the instance of PaymentType for this value, or nil if not found
          def PaymentType.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            PaymentType.ALL.find { |v| v.value == value }
          end

          def PaymentType.ALL
            @@all ||= [PaymentType.card, PaymentType.klarna, PaymentType.googlepay, PaymentType.paypal, PaymentType.applepay, PaymentType.ideal, PaymentType.afterpay]
          end

          def PaymentType.card
            @@_card ||= PaymentType.new('card')
          end

          def PaymentType.klarna
            @@_klarna ||= PaymentType.new('klarna')
          end

          def PaymentType.googlepay
            @@_googlepay ||= PaymentType.new('googlepay')
          end

          def PaymentType.paypal
            @@_paypal ||= PaymentType.new('paypal')
          end

          def PaymentType.applepay
            @@_applepay ||= PaymentType.new('applepay')
          end

          def PaymentType.ideal
            @@_ideal ||= PaymentType.new('ideal')
          end

          def PaymentType.afterpay
            @@_afterpay ||= PaymentType.new('afterpay')
          end

          def to_hash
            value
          end

        end

        class PermittedHttpMethod

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of PermittedHttpMethod for this value, creating a new instance for an unknown value
          def PermittedHttpMethod.apply(value)
            if value.instance_of?(PermittedHttpMethod)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || PermittedHttpMethod.new(value))
            end
          end

          # Returns the instance of PermittedHttpMethod for this value, or nil if not found
          def PermittedHttpMethod.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            PermittedHttpMethod.ALL.find { |v| v.value == value }
          end

          def PermittedHttpMethod.ALL
            @@all ||= [PermittedHttpMethod.get, PermittedHttpMethod.post, PermittedHttpMethod.put, PermittedHttpMethod.delete, PermittedHttpMethod.patch]
          end

          def PermittedHttpMethod.get
            @@_get ||= PermittedHttpMethod.new('GET')
          end

          def PermittedHttpMethod.post
            @@_post ||= PermittedHttpMethod.new('POST')
          end

          def PermittedHttpMethod.put
            @@_put ||= PermittedHttpMethod.new('PUT')
          end

          def PermittedHttpMethod.delete
            @@_delete ||= PermittedHttpMethod.new('DELETE')
          end

          def PermittedHttpMethod.patch
            @@_patch ||= PermittedHttpMethod.new('PATCH')
          end

          def to_hash
            value
          end

        end

        class PhysicalDeliverySpecialSerivce

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of PhysicalDeliverySpecialSerivce for this value, creating a new instance for an unknown value
          def PhysicalDeliverySpecialSerivce.apply(value)
            if value.instance_of?(PhysicalDeliverySpecialSerivce)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || PhysicalDeliverySpecialSerivce.new(value))
            end
          end

          # Returns the instance of PhysicalDeliverySpecialSerivce for this value, or nil if not found
          def PhysicalDeliverySpecialSerivce.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            PhysicalDeliverySpecialSerivce.ALL.find { |v| v.value == value }
          end

          def PhysicalDeliverySpecialSerivce.ALL
            @@all ||= [PhysicalDeliverySpecialSerivce.cold_storage, PhysicalDeliverySpecialSerivce.hazardous, PhysicalDeliverySpecialSerivce.perishable]
          end

          def PhysicalDeliverySpecialSerivce.cold_storage
            @@_cold_storage ||= PhysicalDeliverySpecialSerivce.new('cold_storage')
          end

          def PhysicalDeliverySpecialSerivce.hazardous
            @@_hazardous ||= PhysicalDeliverySpecialSerivce.new('hazardous')
          end

          def PhysicalDeliverySpecialSerivce.perishable
            @@_perishable ||= PhysicalDeliverySpecialSerivce.new('perishable')
          end

          def to_hash
            value
          end

        end

        class PostalType

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of PostalType for this value, creating a new instance for an unknown value
          def PostalType.apply(value)
            if value.instance_of?(PostalType)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || PostalType.new(value))
            end
          end

          # Returns the instance of PostalType for this value, or nil if not found
          def PostalType.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            PostalType.ALL.find { |v| v.value == value }
          end

          def PostalType.ALL
            @@all ||= [PostalType.eircode, PostalType.pin, PostalType.postal, PostalType.zip]
          end

          def PostalType.eircode
            @@_eircode ||= PostalType.new('eircode')
          end

          def PostalType.pin
            @@_pin ||= PostalType.new('pin')
          end

          def PostalType.postal
            @@_postal ||= PostalType.new('postal')
          end

          def PostalType.zip
            @@_zip ||= PostalType.new('zip')
          end

          def to_hash
            value
          end

        end

        class PriceAccuracy

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of PriceAccuracy for this value, creating a new instance for an unknown value
          def PriceAccuracy.apply(value)
            if value.instance_of?(PriceAccuracy)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || PriceAccuracy.new(value))
            end
          end

          # Returns the instance of PriceAccuracy for this value, or nil if not found
          def PriceAccuracy.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            PriceAccuracy.ALL.find { |v| v.value == value }
          end

          def PriceAccuracy.ALL
            @@all ||= [PriceAccuracy.calculated, PriceAccuracy.estimated_from_partial_destination]
          end

          # The price shown is accurate and will not change unless information already
          # provided also changes.
          def PriceAccuracy.calculated
            @@_calculated ||= PriceAccuracy.new('calculated')
          end

          # The price shown is based on the best information provided; given a more
          # precise address, the price may change.
          def PriceAccuracy.estimated_from_partial_destination
            @@_estimated_from_partial_destination ||= PriceAccuracy.new('estimated_from_partial_destination')
          end

          def to_hash
            value
          end

        end

        class PriceBookStatus

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of PriceBookStatus for this value, creating a new instance for an unknown value
          def PriceBookStatus.apply(value)
            if value.instance_of?(PriceBookStatus)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || PriceBookStatus.new(value))
            end
          end

          # Returns the instance of PriceBookStatus for this value, or nil if not found
          def PriceBookStatus.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            PriceBookStatus.ALL.find { |v| v.value == value }
          end

          def PriceBookStatus.ALL
            @@all ||= [PriceBookStatus.draft, PriceBookStatus.published, PriceBookStatus.archived]
          end

          def PriceBookStatus.draft
            @@_draft ||= PriceBookStatus.new('draft')
          end

          def PriceBookStatus.published
            @@_published ||= PriceBookStatus.new('published')
          end

          def PriceBookStatus.archived
            @@_archived ||= PriceBookStatus.new('archived')
          end

          def to_hash
            value
          end

        end

        class PriceDetailComponentKey

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of PriceDetailComponentKey for this value, creating a new instance for an unknown value
          def PriceDetailComponentKey.apply(value)
            if value.instance_of?(PriceDetailComponentKey)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || PriceDetailComponentKey.new(value))
            end
          end

          # Returns the instance of PriceDetailComponentKey for this value, or nil if not found
          def PriceDetailComponentKey.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            PriceDetailComponentKey.ALL.find { |v| v.value == value }
          end

          def PriceDetailComponentKey.ALL
            @@all ||= [PriceDetailComponentKey.base_price, PriceDetailComponentKey.discount, PriceDetailComponentKey.currency_margin, PriceDetailComponentKey.percent_item_margin, PriceDetailComponentKey.fixed_item_margin, PriceDetailComponentKey.duties_item_price, PriceDetailComponentKey.duties_added_margin, PriceDetailComponentKey.duties_rounding, PriceDetailComponentKey.duties_deminimis, PriceDetailComponentKey.vat_item_price, PriceDetailComponentKey.vat_added_margin, PriceDetailComponentKey.vat_rounding, PriceDetailComponentKey.vat_duties_item_price, PriceDetailComponentKey.vat_duties_added_margin, PriceDetailComponentKey.vat_duties_rounding, PriceDetailComponentKey.vat_deminimis, PriceDetailComponentKey.item_price_percent_sales_margin, PriceDetailComponentKey.margins_percent_sales_margin, PriceDetailComponentKey.rounding_percent_sales_margin, PriceDetailComponentKey.vat_percent_sales_margin, PriceDetailComponentKey.vat_duty_percent_sales_margin, PriceDetailComponentKey.duty_percent_sales_margin]
          end

          # The base price of the item.
          def PriceDetailComponentKey.base_price
            @@_base_price ||= PriceDetailComponentKey.new('base_price')
          end

          # A discount applied to the base price of the item.
          def PriceDetailComponentKey.discount
            @@_discount ||= PriceDetailComponentKey.new('discount')
          end

          # The amount added to the post-discount item price due to FX markup, as
          # configured in the organization's currency settings.
          def PriceDetailComponentKey.currency_margin
            @@_currency_margin ||= PriceDetailComponentKey.new('currency_margin')
          end

          # The amount added to the post-discount item price from a percent item margin.
          # Negative amounts represent discounts.
          def PriceDetailComponentKey.percent_item_margin
            @@_percent_item_margin ||= PriceDetailComponentKey.new('percent_item_margin')
          end

          # The amount added to the post-discount item price from a fixed item margin.
          # Negative amounts represent discounts.
          def PriceDetailComponentKey.fixed_item_margin
            @@_fixed_item_margin ||= PriceDetailComponentKey.new('fixed_item_margin')
          end

          # The duty owed on the post-discount base item price.
          def PriceDetailComponentKey.duties_item_price
            @@_duties_item_price ||= PriceDetailComponentKey.new('duties_item_price')
          end

          # The duty owed on the sum of the currency margin, percent item margin, and
          # fixed item margin.
          def PriceDetailComponentKey.duties_added_margin
            @@_duties_added_margin ||= PriceDetailComponentKey.new('duties_added_margin')
          end

          # The duty owed on any rounding applied to the total item price.
          def PriceDetailComponentKey.duties_rounding
            @@_duties_rounding ||= PriceDetailComponentKey.new('duties_rounding')
          end

          # An adjustment made if the item does not meet the duty de minimis rule.
          def PriceDetailComponentKey.duties_deminimis
            @@_duties_deminimis ||= PriceDetailComponentKey.new('duties_deminimis')
          end

          # The VAT owed on the post-discount base item price.
          def PriceDetailComponentKey.vat_item_price
            @@_vat_item_price ||= PriceDetailComponentKey.new('vat_item_price')
          end

          # The VAT owed on the sum of the currency margin, percent item margin, and fixed
          # item margin.
          def PriceDetailComponentKey.vat_added_margin
            @@_vat_added_margin ||= PriceDetailComponentKey.new('vat_added_margin')
          end

          # The VAT owed on any rounding applied to the total item price.
          def PriceDetailComponentKey.vat_rounding
            @@_vat_rounding ||= PriceDetailComponentKey.new('vat_rounding')
          end

          # The VAT owed on the duty owed on the post-discount base item price.
          def PriceDetailComponentKey.vat_duties_item_price
            @@_vat_duties_item_price ||= PriceDetailComponentKey.new('vat_duties_item_price')
          end

          # The VAT owed on the duty owed on the sum of the currency margin, percent item
          # margin, and fixed item margin.
          def PriceDetailComponentKey.vat_duties_added_margin
            @@_vat_duties_added_margin ||= PriceDetailComponentKey.new('vat_duties_added_margin')
          end

          # The VAT owed on the duty owed on any rounding applied to the total item price.
          def PriceDetailComponentKey.vat_duties_rounding
            @@_vat_duties_rounding ||= PriceDetailComponentKey.new('vat_duties_rounding')
          end

          # An adjustment made if the item does not meet the VAT de minimis rule.
          def PriceDetailComponentKey.vat_deminimis
            @@_vat_deminimis ||= PriceDetailComponentKey.new('vat_deminimis')
          end

          # An adjustment made to the item price as a result of a percent sales margin.
          def PriceDetailComponentKey.item_price_percent_sales_margin
            @@_item_price_percent_sales_margin ||= PriceDetailComponentKey.new('item_price_percent_sales_margin')
          end

          # An adjustment made to the item margins as a result of a percent sales margin.
          def PriceDetailComponentKey.margins_percent_sales_margin
            @@_margins_percent_sales_margin ||= PriceDetailComponentKey.new('margins_percent_sales_margin')
          end

          # An adjustment made to rounding as a result of a percent sales margin.
          def PriceDetailComponentKey.rounding_percent_sales_margin
            @@_rounding_percent_sales_margin ||= PriceDetailComponentKey.new('rounding_percent_sales_margin')
          end

          # An adjustment made to VAT owed as a result of a percent sales margin.
          def PriceDetailComponentKey.vat_percent_sales_margin
            @@_vat_percent_sales_margin ||= PriceDetailComponentKey.new('vat_percent_sales_margin')
          end

          # An adjustment made to VAT on duties (e.g. VAT on duties on item price) owed as
          # a result of a percent sales margin.
          def PriceDetailComponentKey.vat_duty_percent_sales_margin
            @@_vat_duty_percent_sales_margin ||= PriceDetailComponentKey.new('vat_duty_percent_sales_margin')
          end

          # An adjustment made to duty owed as a result of a percent sales margin.
          def PriceDetailComponentKey.duty_percent_sales_margin
            @@_duty_percent_sales_margin ||= PriceDetailComponentKey.new('duty_percent_sales_margin')
          end

          def to_hash
            value
          end

        end

        class PriceDetailKey

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of PriceDetailKey for this value, creating a new instance for an unknown value
          def PriceDetailKey.apply(value)
            if value.instance_of?(PriceDetailKey)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || PriceDetailKey.new(value))
            end
          end

          # Returns the instance of PriceDetailKey for this value, or nil if not found
          def PriceDetailKey.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            PriceDetailKey.ALL.find { |v| v.value == value }
          end

          def PriceDetailKey.ALL
            @@all ||= [PriceDetailKey.item_price, PriceDetailKey.margins, PriceDetailKey.vat, PriceDetailKey.duty, PriceDetailKey.rounding, PriceDetailKey.adjustment]
          end

          # The details of the item price.
          def PriceDetailKey.item_price
            @@_item_price ||= PriceDetailKey.new('item_price')
          end

          # The details of any margins added to the item price.
          def PriceDetailKey.margins
            @@_margins ||= PriceDetailKey.new('margins')
          end

          # The details of any VAT owed on the item.
          def PriceDetailKey.vat
            @@_vat ||= PriceDetailKey.new('vat')
          end

          # The details of any duties owed on the item.
          def PriceDetailKey.duty
            @@_duty ||= PriceDetailKey.new('duty')
          end

          # The details of any rounding added to the item.
          def PriceDetailKey.rounding
            @@_rounding ||= PriceDetailKey.new('rounding')
          end

          # The details of any price adjustments due to sales margins. A negative value
          # indicates a discount.
          def PriceDetailKey.adjustment
            @@_adjustment ||= PriceDetailKey.new('adjustment')
          end

          def to_hash
            value
          end

        end

        class PriceFacetBoundary

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of PriceFacetBoundary for this value, creating a new instance for an unknown value
          def PriceFacetBoundary.apply(value)
            if value.instance_of?(PriceFacetBoundary)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || PriceFacetBoundary.new(value))
            end
          end

          # Returns the instance of PriceFacetBoundary for this value, or nil if not found
          def PriceFacetBoundary.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            PriceFacetBoundary.ALL.find { |v| v.value == value }
          end

          def PriceFacetBoundary.ALL
            @@all ||= [PriceFacetBoundary.min, PriceFacetBoundary.max]
          end

          def PriceFacetBoundary.min
            @@_min ||= PriceFacetBoundary.new('min')
          end

          def PriceFacetBoundary.max
            @@_max ||= PriceFacetBoundary.new('max')
          end

          def to_hash
            value
          end

        end

        class PricingLevySetting

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of PricingLevySetting for this value, creating a new instance for an unknown value
          def PricingLevySetting.apply(value)
            if value.instance_of?(PricingLevySetting)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || PricingLevySetting.new(value))
            end
          end

          # Returns the instance of PricingLevySetting for this value, or nil if not found
          def PricingLevySetting.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            PricingLevySetting.ALL.find { |v| v.value == value }
          end

          def PricingLevySetting.ALL
            @@all ||= [PricingLevySetting.included, PricingLevySetting.displayed, PricingLevySetting.ignored]
          end

          def PricingLevySetting.included
            @@_included ||= PricingLevySetting.new('included')
          end

          def PricingLevySetting.displayed
            @@_displayed ||= PricingLevySetting.new('displayed')
          end

          def PricingLevySetting.ignored
            @@_ignored ||= PricingLevySetting.new('ignored')
          end

          def to_hash
            value
          end

        end

        class PromotionTriggerType

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of PromotionTriggerType for this value, creating a new instance for an unknown value
          def PromotionTriggerType.apply(value)
            if value.instance_of?(PromotionTriggerType)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || PromotionTriggerType.new(value))
            end
          end

          # Returns the instance of PromotionTriggerType for this value, or nil if not found
          def PromotionTriggerType.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            PromotionTriggerType.ALL.find { |v| v.value == value }
          end

          def PromotionTriggerType.ALL
            @@all ||= [PromotionTriggerType.automatic, PromotionTriggerType.order_subtotal]
          end

          # Automatic indicates the the promotion will be automatically applied to the
          # order
          def PromotionTriggerType.automatic
            @@_automatic ||= PromotionTriggerType.new('automatic')
          end

          # Order subtotal sets a minimum value - orders whose subtotal is greater than
          # the minimum will have the promotion applied. A common use case is to offer
          # free shipping to orders about 150 CAD.
          def PromotionTriggerType.order_subtotal
            @@_order_subtotal ||= PromotionTriggerType.new('order_subtotal')
          end

          def to_hash
            value
          end

        end

        class ProvinceType

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of ProvinceType for this value, creating a new instance for an unknown value
          def ProvinceType.apply(value)
            if value.instance_of?(ProvinceType)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || ProvinceType.new(value))
            end
          end

          # Returns the instance of ProvinceType for this value, or nil if not found
          def ProvinceType.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            ProvinceType.ALL.find { |v| v.value == value }
          end

          def ProvinceType.ALL
            @@all ||= [ProvinceType.area, ProvinceType.city, ProvinceType.county, ProvinceType.department, ProvinceType.dependency, ProvinceType.district, ProvinceType.do_si, ProvinceType.emirate, ProvinceType.entity, ProvinceType.island, ProvinceType.municipality, ProvinceType.oblast, ProvinceType.outlying_area, ProvinceType.parish, ProvinceType.prefecture, ProvinceType.province, ProvinceType.state, ProvinceType.territory, ProvinceType.other]
          end

          def ProvinceType.area
            @@_area ||= ProvinceType.new('area')
          end

          def ProvinceType.city
            @@_city ||= ProvinceType.new('city')
          end

          def ProvinceType.county
            @@_county ||= ProvinceType.new('county')
          end

          def ProvinceType.department
            @@_department ||= ProvinceType.new('department')
          end

          def ProvinceType.dependency
            @@_dependency ||= ProvinceType.new('dependency')
          end

          def ProvinceType.district
            @@_district ||= ProvinceType.new('district')
          end

          def ProvinceType.do_si
            @@_do_si ||= ProvinceType.new('do_si')
          end

          def ProvinceType.emirate
            @@_emirate ||= ProvinceType.new('emirate')
          end

          def ProvinceType.entity
            @@_entity ||= ProvinceType.new('entity')
          end

          def ProvinceType.island
            @@_island ||= ProvinceType.new('island')
          end

          def ProvinceType.municipality
            @@_municipality ||= ProvinceType.new('municipality')
          end

          def ProvinceType.oblast
            @@_oblast ||= ProvinceType.new('oblast')
          end

          def ProvinceType.outlying_area
            @@_outlying_area ||= ProvinceType.new('outlying_area')
          end

          def ProvinceType.parish
            @@_parish ||= ProvinceType.new('parish')
          end

          def ProvinceType.prefecture
            @@_prefecture ||= ProvinceType.new('prefecture')
          end

          def ProvinceType.province
            @@_province ||= ProvinceType.new('province')
          end

          def ProvinceType.state
            @@_state ||= ProvinceType.new('state')
          end

          def ProvinceType.territory
            @@_territory ||= ProvinceType.new('territory')
          end

          def ProvinceType.other
            @@_other ||= ProvinceType.new('other')
          end

          def to_hash
            value
          end

        end

        class QuoteErrorCode

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of QuoteErrorCode for this value, creating a new instance for an unknown value
          def QuoteErrorCode.apply(value)
            if value.instance_of?(QuoteErrorCode)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || QuoteErrorCode.new(value))
            end
          end

          # Returns the instance of QuoteErrorCode for this value, or nil if not found
          def QuoteErrorCode.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            QuoteErrorCode.ALL.find { |v| v.value == value }
          end

          def QuoteErrorCode.ALL
            @@all ||= [QuoteErrorCode.generic_error, QuoteErrorCode.items_not_available, QuoteErrorCode.shipping_unavailable]
          end

          def QuoteErrorCode.generic_error
            @@_generic_error ||= QuoteErrorCode.new('generic_error')
          end

          # Item numbers are not available in inventory
          def QuoteErrorCode.items_not_available
            @@_items_not_available ||= QuoteErrorCode.new('items_not_available')
          end

          # Indicates that an order was created for a destination country to which you
          # have no shipping lanes.
          def QuoteErrorCode.shipping_unavailable
            @@_shipping_unavailable ||= QuoteErrorCode.new('shipping_unavailable')
          end

          def to_hash
            value
          end

        end

        class RatecardOwner

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of RatecardOwner for this value, creating a new instance for an unknown value
          def RatecardOwner.apply(value)
            if value.instance_of?(RatecardOwner)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || RatecardOwner.new(value))
            end
          end

          # Returns the instance of RatecardOwner for this value, or nil if not found
          def RatecardOwner.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            RatecardOwner.ALL.find { |v| v.value == value }
          end

          def RatecardOwner.ALL
            @@all ||= [RatecardOwner.flow, RatecardOwner.organization]
          end

          def RatecardOwner.flow
            @@_flow ||= RatecardOwner.new('flow')
          end

          def RatecardOwner.organization
            @@_organization ||= RatecardOwner.new('organization')
          end

          def to_hash
            value
          end

        end

        class RefundDeclineCode

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of RefundDeclineCode for this value, creating a new instance for an unknown value
          def RefundDeclineCode.apply(value)
            if value.instance_of?(RefundDeclineCode)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || RefundDeclineCode.new(value))
            end
          end

          # Returns the instance of RefundDeclineCode for this value, or nil if not found
          def RefundDeclineCode.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            RefundDeclineCode.ALL.find { |v| v.value == value }
          end

          def RefundDeclineCode.ALL
            @@all ||= [RefundDeclineCode.expired, RefundDeclineCode.insufficient_funds, RefundDeclineCode.unknown]
          end

          # All associated payment captures have expired; refunds can no longer be issued
          def RefundDeclineCode.expired
            @@_expired ||= RefundDeclineCode.new('expired')
          end

          # The requested refund amount exceeded the amount of remaining unrefunded funds
          def RefundDeclineCode.insufficient_funds
            @@_insufficient_funds ||= RefundDeclineCode.new('insufficient_funds')
          end

          # Failed due to another reason (details not known)
          def RefundDeclineCode.unknown
            @@_unknown ||= RefundDeclineCode.new('unknown')
          end

          def to_hash
            value
          end

        end

        class RefundStatus

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of RefundStatus for this value, creating a new instance for an unknown value
          def RefundStatus.apply(value)
            if value.instance_of?(RefundStatus)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || RefundStatus.new(value))
            end
          end

          # Returns the instance of RefundStatus for this value, or nil if not found
          def RefundStatus.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            RefundStatus.ALL.find { |v| v.value == value }
          end

          def RefundStatus.ALL
            @@all ||= [RefundStatus.pending, RefundStatus.succeeded, RefundStatus.failed, RefundStatus.canceled]
          end

          # The refund has been initiated and requires time to complete.
          def RefundStatus.pending
            @@_pending ||= RefundStatus.new('pending')
          end

          # The refund has been processed successfully.
          def RefundStatus.succeeded
            @@_succeeded ||= RefundStatus.new('succeeded')
          end

          # The refund failed to process.
          def RefundStatus.failed
            @@_failed ||= RefundStatus.new('failed')
          end

          # The refund was canceled.
          def RefundStatus.canceled
            @@_canceled ||= RefundStatus.new('canceled')
          end

          def to_hash
            value
          end

        end

        class ReturnItemStatus

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of ReturnItemStatus for this value, creating a new instance for an unknown value
          def ReturnItemStatus.apply(value)
            if value.instance_of?(ReturnItemStatus)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || ReturnItemStatus.new(value))
            end
          end

          # Returns the instance of ReturnItemStatus for this value, or nil if not found
          def ReturnItemStatus.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            ReturnItemStatus.ALL.find { |v| v.value == value }
          end

          def ReturnItemStatus.ALL
            @@all ||= [ReturnItemStatus.returnable, ReturnItemStatus.non_returnable]
          end

          # The item in the catalog can be returned
          def ReturnItemStatus.returnable
            @@_returnable ||= ReturnItemStatus.new('returnable')
          end

          # The item in the catalog cannot be returned
          def ReturnItemStatus.non_returnable
            @@_non_returnable ||= ReturnItemStatus.new('non-returnable')
          end

          def to_hash
            value
          end

        end

        class ReturnPolicyState

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of ReturnPolicyState for this value, creating a new instance for an unknown value
          def ReturnPolicyState.apply(value)
            if value.instance_of?(ReturnPolicyState)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || ReturnPolicyState.new(value))
            end
          end

          # Returns the instance of ReturnPolicyState for this value, or nil if not found
          def ReturnPolicyState.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            ReturnPolicyState.ALL.find { |v| v.value == value }
          end

          def ReturnPolicyState.ALL
            @@all ||= [ReturnPolicyState.current, ReturnPolicyState.deleting, ReturnPolicyState.updating]
          end

          def ReturnPolicyState.current
            @@_current ||= ReturnPolicyState.new('current')
          end

          def ReturnPolicyState.deleting
            @@_deleting ||= ReturnPolicyState.new('deleting')
          end

          def ReturnPolicyState.updating
            @@_updating ||= ReturnPolicyState.new('updating')
          end

          def to_hash
            value
          end

        end

        class ReturnStatus

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of ReturnStatus for this value, creating a new instance for an unknown value
          def ReturnStatus.apply(value)
            if value.instance_of?(ReturnStatus)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || ReturnStatus.new(value))
            end
          end

          # Returns the instance of ReturnStatus for this value, or nil if not found
          def ReturnStatus.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            ReturnStatus.ALL.find { |v| v.value == value }
          end

          def ReturnStatus.ALL
            @@all ||= [ReturnStatus.open, ReturnStatus.refunded]
          end

          def ReturnStatus.open
            @@_open ||= ReturnStatus.new('open')
          end

          def ReturnStatus.refunded
            @@_refunded ||= ReturnStatus.new('refunded')
          end

          def to_hash
            value
          end

        end

        class ReturnTrackingStatus

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of ReturnTrackingStatus for this value, creating a new instance for an unknown value
          def ReturnTrackingStatus.apply(value)
            if value.instance_of?(ReturnTrackingStatus)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || ReturnTrackingStatus.new(value))
            end
          end

          # Returns the instance of ReturnTrackingStatus for this value, or nil if not found
          def ReturnTrackingStatus.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            ReturnTrackingStatus.ALL.find { |v| v.value == value }
          end

          def ReturnTrackingStatus.ALL
            @@all ||= [ReturnTrackingStatus.awaiting_customs_clearance, ReturnTrackingStatus.cancel_requested, ReturnTrackingStatus.canceled, ReturnTrackingStatus.collection_attempt_failed, ReturnTrackingStatus.customs_clearance_completed, ReturnTrackingStatus.delivered_to_retailer, ReturnTrackingStatus.in_transit_to_local_hub, ReturnTrackingStatus.in_transit_to_retailer, ReturnTrackingStatus.parcel_added_to_pallet, ReturnTrackingStatus.parcel_delayed, ReturnTrackingStatus.parcel_extracted_from_pallet, ReturnTrackingStatus.parcel_lost, ReturnTrackingStatus.parcel_processed_by_retailer, ReturnTrackingStatus.parcel_under_investigation, ReturnTrackingStatus.processed_by_local_hub, ReturnTrackingStatus.received_at_local_hub, ReturnTrackingStatus.received_by_the_carrier, ReturnTrackingStatus.return_registered_online]
          end

          def ReturnTrackingStatus.awaiting_customs_clearance
            @@_awaiting_customs_clearance ||= ReturnTrackingStatus.new('awaiting_customs_clearance')
          end

          def ReturnTrackingStatus.cancel_requested
            @@_cancel_requested ||= ReturnTrackingStatus.new('cancel_requested')
          end

          def ReturnTrackingStatus.canceled
            @@_canceled ||= ReturnTrackingStatus.new('canceled')
          end

          def ReturnTrackingStatus.collection_attempt_failed
            @@_collection_attempt_failed ||= ReturnTrackingStatus.new('collection_attempt_failed')
          end

          def ReturnTrackingStatus.customs_clearance_completed
            @@_customs_clearance_completed ||= ReturnTrackingStatus.new('customs_clearance_completed')
          end

          def ReturnTrackingStatus.delivered_to_retailer
            @@_delivered_to_retailer ||= ReturnTrackingStatus.new('delivered_to_retailer')
          end

          def ReturnTrackingStatus.in_transit_to_local_hub
            @@_in_transit_to_local_hub ||= ReturnTrackingStatus.new('in_transit_to_local_hub')
          end

          def ReturnTrackingStatus.in_transit_to_retailer
            @@_in_transit_to_retailer ||= ReturnTrackingStatus.new('in_transit_to_retailer')
          end

          def ReturnTrackingStatus.parcel_added_to_pallet
            @@_parcel_added_to_pallet ||= ReturnTrackingStatus.new('parcel_added_to_pallet')
          end

          def ReturnTrackingStatus.parcel_delayed
            @@_parcel_delayed ||= ReturnTrackingStatus.new('parcel_delayed')
          end

          def ReturnTrackingStatus.parcel_extracted_from_pallet
            @@_parcel_extracted_from_pallet ||= ReturnTrackingStatus.new('parcel_extracted_from_pallet')
          end

          def ReturnTrackingStatus.parcel_lost
            @@_parcel_lost ||= ReturnTrackingStatus.new('parcel_lost')
          end

          def ReturnTrackingStatus.parcel_processed_by_retailer
            @@_parcel_processed_by_retailer ||= ReturnTrackingStatus.new('parcel_processed_by_retailer')
          end

          def ReturnTrackingStatus.parcel_under_investigation
            @@_parcel_under_investigation ||= ReturnTrackingStatus.new('parcel_under_investigation')
          end

          def ReturnTrackingStatus.processed_by_local_hub
            @@_processed_by_local_hub ||= ReturnTrackingStatus.new('processed_by_local_hub')
          end

          def ReturnTrackingStatus.received_at_local_hub
            @@_received_at_local_hub ||= ReturnTrackingStatus.new('received_at_local_hub')
          end

          def ReturnTrackingStatus.received_by_the_carrier
            @@_received_by_the_carrier ||= ReturnTrackingStatus.new('received_by_the_carrier')
          end

          def ReturnTrackingStatus.return_registered_online
            @@_return_registered_online ||= ReturnTrackingStatus.new('return_registered_online')
          end

          def to_hash
            value
          end

        end

        class ReversalErrorCode

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of ReversalErrorCode for this value, creating a new instance for an unknown value
          def ReversalErrorCode.apply(value)
            if value.instance_of?(ReversalErrorCode)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || ReversalErrorCode.new(value))
            end
          end

          # Returns the instance of ReversalErrorCode for this value, or nil if not found
          def ReversalErrorCode.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            ReversalErrorCode.ALL.find { |v| v.value == value }
          end

          def ReversalErrorCode.ALL
            @@all ||= [ReversalErrorCode.amount_exceeds_balance, ReversalErrorCode.authorization_declined, ReversalErrorCode.authorization_expired, ReversalErrorCode.invalid_authorization, ReversalErrorCode.invalid_key, ReversalErrorCode.invalid_amount, ReversalErrorCode.invalid_currency, ReversalErrorCode.no_remaining_balance, ReversalErrorCode.partial_reversal_not_supported, ReversalErrorCode.unknown]
          end

          # Amount specified exceeds the remaining authorization balance.
          def ReversalErrorCode.amount_exceeds_balance
            @@_amount_exceeds_balance ||= ReversalErrorCode.new('amount_exceeds_balance')
          end

          # The authorization was initially declined; there is nothing to reverse.
          def ReversalErrorCode.authorization_declined
            @@_authorization_declined ||= ReversalErrorCode.new('authorization_declined')
          end

          # The authorization has expired and can no longer be reversed.
          def ReversalErrorCode.authorization_expired
            @@_authorization_expired ||= ReversalErrorCode.new('authorization_expired')
          end

          # The authorization was not found.
          def ReversalErrorCode.invalid_authorization
            @@_invalid_authorization ||= ReversalErrorCode.new('invalid_authorization')
          end

          # Invalid key
          def ReversalErrorCode.invalid_key
            @@_invalid_key ||= ReversalErrorCode.new('invalid_key')
          end

          # Amount is not valid - usually because amount was <= 0
          def ReversalErrorCode.invalid_amount
            @@_invalid_amount ||= ReversalErrorCode.new('invalid_amount')
          end

          # Currency is either not known or invalid
          def ReversalErrorCode.invalid_currency
            @@_invalid_currency ||= ReversalErrorCode.new('invalid_currency')
          end

          # The authorization has already been fully captured and/or reversed - there are
          # no additional funds to reverse.
          def ReversalErrorCode.no_remaining_balance
            @@_no_remaining_balance ||= ReversalErrorCode.new('no_remaining_balance')
          end

          # Indicates a request for a partial reversal when the underlying processor does
          # not support it
          def ReversalErrorCode.partial_reversal_not_supported
            @@_partial_reversal_not_supported ||= ReversalErrorCode.new('partial_reversal_not_supported')
          end

          # Unknown or other
          def ReversalErrorCode.unknown
            @@_unknown ||= ReversalErrorCode.new('unknown')
          end

          def to_hash
            value
          end

        end

        class ReversalStatus

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of ReversalStatus for this value, creating a new instance for an unknown value
          def ReversalStatus.apply(value)
            if value.instance_of?(ReversalStatus)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || ReversalStatus.new(value))
            end
          end

          # Returns the instance of ReversalStatus for this value, or nil if not found
          def ReversalStatus.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            ReversalStatus.ALL.find { |v| v.value == value }
          end

          def ReversalStatus.ALL
            @@all ||= [ReversalStatus.pending, ReversalStatus.processed, ReversalStatus.failed]
          end

          # Reversal is pending processing.
          def ReversalStatus.pending
            @@_pending ||= ReversalStatus.new('pending')
          end

          # Reversal has been processed successfully.
          def ReversalStatus.processed
            @@_processed ||= ReversalStatus.new('processed')
          end

          # Reversal failed to process.
          def ReversalStatus.failed
            @@_failed ||= ReversalStatus.new('failed')
          end

          def to_hash
            value
          end

        end

        class Role

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of Role for this value, creating a new instance for an unknown value
          def Role.apply(value)
            if value.instance_of?(Role)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || Role.new(value))
            end
          end

          # Returns the instance of Role for this value, or nil if not found
          def Role.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            Role.ALL.find { |v| v.value == value }
          end

          def Role.ALL
            @@all ||= [Role.admin, Role.member]
          end

          def Role.admin
            @@_admin ||= Role.new('admin')
          end

          def Role.member
            @@_member ||= Role.new('member')
          end

          def to_hash
            value
          end

        end

        class RoundingMethod

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of RoundingMethod for this value, creating a new instance for an unknown value
          def RoundingMethod.apply(value)
            if value.instance_of?(RoundingMethod)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || RoundingMethod.new(value))
            end
          end

          # Returns the instance of RoundingMethod for this value, or nil if not found
          def RoundingMethod.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            RoundingMethod.ALL.find { |v| v.value == value }
          end

          def RoundingMethod.ALL
            @@all ||= [RoundingMethod.up, RoundingMethod.down, RoundingMethod.nearest]
          end

          # Round up to the specified rounding.value
          def RoundingMethod.up
            @@_up ||= RoundingMethod.new('up')
          end

          # Round down to the specified rounding.value
          def RoundingMethod.down
            @@_down ||= RoundingMethod.new('down')
          end

          # Round to the nearest specified rounding.value. If equidistant, will round up.
          def RoundingMethod.nearest
            @@_nearest ||= RoundingMethod.new('nearest')
          end

          def to_hash
            value
          end

        end

        class RoundingType

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of RoundingType for this value, creating a new instance for an unknown value
          def RoundingType.apply(value)
            if value.instance_of?(RoundingType)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || RoundingType.new(value))
            end
          end

          # Returns the instance of RoundingType for this value, or nil if not found
          def RoundingType.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            RoundingType.ALL.find { |v| v.value == value }
          end

          def RoundingType.ALL
            @@all ||= [RoundingType.pattern, RoundingType.multiple]
          end

          # Rounds a value to an amount ending with a pattern, e.g. an amount ending in
          # '.99'.
          def RoundingType.pattern
            @@_pattern ||= RoundingType.new('pattern')
          end

          # Rounds a value to an amount that is the multiple of a value, e.g. rounding to
          # the nearest 5 would ensure that the resulting number ends in either 0 or 5.
          def RoundingType.multiple
            @@_multiple ||= RoundingType.new('multiple')
          end

          def to_hash
            value
          end

        end

        class ScheduleExceptionStatus

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of ScheduleExceptionStatus for this value, creating a new instance for an unknown value
          def ScheduleExceptionStatus.apply(value)
            if value.instance_of?(ScheduleExceptionStatus)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || ScheduleExceptionStatus.new(value))
            end
          end

          # Returns the instance of ScheduleExceptionStatus for this value, or nil if not found
          def ScheduleExceptionStatus.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            ScheduleExceptionStatus.ALL.find { |v| v.value == value }
          end

          def ScheduleExceptionStatus.ALL
            @@all ||= [ScheduleExceptionStatus.open, ScheduleExceptionStatus.closed]
          end

          def ScheduleExceptionStatus.open
            @@_open ||= ScheduleExceptionStatus.new('Open')
          end

          def ScheduleExceptionStatus.closed
            @@_closed ||= ScheduleExceptionStatus.new('Closed')
          end

          def to_hash
            value
          end

        end

        class ShipmentIntegrationType

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of ShipmentIntegrationType for this value, creating a new instance for an unknown value
          def ShipmentIntegrationType.apply(value)
            if value.instance_of?(ShipmentIntegrationType)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || ShipmentIntegrationType.new(value))
            end
          end

          # Returns the instance of ShipmentIntegrationType for this value, or nil if not found
          def ShipmentIntegrationType.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            ShipmentIntegrationType.ALL.find { |v| v.value == value }
          end

          def ShipmentIntegrationType.ALL
            @@all ||= [ShipmentIntegrationType.direct, ShipmentIntegrationType.information, ShipmentIntegrationType.preadvice]
          end

          # Always generate a label for the chosen delivery option.
          def ShipmentIntegrationType.direct
            @@_direct ||= ShipmentIntegrationType.new('direct')
          end

          # Booking and label generation is not available. Just use Flow to calculate
          # delivery window estimates and shipment prices to display.
          def ShipmentIntegrationType.information
            @@_information ||= ShipmentIntegrationType.new('information')
          end

          # A generic label will be provided by the client organization when available as
          # pre-advice shipment notification to carrier partner.
          def ShipmentIntegrationType.preadvice
            @@_preadvice ||= ShipmentIntegrationType.new('preadvice')
          end

          def to_hash
            value
          end

        end

        class ShipmentRecipient

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of ShipmentRecipient for this value, creating a new instance for an unknown value
          def ShipmentRecipient.apply(value)
            if value.instance_of?(ShipmentRecipient)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || ShipmentRecipient.new(value))
            end
          end

          # Returns the instance of ShipmentRecipient for this value, or nil if not found
          def ShipmentRecipient.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            ShipmentRecipient.ALL.find { |v| v.value == value }
          end

          def ShipmentRecipient.ALL
            @@all ||= [ShipmentRecipient.customer, ShipmentRecipient.return, ShipmentRecipient.crossdock]
          end

          # Outbound shipment to the customer
          def ShipmentRecipient.customer
            @@_customer ||= ShipmentRecipient.new('customer')
          end

          # Inbound or return shipment
          def ShipmentRecipient.return
            @@_return ||= ShipmentRecipient.new('return')
          end

          # Outbound shipment to a crossdock
          def ShipmentRecipient.crossdock
            @@_crossdock ||= ShipmentRecipient.new('crossdock')
          end

          def to_hash
            value
          end

        end

        class ShippingConfigurationType

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of ShippingConfigurationType for this value, creating a new instance for an unknown value
          def ShippingConfigurationType.apply(value)
            if value.instance_of?(ShippingConfigurationType)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || ShippingConfigurationType.new(value))
            end
          end

          # Returns the instance of ShippingConfigurationType for this value, or nil if not found
          def ShippingConfigurationType.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            ShippingConfigurationType.ALL.find { |v| v.value == value }
          end

          def ShippingConfigurationType.ALL
            @@all ||= [ShippingConfigurationType.default, ShippingConfigurationType.variant]
          end

          def ShippingConfigurationType.default
            @@_default ||= ShippingConfigurationType.new('default')
          end

          def ShippingConfigurationType.variant
            @@_variant ||= ShippingConfigurationType.new('variant')
          end

          def to_hash
            value
          end

        end

        class ShopifyGrant

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of ShopifyGrant for this value, creating a new instance for an unknown value
          def ShopifyGrant.apply(value)
            if value.instance_of?(ShopifyGrant)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || ShopifyGrant.new(value))
            end
          end

          # Returns the instance of ShopifyGrant for this value, or nil if not found
          def ShopifyGrant.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            ShopifyGrant.ALL.find { |v| v.value == value }
          end

          def ShopifyGrant.ALL
            @@all ||= [ShopifyGrant.customer, ShopifyGrant.discount, ShopifyGrant.gift_card, ShopifyGrant.metafield, ShopifyGrant.order]
          end

          # Access to /admin/customers.json
          def ShopifyGrant.customer
            @@_customer ||= ShopifyGrant.new('customer')
          end

          # Access to /admin/price_rules/:id/discount_codes.json
          def ShopifyGrant.discount
            @@_discount ||= ShopifyGrant.new('discount')
          end

          # Access to /admin/gift_cards.json
          def ShopifyGrant.gift_card
            @@_gift_card ||= ShopifyGrant.new('gift_card')
          end

          # Access to /admin/variants/:id/metafields.json
          def ShopifyGrant.metafield
            @@_metafield ||= ShopifyGrant.new('metafield')
          end

          # Access to /admin/orders/:id/metafields.json
          def ShopifyGrant.order
            @@_order ||= ShopifyGrant.new('order')
          end

          def to_hash
            value
          end

        end

        class ShopifyLocalizationMethod

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of ShopifyLocalizationMethod for this value, creating a new instance for an unknown value
          def ShopifyLocalizationMethod.apply(value)
            if value.instance_of?(ShopifyLocalizationMethod)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || ShopifyLocalizationMethod.new(value))
            end
          end

          # Returns the instance of ShopifyLocalizationMethod for this value, or nil if not found
          def ShopifyLocalizationMethod.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            ShopifyLocalizationMethod.ALL.find { |v| v.value == value }
          end

          def ShopifyLocalizationMethod.ALL
            @@all ||= [ShopifyLocalizationMethod.api, ShopifyLocalizationMethod.ssr]
          end

          # Indicates localization should be achieved via the API.
          def ShopifyLocalizationMethod.api
            @@_api ||= ShopifyLocalizationMethod.new('api')
          end

          # Indicates localization should be achieved via server side rendering. For
          # example, using variant metafields.
          def ShopifyLocalizationMethod.ssr
            @@_ssr ||= ShopifyLocalizationMethod.new('ssr')
          end

          def to_hash
            value
          end

        end

        class ShopifySyncCheck

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of ShopifySyncCheck for this value, creating a new instance for an unknown value
          def ShopifySyncCheck.apply(value)
            if value.instance_of?(ShopifySyncCheck)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || ShopifySyncCheck.new(value))
            end
          end

          # Returns the instance of ShopifySyncCheck for this value, or nil if not found
          def ShopifySyncCheck.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            ShopifySyncCheck.ALL.find { |v| v.value == value }
          end

          def ShopifySyncCheck.ALL
            @@all ||= [ShopifySyncCheck.localized_variants, ShopifySyncCheck.flow_variant_metafields]
          end

          # Provides status check of localized variant metafields sync to Shopify
          def ShopifySyncCheck.localized_variants
            @@_localized_variants ||= ShopifySyncCheck.new('localized_variants')
          end

          # Provides status check of Flow variant metafields sync to Shopify
          def ShopifySyncCheck.flow_variant_metafields
            @@_flow_variant_metafields ||= ShopifySyncCheck.new('flow_variant_metafields')
          end

          def to_hash
            value
          end

        end

        class ShortIdSourceKey

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of ShortIdSourceKey for this value, creating a new instance for an unknown value
          def ShortIdSourceKey.apply(value)
            if value.instance_of?(ShortIdSourceKey)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || ShortIdSourceKey.new(value))
            end
          end

          # Returns the instance of ShortIdSourceKey for this value, or nil if not found
          def ShortIdSourceKey.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            ShortIdSourceKey.ALL.find { |v| v.value == value }
          end

          def ShortIdSourceKey.ALL
            @@all ||= [ShortIdSourceKey.channel, ShortIdSourceKey.organization]
          end

          def ShortIdSourceKey.channel
            @@_channel ||= ShortIdSourceKey.new('channel')
          end

          def ShortIdSourceKey.organization
            @@_organization ||= ShortIdSourceKey.new('organization')
          end

          def to_hash
            value
          end

        end

        class SortDirection

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of SortDirection for this value, creating a new instance for an unknown value
          def SortDirection.apply(value)
            if value.instance_of?(SortDirection)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || SortDirection.new(value))
            end
          end

          # Returns the instance of SortDirection for this value, or nil if not found
          def SortDirection.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            SortDirection.ALL.find { |v| v.value == value }
          end

          def SortDirection.ALL
            @@all ||= [SortDirection.ascending, SortDirection.descending]
          end

          def SortDirection.ascending
            @@_ascending ||= SortDirection.new('ascending')
          end

          def SortDirection.descending
            @@_descending ||= SortDirection.new('descending')
          end

          def to_hash
            value
          end

        end

        class Strategy

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of Strategy for this value, creating a new instance for an unknown value
          def Strategy.apply(value)
            if value.instance_of?(Strategy)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || Strategy.new(value))
            end
          end

          # Returns the instance of Strategy for this value, or nil if not found
          def Strategy.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            Strategy.ALL.find { |v| v.value == value }
          end

          def Strategy.ALL
            @@all ||= [Strategy.range, Strategy.from, Strategy.to]
          end

          # Tightest range
          def Strategy.range
            @@_range ||= Strategy.new('range')
          end

          # Lowest minimum of the ranges
          def Strategy.from
            @@_from ||= Strategy.new('from')
          end

          # Lowest maximum of the ranges
          def Strategy.to
            @@_to ||= Strategy.new('to')
          end

          def to_hash
            value
          end

        end

        class SubcatalogItemStatus

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of SubcatalogItemStatus for this value, creating a new instance for an unknown value
          def SubcatalogItemStatus.apply(value)
            if value.instance_of?(SubcatalogItemStatus)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || SubcatalogItemStatus.new(value))
            end
          end

          # Returns the instance of SubcatalogItemStatus for this value, or nil if not found
          def SubcatalogItemStatus.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            SubcatalogItemStatus.ALL.find { |v| v.value == value }
          end

          def SubcatalogItemStatus.ALL
            @@all ||= [SubcatalogItemStatus.excluded, SubcatalogItemStatus.included, SubcatalogItemStatus.restricted]
          end

          # The user has chosen to exclude the item from the associated subcatalog.
          def SubcatalogItemStatus.excluded
            @@_excluded ||= SubcatalogItemStatus.new('excluded')
          end

          # The item is included in the associated subcatalog.
          def SubcatalogItemStatus.included
            @@_included ||= SubcatalogItemStatus.new('included')
          end

          # Item is not allowed to be sold in the market associated with the given
          # subcatalog.
          def SubcatalogItemStatus.restricted
            @@_restricted ||= SubcatalogItemStatus.new('restricted')
          end

          def to_hash
            value
          end

        end

        class SurchargeResponsibleParty

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of SurchargeResponsibleParty for this value, creating a new instance for an unknown value
          def SurchargeResponsibleParty.apply(value)
            if value.instance_of?(SurchargeResponsibleParty)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || SurchargeResponsibleParty.new(value))
            end
          end

          # Returns the instance of SurchargeResponsibleParty for this value, or nil if not found
          def SurchargeResponsibleParty.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            SurchargeResponsibleParty.ALL.find { |v| v.value == value }
          end

          def SurchargeResponsibleParty.ALL
            @@all ||= [SurchargeResponsibleParty.organization, SurchargeResponsibleParty.customer]
          end

          # The merchant pays for this surcharge
          def SurchargeResponsibleParty.organization
            @@_organization ||= SurchargeResponsibleParty.new('organization')
          end

          # The customer pays for this surcharge
          def SurchargeResponsibleParty.customer
            @@_customer ||= SurchargeResponsibleParty.new('customer')
          end

          def to_hash
            value
          end

        end

        class SyncRecordFailureReason

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of SyncRecordFailureReason for this value, creating a new instance for an unknown value
          def SyncRecordFailureReason.apply(value)
            if value.instance_of?(SyncRecordFailureReason)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || SyncRecordFailureReason.new(value))
            end
          end

          # Returns the instance of SyncRecordFailureReason for this value, or nil if not found
          def SyncRecordFailureReason.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            SyncRecordFailureReason.ALL.find { |v| v.value == value }
          end

          def SyncRecordFailureReason.ALL
            @@all ||= [SyncRecordFailureReason.inventory, SyncRecordFailureReason.address, SyncRecordFailureReason.promotion, SyncRecordFailureReason.other]
          end

          def SyncRecordFailureReason.inventory
            @@_inventory ||= SyncRecordFailureReason.new('inventory')
          end

          def SyncRecordFailureReason.address
            @@_address ||= SyncRecordFailureReason.new('address')
          end

          def SyncRecordFailureReason.promotion
            @@_promotion ||= SyncRecordFailureReason.new('promotion')
          end

          def SyncRecordFailureReason.other
            @@_other ||= SyncRecordFailureReason.new('other')
          end

          def to_hash
            value
          end

        end

        class SyncStreamType

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of SyncStreamType for this value, creating a new instance for an unknown value
          def SyncStreamType.apply(value)
            if value.instance_of?(SyncStreamType)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || SyncStreamType.new(value))
            end
          end

          # Returns the instance of SyncStreamType for this value, or nil if not found
          def SyncStreamType.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            SyncStreamType.ALL.find { |v| v.value == value }
          end

          def SyncStreamType.ALL
            @@all ||= [SyncStreamType.submitted_order, SyncStreamType.placed_order]
          end

          # Represents a sync stream of submitted orders - ie each record reported
          # represents a submitted order
          def SyncStreamType.submitted_order
            @@_submitted_order ||= SyncStreamType.new('submitted_order')
          end

          # Represents a sync stream of placed orders - ie each record reported represents
          # a placed order
          def SyncStreamType.placed_order
            @@_placed_order ||= SyncStreamType.new('placed_order')
          end

          def to_hash
            value
          end

        end

        class SyncUnitOfTime

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of SyncUnitOfTime for this value, creating a new instance for an unknown value
          def SyncUnitOfTime.apply(value)
            if value.instance_of?(SyncUnitOfTime)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || SyncUnitOfTime.new(value))
            end
          end

          # Returns the instance of SyncUnitOfTime for this value, or nil if not found
          def SyncUnitOfTime.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            SyncUnitOfTime.ALL.find { |v| v.value == value }
          end

          def SyncUnitOfTime.ALL
            @@all ||= [SyncUnitOfTime.day, SyncUnitOfTime.hour, SyncUnitOfTime.minute, SyncUnitOfTime.second]
          end

          def SyncUnitOfTime.day
            @@_day ||= SyncUnitOfTime.new('day')
          end

          def SyncUnitOfTime.hour
            @@_hour ||= SyncUnitOfTime.new('hour')
          end

          def SyncUnitOfTime.minute
            @@_minute ||= SyncUnitOfTime.new('minute')
          end

          def SyncUnitOfTime.second
            @@_second ||= SyncUnitOfTime.new('second')
          end

          def to_hash
            value
          end

        end

        class TaxApplicability

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of TaxApplicability for this value, creating a new instance for an unknown value
          def TaxApplicability.apply(value)
            if value.instance_of?(TaxApplicability)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || TaxApplicability.new(value))
            end
          end

          # Returns the instance of TaxApplicability for this value, or nil if not found
          def TaxApplicability.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            TaxApplicability.ALL.find { |v| v.value == value }
          end

          def TaxApplicability.ALL
            @@all ||= [TaxApplicability.none, TaxApplicability.all]
          end

          # In no scenario should a customer pay tax within the Flow system.
          def TaxApplicability.none
            @@_none ||= TaxApplicability.new('none')
          end

          # In all scenarios a customer should pay tax within the Flow system.
          def TaxApplicability.all
            @@_all ||= TaxApplicability.new('all')
          end

          def to_hash
            value
          end

        end

        class TaxDutyCalculatorValidationErrorCode

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of TaxDutyCalculatorValidationErrorCode for this value, creating a new instance for an unknown value
          def TaxDutyCalculatorValidationErrorCode.apply(value)
            if value.instance_of?(TaxDutyCalculatorValidationErrorCode)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || TaxDutyCalculatorValidationErrorCode.new(value))
            end
          end

          # Returns the instance of TaxDutyCalculatorValidationErrorCode for this value, or nil if not found
          def TaxDutyCalculatorValidationErrorCode.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            TaxDutyCalculatorValidationErrorCode.ALL.find { |v| v.value == value }
          end

          def TaxDutyCalculatorValidationErrorCode.ALL
            @@all ||= [TaxDutyCalculatorValidationErrorCode.generic_error, TaxDutyCalculatorValidationErrorCode.destination_country_not_defined, TaxDutyCalculatorValidationErrorCode.destination_address_iso3166_unrecognized, TaxDutyCalculatorValidationErrorCode.line_item_shipfrom_shipto_country_invalid, TaxDutyCalculatorValidationErrorCode.line_item_ship_from_invalid, TaxDutyCalculatorValidationErrorCode.line_item_currency_iso4217_unrecognized, TaxDutyCalculatorValidationErrorCode.line_quantity_invalid, TaxDutyCalculatorValidationErrorCode.line_item_quantity_invalid, TaxDutyCalculatorValidationErrorCode.line_item_unit_price_precision_invalid, TaxDutyCalculatorValidationErrorCode.line_item_unit_price_negative, TaxDutyCalculatorValidationErrorCode.line_item_discount_amount_precision_invalid, TaxDutyCalculatorValidationErrorCode.line_item_discount_amount_positive, TaxDutyCalculatorValidationErrorCode.line_item_country_of_origin_iso3166_unrecognized, TaxDutyCalculatorValidationErrorCode.line_item_hs_code_invalid, TaxDutyCalculatorValidationErrorCode.line_item_duty_provider_invalid, TaxDutyCalculatorValidationErrorCode.shipping_unit_price_precision_invalid, TaxDutyCalculatorValidationErrorCode.shipping_unit_price_negative, TaxDutyCalculatorValidationErrorCode.shipping_discount_amount_precision_invalid, TaxDutyCalculatorValidationErrorCode.shipping_discount_amount_invalid, TaxDutyCalculatorValidationErrorCode.merchant_of_record_invalid, TaxDutyCalculatorValidationErrorCode.wrong_unit_specified]
          end

          def TaxDutyCalculatorValidationErrorCode.generic_error
            @@_generic_error ||= TaxDutyCalculatorValidationErrorCode.new('generic_error')
          end

          # Destination address including at minimum a country must be included to
          # properly generate a tax quote
          def TaxDutyCalculatorValidationErrorCode.destination_country_not_defined
            @@_destination_country_not_defined ||= TaxDutyCalculatorValidationErrorCode.new('destination_country_not_defined')
          end

          # Destination address country is not recognized as a destination country in ISO
          # 3166
          def TaxDutyCalculatorValidationErrorCode.destination_address_iso3166_unrecognized
            @@_destination_address_iso3166_unrecognized ||= TaxDutyCalculatorValidationErrorCode.new('destination_address_iso3166_unrecognized')
          end

          # This is a cross-border calculator. No line's ship from country can be the same
          # as the destination country
          def TaxDutyCalculatorValidationErrorCode.line_item_shipfrom_shipto_country_invalid
            @@_line_item_shipfrom_shipto_country_invalid ||= TaxDutyCalculatorValidationErrorCode.new('line_item_shipfrom_shipto_country_invalid')
          end

          # Every line's ship from address must include a country to properly generate a
          # tax quote
          def TaxDutyCalculatorValidationErrorCode.line_item_ship_from_invalid
            @@_line_item_ship_from_invalid ||= TaxDutyCalculatorValidationErrorCode.new('line_item_ship_from_invalid')
          end

          # Line item provided currency is not recognized as a calculation currency in ISO
          # 4217
          def TaxDutyCalculatorValidationErrorCode.line_item_currency_iso4217_unrecognized
            @@_line_item_currency_iso4217_unrecognized ||= TaxDutyCalculatorValidationErrorCode.new('line_item_currency_iso4217_unrecognized')
          end

          # Order must contain at least one line of ordered goods
          def TaxDutyCalculatorValidationErrorCode.line_quantity_invalid
            @@_line_quantity_invalid ||= TaxDutyCalculatorValidationErrorCode.new('line_quantity_invalid')
          end

          # Line item quantity must be greater than 0
          def TaxDutyCalculatorValidationErrorCode.line_item_quantity_invalid
            @@_line_item_quantity_invalid ||= TaxDutyCalculatorValidationErrorCode.new('line_item_quantity_invalid')
          end

          # Provided value for unit amount is more precise than the maximum allowed for
          # this currency
          def TaxDutyCalculatorValidationErrorCode.line_item_unit_price_precision_invalid
            @@_line_item_unit_price_precision_invalid ||= TaxDutyCalculatorValidationErrorCode.new('line_item_unit_price_precision_invalid')
          end

          # Line Item Unit amount must be greater than or equal to 0
          def TaxDutyCalculatorValidationErrorCode.line_item_unit_price_negative
            @@_line_item_unit_price_negative ||= TaxDutyCalculatorValidationErrorCode.new('line_item_unit_price_negative')
          end

          # Line item Unit discount amount is more precise than the maximum allowed for
          # this currency
          def TaxDutyCalculatorValidationErrorCode.line_item_discount_amount_precision_invalid
            @@_line_item_discount_amount_precision_invalid ||= TaxDutyCalculatorValidationErrorCode.new('line_item_discount_amount_precision_invalid')
          end

          # Line item Unit discount must be less than or equal to 0
          def TaxDutyCalculatorValidationErrorCode.line_item_discount_amount_positive
            @@_line_item_discount_amount_positive ||= TaxDutyCalculatorValidationErrorCode.new('line_item_discount_amount_positive')
          end

          # Line item country of origin is not recognized as a country of origin in ISO
          # 3166
          def TaxDutyCalculatorValidationErrorCode.line_item_country_of_origin_iso3166_unrecognized
            @@_line_item_country_of_origin_iso3166_unrecognized ||= TaxDutyCalculatorValidationErrorCode.new('line_item_country_of_origin_iso3166_unrecognized')
          end

          # Line item does not appear to contain a properly formed hs code. Please provide
          # a 6 digit code or a 4-14 digit code specific to the destination country
          def TaxDutyCalculatorValidationErrorCode.line_item_hs_code_invalid
            @@_line_item_hs_code_invalid ||= TaxDutyCalculatorValidationErrorCode.new('line_item_hs_code_invalid')
          end

          # Line item country of origin and shipto country resulted in inability to
          # calculate duty.
          def TaxDutyCalculatorValidationErrorCode.line_item_duty_provider_invalid
            @@_line_item_duty_provider_invalid ||= TaxDutyCalculatorValidationErrorCode.new('line_item_duty_provider_invalid')
          end

          # Shipping amount is more precise than the maximum allowed for this currency
          def TaxDutyCalculatorValidationErrorCode.shipping_unit_price_precision_invalid
            @@_shipping_unit_price_precision_invalid ||= TaxDutyCalculatorValidationErrorCode.new('shipping_unit_price_precision_invalid')
          end

          # Shipping amount must be greater than or equal to 0
          def TaxDutyCalculatorValidationErrorCode.shipping_unit_price_negative
            @@_shipping_unit_price_negative ||= TaxDutyCalculatorValidationErrorCode.new('shipping_unit_price_negative')
          end

          # Shipping discount amount is more precise than the maximum allowed for this
          # currency
          def TaxDutyCalculatorValidationErrorCode.shipping_discount_amount_precision_invalid
            @@_shipping_discount_amount_precision_invalid ||= TaxDutyCalculatorValidationErrorCode.new('shipping_discount_amount_precision_invalid')
          end

          # Shipping discount must be less than or equal to 0
          def TaxDutyCalculatorValidationErrorCode.shipping_discount_amount_invalid
            @@_shipping_discount_amount_invalid ||= TaxDutyCalculatorValidationErrorCode.new('shipping_discount_amount_invalid')
          end

          # Only 'Flow' is supported as Merchant of Record
          def TaxDutyCalculatorValidationErrorCode.merchant_of_record_invalid
            @@_merchant_of_record_invalid ||= TaxDutyCalculatorValidationErrorCode.new('merchant_of_record_invalid')
          end

          # Only weight units may be specified for a unit weight.
          def TaxDutyCalculatorValidationErrorCode.wrong_unit_specified
            @@_wrong_unit_specified ||= TaxDutyCalculatorValidationErrorCode.new('wrong_unit_specified')
          end

          def to_hash
            value
          end

        end

        class TaxReportType

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of TaxReportType for this value, creating a new instance for an unknown value
          def TaxReportType.apply(value)
            if value.instance_of?(TaxReportType)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || TaxReportType.new(value))
            end
          end

          # Returns the instance of TaxReportType for this value, or nil if not found
          def TaxReportType.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            TaxReportType.ALL.find { |v| v.value == value }
          end

          def TaxReportType.ALL
            @@all ||= [TaxReportType.consumer, TaxReportType.b2b]
          end

          def TaxReportType.consumer
            @@_consumer ||= TaxReportType.new('consumer')
          end

          def TaxReportType.b2b
            @@_b2b ||= TaxReportType.new('b2b')
          end

          def to_hash
            value
          end

        end

        class TaxVerificationResult

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of TaxVerificationResult for this value, creating a new instance for an unknown value
          def TaxVerificationResult.apply(value)
            if value.instance_of?(TaxVerificationResult)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || TaxVerificationResult.new(value))
            end
          end

          # Returns the instance of TaxVerificationResult for this value, or nil if not found
          def TaxVerificationResult.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            TaxVerificationResult.ALL.find { |v| v.value == value }
          end

          def TaxVerificationResult.ALL
            @@all ||= [TaxVerificationResult.valid, TaxVerificationResult.invalid, TaxVerificationResult.unable_to_validate]
          end

          def TaxVerificationResult.valid
            @@_valid ||= TaxVerificationResult.new('valid')
          end

          def TaxVerificationResult.invalid
            @@_invalid ||= TaxVerificationResult.new('invalid')
          end

          def TaxVerificationResult.unable_to_validate
            @@_unable_to_validate ||= TaxVerificationResult.new('unable_to_validate')
          end

          def to_hash
            value
          end

        end

        class TaxabilityType

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of TaxabilityType for this value, creating a new instance for an unknown value
          def TaxabilityType.apply(value)
            if value.instance_of?(TaxabilityType)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || TaxabilityType.new(value))
            end
          end

          # Returns the instance of TaxabilityType for this value, or nil if not found
          def TaxabilityType.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            TaxabilityType.ALL.find { |v| v.value == value }
          end

          def TaxabilityType.ALL
            @@all ||= [TaxabilityType.tax_rule]
          end

          # Rule indicating how taxes should be applied.  Acceptable values are defined by
          # the 'taxability_value' enum.
          def TaxabilityType.tax_rule
            @@_tax_rule ||= TaxabilityType.new('tax_rule')
          end

          def to_hash
            value
          end

        end

        class TaxabilityValue

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of TaxabilityValue for this value, creating a new instance for an unknown value
          def TaxabilityValue.apply(value)
            if value.instance_of?(TaxabilityValue)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || TaxabilityValue.new(value))
            end
          end

          # Returns the instance of TaxabilityValue for this value, or nil if not found
          def TaxabilityValue.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            TaxabilityValue.ALL.find { |v| v.value == value }
          end

          def TaxabilityValue.ALL
            @@all ||= [TaxabilityValue.exempt]
          end

          # An item with this value is exempt from being taxed.
          def TaxabilityValue.exempt
            @@_exempt ||= TaxabilityValue.new('exempt')
          end

          def to_hash
            value
          end

        end

        class ThreeDSecureCode

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of ThreeDSecureCode for this value, creating a new instance for an unknown value
          def ThreeDSecureCode.apply(value)
            if value.instance_of?(ThreeDSecureCode)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || ThreeDSecureCode.new(value))
            end
          end

          # Returns the instance of ThreeDSecureCode for this value, or nil if not found
          def ThreeDSecureCode.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            ThreeDSecureCode.ALL.find { |v| v.value == value }
          end

          def ThreeDSecureCode.ALL
            @@all ||= [ThreeDSecureCode.verified, ThreeDSecureCode.not_verified, ThreeDSecureCode.failed]
          end

          def ThreeDSecureCode.verified
            @@_verified ||= ThreeDSecureCode.new('verified')
          end

          def ThreeDSecureCode.not_verified
            @@_not_verified ||= ThreeDSecureCode.new('not_verified')
          end

          def ThreeDSecureCode.failed
            @@_failed ||= ThreeDSecureCode.new('failed')
          end

          def to_hash
            value
          end

        end

        class ThreedsTwoChallengeViewport

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of ThreedsTwoChallengeViewport for this value, creating a new instance for an unknown value
          def ThreedsTwoChallengeViewport.apply(value)
            if value.instance_of?(ThreedsTwoChallengeViewport)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || ThreedsTwoChallengeViewport.new(value))
            end
          end

          # Returns the instance of ThreedsTwoChallengeViewport for this value, or nil if not found
          def ThreedsTwoChallengeViewport.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            ThreedsTwoChallengeViewport.ALL.find { |v| v.value == value }
          end

          def ThreedsTwoChallengeViewport.ALL
            @@all ||= [ThreedsTwoChallengeViewport.xxx_small, ThreedsTwoChallengeViewport.xx_small, ThreedsTwoChallengeViewport.x_small, ThreedsTwoChallengeViewport.small, ThreedsTwoChallengeViewport.fullscreen]
          end

          # 250x400
          def ThreedsTwoChallengeViewport.xxx_small
            @@_xxx_small ||= ThreedsTwoChallengeViewport.new('xxx_small')
          end

          # 390x400
          def ThreedsTwoChallengeViewport.xx_small
            @@_xx_small ||= ThreedsTwoChallengeViewport.new('xx_small')
          end

          # 500x600
          def ThreedsTwoChallengeViewport.x_small
            @@_x_small ||= ThreedsTwoChallengeViewport.new('x_small')
          end

          # 600x400
          def ThreedsTwoChallengeViewport.small
            @@_small ||= ThreedsTwoChallengeViewport.new('small')
          end

          # Full Screen. Not recommended for mobile devices at this time.
          def ThreedsTwoChallengeViewport.fullscreen
            @@_fullscreen ||= ThreedsTwoChallengeViewport.new('fullscreen')
          end

          def to_hash
            value
          end

        end

        class TierAvailability

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of TierAvailability for this value, creating a new instance for an unknown value
          def TierAvailability.apply(value)
            if value.instance_of?(TierAvailability)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || TierAvailability.new(value))
            end
          end

          # Returns the instance of TierAvailability for this value, or nil if not found
          def TierAvailability.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            TierAvailability.ALL.find { |v| v.value == value }
          end

          def TierAvailability.ALL
            @@all ||= [TierAvailability.always, TierAvailability.backup]
          end

          # The tier will always be considered to be offered for a customer order shipment
          def TierAvailability.always
            @@_always ||= TierAvailability.new('always')
          end

          # Indicates that a tier should only be offered as a shipping option when
          # `always` tiers are not available
          def TierAvailability.backup
            @@_backup ||= TierAvailability.new('backup')
          end

          def to_hash
            value
          end

        end

        class TierEstimateType

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of TierEstimateType for this value, creating a new instance for an unknown value
          def TierEstimateType.apply(value)
            if value.instance_of?(TierEstimateType)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || TierEstimateType.new(value))
            end
          end

          # Returns the instance of TierEstimateType for this value, or nil if not found
          def TierEstimateType.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            TierEstimateType.ALL.find { |v| v.value == value }
          end

          def TierEstimateType.ALL
            @@all ||= [TierEstimateType.calculated, TierEstimateType.custom]
          end

          # Displays the calculated delivery window estimate next to the shipping tier
          # name.
          def TierEstimateType.calculated
            @@_calculated ||= TierEstimateType.new('calculated')
          end

          # Shows a custom label next to the shipping tier name instead of a delivery
          # window estimate.
          def TierEstimateType.custom
            @@_custom ||= TierEstimateType.new('custom')
          end

          def to_hash
            value
          end

        end

        class TierStrategy

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of TierStrategy for this value, creating a new instance for an unknown value
          def TierStrategy.apply(value)
            if value.instance_of?(TierStrategy)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || TierStrategy.new(value))
            end
          end

          # Returns the instance of TierStrategy for this value, or nil if not found
          def TierStrategy.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            TierStrategy.ALL.find { |v| v.value == value }
          end

          def TierStrategy.ALL
            @@all ||= [TierStrategy.fastest, TierStrategy.lowest_cost]
          end

          # Optimize for fastest first, then cheapest
          def TierStrategy.fastest
            @@_fastest ||= TierStrategy.new('fastest')
          end

          # Optimize for lowest cost first, then fastest
          def TierStrategy.lowest_cost
            @@_lowest_cost ||= TierStrategy.new('lowest_cost')
          end

          def to_hash
            value
          end

        end

        class TokenType

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of TokenType for this value, creating a new instance for an unknown value
          def TokenType.apply(value)
            if value.instance_of?(TokenType)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || TokenType.new(value))
            end
          end

          # Returns the instance of TokenType for this value, or nil if not found
          def TokenType.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            TokenType.ALL.find { |v| v.value == value }
          end

          def TokenType.ALL
            @@all ||= [TokenType.permanent, TokenType.one_time]
          end

          # Create a permanent token for the card (stored up until normal purge interval)
          def TokenType.permanent
            @@_permanent ||= TokenType.new('permanent')
          end

          # Create a one time token for the card. This token can be used to either
          # authorized payment or later exchange for a permanent token. Once used, this
          # token cannot be used for future activity.
          def TokenType.one_time
            @@_one_time ||= TokenType.new('one_time')
          end

          def to_hash
            value
          end

        end

        class TrackingNumberType

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of TrackingNumberType for this value, creating a new instance for an unknown value
          def TrackingNumberType.apply(value)
            if value.instance_of?(TrackingNumberType)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || TrackingNumberType.new(value))
            end
          end

          # Returns the instance of TrackingNumberType for this value, or nil if not found
          def TrackingNumberType.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            TrackingNumberType.ALL.find { |v| v.value == value }
          end

          def TrackingNumberType.ALL
            @@all ||= [TrackingNumberType.flow, TrackingNumberType.carrier]
          end

          def TrackingNumberType.flow
            @@_flow ||= TrackingNumberType.new('flow')
          end

          def TrackingNumberType.carrier
            @@_carrier ||= TrackingNumberType.new('carrier')
          end

          def to_hash
            value
          end

        end

        class TrackingStatus

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of TrackingStatus for this value, creating a new instance for an unknown value
          def TrackingStatus.apply(value)
            if value.instance_of?(TrackingStatus)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || TrackingStatus.new(value))
            end
          end

          # Returns the instance of TrackingStatus for this value, or nil if not found
          def TrackingStatus.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            TrackingStatus.ALL.find { |v| v.value == value }
          end

          def TrackingStatus.ALL
            @@all ||= [TrackingStatus.label_created, TrackingStatus.pending, TrackingStatus.info_received, TrackingStatus.picked_up, TrackingStatus.in_transit, TrackingStatus.out_for_delivery, TrackingStatus.attempt_fail, TrackingStatus.delivered, TrackingStatus.exception, TrackingStatus.returned, TrackingStatus.expired]
          end

          def TrackingStatus.label_created
            @@_label_created ||= TrackingStatus.new('label_created')
          end

          def TrackingStatus.pending
            @@_pending ||= TrackingStatus.new('pending')
          end

          def TrackingStatus.info_received
            @@_info_received ||= TrackingStatus.new('info_received')
          end

          def TrackingStatus.picked_up
            @@_picked_up ||= TrackingStatus.new('picked_up')
          end

          def TrackingStatus.in_transit
            @@_in_transit ||= TrackingStatus.new('in_transit')
          end

          def TrackingStatus.out_for_delivery
            @@_out_for_delivery ||= TrackingStatus.new('out_for_delivery')
          end

          def TrackingStatus.attempt_fail
            @@_attempt_fail ||= TrackingStatus.new('attempt_fail')
          end

          def TrackingStatus.delivered
            @@_delivered ||= TrackingStatus.new('delivered')
          end

          def TrackingStatus.exception
            @@_exception ||= TrackingStatus.new('exception')
          end

          def TrackingStatus.returned
            @@_returned ||= TrackingStatus.new('returned')
          end

          def TrackingStatus.expired
            @@_expired ||= TrackingStatus.new('expired')
          end

          def to_hash
            value
          end

        end

        class TradeAgreementName

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of TradeAgreementName for this value, creating a new instance for an unknown value
          def TradeAgreementName.apply(value)
            if value.instance_of?(TradeAgreementName)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || TradeAgreementName.new(value))
            end
          end

          # Returns the instance of TradeAgreementName for this value, or nil if not found
          def TradeAgreementName.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            TradeAgreementName.ALL.find { |v| v.value == value }
          end

          def TradeAgreementName.ALL
            @@all ||= [TradeAgreementName.usmca, TradeAgreementName.t_mec, TradeAgreementName.cusma, TradeAgreementName.tca]
          end

          # United States–Mexico–Canada Agreement
          def TradeAgreementName.usmca
            @@_usmca ||= TradeAgreementName.new('USMCA')
          end

          # Tratado entre México y Estados Unidos y Canadá
          def TradeAgreementName.t_mec
            @@_t_mec ||= TradeAgreementName.new('T-MEC')
          end

          # Canada-United States-Mexico Agreement
          def TradeAgreementName.cusma
            @@_cusma ||= TradeAgreementName.new('CUSMA')
          end

          # EU–UK Trade and Cooperation Agreement
          def TradeAgreementName.tca
            @@_tca ||= TradeAgreementName.new('TCA')
          end

          def to_hash
            value
          end

        end

        class TradeAgreementStatus

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of TradeAgreementStatus for this value, creating a new instance for an unknown value
          def TradeAgreementStatus.apply(value)
            if value.instance_of?(TradeAgreementStatus)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || TradeAgreementStatus.new(value))
            end
          end

          # Returns the instance of TradeAgreementStatus for this value, or nil if not found
          def TradeAgreementStatus.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            TradeAgreementStatus.ALL.find { |v| v.value == value }
          end

          def TradeAgreementStatus.ALL
            @@all ||= [TradeAgreementStatus.supported, TradeAgreementStatus.not_supported]
          end

          def TradeAgreementStatus.supported
            @@_supported ||= TradeAgreementStatus.new('supported')
          end

          def TradeAgreementStatus.not_supported
            @@_not_supported ||= TradeAgreementStatus.new('not_supported')
          end

          def to_hash
            value
          end

        end

        class UnitOfMeasurement

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of UnitOfMeasurement for this value, creating a new instance for an unknown value
          def UnitOfMeasurement.apply(value)
            if value.instance_of?(UnitOfMeasurement)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || UnitOfMeasurement.new(value))
            end
          end

          # Returns the instance of UnitOfMeasurement for this value, or nil if not found
          def UnitOfMeasurement.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            UnitOfMeasurement.ALL.find { |v| v.value == value }
          end

          def UnitOfMeasurement.ALL
            @@all ||= [UnitOfMeasurement.millimeter, UnitOfMeasurement.centimeter, UnitOfMeasurement.inch, UnitOfMeasurement.foot, UnitOfMeasurement.cubic_inch, UnitOfMeasurement.cubic_meter, UnitOfMeasurement.gram, UnitOfMeasurement.kilogram, UnitOfMeasurement.meter, UnitOfMeasurement.ounce, UnitOfMeasurement.pound]
          end

          # Equivalent to MILLI(METRE).
          def UnitOfMeasurement.millimeter
            @@_millimeter ||= UnitOfMeasurement.new('millimeter')
          end

          # Equivalent to CENTI(METRE).
          def UnitOfMeasurement.centimeter
            @@_centimeter ||= UnitOfMeasurement.new('centimeter')
          end

          # A unit of length equal to 0.0254 m (standard name in).
          def UnitOfMeasurement.inch
            @@_inch ||= UnitOfMeasurement.new('inch')
          end

          # A unit of length equal to 0.3048 m (standard name ft).
          def UnitOfMeasurement.foot
            @@_foot ||= UnitOfMeasurement.new('foot')
          end

          # A unit of volume equal to one cubic inch (in³).
          def UnitOfMeasurement.cubic_inch
            @@_cubic_inch ||= UnitOfMeasurement.new('cubic_inch')
          end

          # The metric unit for volume quantities (m³).
          def UnitOfMeasurement.cubic_meter
            @@_cubic_meter ||= UnitOfMeasurement.new('cubic_meter')
          end

          # A unit of mass equal to 1 / 1000 kilogram (standard name g).
          def UnitOfMeasurement.gram
            @@_gram ||= UnitOfMeasurement.new('gram')
          end

          # The base unit for mass quantities (kg).
          def UnitOfMeasurement.kilogram
            @@_kilogram ||= UnitOfMeasurement.new('kilogram')
          end

          # The base unit for length quantities (m).
          def UnitOfMeasurement.meter
            @@_meter ||= UnitOfMeasurement.new('meter')
          end

          # A unit of mass equal to 1 / 16 POUND (standard name oz).
          def UnitOfMeasurement.ounce
            @@_ounce ||= UnitOfMeasurement.new('ounce')
          end

          # A unit of mass equal to 453.59237 grams (avoirdupois pound, standard name lb).
          def UnitOfMeasurement.pound
            @@_pound ||= UnitOfMeasurement.new('pound')
          end

          def to_hash
            value
          end

        end

        class UnitOfTime

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of UnitOfTime for this value, creating a new instance for an unknown value
          def UnitOfTime.apply(value)
            if value.instance_of?(UnitOfTime)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || UnitOfTime.new(value))
            end
          end

          # Returns the instance of UnitOfTime for this value, or nil if not found
          def UnitOfTime.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            UnitOfTime.ALL.find { |v| v.value == value }
          end

          def UnitOfTime.ALL
            @@all ||= [UnitOfTime.year, UnitOfTime.month, UnitOfTime.week, UnitOfTime.day, UnitOfTime.hour, UnitOfTime.minute]
          end

          def UnitOfTime.year
            @@_year ||= UnitOfTime.new('year')
          end

          def UnitOfTime.month
            @@_month ||= UnitOfTime.new('month')
          end

          def UnitOfTime.week
            @@_week ||= UnitOfTime.new('week')
          end

          def UnitOfTime.day
            @@_day ||= UnitOfTime.new('day')
          end

          def UnitOfTime.hour
            @@_hour ||= UnitOfTime.new('hour')
          end

          def UnitOfTime.minute
            @@_minute ||= UnitOfTime.new('minute')
          end

          def to_hash
            value
          end

        end

        class UpdatePolicy

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of UpdatePolicy for this value, creating a new instance for an unknown value
          def UpdatePolicy.apply(value)
            if value.instance_of?(UpdatePolicy)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || UpdatePolicy.new(value))
            end
          end

          # Returns the instance of UpdatePolicy for this value, or nil if not found
          def UpdatePolicy.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            UpdatePolicy.ALL.find { |v| v.value == value }
          end

          def UpdatePolicy.ALL
            @@all ||= [UpdatePolicy.auto, UpdatePolicy.queue, UpdatePolicy.discard]
          end

          def UpdatePolicy.auto
            @@_auto ||= UpdatePolicy.new('auto')
          end

          # Queue item update for approval.
          def UpdatePolicy.queue
            @@_queue ||= UpdatePolicy.new('queue')
          end

          def UpdatePolicy.discard
            @@_discard ||= UpdatePolicy.new('discard')
          end

          def to_hash
            value
          end

        end

        class UpdateType

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of UpdateType for this value, creating a new instance for an unknown value
          def UpdateType.apply(value)
            if value.instance_of?(UpdateType)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || UpdateType.new(value))
            end
          end

          # Returns the instance of UpdateType for this value, or nil if not found
          def UpdateType.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            UpdateType.ALL.find { |v| v.value == value }
          end

          def UpdateType.ALL
            @@all ||= [UpdateType.change, UpdateType.set]
          end

          # Long value to increment or decrement. Positive quantities are added to
          # inventory while negative quantities are decrement from inventory.
          def UpdateType.change
            @@_change ||= UpdateType.new('change')
          end

          # Set absolute quantity to new value with no regard for previous updates
          def UpdateType.set
            @@_set ||= UpdateType.new('set')
          end

          def to_hash
            value
          end

        end

        class UserStatus

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of UserStatus for this value, creating a new instance for an unknown value
          def UserStatus.apply(value)
            if value.instance_of?(UserStatus)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || UserStatus.new(value))
            end
          end

          # Returns the instance of UserStatus for this value, or nil if not found
          def UserStatus.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            UserStatus.ALL.find { |v| v.value == value }
          end

          def UserStatus.ALL
            @@all ||= [UserStatus.pending, UserStatus.active, UserStatus.inactive]
          end

          # Represents a new user account that is pending approval
          def UserStatus.pending
            @@_pending ||= UserStatus.new('pending')
          end

          # Represents an active user account - can authenticate with this account
          def UserStatus.active
            @@_active ||= UserStatus.new('active')
          end

          # Represents an inactive user account - can no longer authenticate with this
          # account
          def UserStatus.inactive
            @@_inactive ||= UserStatus.new('inactive')
          end

          def to_hash
            value
          end

        end

        class ValueAddedService

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of ValueAddedService for this value, creating a new instance for an unknown value
          def ValueAddedService.apply(value)
            if value.instance_of?(ValueAddedService)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || ValueAddedService.new(value))
            end
          end

          # Returns the instance of ValueAddedService for this value, or nil if not found
          def ValueAddedService.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            ValueAddedService.ALL.find { |v| v.value == value }
          end

          def ValueAddedService.ALL
            @@all ||= [ValueAddedService.hazardous_material]
          end

          # See https://en.wikipedia.org/wiki/ORM-D
          def ValueAddedService.hazardous_material
            @@_hazardous_material ||= ValueAddedService.new('Hazardous Material')
          end

          def to_hash
            value
          end

        end

        class Visibility

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of Visibility for this value, creating a new instance for an unknown value
          def Visibility.apply(value)
            if value.instance_of?(Visibility)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || Visibility.new(value))
            end
          end

          # Returns the instance of Visibility for this value, or nil if not found
          def Visibility.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            Visibility.ALL.find { |v| v.value == value }
          end

          def Visibility.ALL
            @@all ||= [Visibility.public, Visibility.private]
          end

          def Visibility.public
            @@_public ||= Visibility.new('public')
          end

          def Visibility.private
            @@_private ||= Visibility.new('private')
          end

          def to_hash
            value
          end

        end

        class WebhookStatus

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of WebhookStatus for this value, creating a new instance for an unknown value
          def WebhookStatus.apply(value)
            if value.instance_of?(WebhookStatus)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || WebhookStatus.new(value))
            end
          end

          # Returns the instance of WebhookStatus for this value, or nil if not found
          def WebhookStatus.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            WebhookStatus.ALL.find { |v| v.value == value }
          end

          def WebhookStatus.ALL
            @@all ||= [WebhookStatus.pending, WebhookStatus.success, WebhookStatus.failure]
          end

          def WebhookStatus.pending
            @@_pending ||= WebhookStatus.new('pending')
          end

          def WebhookStatus.success
            @@_success ||= WebhookStatus.new('success')
          end

          def WebhookStatus.failure
            @@_failure ||= WebhookStatus.new('failure')
          end

          def to_hash
            value
          end

        end

        class ZeroAmountIndicator

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of ZeroAmountIndicator for this value, creating a new instance for an unknown value
          def ZeroAmountIndicator.apply(value)
            if value.instance_of?(ZeroAmountIndicator)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || ZeroAmountIndicator.new(value))
            end
          end

          # Returns the instance of ZeroAmountIndicator for this value, or nil if not found
          def ZeroAmountIndicator.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            ZeroAmountIndicator.ALL.find { |v| v.value == value }
          end

          def ZeroAmountIndicator.ALL
            @@all ||= [ZeroAmountIndicator.zero, ZeroAmountIndicator.free]
          end

          # Show the number 0.00 in the label
          def ZeroAmountIndicator.zero
            @@_zero ||= ZeroAmountIndicator.new('zero')
          end

          # Show the word `FREE` in the label
          def ZeroAmountIndicator.free
            @@_free ||= ZeroAmountIndicator.new('free')
          end

          def to_hash
            value
          end

        end

        class ZeroLevyReasonCode

          attr_reader :value

          def initialize(value)
            @value = HttpClient::Preconditions.assert_class('value', value, String)
          end

          # Returns the instance of ZeroLevyReasonCode for this value, creating a new instance for an unknown value
          def ZeroLevyReasonCode.apply(value)
            if value.instance_of?(ZeroLevyReasonCode)
              value
            else
              HttpClient::Preconditions.assert_class_or_nil('value', value, String)
              value.nil? ? nil : (from_string(value) || ZeroLevyReasonCode.new(value))
            end
          end

          # Returns the instance of ZeroLevyReasonCode for this value, or nil if not found
          def ZeroLevyReasonCode.from_string(value)
            HttpClient::Preconditions.assert_class('value', value, String)
            ZeroLevyReasonCode.ALL.find { |v| v.value == value }
          end

          def ZeroLevyReasonCode.ALL
            @@all ||= [ZeroLevyReasonCode.zero_basis, ZeroLevyReasonCode.zero_rate_on_goods, ZeroLevyReasonCode.value_rounds_to_zero, ZeroLevyReasonCode.order_below_de_minimis_threshold, ZeroLevyReasonCode.amount_below_de_minimis_threshold, ZeroLevyReasonCode.delivered_unpaid, ZeroLevyReasonCode.duty_free_domestic, ZeroLevyReasonCode.duty_free_intra_community, ZeroLevyReasonCode.duty_free_reimport, ZeroLevyReasonCode.duty_free_by_trade_agreement]
          end

          # When all the applicable components of an item price were added up, the result
          # was a $0 basis
          def ZeroLevyReasonCode.zero_basis
            @@_zero_basis ||= ZeroLevyReasonCode.new('zero_basis')
          end

          # A general 0% rate is defined for items of this type (such as medical devices
          # or children's clothing)
          def ZeroLevyReasonCode.zero_rate_on_goods
            @@_zero_rate_on_goods ||= ZeroLevyReasonCode.new('zero_rate_on_goods')
          end

          # A tax rate was applied, but the result rounded to zero.
          def ZeroLevyReasonCode.value_rounds_to_zero
            @@_value_rounds_to_zero ||= ZeroLevyReasonCode.new('value_rounds_to_zero')
          end

          # The order is below the de minimis threshold
          def ZeroLevyReasonCode.order_below_de_minimis_threshold
            @@_order_below_de_minimis_threshold ||= ZeroLevyReasonCode.new('order_below_de_minimis_threshold')
          end

          # The amount owed is below the de minimis threshold
          def ZeroLevyReasonCode.amount_below_de_minimis_threshold
            @@_amount_below_de_minimis_threshold ||= ZeroLevyReasonCode.new('amount_below_de_minimis_threshold')
          end

          # The consumer has selected not to prepay tax, and thus we have not computed the
          # tax they will owe
          def ZeroLevyReasonCode.delivered_unpaid
            @@_delivered_unpaid ||= ZeroLevyReasonCode.new('delivered_unpaid')
          end

          # This cross-border tax or duty is not owed because the sale is domestic
          def ZeroLevyReasonCode.duty_free_domestic
            @@_duty_free_domestic ||= ZeroLevyReasonCode.new('duty_free_domestic')
          end

          # This cross-border tax or duty is not owed because the sale is within the
          # borders of a customs union
          def ZeroLevyReasonCode.duty_free_intra_community
            @@_duty_free_intra_community ||= ZeroLevyReasonCode.new('duty_free_intra_community')
          end

          # When previously exported goods are re-imported back to the country of
          # manufacture, they might be able to enter duty free.
          def ZeroLevyReasonCode.duty_free_reimport
            @@_duty_free_reimport ||= ZeroLevyReasonCode.new('duty_free_reimport')
          end

          # This cross-border tax or duty is not owed due to a certified trade agreement
          def ZeroLevyReasonCode.duty_free_by_trade_agreement
            @@_duty_free_by_trade_agreement ||= ZeroLevyReasonCode.new('duty_free_by_trade_agreement')
          end

          def to_hash
            value
          end

        end

        class AbandonedOrderEmailSettings

          attr_reader :delay, :frequency

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:delay, :frequency], 'AbandonedOrderEmailSettings')
            @delay = (x = opts.delete(:delay); x.is_a?(::Io::Flow::V0::Models::Duration) ? x : ::Io::Flow::V0::Models::Duration.new(x))
            @frequency = (x = opts.delete(:frequency); x.is_a?(::Io::Flow::V0::Models::Duration) ? x : ::Io::Flow::V0::Models::Duration.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            AbandonedOrderEmailSettings.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :delay => delay.to_hash,
              :frequency => frequency.to_hash
            }
          end

        end

        class AbandonedOrderPromotion

          attr_reader :id, :name, :promotion_details, :status, :starts_at, :ends_at

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :name, :promotion_details, :status], 'AbandonedOrderPromotion')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
            @promotion_details = (x = opts.delete(:promotion_details); x.is_a?(::Io::Flow::V0::Models::AbandonedOrderPromotionDetails) ? x : ::Io::Flow::V0::Models::AbandonedOrderPromotionDetails.from_json(x))
            @status = (x = opts.delete(:status); x.is_a?(::Io::Flow::V0::Models::AbandonedOrderPromotionStatus) ? x : ::Io::Flow::V0::Models::AbandonedOrderPromotionStatus.apply(x))
            @starts_at = (x = opts.delete(:starts_at); x.nil? ? nil : HttpClient::Preconditions.assert_class('starts_at', HttpClient::Helper.to_date_time_iso8601(x), DateTime))
            @ends_at = (x = opts.delete(:ends_at); x.nil? ? nil : HttpClient::Preconditions.assert_class('ends_at', HttpClient::Helper.to_date_time_iso8601(x), DateTime))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            AbandonedOrderPromotion.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :name => name,
              :promotion_details => promotion_details.to_hash,
              :status => status.value,
              :starts_at => starts_at,
              :ends_at => ends_at
            }
          end

        end

        class AbandonedOrderPromotionDiscountDetails < AbandonedOrderPromotionDetails

          attr_reader :discount_form, :attributes

          def initialize(incoming={})
            super(:discriminator => AbandonedOrderPromotionDetails::Types::ABANDONED_ORDER_PROMOTION_DISCOUNT_DETAILS)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:discount_form, :attributes], 'AbandonedOrderPromotionDiscountDetails')
            @discount_form = (x = opts.delete(:discount_form); x.is_a?(::Io::Flow::V0::Models::DiscountForm) ? x : ::Io::Flow::V0::Models::DiscountForm.new(x))
            @attributes = HttpClient::Preconditions.assert_class('attributes', opts.delete(:attributes), Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            AbandonedOrderPromotionDiscountDetails.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :discount_form => discount_form.to_hash,
              :attributes => attributes
            }
          end

        end

        class AbandonedOrderPromotionForm

          attr_reader :name, :promotion_details, :status, :starts_at, :ends_at

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:name, :promotion_details], 'AbandonedOrderPromotionForm')
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
            @promotion_details = (x = opts.delete(:promotion_details); x.is_a?(::Io::Flow::V0::Models::AbandonedOrderPromotionDetails) ? x : ::Io::Flow::V0::Models::AbandonedOrderPromotionDetails.from_json(x))
            @status = (x = opts.delete(:status); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::AbandonedOrderPromotionStatus) ? x : ::Io::Flow::V0::Models::AbandonedOrderPromotionStatus.apply(x)))
            @starts_at = (x = opts.delete(:starts_at); x.nil? ? nil : HttpClient::Preconditions.assert_class('starts_at', HttpClient::Helper.to_date_time_iso8601(x), DateTime))
            @ends_at = (x = opts.delete(:ends_at); x.nil? ? nil : HttpClient::Preconditions.assert_class('ends_at', HttpClient::Helper.to_date_time_iso8601(x), DateTime))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            AbandonedOrderPromotionForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :name => name,
              :promotion_details => promotion_details.to_hash,
              :status => status.nil? ? nil : status.value,
              :starts_at => starts_at,
              :ends_at => ends_at
            }
          end

        end

        class AbandonedOrderSettings

          attr_reader :email_settings, :status

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:email_settings, :status], 'AbandonedOrderSettings')
            @email_settings = (x = opts.delete(:email_settings); x.is_a?(::Io::Flow::V0::Models::AbandonedOrderEmailSettings) ? x : ::Io::Flow::V0::Models::AbandonedOrderEmailSettings.new(x))
            @status = (x = opts.delete(:status); x.is_a?(::Io::Flow::V0::Models::AbandonedOrderSettingStatus) ? x : ::Io::Flow::V0::Models::AbandonedOrderSettingStatus.apply(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            AbandonedOrderSettings.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :email_settings => email_settings.to_hash,
              :status => status.value
            }
          end

        end

        class AccountOrdersExportType < ExportType

          attr_reader :statement_id, :transaction_summary_id, :transaction_created_from, :transaction_created_to, :transaction_created_on_or_after, :transaction_created_after, :transaction_created_on_or_before, :transaction_created_before, :transaction_posted_from, :transaction_posted_to, :transaction_posted_on_or_after, :transaction_posted_after, :transaction_posted_on_or_before, :transaction_posted_before

          def initialize(incoming={})
            super(:discriminator => ExportType::Types::ACCOUNT_ORDERS_EXPORT_TYPE)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @statement_id = (x = opts.delete(:statement_id); x.nil? ? nil : HttpClient::Preconditions.assert_class('statement_id', x, String))
            @transaction_summary_id = (x = opts.delete(:transaction_summary_id); x.nil? ? nil : HttpClient::Preconditions.assert_class('transaction_summary_id', x, String))
            @transaction_created_from = (x = opts.delete(:transaction_created_from); x.nil? ? nil : HttpClient::Preconditions.assert_class('transaction_created_from', HttpClient::Helper.to_date_iso8601(x), Date))
            @transaction_created_to = (x = opts.delete(:transaction_created_to); x.nil? ? nil : HttpClient::Preconditions.assert_class('transaction_created_to', HttpClient::Helper.to_date_iso8601(x), Date))
            @transaction_created_on_or_after = (x = opts.delete(:transaction_created_on_or_after); x.nil? ? nil : HttpClient::Preconditions.assert_class('transaction_created_on_or_after', HttpClient::Helper.to_date_time_iso8601(x), DateTime))
            @transaction_created_after = (x = opts.delete(:transaction_created_after); x.nil? ? nil : HttpClient::Preconditions.assert_class('transaction_created_after', HttpClient::Helper.to_date_time_iso8601(x), DateTime))
            @transaction_created_on_or_before = (x = opts.delete(:transaction_created_on_or_before); x.nil? ? nil : HttpClient::Preconditions.assert_class('transaction_created_on_or_before', HttpClient::Helper.to_date_time_iso8601(x), DateTime))
            @transaction_created_before = (x = opts.delete(:transaction_created_before); x.nil? ? nil : HttpClient::Preconditions.assert_class('transaction_created_before', HttpClient::Helper.to_date_time_iso8601(x), DateTime))
            @transaction_posted_from = (x = opts.delete(:transaction_posted_from); x.nil? ? nil : HttpClient::Preconditions.assert_class('transaction_posted_from', HttpClient::Helper.to_date_iso8601(x), Date))
            @transaction_posted_to = (x = opts.delete(:transaction_posted_to); x.nil? ? nil : HttpClient::Preconditions.assert_class('transaction_posted_to', HttpClient::Helper.to_date_iso8601(x), Date))
            @transaction_posted_on_or_after = (x = opts.delete(:transaction_posted_on_or_after); x.nil? ? nil : HttpClient::Preconditions.assert_class('transaction_posted_on_or_after', HttpClient::Helper.to_date_time_iso8601(x), DateTime))
            @transaction_posted_after = (x = opts.delete(:transaction_posted_after); x.nil? ? nil : HttpClient::Preconditions.assert_class('transaction_posted_after', HttpClient::Helper.to_date_time_iso8601(x), DateTime))
            @transaction_posted_on_or_before = (x = opts.delete(:transaction_posted_on_or_before); x.nil? ? nil : HttpClient::Preconditions.assert_class('transaction_posted_on_or_before', HttpClient::Helper.to_date_time_iso8601(x), DateTime))
            @transaction_posted_before = (x = opts.delete(:transaction_posted_before); x.nil? ? nil : HttpClient::Preconditions.assert_class('transaction_posted_before', HttpClient::Helper.to_date_time_iso8601(x), DateTime))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            AccountOrdersExportType.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :statement_id => statement_id,
              :transaction_summary_id => transaction_summary_id,
              :transaction_created_from => transaction_created_from,
              :transaction_created_to => transaction_created_to,
              :transaction_created_on_or_after => transaction_created_on_or_after,
              :transaction_created_after => transaction_created_after,
              :transaction_created_on_or_before => transaction_created_on_or_before,
              :transaction_created_before => transaction_created_before,
              :transaction_posted_from => transaction_posted_from,
              :transaction_posted_to => transaction_posted_to,
              :transaction_posted_on_or_after => transaction_posted_on_or_after,
              :transaction_posted_after => transaction_posted_after,
              :transaction_posted_on_or_before => transaction_posted_on_or_before,
              :transaction_posted_before => transaction_posted_before
            }
          end

        end

        class AccountTransactionsExportType < ExportType

          attr_reader :statement_id, :transaction_summary_id, :created_from, :created_to, :created_on_or_after, :created_after, :created_on_or_before, :created_before, :posted_from, :posted_to, :posted_on_or_after, :posted_after, :posted_on_or_before, :posted_before

          def initialize(incoming={})
            super(:discriminator => ExportType::Types::ACCOUNT_TRANSACTIONS_EXPORT_TYPE)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @statement_id = (x = opts.delete(:statement_id); x.nil? ? nil : HttpClient::Preconditions.assert_class('statement_id', x, String))
            @transaction_summary_id = (x = opts.delete(:transaction_summary_id); x.nil? ? nil : HttpClient::Preconditions.assert_class('transaction_summary_id', x, String))
            @created_from = (x = opts.delete(:created_from); x.nil? ? nil : HttpClient::Preconditions.assert_class('created_from', HttpClient::Helper.to_date_iso8601(x), Date))
            @created_to = (x = opts.delete(:created_to); x.nil? ? nil : HttpClient::Preconditions.assert_class('created_to', HttpClient::Helper.to_date_iso8601(x), Date))
            @created_on_or_after = (x = opts.delete(:created_on_or_after); x.nil? ? nil : HttpClient::Preconditions.assert_class('created_on_or_after', HttpClient::Helper.to_date_time_iso8601(x), DateTime))
            @created_after = (x = opts.delete(:created_after); x.nil? ? nil : HttpClient::Preconditions.assert_class('created_after', HttpClient::Helper.to_date_time_iso8601(x), DateTime))
            @created_on_or_before = (x = opts.delete(:created_on_or_before); x.nil? ? nil : HttpClient::Preconditions.assert_class('created_on_or_before', HttpClient::Helper.to_date_time_iso8601(x), DateTime))
            @created_before = (x = opts.delete(:created_before); x.nil? ? nil : HttpClient::Preconditions.assert_class('created_before', HttpClient::Helper.to_date_time_iso8601(x), DateTime))
            @posted_from = (x = opts.delete(:posted_from); x.nil? ? nil : HttpClient::Preconditions.assert_class('posted_from', HttpClient::Helper.to_date_iso8601(x), Date))
            @posted_to = (x = opts.delete(:posted_to); x.nil? ? nil : HttpClient::Preconditions.assert_class('posted_to', HttpClient::Helper.to_date_iso8601(x), Date))
            @posted_on_or_after = (x = opts.delete(:posted_on_or_after); x.nil? ? nil : HttpClient::Preconditions.assert_class('posted_on_or_after', HttpClient::Helper.to_date_time_iso8601(x), DateTime))
            @posted_after = (x = opts.delete(:posted_after); x.nil? ? nil : HttpClient::Preconditions.assert_class('posted_after', HttpClient::Helper.to_date_time_iso8601(x), DateTime))
            @posted_on_or_before = (x = opts.delete(:posted_on_or_before); x.nil? ? nil : HttpClient::Preconditions.assert_class('posted_on_or_before', HttpClient::Helper.to_date_time_iso8601(x), DateTime))
            @posted_before = (x = opts.delete(:posted_before); x.nil? ? nil : HttpClient::Preconditions.assert_class('posted_before', HttpClient::Helper.to_date_time_iso8601(x), DateTime))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            AccountTransactionsExportType.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :statement_id => statement_id,
              :transaction_summary_id => transaction_summary_id,
              :created_from => created_from,
              :created_to => created_to,
              :created_on_or_after => created_on_or_after,
              :created_after => created_after,
              :created_on_or_before => created_on_or_before,
              :created_before => created_before,
              :posted_from => posted_from,
              :posted_to => posted_to,
              :posted_on_or_after => posted_on_or_after,
              :posted_after => posted_after,
              :posted_on_or_before => posted_on_or_before,
              :posted_before => posted_before
            }
          end

        end

        # Used for initiating an ACH (Automated Clearing House) bank transfer.
        class AchAuthorizationForm < AuthorizationForm

          attr_reader :account_owner_name, :account_number, :routing_number, :billing_address, :order_number, :amount, :currency, :key, :attributes, :ip

          def initialize(incoming={})
            super(:discriminator => AuthorizationForm::Types::ACH_AUTHORIZATION_FORM)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:account_owner_name, :account_number, :routing_number, :billing_address, :amount, :currency], 'AchAuthorizationForm')
            @account_owner_name = HttpClient::Preconditions.assert_class('account_owner_name', opts.delete(:account_owner_name), String)
            @account_number = HttpClient::Preconditions.assert_class('account_number', opts.delete(:account_number), String)
            @routing_number = HttpClient::Preconditions.assert_class('routing_number', opts.delete(:routing_number), String)
            @billing_address = (x = opts.delete(:billing_address); x.is_a?(::Io::Flow::V0::Models::BillingAddress) ? x : ::Io::Flow::V0::Models::BillingAddress.new(x))
            @order_number = (x = opts.delete(:order_number); x.nil? ? nil : HttpClient::Preconditions.assert_class('order_number', x, String))
            @amount = HttpClient::Preconditions.assert_class('amount', HttpClient::Helper.to_big_decimal(opts.delete(:amount)), BigDecimal)
            @currency = HttpClient::Preconditions.assert_class('currency', opts.delete(:currency), String)
            @key = (x = opts.delete(:key); x.nil? ? nil : HttpClient::Preconditions.assert_class('key', x, String))
            @attributes = (x = opts.delete(:attributes); x.nil? ? nil : HttpClient::Preconditions.assert_class('attributes', x, Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h })
            @ip = (x = opts.delete(:ip); x.nil? ? nil : HttpClient::Preconditions.assert_class('ip', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            AchAuthorizationForm.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :account_owner_name => account_owner_name,
              :account_number => account_number,
              :routing_number => routing_number,
              :billing_address => billing_address.to_hash,
              :order_number => order_number,
              :amount => amount.to_f.to_s,
              :currency => currency,
              :key => key,
              :attributes => attributes.nil? ? nil : attributes,
              :ip => ip
            }
          end

        end

        # Render a visible window or iframe and open the returned url with a
        # `window.open` or an HTML form POST. This will load the payment provider's
        # experience, which the customer will interact with to complete the transaction.
        # After several minutes, the payment request will asynchronously update based on
        # the results of the transaction.
        class ActionDisplayInlineWindow < Action

          attr_reader :expires_at, :method, :url, :data, :window_size

          def initialize(incoming={})
            super(:type => Action::Types::ACTION_DISPLAY_INLINE_WINDOW)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:method, :url], 'ActionDisplayInlineWindow')
            @expires_at = (x = opts.delete(:expires_at); x.nil? ? nil : HttpClient::Preconditions.assert_class('expires_at', HttpClient::Helper.to_date_time_iso8601(x), DateTime))
            @method = HttpClient::Preconditions.assert_class('method', opts.delete(:method), String)
            @url = HttpClient::Preconditions.assert_class('url', opts.delete(:url), String)
            @data = (x = opts.delete(:data); x.nil? ? nil : HttpClient::Preconditions.assert_class('data', HttpClient::Helper.to_object(x), Hash))
            @window_size = (x = opts.delete(:window_size); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::InlineWindowViewportSize) ? x : ::Io::Flow::V0::Models::InlineWindowViewportSize.apply(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ActionDisplayInlineWindow.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :expires_at => expires_at,
              :method => method,
              :url => url,
              :data => data,
              :window_size => window_size.nil? ? nil : window_size.value
            }
          end

        end

        # Render the returned HTML script from the payment provider, which will gather
        # browser data to inform the authorization decision. After several seconds, the
        # payment request will asynchronously update based on the results of the script.
        class ActionExecuteScript < Action

          attr_reader :expires_at, :script

          def initialize(incoming={})
            super(:type => Action::Types::ACTION_EXECUTE_SCRIPT)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:script], 'ActionExecuteScript')
            @expires_at = (x = opts.delete(:expires_at); x.nil? ? nil : HttpClient::Preconditions.assert_class('expires_at', HttpClient::Helper.to_date_time_iso8601(x), DateTime))
            @script = HttpClient::Preconditions.assert_class('script', opts.delete(:script), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ActionExecuteScript.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :expires_at => expires_at,
              :script => script
            }
          end

        end

        # Redirect the customer to another url using a `window.open` or an HTML form
        # POST redirection. After the payment process is completed, the customer will be
        # redirected back to the `returnUrl` provided in the payment request.
        class ActionRedirect < Action

          attr_reader :expires_at, :method, :url, :data

          def initialize(incoming={})
            super(:type => Action::Types::ACTION_REDIRECT)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:method, :url], 'ActionRedirect')
            @expires_at = (x = opts.delete(:expires_at); x.nil? ? nil : HttpClient::Preconditions.assert_class('expires_at', HttpClient::Helper.to_date_time_iso8601(x), DateTime))
            @method = HttpClient::Preconditions.assert_class('method', opts.delete(:method), String)
            @url = HttpClient::Preconditions.assert_class('url', opts.delete(:url), String)
            @data = (x = opts.delete(:data); x.nil? ? nil : HttpClient::Preconditions.assert_class('data', HttpClient::Helper.to_object(x), Hash))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ActionRedirect.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :expires_at => expires_at,
              :method => method,
              :url => url,
              :data => data
            }
          end

        end

        # Use the Adyen Web Component v3.1 and Checkout.create. The results of this
        # operation will be used to update the payment request with a
        # `payment_method_data` of type `complete_authorization_card` and a
        # `card_authorization_action_result` type of `adyen_v3`.
        # https://docs.adyen.com/online-payments/3d-secure/native-3ds2/api-integration#get-the-3d-secure-2-device-fingerprint
        class ActionUseSdkAdyenV3 < Action

          attr_reader :expires_at, :origin_key, :authentication_token

          def initialize(incoming={})
            super(:type => Action::Types::ACTION_USE_SDK_ADYEN_V3)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:origin_key, :authentication_token], 'ActionUseSdkAdyenV3')
            @expires_at = (x = opts.delete(:expires_at); x.nil? ? nil : HttpClient::Preconditions.assert_class('expires_at', HttpClient::Helper.to_date_time_iso8601(x), DateTime))
            @origin_key = HttpClient::Preconditions.assert_class('origin_key', opts.delete(:origin_key), String)
            @authentication_token = (x = opts.delete(:authentication_token); x.is_a?(::Io::Flow::V0::Models::SdkAdyenV3AuthenticationToken) ? x : ::Io::Flow::V0::Models::SdkAdyenV3AuthenticationToken.from_json(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ActionUseSdkAdyenV3.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :expires_at => expires_at,
              :origin_key => origin_key,
              :authentication_token => authentication_token.to_hash
            }
          end

        end

        # Use the Adyen Web Component v4.7 and Checkout.createFromAction. The results of
        # this operation will be used to update the payment request with a
        # `payment_method_data` of type `complete_authorization_card` and a
        # `card_authorization_action_result` type of `adyen_v4`.
        # https://docs.adyen.com/online-payments/3d-secure/native-3ds2/web-component?tab=v67-payment-response_1#3ds2-component
        class ActionUseSdkAdyenV4 < Action

          attr_reader :expires_at, :client_key, :action

          def initialize(incoming={})
            super(:type => Action::Types::ACTION_USE_SDK_ADYEN_V4)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:client_key, :action], 'ActionUseSdkAdyenV4')
            @expires_at = (x = opts.delete(:expires_at); x.nil? ? nil : HttpClient::Preconditions.assert_class('expires_at', HttpClient::Helper.to_date_time_iso8601(x), DateTime))
            @client_key = HttpClient::Preconditions.assert_class('client_key', opts.delete(:client_key), String)
            @action = HttpClient::Preconditions.assert_class('action', HttpClient::Helper.to_object(opts.delete(:action)), Hash)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ActionUseSdkAdyenV4.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :expires_at => expires_at,
              :client_key => client_key,
              :action => action
            }
          end

        end

        # Use the Apple Pay Javascript SDK to complete the validation processor for an
        # Apple Pay session on the browser. This allows Apple to render their payment
        # sheet to the consumer, so they can authenticate and pick their payment method.
        # The results of this operation will be an Apple Pay token that is used to
        # update the payment request with a `payment_method_data` of type
        # `authorize_applepay`.
        # https://developer.apple.com/documentation/apple_pay_on_the_web/applepaysession/1778015-completemerchantvalidation
        class ActionUseSdkApplepayJsCompleteValidation < Action

          attr_reader :expires_at, :payment_session

          def initialize(incoming={})
            super(:type => Action::Types::ACTION_USE_SDK_APPLEPAY_JS_COMPLETE_VALIDATION)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:payment_session], 'ActionUseSdkApplepayJsCompleteValidation')
            @expires_at = (x = opts.delete(:expires_at); x.nil? ? nil : HttpClient::Preconditions.assert_class('expires_at', HttpClient::Helper.to_date_time_iso8601(x), DateTime))
            @payment_session = HttpClient::Preconditions.assert_class('payment_session', HttpClient::Helper.to_object(opts.delete(:payment_session)), Hash)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ActionUseSdkApplepayJsCompleteValidation.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :expires_at => expires_at,
              :payment_session => payment_session
            }
          end

        end

        # Use the Apple Pay Javascript SDK to instantiate an Apple Pay session on the
        # browser. This will start loading the Apple Pay experience, which triggers a
        # validation check from Apple. The results of this operation are a validation
        # request which will be used to update the payment request with a
        # `payment_method_data` of type `validate_applepay`.
        # https://developer.apple.com/documentation/apple_pay_on_the_web/applepaysession/2320659-applepaysession
        class ActionUseSdkApplepayJsCreateSession < Action

          attr_reader :expires_at, :merchant_identifier, :payment_data_request

          def initialize(incoming={})
            super(:type => Action::Types::ACTION_USE_SDK_APPLEPAY_JS_CREATE_SESSION)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:merchant_identifier, :payment_data_request], 'ActionUseSdkApplepayJsCreateSession')
            @expires_at = (x = opts.delete(:expires_at); x.nil? ? nil : HttpClient::Preconditions.assert_class('expires_at', HttpClient::Helper.to_date_time_iso8601(x), DateTime))
            @merchant_identifier = HttpClient::Preconditions.assert_class('merchant_identifier', opts.delete(:merchant_identifier), String)
            @payment_data_request = (x = opts.delete(:payment_data_request); x.is_a?(::Io::Flow::Apple::Pay::V0::Models::ApplePayPaymentInfo) ? x : ::Io::Flow::Apple::Pay::V0::Models::ApplePayPaymentInfo.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ActionUseSdkApplepayJsCreateSession.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :expires_at => expires_at,
              :merchant_identifier => merchant_identifier,
              :payment_data_request => payment_data_request.to_hash
            }
          end

        end

        # Use a Google Pay SDK to render the Google Pay button and the Google Pay
        # experience. The result of this operation will be a Google Pay token that will
        # be used to update the payment request with a `payment_method_data` of type
        # `authorize_googlepay`.
        # https://developers.google.com/pay/api/web/guides/tutorial#js-load
        class ActionUseSdkGooglepay < Action

          attr_reader :expires_at, :payment_data_request

          def initialize(incoming={})
            super(:type => Action::Types::ACTION_USE_SDK_GOOGLEPAY)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:payment_data_request], 'ActionUseSdkGooglepay')
            @expires_at = (x = opts.delete(:expires_at); x.nil? ? nil : HttpClient::Preconditions.assert_class('expires_at', HttpClient::Helper.to_date_time_iso8601(x), DateTime))
            @payment_data_request = (x = opts.delete(:payment_data_request); x.is_a?(::Io::Flow::Google::Pay::V0::Models::PaymentDataRequest) ? x : ::Io::Flow::Google::Pay::V0::Models::PaymentDataRequest.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ActionUseSdkGooglepay.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :expires_at => expires_at,
              :payment_data_request => payment_data_request.to_hash
            }
          end

        end

        # Use the Klarna SDK v1 and load the widgets for payment method categories.
        # After the decision has been made, the payment request will be updated
        # asynchronously. https://x.klarnacdn.net/kp/lib/v1/index.html
        class ActionUseSdkKlarnaV1 < Action

          attr_reader :expires_at, :client_token, :payment_method_categories

          def initialize(incoming={})
            super(:type => Action::Types::ACTION_USE_SDK_KLARNA_V1)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:client_token, :payment_method_categories], 'ActionUseSdkKlarnaV1')
            @expires_at = (x = opts.delete(:expires_at); x.nil? ? nil : HttpClient::Preconditions.assert_class('expires_at', HttpClient::Helper.to_date_time_iso8601(x), DateTime))
            @client_token = HttpClient::Preconditions.assert_class('client_token', opts.delete(:client_token), String)
            @payment_method_categories = HttpClient::Preconditions.assert_class('payment_method_categories', opts.delete(:payment_method_categories), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::KlarnaPaymentCategory) ? x : ::Io::Flow::V0::Models::KlarnaPaymentCategory.new(x)) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ActionUseSdkKlarnaV1.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :expires_at => expires_at,
              :client_token => client_token,
              :payment_method_categories => payment_method_categories.map { |o| o.to_hash }
            }
          end

        end

        # Use the Paypal Checkout Javascript SDK to render the Paypal Button and the
        # Paypal experience. The result of this operation will be Paypal identifiers
        # that will be used to update the payment request with a `payment_method_data`
        # of type `authorize_paypal_payer`.
        # https://developer.paypal.com/docs/archive/checkout/integrate
        class ActionUseSdkPaypal < Action

          attr_reader :expires_at, :payment_id

          def initialize(incoming={})
            super(:type => Action::Types::ACTION_USE_SDK_PAYPAL)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:payment_id], 'ActionUseSdkPaypal')
            @expires_at = (x = opts.delete(:expires_at); x.nil? ? nil : HttpClient::Preconditions.assert_class('expires_at', HttpClient::Helper.to_date_time_iso8601(x), DateTime))
            @payment_id = HttpClient::Preconditions.assert_class('payment_id', opts.delete(:payment_id), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ActionUseSdkPaypal.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :expires_at => expires_at,
              :payment_id => payment_id
            }
          end

        end

        # Use the Stripe SDK v3 and handleCardAction. After the decision has been made,
        # the payment request will be updated asynchronously.
        # https://stripe.com/docs/js/payment_intents/handle_card_action
        class ActionUseSdkStripeV3 < Action

          attr_reader :expires_at, :client_secret, :publishable_key

          def initialize(incoming={})
            super(:type => Action::Types::ACTION_USE_SDK_STRIPE_V3)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:client_secret, :publishable_key], 'ActionUseSdkStripeV3')
            @expires_at = (x = opts.delete(:expires_at); x.nil? ? nil : HttpClient::Preconditions.assert_class('expires_at', HttpClient::Helper.to_date_time_iso8601(x), DateTime))
            @client_secret = HttpClient::Preconditions.assert_class('client_secret', opts.delete(:client_secret), String)
            @publishable_key = HttpClient::Preconditions.assert_class('publishable_key', opts.delete(:publishable_key), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ActionUseSdkStripeV3.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :expires_at => expires_at,
              :client_secret => client_secret,
              :publishable_key => publishable_key
            }
          end

        end

        class ActionWait < Action

          attr_reader :expires_at

          def initialize(incoming={})
            super(:type => Action::Types::ACTION_WAIT)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @expires_at = (x = opts.delete(:expires_at); x.nil? ? nil : HttpClient::Preconditions.assert_class('expires_at', HttpClient::Helper.to_date_time_iso8601(x), DateTime))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ActionWait.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :expires_at => expires_at
            }
          end

        end

        # Defines structured fields for address to be used in user/form input. Either
        # text or the structured input needs to be present.
        class Address

          attr_reader :text, :streets, :street_number, :city, :province, :postal, :country, :latitude, :longitude

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @text = (x = opts.delete(:text); x.nil? ? nil : HttpClient::Preconditions.assert_class('text', x, String))
            @streets = (x = opts.delete(:streets); x.nil? ? nil : HttpClient::Preconditions.assert_class('streets', x, Array).map { |v| HttpClient::Preconditions.assert_class('streets', v, String) })
            @street_number = (x = opts.delete(:street_number); x.nil? ? nil : HttpClient::Preconditions.assert_class('street_number', x, String))
            @city = (x = opts.delete(:city); x.nil? ? nil : HttpClient::Preconditions.assert_class('city', x, String))
            @province = (x = opts.delete(:province); x.nil? ? nil : HttpClient::Preconditions.assert_class('province', x, String))
            @postal = (x = opts.delete(:postal); x.nil? ? nil : HttpClient::Preconditions.assert_class('postal', x, String))
            @country = (x = opts.delete(:country); x.nil? ? nil : HttpClient::Preconditions.assert_class('country', x, String))
            @latitude = (x = opts.delete(:latitude); x.nil? ? nil : HttpClient::Preconditions.assert_class('latitude', x, String))
            @longitude = (x = opts.delete(:longitude); x.nil? ? nil : HttpClient::Preconditions.assert_class('longitude', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            Address.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :text => text,
              :streets => streets.nil? ? nil : streets,
              :street_number => street_number,
              :city => city,
              :province => province,
              :postal => postal,
              :country => country,
              :latitude => latitude,
              :longitude => longitude
            }
          end

        end

        class AddressConfiguration

          attr_reader :country, :field_validation, :provinces, :formats, :province_type, :postal_type

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:country, :field_validation], 'AddressConfiguration')
            @country = HttpClient::Preconditions.assert_class('country', opts.delete(:country), String)
            @field_validation = (x = opts.delete(:field_validation); x.is_a?(::Io::Flow::V0::Models::AddressFieldValidation) ? x : ::Io::Flow::V0::Models::AddressFieldValidation.new(x))
            @provinces = HttpClient::Preconditions.assert_class('provinces', (x = opts.delete(:provinces); x.nil? ? [] : x), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::AddressConfigurationProvince) ? x : ::Io::Flow::V0::Models::AddressConfigurationProvince.new(x)) }
            @formats = HttpClient::Preconditions.assert_class('formats', (x = opts.delete(:formats); x.nil? ? [] : x), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::AddressConfigurationFormat) ? x : ::Io::Flow::V0::Models::AddressConfigurationFormat.new(x)) }
            @province_type = (x = opts.delete(:province_type); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::ProvinceType) ? x : ::Io::Flow::V0::Models::ProvinceType.apply(x)))
            @postal_type = (x = opts.delete(:postal_type); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::PostalType) ? x : ::Io::Flow::V0::Models::PostalType.apply(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            AddressConfiguration.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :country => country,
              :field_validation => field_validation.to_hash,
              :provinces => provinces.map { |o| o.to_hash },
              :formats => formats.map { |o| o.to_hash },
              :province_type => province_type.nil? ? nil : province_type.value,
              :postal_type => postal_type.nil? ? nil : postal_type.value
            }
          end

        end

        class AddressConfigurationFieldPlacement

          attr_reader :name

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:name], 'AddressConfigurationFieldPlacement')
            @name = (x = opts.delete(:name); x.is_a?(::Io::Flow::V0::Models::AddressFieldName) ? x : ::Io::Flow::V0::Models::AddressFieldName.apply(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            AddressConfigurationFieldPlacement.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :name => name.value
            }
          end

        end

        # Field placements within an address configuration format
        class AddressConfigurationFormat

          attr_reader :placements

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:placements], 'AddressConfigurationFormat')
            @placements = HttpClient::Preconditions.assert_class('placements', opts.delete(:placements), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::AddressConfigurationFieldPlacement) ? x : ::Io::Flow::V0::Models::AddressConfigurationFieldPlacement.new(x)) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            AddressConfigurationFormat.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :placements => placements.map { |o| o.to_hash }
            }
          end

        end

        class AddressConfigurationProvince

          attr_reader :value, :name, :translations

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:value, :name], 'AddressConfigurationProvince')
            @value = HttpClient::Preconditions.assert_class('value', opts.delete(:value), String)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
            @translations = (x = opts.delete(:translations); x.nil? ? nil : HttpClient::Preconditions.assert_class('translations', x, Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::AddressConfigurationProvinceTranslation) ? x : ::Io::Flow::V0::Models::AddressConfigurationProvinceTranslation.new(x)) })
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            AddressConfigurationProvince.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :value => value,
              :name => name,
              :translations => translations.nil? ? nil : translations.map { |o| o.to_hash }
            }
          end

        end

        class AddressConfigurationProvinceTranslation

          attr_reader :locale, :name

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:locale, :name], 'AddressConfigurationProvinceTranslation')
            @locale = (x = opts.delete(:locale); x.is_a?(::Io::Flow::V0::Models::AddressConfigurationProvinceTranslationLocale) ? x : ::Io::Flow::V0::Models::AddressConfigurationProvinceTranslationLocale.new(x))
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            AddressConfigurationProvinceTranslation.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :locale => locale.to_hash,
              :name => name
            }
          end

        end

        class AddressConfigurationProvinceTranslationLocale

          attr_reader :id, :name, :language

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :name, :language], 'AddressConfigurationProvinceTranslationLocale')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
            @language = HttpClient::Preconditions.assert_class('language', opts.delete(:language), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            AddressConfigurationProvinceTranslationLocale.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :name => name,
              :language => language
            }
          end

        end

        class AddressFieldValidation

          attr_reader :first_name, :last_name, :street_1, :street_2, :city, :province, :postal, :phone, :vat_registration_number

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @first_name = HttpClient::Preconditions.assert_class('first_name', (x = opts.delete(:first_name); x.nil? ? [] : x), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::FieldValidationRule) ? x : ::Io::Flow::V0::Models::FieldValidationRule.from_json(x)) }
            @last_name = HttpClient::Preconditions.assert_class('last_name', (x = opts.delete(:last_name); x.nil? ? [] : x), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::FieldValidationRule) ? x : ::Io::Flow::V0::Models::FieldValidationRule.from_json(x)) }
            @street_1 = HttpClient::Preconditions.assert_class('street_1', (x = opts.delete(:street_1); x.nil? ? [] : x), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::FieldValidationRule) ? x : ::Io::Flow::V0::Models::FieldValidationRule.from_json(x)) }
            @street_2 = HttpClient::Preconditions.assert_class('street_2', (x = opts.delete(:street_2); x.nil? ? [] : x), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::FieldValidationRule) ? x : ::Io::Flow::V0::Models::FieldValidationRule.from_json(x)) }
            @city = HttpClient::Preconditions.assert_class('city', (x = opts.delete(:city); x.nil? ? [] : x), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::FieldValidationRule) ? x : ::Io::Flow::V0::Models::FieldValidationRule.from_json(x)) }
            @province = HttpClient::Preconditions.assert_class('province', (x = opts.delete(:province); x.nil? ? [] : x), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::FieldValidationRule) ? x : ::Io::Flow::V0::Models::FieldValidationRule.from_json(x)) }
            @postal = HttpClient::Preconditions.assert_class('postal', (x = opts.delete(:postal); x.nil? ? [] : x), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::FieldValidationRule) ? x : ::Io::Flow::V0::Models::FieldValidationRule.from_json(x)) }
            @phone = HttpClient::Preconditions.assert_class('phone', (x = opts.delete(:phone); x.nil? ? [] : x), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::FieldValidationRule) ? x : ::Io::Flow::V0::Models::FieldValidationRule.from_json(x)) }
            @vat_registration_number = HttpClient::Preconditions.assert_class('vat_registration_number', (x = opts.delete(:vat_registration_number); x.nil? ? [] : x), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::FieldValidationRule) ? x : ::Io::Flow::V0::Models::FieldValidationRule.from_json(x)) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            AddressFieldValidation.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :first_name => first_name.map { |o| o.to_hash },
              :last_name => last_name.map { |o| o.to_hash },
              :street_1 => street_1.map { |o| o.to_hash },
              :street_2 => street_2.map { |o| o.to_hash },
              :city => city.map { |o| o.to_hash },
              :province => province.map { |o| o.to_hash },
              :postal => postal.map { |o| o.to_hash },
              :phone => phone.map { |o| o.to_hash },
              :vat_registration_number => vat_registration_number.map { |o| o.to_hash }
            }
          end

        end

        # A suggested address (usually providing more accurate information). This object
        # contains both the suggested address as well as metadata on which fields are
        # actually different
        class AddressSuggestion

          attr_reader :address, :streets, :city, :province, :postal, :country

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:address, :streets, :city, :province, :postal, :country], 'AddressSuggestion')
            @address = (x = opts.delete(:address); x.is_a?(::Io::Flow::V0::Models::Address) ? x : ::Io::Flow::V0::Models::Address.new(x))
            @streets = HttpClient::Preconditions.assert_boolean('streets', opts.delete(:streets))
            @city = HttpClient::Preconditions.assert_boolean('city', opts.delete(:city))
            @province = HttpClient::Preconditions.assert_boolean('province', opts.delete(:province))
            @postal = HttpClient::Preconditions.assert_boolean('postal', opts.delete(:postal))
            @country = HttpClient::Preconditions.assert_boolean('country', opts.delete(:country))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            AddressSuggestion.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :address => address.to_hash,
              :streets => streets,
              :city => city,
              :province => province,
              :postal => postal,
              :country => country
            }
          end

        end

        # Address verification returns information on whether or not an address is valid
        # and deliverable - meaning carriers will accept this address. Also returns
        # suggestions for address correction, including data to highlight specific
        # fields to correct.
        class AddressVerification

          attr_reader :address, :valid, :suggestions

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:address, :valid], 'AddressVerification')
            @address = (x = opts.delete(:address); x.is_a?(::Io::Flow::V0::Models::Address) ? x : ::Io::Flow::V0::Models::Address.new(x))
            @valid = HttpClient::Preconditions.assert_boolean('valid', opts.delete(:valid))
            @suggestions = HttpClient::Preconditions.assert_class('suggestions', (x = opts.delete(:suggestions); x.nil? ? [] : x), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::AddressSuggestion) ? x : ::Io::Flow::V0::Models::AddressSuggestion.new(x)) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            AddressVerification.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :address => address.to_hash,
              :valid => valid,
              :suggestions => suggestions.map { |o| o.to_hash }
            }
          end

        end

        class AdjustmentReason

          attr_reader :key, :label

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:key, :label], 'AdjustmentReason')
            @key = (x = opts.delete(:key); x.is_a?(::Io::Flow::V0::Models::AdjustmentReasonKey) ? x : ::Io::Flow::V0::Models::AdjustmentReasonKey.apply(x))
            @label = HttpClient::Preconditions.assert_class('label', opts.delete(:label), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            AdjustmentReason.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :key => key.value,
              :label => label
            }
          end

        end

        # Data required to assist in challenging a customer natively.
        class AdyenChallengeShopperData < AdyenNativeData

          attr_reader :challenge_token

          def initialize(incoming={})
            super(:discriminator => AdyenNativeData::Types::ADYEN_CHALLENGE_SHOPPER_DATA)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:challenge_token], 'AdyenChallengeShopperData')
            @challenge_token = HttpClient::Preconditions.assert_class('challenge_token', opts.delete(:challenge_token), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            AdyenChallengeShopperData.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :challenge_token => challenge_token
            }
          end

        end

        # Data required to assist in identifying a customer natively.
        class AdyenIdentifyShopperData < AdyenNativeData

          attr_reader :fingerprint_token

          def initialize(incoming={})
            super(:discriminator => AdyenNativeData::Types::ADYEN_IDENTIFY_SHOPPER_DATA)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:fingerprint_token], 'AdyenIdentifyShopperData')
            @fingerprint_token = HttpClient::Preconditions.assert_class('fingerprint_token', opts.delete(:fingerprint_token), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            AdyenIdentifyShopperData.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :fingerprint_token => fingerprint_token
            }
          end

        end

        # Provides details for how to acquire additional information from the customer
        # natively in the browser for Adyen (e.g. 3DS2)
        class AdyenNativeActionDetails < AuthorizationResultActionDetails

          attr_reader :origin_key, :data

          def initialize(incoming={})
            super(:discriminator => AuthorizationResultActionDetails::Types::ADYEN_NATIVE_ACTION_DETAILS)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @origin_key = (x = opts.delete(:origin_key); x.nil? ? nil : HttpClient::Preconditions.assert_class('origin_key', x, String))
            @data = (x = opts.delete(:data); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::AdyenNativeData) ? x : ::Io::Flow::V0::Models::AdyenNativeData.from_json(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            AdyenNativeActionDetails.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :origin_key => origin_key,
              :data => data.nil? ? nil : data.to_hash
            }
          end

        end

        # This will load a visible window from the card issuer where the customer will
        # need to authenticate to complete the transaction. Used to initiate
        # Checkout.create using the `threeDS2Challenge` operation.
        class AdyenV3ChallengeToken < SdkAdyenV3AuthenticationToken

          attr_reader :challenge_token

          def initialize(incoming={})
            super(:type => SdkAdyenV3AuthenticationToken::Types::ADYEN_V3_CHALLENGE_TOKEN)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:challenge_token], 'AdyenV3ChallengeToken')
            @challenge_token = HttpClient::Preconditions.assert_class('challenge_token', opts.delete(:challenge_token), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            AdyenV3ChallengeToken.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :challenge_token => challenge_token
            }
          end

        end

        # This will load a hidden script from the card issuer that gathers browser
        # metrics to inform the authorization decision. Used to initiate Checkout.create
        # using the `threeDS2DeviceFingerprint` operation.
        class AdyenV3FingerprintToken < SdkAdyenV3AuthenticationToken

          attr_reader :fingerprint_token

          def initialize(incoming={})
            super(:type => SdkAdyenV3AuthenticationToken::Types::ADYEN_V3_FINGERPRINT_TOKEN)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:fingerprint_token], 'AdyenV3FingerprintToken')
            @fingerprint_token = HttpClient::Preconditions.assert_class('fingerprint_token', opts.delete(:fingerprint_token), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            AdyenV3FingerprintToken.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :fingerprint_token => fingerprint_token
            }
          end

        end

        class Allocation

          attr_reader :order, :details

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:order, :details], 'Allocation')
            @order = (x = opts.delete(:order); x.is_a?(::Io::Flow::V0::Models::AllocationOrderSummary) ? x : ::Io::Flow::V0::Models::AllocationOrderSummary.new(x))
            @details = HttpClient::Preconditions.assert_class('details', opts.delete(:details), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::AllocationDetail) ? x : ::Io::Flow::V0::Models::AllocationDetail.from_json(x)) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            Allocation.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :order => order.to_hash,
              :details => details.map { |o| o.to_hash }
            }
          end

        end

        class AllocationDeletedV2 < Event

          attr_reader :event_id, :timestamp, :organization, :id

          def initialize(incoming={})
            super(:discriminator => Event::Types::ALLOCATION_DELETED_V2)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :id], 'AllocationDeletedV2')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            AllocationDeletedV2.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :id => id
            }
          end

        end

        # Represents any component that is not VAT or duty, such as item price,
        # rounding, shipping, etc.
        class AllocationDetailComponent < AllocationComponent

          attr_reader :key, :total, :price

          def initialize(incoming={})
            super(:discriminator => AllocationComponent::Types::ALLOCATION_DETAIL_COMPONENT)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:key, :total], 'AllocationDetailComponent')
            @key = (x = opts.delete(:key); x.is_a?(::Io::Flow::V0::Models::OrderPriceDetailComponentKey) ? x : ::Io::Flow::V0::Models::OrderPriceDetailComponentKey.apply(x))
            @total = (x = opts.delete(:total); x.is_a?(::Io::Flow::V0::Models::PriceWithBase) ? x : ::Io::Flow::V0::Models::PriceWithBase.new(x))
            @price = (x = opts.delete(:price); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::PriceWithBase) ? x : ::Io::Flow::V0::Models::PriceWithBase.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            AllocationDetailComponent.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :key => key.value,
              :total => total.to_hash,
              :price => price.nil? ? nil : price.to_hash
            }
          end

        end

        # Represents either a VAT or duty component.
        class AllocationLevyComponent < AllocationComponent

          attr_reader :key, :total, :rate, :name, :price, :accuracy, :basis

          def initialize(incoming={})
            super(:discriminator => AllocationComponent::Types::ALLOCATION_LEVY_COMPONENT)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:key, :total, :rate, :name], 'AllocationLevyComponent')
            @key = (x = opts.delete(:key); x.is_a?(::Io::Flow::V0::Models::OrderPriceDetailComponentKey) ? x : ::Io::Flow::V0::Models::OrderPriceDetailComponentKey.apply(x))
            @total = (x = opts.delete(:total); x.is_a?(::Io::Flow::V0::Models::PriceWithBase) ? x : ::Io::Flow::V0::Models::PriceWithBase.new(x))
            @rate = HttpClient::Preconditions.assert_class('rate', HttpClient::Helper.to_big_decimal(opts.delete(:rate)), BigDecimal)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
            @price = (x = opts.delete(:price); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::PriceWithBase) ? x : ::Io::Flow::V0::Models::PriceWithBase.new(x)))
            @accuracy = (x = (x = opts.delete(:accuracy); x.nil? ? "calculated" : x); x.is_a?(::Io::Flow::V0::Models::PriceAccuracy) ? x : ::Io::Flow::V0::Models::PriceAccuracy.apply(x))
            @basis = (x = opts.delete(:basis); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::MoneyWithBase) ? x : ::Io::Flow::V0::Models::MoneyWithBase.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            AllocationLevyComponent.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :key => key.value,
              :total => total.to_hash,
              :rate => rate.to_f.to_s,
              :name => name,
              :price => price.nil? ? nil : price.to_hash,
              :accuracy => accuracy.value,
              :basis => basis.nil? ? nil : basis.to_hash
            }
          end

        end

        class AllocationLineDetail < AllocationDetail

          attr_reader :id, :number, :quantity, :key, :price, :total, :included, :not_included

          def initialize(incoming={})
            super(:discriminator => AllocationDetail::Types::ALLOCATION_LINE_DETAIL)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:number, :quantity, :key, :price, :total, :included, :not_included], 'AllocationLineDetail')
            @id = (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, String))
            @number = HttpClient::Preconditions.assert_class('number', opts.delete(:number), String)
            @quantity = HttpClient::Preconditions.assert_class('quantity', opts.delete(:quantity), Integer)
            @key = (x = opts.delete(:key); x.is_a?(::Io::Flow::V0::Models::OrderPriceDetailKey) ? x : ::Io::Flow::V0::Models::OrderPriceDetailKey.apply(x))
            @price = (x = opts.delete(:price); x.is_a?(::Io::Flow::V0::Models::PriceWithBase) ? x : ::Io::Flow::V0::Models::PriceWithBase.new(x))
            @total = (x = opts.delete(:total); x.is_a?(::Io::Flow::V0::Models::PriceWithBase) ? x : ::Io::Flow::V0::Models::PriceWithBase.new(x))
            @included = HttpClient::Preconditions.assert_class('included', opts.delete(:included), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::AllocationComponent) ? x : ::Io::Flow::V0::Models::AllocationComponent.from_json(x)) }
            @not_included = HttpClient::Preconditions.assert_class('not_included', opts.delete(:not_included), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::AllocationComponent) ? x : ::Io::Flow::V0::Models::AllocationComponent.from_json(x)) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            AllocationLineDetail.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :id => id,
              :number => number,
              :quantity => quantity,
              :key => key.value,
              :price => price.to_hash,
              :total => total.to_hash,
              :included => included.map { |o| o.to_hash },
              :not_included => not_included.map { |o| o.to_hash }
            }
          end

        end

        # A line-based view of order financials.
        class AllocationLineSummary

          attr_reader :line_items, :shipping, :subtotal, :discount, :duties, :tax, :tax_subsidy, :duties_subsidy, :total

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:line_items, :shipping, :subtotal, :discount, :duties, :tax, :tax_subsidy, :duties_subsidy, :total], 'AllocationLineSummary')
            @line_items = HttpClient::Preconditions.assert_class('line_items', opts.delete(:line_items), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::AllocationLineSummaryLineItem) ? x : ::Io::Flow::V0::Models::AllocationLineSummaryLineItem.new(x)) }
            @shipping = (x = opts.delete(:shipping); x.is_a?(::Io::Flow::V0::Models::AllocationLineSummaryShipping) ? x : ::Io::Flow::V0::Models::AllocationLineSummaryShipping.new(x))
            @subtotal = (x = opts.delete(:subtotal); x.is_a?(::Io::Flow::V0::Models::MoneyWithBase) ? x : ::Io::Flow::V0::Models::MoneyWithBase.new(x))
            @discount = (x = opts.delete(:discount); x.is_a?(::Io::Flow::V0::Models::MoneyWithBase) ? x : ::Io::Flow::V0::Models::MoneyWithBase.new(x))
            @duties = (x = opts.delete(:duties); x.is_a?(::Io::Flow::V0::Models::MoneyWithBase) ? x : ::Io::Flow::V0::Models::MoneyWithBase.new(x))
            @tax = (x = opts.delete(:tax); x.is_a?(::Io::Flow::V0::Models::MoneyWithBase) ? x : ::Io::Flow::V0::Models::MoneyWithBase.new(x))
            @tax_subsidy = (x = opts.delete(:tax_subsidy); x.is_a?(::Io::Flow::V0::Models::MoneyWithBase) ? x : ::Io::Flow::V0::Models::MoneyWithBase.new(x))
            @duties_subsidy = (x = opts.delete(:duties_subsidy); x.is_a?(::Io::Flow::V0::Models::MoneyWithBase) ? x : ::Io::Flow::V0::Models::MoneyWithBase.new(x))
            @total = (x = opts.delete(:total); x.is_a?(::Io::Flow::V0::Models::MoneyWithBase) ? x : ::Io::Flow::V0::Models::MoneyWithBase.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            AllocationLineSummary.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :line_items => line_items.map { |o| o.to_hash },
              :shipping => shipping.to_hash,
              :subtotal => subtotal.to_hash,
              :discount => discount.to_hash,
              :duties => duties.to_hash,
              :tax => tax.to_hash,
              :tax_subsidy => tax_subsidy.to_hash,
              :duties_subsidy => duties_subsidy.to_hash,
              :total => total.to_hash
            }
          end

        end

        # A simplified view on order financial details. Represents a single line on an
        # order.
        class AllocationLineSummaryLineItem

          attr_reader :item_number, :line_number, :subtotal, :discount, :duties, :tax, :tax_subsidy, :duties_subsidy, :total

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:item_number, :subtotal, :discount, :duties, :tax, :tax_subsidy, :duties_subsidy, :total], 'AllocationLineSummaryLineItem')
            @item_number = HttpClient::Preconditions.assert_class('item_number', opts.delete(:item_number), String)
            @line_number = (x = opts.delete(:line_number); x.nil? ? nil : HttpClient::Preconditions.assert_class('line_number', x, String))
            @subtotal = (x = opts.delete(:subtotal); x.is_a?(::Io::Flow::V0::Models::MoneyWithBase) ? x : ::Io::Flow::V0::Models::MoneyWithBase.new(x))
            @discount = (x = opts.delete(:discount); x.is_a?(::Io::Flow::V0::Models::MoneyWithBase) ? x : ::Io::Flow::V0::Models::MoneyWithBase.new(x))
            @duties = (x = opts.delete(:duties); x.is_a?(::Io::Flow::V0::Models::MoneyWithBase) ? x : ::Io::Flow::V0::Models::MoneyWithBase.new(x))
            @tax = (x = opts.delete(:tax); x.is_a?(::Io::Flow::V0::Models::MoneyWithBase) ? x : ::Io::Flow::V0::Models::MoneyWithBase.new(x))
            @tax_subsidy = (x = opts.delete(:tax_subsidy); x.is_a?(::Io::Flow::V0::Models::MoneyWithBase) ? x : ::Io::Flow::V0::Models::MoneyWithBase.new(x))
            @duties_subsidy = (x = opts.delete(:duties_subsidy); x.is_a?(::Io::Flow::V0::Models::MoneyWithBase) ? x : ::Io::Flow::V0::Models::MoneyWithBase.new(x))
            @total = (x = opts.delete(:total); x.is_a?(::Io::Flow::V0::Models::MoneyWithBase) ? x : ::Io::Flow::V0::Models::MoneyWithBase.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            AllocationLineSummaryLineItem.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :item_number => item_number,
              :line_number => line_number,
              :subtotal => subtotal.to_hash,
              :discount => discount.to_hash,
              :duties => duties.to_hash,
              :tax => tax.to_hash,
              :tax_subsidy => tax_subsidy.to_hash,
              :duties_subsidy => duties_subsidy.to_hash,
              :total => total.to_hash
            }
          end

        end

        # A simplified view on order financial details. Represents the shipping details
        # for an order.
        class AllocationLineSummaryShipping

          attr_reader :subtotal, :discount, :duties, :tax, :tax_subsidy, :duties_subsidy, :total

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:subtotal, :discount, :duties, :tax, :tax_subsidy, :duties_subsidy, :total], 'AllocationLineSummaryShipping')
            @subtotal = (x = opts.delete(:subtotal); x.is_a?(::Io::Flow::V0::Models::MoneyWithBase) ? x : ::Io::Flow::V0::Models::MoneyWithBase.new(x))
            @discount = (x = opts.delete(:discount); x.is_a?(::Io::Flow::V0::Models::MoneyWithBase) ? x : ::Io::Flow::V0::Models::MoneyWithBase.new(x))
            @duties = (x = opts.delete(:duties); x.is_a?(::Io::Flow::V0::Models::MoneyWithBase) ? x : ::Io::Flow::V0::Models::MoneyWithBase.new(x))
            @tax = (x = opts.delete(:tax); x.is_a?(::Io::Flow::V0::Models::MoneyWithBase) ? x : ::Io::Flow::V0::Models::MoneyWithBase.new(x))
            @tax_subsidy = (x = opts.delete(:tax_subsidy); x.is_a?(::Io::Flow::V0::Models::MoneyWithBase) ? x : ::Io::Flow::V0::Models::MoneyWithBase.new(x))
            @duties_subsidy = (x = opts.delete(:duties_subsidy); x.is_a?(::Io::Flow::V0::Models::MoneyWithBase) ? x : ::Io::Flow::V0::Models::MoneyWithBase.new(x))
            @total = (x = opts.delete(:total); x.is_a?(::Io::Flow::V0::Models::MoneyWithBase) ? x : ::Io::Flow::V0::Models::MoneyWithBase.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            AllocationLineSummaryShipping.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :subtotal => subtotal.to_hash,
              :discount => discount.to_hash,
              :duties => duties.to_hash,
              :tax => tax.to_hash,
              :tax_subsidy => tax_subsidy.to_hash,
              :duties_subsidy => duties_subsidy.to_hash,
              :total => total.to_hash
            }
          end

        end

        # Represents an order-specific detail such as shipping, insurance, or an
        # order-level discount.
        class AllocationOrderDetail < AllocationDetail

          attr_reader :key, :total, :included, :not_included

          def initialize(incoming={})
            super(:discriminator => AllocationDetail::Types::ALLOCATION_ORDER_DETAIL)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:key, :total, :included, :not_included], 'AllocationOrderDetail')
            @key = (x = opts.delete(:key); x.is_a?(::Io::Flow::V0::Models::OrderPriceDetailKey) ? x : ::Io::Flow::V0::Models::OrderPriceDetailKey.apply(x))
            @total = (x = opts.delete(:total); x.is_a?(::Io::Flow::V0::Models::PriceWithBase) ? x : ::Io::Flow::V0::Models::PriceWithBase.new(x))
            @included = HttpClient::Preconditions.assert_class('included', opts.delete(:included), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::AllocationComponent) ? x : ::Io::Flow::V0::Models::AllocationComponent.from_json(x)) }
            @not_included = HttpClient::Preconditions.assert_class('not_included', opts.delete(:not_included), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::AllocationComponent) ? x : ::Io::Flow::V0::Models::AllocationComponent.from_json(x)) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            AllocationOrderDetail.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :key => key.value,
              :total => total.to_hash,
              :included => included.map { |o| o.to_hash },
              :not_included => not_included.map { |o| o.to_hash }
            }
          end

        end

        class AllocationOrderSummary

          attr_reader :id, :number, :submitted_at

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :number], 'AllocationOrderSummary')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @number = HttpClient::Preconditions.assert_class('number', opts.delete(:number), String)
            @submitted_at = (x = opts.delete(:submitted_at); x.nil? ? nil : HttpClient::Preconditions.assert_class('submitted_at', HttpClient::Helper.to_date_time_iso8601(x), DateTime))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            AllocationOrderSummary.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :number => number,
              :submitted_at => submitted_at
            }
          end

        end

        class AllocationUpsertedV2 < Event

          attr_reader :event_id, :timestamp, :organization, :allocation

          def initialize(incoming={})
            super(:discriminator => Event::Types::ALLOCATION_UPSERTED_V2)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :allocation], 'AllocationUpsertedV2')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @allocation = (x = opts.delete(:allocation); x.is_a?(::Io::Flow::V0::Models::AllocationV2) ? x : ::Io::Flow::V0::Models::AllocationV2.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            AllocationUpsertedV2.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :allocation => allocation.to_hash
            }
          end

        end

        class AllocationV2

          attr_reader :id, :order, :details, :total

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :order, :details, :total], 'AllocationV2')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @order = (x = opts.delete(:order); x.is_a?(::Io::Flow::V0::Models::AllocationOrderSummary) ? x : ::Io::Flow::V0::Models::AllocationOrderSummary.new(x))
            @details = HttpClient::Preconditions.assert_class('details', opts.delete(:details), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::AllocationDetail) ? x : ::Io::Flow::V0::Models::AllocationDetail.from_json(x)) }
            @total = (x = opts.delete(:total); x.is_a?(::Io::Flow::V0::Models::LocalizedTotal) ? x : ::Io::Flow::V0::Models::LocalizedTotal.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            AllocationV2.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :order => order.to_hash,
              :details => details.map { |o| o.to_hash },
              :total => total.to_hash
            }
          end

        end

        # Rule outcome where shipping surfaced in quote is actual cost plus a predefined
        # margin price
        class AmountMargin < TierRuleOutcome

          attr_reader :margin

          def initialize(incoming={})
            super(:discriminator => TierRuleOutcome::Types::AMOUNT_MARGIN)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:margin], 'AmountMargin')
            @margin = (x = opts.delete(:margin); x.is_a?(::Io::Flow::V0::Models::Price) ? x : ::Io::Flow::V0::Models::Price.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            AmountMargin.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :margin => margin.to_hash
            }
          end

        end

        class AmountMarginForm < TierRuleOutcomeForm

          attr_reader :margin

          def initialize(incoming={})
            super(:discriminator => TierRuleOutcomeForm::Types::AMOUNT_MARGIN_FORM)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:margin], 'AmountMarginForm')
            @margin = (x = opts.delete(:margin); x.is_a?(::Io::Flow::V0::Models::Money) ? x : ::Io::Flow::V0::Models::Money.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            AmountMarginForm.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :margin => margin.to_hash
            }
          end

        end

        class AnalyticsExportType < ExportType

          attr_reader :from, :to, :region, :interval

          def initialize(incoming={})
            super(:discriminator => ExportType::Types::ANALYTICS_EXPORT_TYPE)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @from = (x = opts.delete(:from); x.nil? ? nil : HttpClient::Preconditions.assert_class('from', HttpClient::Helper.to_date_time_iso8601(x), DateTime))
            @to = (x = opts.delete(:to); x.nil? ? nil : HttpClient::Preconditions.assert_class('to', HttpClient::Helper.to_date_time_iso8601(x), DateTime))
            @region = (x = opts.delete(:region); x.nil? ? nil : HttpClient::Preconditions.assert_class('region', x, String))
            @interval = (x = opts.delete(:interval); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::UnitOfTime) ? x : ::Io::Flow::V0::Models::UnitOfTime.apply(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            AnalyticsExportType.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :from => from,
              :to => to,
              :region => region,
              :interval => interval.nil? ? nil : interval.value
            }
          end

        end

        class ApplePayMerchantValidationPayload < AuthorizationPayloadParameters

          attr_reader :validation_url, :display_name

          def initialize(incoming={})
            super(:discriminator => AuthorizationPayloadParameters::Types::APPLE_PAY_MERCHANT_VALIDATION_PAYLOAD)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:validation_url], 'ApplePayMerchantValidationPayload')
            @validation_url = HttpClient::Preconditions.assert_class('validation_url', opts.delete(:validation_url), String)
            @display_name = (x = opts.delete(:display_name); x.nil? ? nil : HttpClient::Preconditions.assert_class('display_name', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ApplePayMerchantValidationPayload.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :validation_url => validation_url,
              :display_name => display_name
            }
          end

        end

        # Rule outcome where shipping surfaced in quote is actual cost of the service
        class AtCost < TierRuleOutcome

          attr_reader :ignore

          def initialize(incoming={})
            super(:discriminator => TierRuleOutcome::Types::AT_COST)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @ignore = (x = opts.delete(:ignore); x.nil? ? nil : HttpClient::Preconditions.assert_class('ignore', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            AtCost.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :ignore => ignore
            }
          end

        end

        # An attribute can be configured to be used in different ways throughout Flow. A
        # common example is to identify a meaningful attribute (e.g. brand) that can
        # then be displayed throughout the Flow console.
        class Attribute

          attr_reader :id, :key, :options, :label, :intent, :type, :position

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :key, :options], 'Attribute')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @key = HttpClient::Preconditions.assert_class('key', opts.delete(:key), String)
            @options = (x = opts.delete(:options); x.is_a?(::Io::Flow::V0::Models::Options) ? x : ::Io::Flow::V0::Models::Options.new(x))
            @label = (x = opts.delete(:label); x.nil? ? nil : HttpClient::Preconditions.assert_class('label', x, String))
            @intent = (x = opts.delete(:intent); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::AttributeIntent) ? x : ::Io::Flow::V0::Models::AttributeIntent.apply(x)))
            @type = (x = opts.delete(:type); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::AttributeDataType) ? x : ::Io::Flow::V0::Models::AttributeDataType.apply(x)))
            @position = (x = opts.delete(:position); x.nil? ? nil : HttpClient::Preconditions.assert_class('position', x, Integer))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            Attribute.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :key => key,
              :options => options.to_hash,
              :label => label,
              :intent => intent.nil? ? nil : intent.value,
              :type => type.nil? ? nil : type.value,
              :position => position
            }
          end

        end

        class AttributeDeleted < Event

          attr_reader :event_id, :timestamp, :organization, :key

          def initialize(incoming={})
            super(:discriminator => Event::Types::ATTRIBUTE_DELETED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :key], 'AttributeDeleted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @key = HttpClient::Preconditions.assert_class('key', opts.delete(:key), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            AttributeDeleted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :key => key
            }
          end

        end

        class AttributeDeletedV2 < Event

          attr_reader :event_id, :timestamp, :organization, :id

          def initialize(incoming={})
            super(:discriminator => Event::Types::ATTRIBUTE_DELETED_V2)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :id], 'AttributeDeletedV2')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            AttributeDeletedV2.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :id => id
            }
          end

        end

        class AttributeForm

          attr_reader :key, :options, :label, :intent, :type, :position

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:key, :options], 'AttributeForm')
            @key = HttpClient::Preconditions.assert_class('key', opts.delete(:key), String)
            @options = (x = opts.delete(:options); x.is_a?(::Io::Flow::V0::Models::Options) ? x : ::Io::Flow::V0::Models::Options.new(x))
            @label = (x = opts.delete(:label); x.nil? ? nil : HttpClient::Preconditions.assert_class('label', x, String))
            @intent = (x = opts.delete(:intent); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::AttributeIntent) ? x : ::Io::Flow::V0::Models::AttributeIntent.apply(x)))
            @type = (x = opts.delete(:type); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::AttributeDataType) ? x : ::Io::Flow::V0::Models::AttributeDataType.apply(x)))
            @position = (x = opts.delete(:position); x.nil? ? nil : HttpClient::Preconditions.assert_class('position', x, Integer))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            AttributeForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :key => key,
              :options => options.to_hash,
              :label => label,
              :intent => intent.nil? ? nil : intent.value,
              :type => type.nil? ? nil : type.value,
              :position => position
            }
          end

        end

        class AttributeUpserted < Event

          attr_reader :event_id, :timestamp, :organization, :key, :label, :intent, :type

          def initialize(incoming={})
            super(:discriminator => Event::Types::ATTRIBUTE_UPSERTED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :key, :label, :type], 'AttributeUpserted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @key = HttpClient::Preconditions.assert_class('key', opts.delete(:key), String)
            @label = HttpClient::Preconditions.assert_class('label', opts.delete(:label), String)
            @intent = (x = opts.delete(:intent); x.nil? ? nil : HttpClient::Preconditions.assert_class('intent', x, String))
            @type = HttpClient::Preconditions.assert_class('type', opts.delete(:type), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            AttributeUpserted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :key => key,
              :label => label,
              :intent => intent,
              :type => type
            }
          end

        end

        class AttributeUpsertedV2 < Event

          attr_reader :event_id, :timestamp, :organization, :attribute

          def initialize(incoming={})
            super(:discriminator => Event::Types::ATTRIBUTE_UPSERTED_V2)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :attribute], 'AttributeUpsertedV2')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @attribute = (x = opts.delete(:attribute); x.is_a?(::Io::Flow::V0::Models::Attribute) ? x : ::Io::Flow::V0::Models::Attribute.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            AttributeUpsertedV2.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :attribute => attribute.to_hash
            }
          end

        end

        # Retrieve journaled history of an attribute
        class AttributeVersion

          attr_reader :id, :timestamp, :type, :attribute

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :timestamp, :type, :attribute], 'AttributeVersion')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::V0::Models::ChangeType) ? x : ::Io::Flow::V0::Models::ChangeType.apply(x))
            @attribute = (x = opts.delete(:attribute); x.is_a?(::Io::Flow::V0::Models::Attribute) ? x : ::Io::Flow::V0::Models::Attribute.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            AttributeVersion.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :timestamp => timestamp,
              :type => type.value,
              :attribute => attribute.to_hash
            }
          end

        end

        class AuthenticationForm

          attr_reader :email, :password

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:email, :password], 'AuthenticationForm')
            @email = HttpClient::Preconditions.assert_class('email', opts.delete(:email), String)
            @password = HttpClient::Preconditions.assert_class('password', opts.delete(:password), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            AuthenticationForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :email => email,
              :password => password
            }
          end

        end

        # Used to complete a `use_sdk_adyen_v3` action after the `onComplete()` function
        # passed to Adyen SDK's is invoked with a parameter containing the result data.
        class AuthorizationActionResultAdyenV3 < CardAuthorizationActionResult

          attr_reader :result

          def initialize(incoming={})
            super(:type => CardAuthorizationActionResult::Types::AUTHORIZATION_ACTION_RESULT_ADYEN_V3)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:result], 'AuthorizationActionResultAdyenV3')
            @result = HttpClient::Preconditions.assert_class('result', HttpClient::Helper.to_object(opts.delete(:result)), Hash)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            AuthorizationActionResultAdyenV3.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :result => result
            }
          end

        end

        class AuthorizationActionResultAdyenV4 < CardAuthorizationActionResult

          attr_reader :result

          def initialize(incoming={})
            super(:type => CardAuthorizationActionResult::Types::AUTHORIZATION_ACTION_RESULT_ADYEN_V4)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:result], 'AuthorizationActionResultAdyenV4')
            @result = HttpClient::Preconditions.assert_class('result', HttpClient::Helper.to_object(opts.delete(:result)), Hash)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            AuthorizationActionResultAdyenV4.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :result => result
            }
          end

        end

        # Creates a new authorization based on the underlying information in an existing
        # authorization. A common use case here is to create a new auth when the
        # existing one has expired.
        class AuthorizationCopyForm < AuthorizationForm

          attr_reader :source_authorization_key, :amount, :currency, :attributes

          def initialize(incoming={})
            super(:discriminator => AuthorizationForm::Types::AUTHORIZATION_COPY_FORM)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:source_authorization_key, :amount, :currency], 'AuthorizationCopyForm')
            @source_authorization_key = HttpClient::Preconditions.assert_class('source_authorization_key', opts.delete(:source_authorization_key), String)
            @amount = HttpClient::Preconditions.assert_class('amount', HttpClient::Helper.to_big_decimal(opts.delete(:amount)), BigDecimal)
            @currency = HttpClient::Preconditions.assert_class('currency', opts.delete(:currency), String)
            @attributes = (x = opts.delete(:attributes); x.nil? ? nil : HttpClient::Preconditions.assert_class('attributes', x, Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h })
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            AuthorizationCopyForm.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :source_authorization_key => source_authorization_key,
              :amount => amount.to_f.to_s,
              :currency => currency,
              :attributes => attributes.nil? ? nil : attributes
            }
          end

        end

        class AuthorizationDeletedV2 < Event

          attr_reader :event_id, :timestamp, :organization, :id

          def initialize(incoming={})
            super(:discriminator => Event::Types::AUTHORIZATION_DELETED_V2)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :id], 'AuthorizationDeletedV2')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            AuthorizationDeletedV2.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :id => id
            }
          end

        end

        # Details for why an authorization was not created
        class AuthorizationError

          attr_reader :code, :messages, :avs, :cvv

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:code, :messages], 'AuthorizationError')
            @code = (x = opts.delete(:code); x.is_a?(::Io::Flow::V0::Models::AuthorizationDeclineCode) ? x : ::Io::Flow::V0::Models::AuthorizationDeclineCode.apply(x))
            @messages = HttpClient::Preconditions.assert_class('messages', opts.delete(:messages), Array).map { |v| HttpClient::Preconditions.assert_class('messages', v, String) }
            @avs = (x = opts.delete(:avs); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Avs) ? x : ::Io::Flow::V0::Models::Avs.new(x)))
            @cvv = (x = opts.delete(:cvv); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Cvv) ? x : ::Io::Flow::V0::Models::Cvv.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            AuthorizationError.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :code => code.value,
              :messages => messages,
              :avs => avs.nil? ? nil : avs.to_hash,
              :cvv => cvv.nil? ? nil : cvv.to_hash
            }
          end

        end

        class AuthorizationOrderReference < PaymentOrderReference

          attr_reader :number

          def initialize(incoming={})
            super(:discriminator => PaymentOrderReference::Types::AUTHORIZATION_ORDER_REFERENCE)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:number], 'AuthorizationOrderReference')
            @number = HttpClient::Preconditions.assert_class('number', opts.delete(:number), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            AuthorizationOrderReference.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :number => number
            }
          end

        end

        # Used to complete an inline authorization like Google Pay or Apple Pay.
        class AuthorizationPayload

          attr_reader :parameters

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:parameters], 'AuthorizationPayload')
            @parameters = (x = opts.delete(:parameters); x.is_a?(::Io::Flow::V0::Models::AuthorizationPayloadParameters) ? x : ::Io::Flow::V0::Models::AuthorizationPayloadParameters.from_json(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            AuthorizationPayload.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :parameters => parameters.to_hash
            }
          end

        end

        class AuthorizationReference

          attr_reader :id, :key, :order

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :key], 'AuthorizationReference')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @key = HttpClient::Preconditions.assert_class('key', opts.delete(:key), String)
            @order = (x = opts.delete(:order); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::AuthorizationOrderReference) ? x : ::Io::Flow::V0::Models::AuthorizationOrderReference.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            AuthorizationReference.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :key => key,
              :order => order.nil? ? nil : order.to_hash
            }
          end

        end

        # Contains the result of the authorization. If an immediate response is not
        # available, the state will be 'pending' - this usually indicates fraud review
        # requires additional time / verification (or a potential network issue with the
        # issuing bank).
        class AuthorizationResult

          attr_reader :status, :action, :decline_code, :avs, :cvv, :three_d_secure, :description

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:status], 'AuthorizationResult')
            @status = (x = opts.delete(:status); x.is_a?(::Io::Flow::V0::Models::AuthorizationStatus) ? x : ::Io::Flow::V0::Models::AuthorizationStatus.apply(x))
            @action = (x = opts.delete(:action); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::AuthorizationResultAction) ? x : ::Io::Flow::V0::Models::AuthorizationResultAction.from_json(x)))
            @decline_code = (x = opts.delete(:decline_code); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::AuthorizationDeclineCode) ? x : ::Io::Flow::V0::Models::AuthorizationDeclineCode.apply(x)))
            @avs = (x = opts.delete(:avs); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Avs) ? x : ::Io::Flow::V0::Models::Avs.new(x)))
            @cvv = (x = opts.delete(:cvv); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Cvv) ? x : ::Io::Flow::V0::Models::Cvv.new(x)))
            @three_d_secure = (x = opts.delete(:three_d_secure); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::ThreeDSecure) ? x : ::Io::Flow::V0::Models::ThreeDSecure.new(x)))
            @description = (x = opts.delete(:description); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::AuthorizationResultDescription) ? x : ::Io::Flow::V0::Models::AuthorizationResultDescription.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            AuthorizationResult.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :status => status.value,
              :action => action.nil? ? nil : action.to_hash,
              :decline_code => decline_code.nil? ? nil : decline_code.value,
              :avs => avs.nil? ? nil : avs.to_hash,
              :cvv => cvv.nil? ? nil : cvv.to_hash,
              :three_d_secure => three_d_secure.nil? ? nil : three_d_secure.to_hash,
              :description => description.nil? ? nil : description.to_hash
            }
          end

        end

        # Provides details for how to acquire additional information from the customer
        # using GET (e.g. redirecting to the issuer for online payment method or 3D
        # Secure).
        class AuthorizationResultActionGet < AuthorizationResultAction

          attr_reader :type, :url, :details

          def initialize(incoming={})
            super(:discriminator => AuthorizationResultAction::Types::AUTHORIZATION_RESULT_ACTION_GET)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:type], 'AuthorizationResultActionGet')
            @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::V0::Models::AuthorizationResultActionType) ? x : ::Io::Flow::V0::Models::AuthorizationResultActionType.apply(x))
            @url = (x = opts.delete(:url); x.nil? ? nil : HttpClient::Preconditions.assert_class('url', x, String))
            @details = (x = opts.delete(:details); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::AuthorizationResultActionDetails) ? x : ::Io::Flow::V0::Models::AuthorizationResultActionDetails.from_json(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            AuthorizationResultActionGet.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :type => type.value,
              :url => url,
              :details => details.nil? ? nil : details.to_hash
            }
          end

        end

        # Provides details for how to acquire additional information from the customer
        # natively in the browser (e.g. for 3D Secure 2).
        class AuthorizationResultActionNative < AuthorizationResultAction

          attr_reader :type, :authorization, :details

          def initialize(incoming={})
            super(:discriminator => AuthorizationResultAction::Types::AUTHORIZATION_RESULT_ACTION_NATIVE)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:type, :authorization], 'AuthorizationResultActionNative')
            @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::V0::Models::AuthorizationResultActionType) ? x : ::Io::Flow::V0::Models::AuthorizationResultActionType.apply(x))
            @authorization = (x = opts.delete(:authorization); x.is_a?(::Io::Flow::V0::Models::AuthorizationReference) ? x : ::Io::Flow::V0::Models::AuthorizationReference.new(x))
            @details = (x = opts.delete(:details); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::AuthorizationResultActionDetails) ? x : ::Io::Flow::V0::Models::AuthorizationResultActionDetails.from_json(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            AuthorizationResultActionNative.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :type => type.value,
              :authorization => authorization.to_hash,
              :details => details.nil? ? nil : details.to_hash
            }
          end

        end

        # Provides details for how to acquire additional information from the customer
        # using POST (e.g. redirecting to the issuer for online payment method or 3D
        # Secure).
        class AuthorizationResultActionPost < AuthorizationResultAction

          attr_reader :type, :url, :parameters

          def initialize(incoming={})
            super(:discriminator => AuthorizationResultAction::Types::AUTHORIZATION_RESULT_ACTION_POST)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:type, :url, :parameters], 'AuthorizationResultActionPost')
            @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::V0::Models::AuthorizationResultActionType) ? x : ::Io::Flow::V0::Models::AuthorizationResultActionType.apply(x))
            @url = HttpClient::Preconditions.assert_class('url', opts.delete(:url), String)
            @parameters = HttpClient::Preconditions.assert_class('parameters', HttpClient::Helper.to_object(opts.delete(:parameters)), Hash)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            AuthorizationResultActionPost.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :type => type.value,
              :url => url,
              :parameters => parameters
            }
          end

        end

        # Indicates that a response is not ready and that the consumer should poll (or
        # wait) for a response.
        class AuthorizationResultActionWait < AuthorizationResultAction

          attr_reader :type

          def initialize(incoming={})
            super(:discriminator => AuthorizationResultAction::Types::AUTHORIZATION_RESULT_ACTION_WAIT)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:type], 'AuthorizationResultActionWait')
            @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::V0::Models::AuthorizationResultActionType) ? x : ::Io::Flow::V0::Models::AuthorizationResultActionType.apply(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            AuthorizationResultActionWait.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :type => type.value
            }
          end

        end

        class AuthorizationResultDescription

          attr_reader :display

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:display], 'AuthorizationResultDescription')
            @display = HttpClient::Preconditions.assert_class('display', opts.delete(:display), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            AuthorizationResultDescription.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :display => display
            }
          end

        end

        class AuthorizationStatusChanged < Event

          attr_reader :event_id, :timestamp, :organization, :id, :authorization

          def initialize(incoming={})
            super(:discriminator => Event::Types::AUTHORIZATION_STATUS_CHANGED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :id, :authorization], 'AuthorizationStatusChanged')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @authorization = (x = opts.delete(:authorization); x.is_a?(::Io::Flow::V0::Models::Authorization) ? x : ::Io::Flow::V0::Models::Authorization.from_json(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            AuthorizationStatusChanged.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :id => id,
              :authorization => authorization.to_hash
            }
          end

        end

        class AuthorizationVersion

          attr_reader :id, :timestamp, :type, :authorization

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :timestamp, :type, :authorization], 'AuthorizationVersion')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::V0::Models::ChangeType) ? x : ::Io::Flow::V0::Models::ChangeType.apply(x))
            @authorization = (x = opts.delete(:authorization); x.is_a?(::Io::Flow::V0::Models::Authorization) ? x : ::Io::Flow::V0::Models::Authorization.from_json(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            AuthorizationVersion.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :timestamp => timestamp,
              :type => type.value,
              :authorization => authorization.to_hash
            }
          end

        end

        class AvailableFilterStructured < AvailableFilter

          attr_reader :field, :operators, :format, :valid_values, :placeholder

          def initialize(incoming={})
            super(:discriminator => AvailableFilter::Types::AVAILABLE_FILTER_STRUCTURED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:field, :operators, :format], 'AvailableFilterStructured')
            @field = HttpClient::Preconditions.assert_class('field', opts.delete(:field), String)
            @operators = HttpClient::Preconditions.assert_class('operators', opts.delete(:operators), Array).map { |v| HttpClient::Preconditions.assert_class('operators', v, String) }
            @format = (x = opts.delete(:format); x.is_a?(::Io::Flow::V0::Models::AvailableFilterFormat) ? x : ::Io::Flow::V0::Models::AvailableFilterFormat.apply(x))
            @valid_values = (x = opts.delete(:valid_values); x.nil? ? nil : HttpClient::Preconditions.assert_class('valid_values', x, Array).map { |v| HttpClient::Preconditions.assert_class('valid_values', v, String) })
            @placeholder = (x = opts.delete(:placeholder); x.nil? ? nil : HttpClient::Preconditions.assert_class('placeholder', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            AvailableFilterStructured.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :field => field,
              :operators => operators,
              :format => format.value,
              :valid_values => valid_values.nil? ? nil : valid_values,
              :placeholder => placeholder
            }
          end

        end

        class AvailableFilterUnstructured < AvailableFilter

          attr_reader :placeholder

          def initialize(incoming={})
            super(:discriminator => AvailableFilter::Types::AVAILABLE_FILTER_UNSTRUCTURED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @placeholder = (x = opts.delete(:placeholder); x.nil? ? nil : HttpClient::Preconditions.assert_class('placeholder', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            AvailableFilterUnstructured.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :placeholder => placeholder
            }
          end

        end

        class AvailablePromotion

          attr_reader :id, :shipping_configuration, :region, :promotions

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :shipping_configuration, :region, :promotions], 'AvailablePromotion')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @shipping_configuration = (x = opts.delete(:shipping_configuration); x.is_a?(::Io::Flow::V0::Models::ShippingConfigurationReference) ? x : ::Io::Flow::V0::Models::ShippingConfigurationReference.new(x))
            @region = (x = opts.delete(:region); x.is_a?(::Io::Flow::V0::Models::RegionReference) ? x : ::Io::Flow::V0::Models::RegionReference.new(x))
            @promotions = HttpClient::Preconditions.assert_class('promotions', opts.delete(:promotions), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::Promotion) ? x : ::Io::Flow::V0::Models::Promotion.from_json(x)) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            AvailablePromotion.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :shipping_configuration => shipping_configuration.to_hash,
              :region => region.to_hash,
              :promotions => promotions.map { |o| o.to_hash }
            }
          end

        end

        class AvailablePromotionsDeleted < Event

          attr_reader :event_id, :timestamp, :organization, :experience_key

          def initialize(incoming={})
            super(:discriminator => Event::Types::AVAILABLE_PROMOTIONS_DELETED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :experience_key], 'AvailablePromotionsDeleted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @experience_key = HttpClient::Preconditions.assert_class('experience_key', opts.delete(:experience_key), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            AvailablePromotionsDeleted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :experience_key => experience_key
            }
          end

        end

        class AvailablePromotionsDeletedV2 < Event

          attr_reader :event_id, :timestamp, :organization, :available_promotion

          def initialize(incoming={})
            super(:discriminator => Event::Types::AVAILABLE_PROMOTIONS_DELETED_V2)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :available_promotion], 'AvailablePromotionsDeletedV2')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @available_promotion = (x = opts.delete(:available_promotion); x.is_a?(::Io::Flow::V0::Models::AvailablePromotion) ? x : ::Io::Flow::V0::Models::AvailablePromotion.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            AvailablePromotionsDeletedV2.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :available_promotion => available_promotion.to_hash
            }
          end

        end

        class AvailablePromotionsUpserted < Event

          attr_reader :event_id, :timestamp, :organization, :experience_key, :available_promotions

          def initialize(incoming={})
            super(:discriminator => Event::Types::AVAILABLE_PROMOTIONS_UPSERTED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :experience_key, :available_promotions], 'AvailablePromotionsUpserted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @experience_key = HttpClient::Preconditions.assert_class('experience_key', opts.delete(:experience_key), String)
            @available_promotions = HttpClient::Preconditions.assert_class('available_promotions', opts.delete(:available_promotions), Array).map { |v| HttpClient::Preconditions.assert_class('available_promotions', HttpClient::Helper.to_object(v), Hash) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            AvailablePromotionsUpserted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :experience_key => experience_key,
              :available_promotions => available_promotions
            }
          end

        end

        class AvailablePromotionsUpsertedV2 < Event

          attr_reader :event_id, :timestamp, :organization, :available_promotion

          def initialize(incoming={})
            super(:discriminator => Event::Types::AVAILABLE_PROMOTIONS_UPSERTED_V2)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :available_promotion], 'AvailablePromotionsUpsertedV2')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @available_promotion = (x = opts.delete(:available_promotion); x.is_a?(::Io::Flow::V0::Models::AvailablePromotion) ? x : ::Io::Flow::V0::Models::AvailablePromotion.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            AvailablePromotionsUpsertedV2.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :available_promotion => available_promotion.to_hash
            }
          end

        end

        # Representation of a service level available at a center and the special pickup
        # times during the week. If pickup schedules are not provided, assumption is
        # once a day during the weekdays.
        class AvailableService

          attr_reader :service, :scheduled_pickups, :lead_days

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:service], 'AvailableService')
            @service = HttpClient::Preconditions.assert_class('service', opts.delete(:service), String)
            @scheduled_pickups = (x = opts.delete(:scheduled_pickups); x.nil? ? nil : HttpClient::Preconditions.assert_class('scheduled_pickups', x, Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::ScheduledPickup) ? x : ::Io::Flow::V0::Models::ScheduledPickup.new(x)) })
            @lead_days = (x = opts.delete(:lead_days); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::NumberRange) ? x : ::Io::Flow::V0::Models::NumberRange.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            AvailableService.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :service => service,
              :scheduled_pickups => scheduled_pickups.nil? ? nil : scheduled_pickups.map { |o| o.to_hash },
              :lead_days => lead_days.nil? ? nil : lead_days.to_hash
            }
          end

        end

        class AvalaraTaxCsvSetting < TaxSetting

          attr_reader :reports

          def initialize(incoming={})
            super(:discriminator => TaxSetting::Types::AVALARA_TAX_CSV_SETTING)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @reports = (x = opts.delete(:reports); x.nil? ? nil : HttpClient::Preconditions.assert_class('reports', x, Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::TaxReport) ? x : ::Io::Flow::V0::Models::TaxReport.new(x)) })
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            AvalaraTaxCsvSetting.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :reports => reports.nil? ? nil : reports.map { |o| o.to_hash }
            }
          end

        end

        class AvalaraTaxSetting < TaxSetting

          attr_reader :company_code, :base_currency, :api_key

          def initialize(incoming={})
            super(:discriminator => TaxSetting::Types::AVALARA_TAX_SETTING)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:company_code, :base_currency], 'AvalaraTaxSetting')
            @company_code = HttpClient::Preconditions.assert_class('company_code', opts.delete(:company_code), String)
            @base_currency = HttpClient::Preconditions.assert_class('base_currency', opts.delete(:base_currency), String)
            @api_key = (x = opts.delete(:api_key); x.nil? ? nil : HttpClient::Preconditions.assert_class('api_key', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            AvalaraTaxSetting.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :company_code => company_code,
              :base_currency => base_currency,
              :api_key => api_key
            }
          end

        end

        # Represents the address verification results
        class Avs

          attr_reader :code, :name, :address, :postal, :description

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:code], 'Avs')
            @code = (x = opts.delete(:code); x.is_a?(::Io::Flow::V0::Models::AvsCode) ? x : ::Io::Flow::V0::Models::AvsCode.apply(x))
            @name = (x = opts.delete(:name); x.nil? ? nil : HttpClient::Preconditions.assert_boolean('name', x))
            @address = (x = opts.delete(:address); x.nil? ? nil : HttpClient::Preconditions.assert_boolean('address', x))
            @postal = (x = opts.delete(:postal); x.nil? ? nil : HttpClient::Preconditions.assert_boolean('postal', x))
            @description = (x = opts.delete(:description); x.nil? ? nil : HttpClient::Preconditions.assert_class('description', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            Avs.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :code => code.value,
              :name => name,
              :address => address,
              :postal => postal,
              :description => description
            }
          end

        end

        # The b2b credit memo represents a refund transaction between Flow and one of
        # our clients
        class B2bCreditMemo

          attr_reader :id, :number, :buyer, :seller, :status, :date, :key, :invoice, :lines, :documents, :attributes, :b2b_invoice_type

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :number, :buyer, :seller, :status, :date, :key, :invoice, :lines, :documents, :attributes], 'B2bCreditMemo')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @number = HttpClient::Preconditions.assert_class('number', opts.delete(:number), String)
            @buyer = (x = opts.delete(:buyer); x.is_a?(::Io::Flow::V0::Models::MerchantOfRecordEntity) ? x : ::Io::Flow::V0::Models::MerchantOfRecordEntity.new(x))
            @seller = (x = opts.delete(:seller); x.is_a?(::Io::Flow::V0::Models::MerchantOfRecordEntity) ? x : ::Io::Flow::V0::Models::MerchantOfRecordEntity.new(x))
            @status = (x = opts.delete(:status); x.is_a?(::Io::Flow::V0::Models::ConsumerInvoiceStatus) ? x : ::Io::Flow::V0::Models::ConsumerInvoiceStatus.apply(x))
            @date = HttpClient::Preconditions.assert_class('date', HttpClient::Helper.to_date_time_iso8601(opts.delete(:date)), DateTime)
            @key = HttpClient::Preconditions.assert_class('key', opts.delete(:key), String)
            @invoice = (x = opts.delete(:invoice); x.is_a?(::Io::Flow::V0::Models::B2bInvoiceReference) ? x : ::Io::Flow::V0::Models::B2bInvoiceReference.new(x))
            @lines = HttpClient::Preconditions.assert_class('lines', opts.delete(:lines), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::ConsumerInvoiceLine) ? x : ::Io::Flow::V0::Models::ConsumerInvoiceLine.from_json(x)) }
            @documents = HttpClient::Preconditions.assert_class('documents', opts.delete(:documents), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::ConsumerInvoiceDocument) ? x : ::Io::Flow::V0::Models::ConsumerInvoiceDocument.new(x)) }
            @attributes = HttpClient::Preconditions.assert_class('attributes', opts.delete(:attributes), Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h }
            @b2b_invoice_type = (x = (x = opts.delete(:b2b_invoice_type); x.nil? ? "self_bill_invoice" : x); x.is_a?(::Io::Flow::V0::Models::B2bInvoiceType) ? x : ::Io::Flow::V0::Models::B2bInvoiceType.apply(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            B2bCreditMemo.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :number => number,
              :buyer => buyer.to_hash,
              :seller => seller.to_hash,
              :status => status.value,
              :date => date,
              :key => key,
              :invoice => invoice.to_hash,
              :lines => lines.map { |o| o.to_hash },
              :documents => documents.map { |o| o.to_hash },
              :attributes => attributes,
              :b2b_invoice_type => b2b_invoice_type.value
            }
          end

        end

        class B2bCreditMemoDeleted < Event

          attr_reader :event_id, :timestamp, :organization, :b2b_credit_memo

          def initialize(incoming={})
            super(:discriminator => Event::Types::B2B_CREDIT_MEMO_DELETED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :b2b_credit_memo], 'B2bCreditMemoDeleted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @b2b_credit_memo = (x = opts.delete(:b2b_credit_memo); x.is_a?(::Io::Flow::V0::Models::B2bCreditMemo) ? x : ::Io::Flow::V0::Models::B2bCreditMemo.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            B2bCreditMemoDeleted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :b2b_credit_memo => b2b_credit_memo.to_hash
            }
          end

        end

        class B2bCreditMemoUpserted < Event

          attr_reader :event_id, :timestamp, :organization, :b2b_credit_memo

          def initialize(incoming={})
            super(:discriminator => Event::Types::B2B_CREDIT_MEMO_UPSERTED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :b2b_credit_memo], 'B2bCreditMemoUpserted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @b2b_credit_memo = (x = opts.delete(:b2b_credit_memo); x.is_a?(::Io::Flow::V0::Models::B2bCreditMemo) ? x : ::Io::Flow::V0::Models::B2bCreditMemo.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            B2bCreditMemoUpserted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :b2b_credit_memo => b2b_credit_memo.to_hash
            }
          end

        end

        # The b2b invoice represents a transaction between Flow and one of our clients
        # (e.g. Flow purchasing inventory to resell to a consumer).
        class B2bInvoice

          attr_reader :id, :number, :buyer, :seller, :status, :date, :key, :order, :economic_title_location, :center, :destination, :tax, :lines, :documents, :attributes, :estimated_delivery_date, :b2b_invoice_type

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :number, :buyer, :seller, :status, :date, :key, :order, :economic_title_location, :tax, :lines, :documents, :attributes], 'B2bInvoice')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @number = HttpClient::Preconditions.assert_class('number', opts.delete(:number), String)
            @buyer = (x = opts.delete(:buyer); x.is_a?(::Io::Flow::V0::Models::MerchantOfRecordEntity) ? x : ::Io::Flow::V0::Models::MerchantOfRecordEntity.new(x))
            @seller = (x = opts.delete(:seller); x.is_a?(::Io::Flow::V0::Models::MerchantOfRecordEntity) ? x : ::Io::Flow::V0::Models::MerchantOfRecordEntity.new(x))
            @status = (x = opts.delete(:status); x.is_a?(::Io::Flow::V0::Models::ConsumerInvoiceStatus) ? x : ::Io::Flow::V0::Models::ConsumerInvoiceStatus.apply(x))
            @date = HttpClient::Preconditions.assert_class('date', HttpClient::Helper.to_date_time_iso8601(opts.delete(:date)), DateTime)
            @key = HttpClient::Preconditions.assert_class('key', opts.delete(:key), String)
            @order = (x = opts.delete(:order); x.is_a?(::Io::Flow::V0::Models::ConsumerInvoiceOrderSummary) ? x : ::Io::Flow::V0::Models::ConsumerInvoiceOrderSummary.new(x))
            @economic_title_location = (x = opts.delete(:economic_title_location); x.is_a?(::Io::Flow::V0::Models::EconomicTitleLocation) ? x : ::Io::Flow::V0::Models::EconomicTitleLocation.apply(x))
            @center = (x = opts.delete(:center); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::ConsumerInvoiceCenterReference) ? x : ::Io::Flow::V0::Models::ConsumerInvoiceCenterReference.new(x)))
            @destination = (x = opts.delete(:destination); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::OrderAddress) ? x : ::Io::Flow::V0::Models::OrderAddress.new(x)))
            @tax = (x = opts.delete(:tax); x.is_a?(::Io::Flow::V0::Models::Money) ? x : ::Io::Flow::V0::Models::Money.new(x))
            @lines = HttpClient::Preconditions.assert_class('lines', opts.delete(:lines), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::ConsumerInvoiceLine) ? x : ::Io::Flow::V0::Models::ConsumerInvoiceLine.from_json(x)) }
            @documents = HttpClient::Preconditions.assert_class('documents', opts.delete(:documents), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::ConsumerInvoiceDocument) ? x : ::Io::Flow::V0::Models::ConsumerInvoiceDocument.new(x)) }
            @attributes = HttpClient::Preconditions.assert_class('attributes', opts.delete(:attributes), Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h }
            @estimated_delivery_date = (x = opts.delete(:estimated_delivery_date); x.nil? ? nil : HttpClient::Preconditions.assert_class('estimated_delivery_date', HttpClient::Helper.to_date_time_iso8601(x), DateTime))
            @b2b_invoice_type = (x = (x = opts.delete(:b2b_invoice_type); x.nil? ? "self_bill_invoice" : x); x.is_a?(::Io::Flow::V0::Models::B2bInvoiceType) ? x : ::Io::Flow::V0::Models::B2bInvoiceType.apply(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            B2bInvoice.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :number => number,
              :buyer => buyer.to_hash,
              :seller => seller.to_hash,
              :status => status.value,
              :date => date,
              :key => key,
              :order => order.to_hash,
              :economic_title_location => economic_title_location.value,
              :center => center.nil? ? nil : center.to_hash,
              :destination => destination.nil? ? nil : destination.to_hash,
              :tax => tax.to_hash,
              :lines => lines.map { |o| o.to_hash },
              :documents => documents.map { |o| o.to_hash },
              :attributes => attributes,
              :estimated_delivery_date => estimated_delivery_date,
              :b2b_invoice_type => b2b_invoice_type.value
            }
          end

        end

        class B2bInvoiceDeleted < Event

          attr_reader :event_id, :timestamp, :organization, :b2b_invoice

          def initialize(incoming={})
            super(:discriminator => Event::Types::B2B_INVOICE_DELETED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :b2b_invoice], 'B2bInvoiceDeleted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @b2b_invoice = (x = opts.delete(:b2b_invoice); x.is_a?(::Io::Flow::V0::Models::B2bInvoice) ? x : ::Io::Flow::V0::Models::B2bInvoice.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            B2bInvoiceDeleted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :b2b_invoice => b2b_invoice.to_hash
            }
          end

        end

        class B2bInvoiceReference

          attr_reader :id, :key, :number

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :key, :number], 'B2bInvoiceReference')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @key = HttpClient::Preconditions.assert_class('key', opts.delete(:key), String)
            @number = HttpClient::Preconditions.assert_class('number', opts.delete(:number), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            B2bInvoiceReference.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :key => key,
              :number => number
            }
          end

        end

        class B2bInvoiceUpserted < Event

          attr_reader :event_id, :timestamp, :organization, :b2b_invoice

          def initialize(incoming={})
            super(:discriminator => Event::Types::B2B_INVOICE_UPSERTED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :b2b_invoice], 'B2bInvoiceUpserted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @b2b_invoice = (x = opts.delete(:b2b_invoice); x.is_a?(::Io::Flow::V0::Models::B2bInvoice) ? x : ::Io::Flow::V0::Models::B2bInvoice.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            B2bInvoiceUpserted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :b2b_invoice => b2b_invoice.to_hash
            }
          end

        end

        class BehaviorAudit

          attr_reader :behavior, :authentication_techniques, :roles

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:behavior, :authentication_techniques, :roles], 'BehaviorAudit')
            @behavior = (x = opts.delete(:behavior); x.is_a?(::Io::Flow::V0::Models::FlowBehavior) ? x : ::Io::Flow::V0::Models::FlowBehavior.apply(x))
            @authentication_techniques = HttpClient::Preconditions.assert_class('authentication_techniques', opts.delete(:authentication_techniques), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::AuthenticationTechnique) ? x : ::Io::Flow::V0::Models::AuthenticationTechnique.apply(x)) }
            @roles = HttpClient::Preconditions.assert_class('roles', opts.delete(:roles), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::FlowRole) ? x : ::Io::Flow::V0::Models::FlowRole.apply(x)) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            BehaviorAudit.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :behavior => behavior.value,
              :authentication_techniques => authentication_techniques.map { |o| o.value },
              :roles => roles.map { |o| o.value }
            }
          end

        end

        class BillingAddress

          attr_reader :name, :streets, :city, :province, :postal, :country, :company

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = (x = opts.delete(:name); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Name) ? x : ::Io::Flow::V0::Models::Name.new(x)))
            @streets = (x = opts.delete(:streets); x.nil? ? nil : HttpClient::Preconditions.assert_class('streets', x, Array).map { |v| HttpClient::Preconditions.assert_class('streets', v, String) })
            @city = (x = opts.delete(:city); x.nil? ? nil : HttpClient::Preconditions.assert_class('city', x, String))
            @province = (x = opts.delete(:province); x.nil? ? nil : HttpClient::Preconditions.assert_class('province', x, String))
            @postal = (x = opts.delete(:postal); x.nil? ? nil : HttpClient::Preconditions.assert_class('postal', x, String))
            @country = (x = opts.delete(:country); x.nil? ? nil : HttpClient::Preconditions.assert_class('country', x, String))
            @company = (x = opts.delete(:company); x.nil? ? nil : HttpClient::Preconditions.assert_class('company', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            BillingAddress.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :name => name.nil? ? nil : name.to_hash,
              :streets => streets.nil? ? nil : streets,
              :city => city,
              :province => province,
              :postal => postal,
              :country => country,
              :company => company
            }
          end

        end

        class BrowseOptinResponses

          attr_reader :id, :session_id, :optin_responses

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :session_id, :optin_responses], 'BrowseOptinResponses')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @session_id = HttpClient::Preconditions.assert_class('session_id', opts.delete(:session_id), String)
            @optin_responses = HttpClient::Preconditions.assert_class('optin_responses', opts.delete(:optin_responses), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::OptinResponse) ? x : ::Io::Flow::V0::Models::OptinResponse.new(x)) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            BrowseOptinResponses.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :session_id => session_id,
              :optin_responses => optin_responses.map { |o| o.to_hash }
            }
          end

        end

        class BrowseOptinResponsesDeleted < Event

          attr_reader :event_id, :timestamp, :organization, :id

          def initialize(incoming={})
            super(:discriminator => Event::Types::BROWSE_OPTIN_RESPONSES_DELETED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :id], 'BrowseOptinResponsesDeleted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            BrowseOptinResponsesDeleted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :id => id
            }
          end

        end

        class BrowseOptinResponsesUpserted < Event

          attr_reader :event_id, :timestamp, :organization, :browse_optin_responses

          def initialize(incoming={})
            super(:discriminator => Event::Types::BROWSE_OPTIN_RESPONSES_UPSERTED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :browse_optin_responses], 'BrowseOptinResponsesUpserted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @browse_optin_responses = (x = opts.delete(:browse_optin_responses); x.is_a?(::Io::Flow::V0::Models::BrowseOptinResponses) ? x : ::Io::Flow::V0::Models::BrowseOptinResponses.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            BrowseOptinResponsesUpserted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :browse_optin_responses => browse_optin_responses.to_hash
            }
          end

        end

        # Shopper browser info used as part of card authentication. All of these fields
        # are required if you are using 3DS2.
        class BrowserInfo

          attr_reader :origin, :language, :java_enabled, :color_depth, :screen_height, :screen_width, :time_zone_offset, :user_agent, :accept

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @origin = (x = opts.delete(:origin); x.nil? ? nil : HttpClient::Preconditions.assert_class('origin', x, String))
            @language = (x = opts.delete(:language); x.nil? ? nil : HttpClient::Preconditions.assert_class('language', x, String))
            @java_enabled = (x = opts.delete(:java_enabled); x.nil? ? nil : HttpClient::Preconditions.assert_boolean('java_enabled', x))
            @color_depth = (x = opts.delete(:color_depth); x.nil? ? nil : HttpClient::Preconditions.assert_class('color_depth', x, Integer))
            @screen_height = (x = opts.delete(:screen_height); x.nil? ? nil : HttpClient::Preconditions.assert_class('screen_height', x, Integer))
            @screen_width = (x = opts.delete(:screen_width); x.nil? ? nil : HttpClient::Preconditions.assert_class('screen_width', x, Integer))
            @time_zone_offset = (x = opts.delete(:time_zone_offset); x.nil? ? nil : HttpClient::Preconditions.assert_class('time_zone_offset', x, Integer))
            @user_agent = (x = opts.delete(:user_agent); x.nil? ? nil : HttpClient::Preconditions.assert_class('user_agent', x, String))
            @accept = (x = opts.delete(:accept); x.nil? ? nil : HttpClient::Preconditions.assert_class('accept', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            BrowserInfo.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :origin => origin,
              :language => language,
              :java_enabled => java_enabled,
              :color_depth => color_depth,
              :screen_height => screen_height,
              :screen_width => screen_width,
              :time_zone_offset => time_zone_offset,
              :user_agent => user_agent,
              :accept => accept
            }
          end

        end

        # Information to be passed to the payment processor about how to handle browser
        # inline authorization activities.
        class BrowserInlineActionConfiguration < InlineActionConfiguration

          attr_reader :inline_notification_urls, :action_configuration

          def initialize(incoming={})
            super(:discriminator => InlineActionConfiguration::Types::BROWSER_INLINE_ACTION_CONFIGURATION)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:inline_notification_urls], 'BrowserInlineActionConfiguration')
            @inline_notification_urls = (x = opts.delete(:inline_notification_urls); x.is_a?(::Io::Flow::V0::Models::PostPaymentRedirectUrls) ? x : ::Io::Flow::V0::Models::PostPaymentRedirectUrls.new(x))
            @action_configuration = (x = opts.delete(:action_configuration); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::BrowserActionConfiguration) ? x : ::Io::Flow::V0::Models::BrowserActionConfiguration.from_json(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            BrowserInlineActionConfiguration.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :inline_notification_urls => inline_notification_urls.to_hash,
              :action_configuration => action_configuration.nil? ? nil : action_configuration.to_hash
            }
          end

        end

        # Capture actually transfers funds. You can capture as many times as you'd like
        # up until the total amount of the authorization has been captured or the
        # authorization otherwise becomes unavailable (e.g. expires).
        class Capture

          attr_reader :id, :key, :authorization, :amount, :currency, :requested, :created_at, :attributes, :status, :base

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :key, :authorization, :amount, :currency, :created_at], 'Capture')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @key = HttpClient::Preconditions.assert_class('key', opts.delete(:key), String)
            @authorization = (x = opts.delete(:authorization); x.is_a?(::Io::Flow::V0::Models::AuthorizationReference) ? x : ::Io::Flow::V0::Models::AuthorizationReference.new(x))
            @amount = HttpClient::Preconditions.assert_class('amount', HttpClient::Helper.to_big_decimal(opts.delete(:amount)), BigDecimal)
            @currency = HttpClient::Preconditions.assert_class('currency', opts.delete(:currency), String)
            @requested = (x = opts.delete(:requested); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Money) ? x : ::Io::Flow::V0::Models::Money.new(x)))
            @created_at = HttpClient::Preconditions.assert_class('created_at', HttpClient::Helper.to_date_time_iso8601(opts.delete(:created_at)), DateTime)
            @attributes = (x = opts.delete(:attributes); x.nil? ? nil : HttpClient::Preconditions.assert_class('attributes', x, Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h })
            @status = (x = (x = opts.delete(:status); x.nil? ? "succeeded" : x); x.is_a?(::Io::Flow::V0::Models::CaptureStatus) ? x : ::Io::Flow::V0::Models::CaptureStatus.apply(x))
            @base = (x = opts.delete(:base); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Money) ? x : ::Io::Flow::V0::Models::Money.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            Capture.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :key => key,
              :authorization => authorization.to_hash,
              :amount => amount.to_f.to_s,
              :currency => currency,
              :requested => requested.nil? ? nil : requested.to_hash,
              :created_at => created_at,
              :attributes => attributes.nil? ? nil : attributes,
              :status => status.value,
              :base => base.nil? ? nil : base.to_hash
            }
          end

        end

        class CaptureDeleted < Event

          attr_reader :event_id, :timestamp, :organization, :capture

          def initialize(incoming={})
            super(:discriminator => Event::Types::CAPTURE_DELETED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :capture], 'CaptureDeleted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @capture = (x = opts.delete(:capture); x.is_a?(::Io::Flow::V0::Models::Capture) ? x : ::Io::Flow::V0::Models::Capture.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CaptureDeleted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :capture => capture.to_hash
            }
          end

        end

        class CaptureError

          attr_reader :code, :messages, :decline_code

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:messages, :decline_code], 'CaptureError')
            @code = (x = (x = opts.delete(:code); x.nil? ? "generic_error" : x); x.is_a?(::Io::Flow::V0::Models::GenericErrorCode) ? x : ::Io::Flow::V0::Models::GenericErrorCode.apply(x))
            @messages = HttpClient::Preconditions.assert_class('messages', opts.delete(:messages), Array).map { |v| HttpClient::Preconditions.assert_class('messages', v, String) }
            @decline_code = (x = opts.delete(:decline_code); x.is_a?(::Io::Flow::V0::Models::CaptureDeclineCode) ? x : ::Io::Flow::V0::Models::CaptureDeclineCode.apply(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CaptureError.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :code => code.value,
              :messages => messages,
              :decline_code => decline_code.value
            }
          end

        end

        # Capture actually transfers funds. You can capture as many times as you'd like
        # up until the total amount of the authorization has been captured or the
        # authorization otherwise becomes unavailable (e.g. expires).
        class CaptureForm

          attr_reader :authorization_id, :key, :amount, :currency, :attributes

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:authorization_id], 'CaptureForm')
            @authorization_id = HttpClient::Preconditions.assert_class('authorization_id', opts.delete(:authorization_id), String)
            @key = (x = opts.delete(:key); x.nil? ? nil : HttpClient::Preconditions.assert_class('key', x, String))
            @amount = (x = opts.delete(:amount); x.nil? ? nil : HttpClient::Preconditions.assert_class('amount', HttpClient::Helper.to_big_decimal(x), BigDecimal))
            @currency = (x = opts.delete(:currency); x.nil? ? nil : HttpClient::Preconditions.assert_class('currency', x, String))
            @attributes = (x = opts.delete(:attributes); x.nil? ? nil : HttpClient::Preconditions.assert_class('attributes', x, Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h })
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CaptureForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :authorization_id => authorization_id,
              :key => key,
              :amount => amount.to_f.to_s,
              :currency => currency,
              :attributes => attributes.nil? ? nil : attributes
            }
          end

        end

        class CaptureIdentifier

          attr_reader :id, :capture, :name, :identifier, :primary

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :capture, :name, :identifier, :primary], 'CaptureIdentifier')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @capture = (x = opts.delete(:capture); x.is_a?(::Io::Flow::V0::Models::CaptureReference) ? x : ::Io::Flow::V0::Models::CaptureReference.new(x))
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
            @identifier = HttpClient::Preconditions.assert_class('identifier', opts.delete(:identifier), String)
            @primary = HttpClient::Preconditions.assert_boolean('primary', opts.delete(:primary))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CaptureIdentifier.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :capture => capture.to_hash,
              :name => name,
              :identifier => identifier,
              :primary => primary
            }
          end

        end

        class CaptureIdentifierDeleted < Event

          attr_reader :event_id, :timestamp, :organization, :identifier

          def initialize(incoming={})
            super(:discriminator => Event::Types::CAPTURE_IDENTIFIER_DELETED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :identifier], 'CaptureIdentifierDeleted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @identifier = (x = opts.delete(:identifier); x.is_a?(::Io::Flow::V0::Models::CaptureIdentifier) ? x : ::Io::Flow::V0::Models::CaptureIdentifier.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CaptureIdentifierDeleted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :identifier => identifier.to_hash
            }
          end

        end

        class CaptureIdentifierUpserted < Event

          attr_reader :event_id, :timestamp, :organization, :identifier

          def initialize(incoming={})
            super(:discriminator => Event::Types::CAPTURE_IDENTIFIER_UPSERTED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :identifier], 'CaptureIdentifierUpserted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @identifier = (x = opts.delete(:identifier); x.is_a?(::Io::Flow::V0::Models::CaptureIdentifier) ? x : ::Io::Flow::V0::Models::CaptureIdentifier.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CaptureIdentifierUpserted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :identifier => identifier.to_hash
            }
          end

        end

        class CaptureReference

          attr_reader :id, :key

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :key], 'CaptureReference')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @key = HttpClient::Preconditions.assert_class('key', opts.delete(:key), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CaptureReference.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :key => key
            }
          end

        end

        class CaptureUpsertedV2 < Event

          attr_reader :event_id, :timestamp, :organization, :id, :capture

          def initialize(incoming={})
            super(:discriminator => Event::Types::CAPTURE_UPSERTED_V2)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :id, :capture], 'CaptureUpsertedV2')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @capture = (x = opts.delete(:capture); x.is_a?(::Io::Flow::V0::Models::Capture) ? x : ::Io::Flow::V0::Models::Capture.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CaptureUpsertedV2.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :id => id,
              :capture => capture.to_hash
            }
          end

        end

        class CaptureVersion

          attr_reader :id, :timestamp, :type, :capture

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :timestamp, :type, :capture], 'CaptureVersion')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::V0::Models::ChangeType) ? x : ::Io::Flow::V0::Models::ChangeType.apply(x))
            @capture = (x = opts.delete(:capture); x.is_a?(::Io::Flow::V0::Models::Capture) ? x : ::Io::Flow::V0::Models::Capture.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CaptureVersion.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :timestamp => timestamp,
              :type => type.value,
              :capture => capture.to_hash
            }
          end

        end

        # Card represents the metadata about a secure, tokenized card. The card 'token'
        # is a unique, cryptographically secure token by which this card can be
        # identified in the future. The card token itself will either be a permanent
        # card token (denoted by a prefix of F96) or a one time nonce (denoted by a
        # prefix of F17). Nonces represent cards that were encrypted from public
        # channels (like the user's browser via JavaScript) and can be used once only.
        # If you have a nonce you can exchange it for a permanent card token via the
        # operation POST /:organization/cards/nonces
        class Card < ExpandableCard

          attr_reader :id, :token, :type, :expiration, :iin, :issuer, :last4, :name, :address

          def initialize(incoming={})
            super(:discriminator => ExpandableCard::Types::CARD)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :token, :type, :expiration, :iin, :last4, :name], 'Card')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @token = HttpClient::Preconditions.assert_class('token', opts.delete(:token), String)
            @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::V0::Models::CardType) ? x : ::Io::Flow::V0::Models::CardType.apply(x))
            @expiration = (x = opts.delete(:expiration); x.is_a?(::Io::Flow::V0::Models::Expiration) ? x : ::Io::Flow::V0::Models::Expiration.new(x))
            @iin = HttpClient::Preconditions.assert_class('iin', opts.delete(:iin), String)
            @issuer = (x = opts.delete(:issuer); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::IssuerSummary) ? x : ::Io::Flow::V0::Models::IssuerSummary.new(x)))
            @last4 = HttpClient::Preconditions.assert_class('last4', opts.delete(:last4), String)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
            @address = (x = opts.delete(:address); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::BillingAddress) ? x : ::Io::Flow::V0::Models::BillingAddress.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            Card.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :id => id,
              :token => token,
              :type => type.value,
              :expiration => expiration.to_hash,
              :iin => iin,
              :issuer => issuer.nil? ? nil : issuer.to_hash,
              :last4 => last4,
              :name => name,
              :address => address.nil? ? nil : address.to_hash
            }
          end

        end

        # An authorization is used to check and reserve funds w/ a given payment method.
        # No funds are actually transferred; once you have you an authorization, you can
        # capture up to the amount of the authorization.
        class CardAuthorization < Authorization

          attr_reader :id, :key, :merchant_of_record, :method, :card, :amount, :currency, :requested, :customer, :attributes, :destination, :billing_address, :order, :payment_order_reference, :ip, :result, :created_at, :expires_at, :base, :processor

          def initialize(incoming={})
            super(:discriminator => Authorization::Types::CARD_AUTHORIZATION)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :key, :card, :amount, :currency, :customer, :attributes, :result, :created_at], 'CardAuthorization')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @key = HttpClient::Preconditions.assert_class('key', opts.delete(:key), String)
            @merchant_of_record = (x = (x = opts.delete(:merchant_of_record); x.nil? ? "flow" : x); x.is_a?(::Io::Flow::V0::Models::MerchantOfRecord) ? x : ::Io::Flow::V0::Models::MerchantOfRecord.apply(x))
            @method = (x = opts.delete(:method); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::PaymentMethod) ? x : ::Io::Flow::V0::Models::PaymentMethod.new(x)))
            @card = (x = opts.delete(:card); x.is_a?(::Io::Flow::V0::Models::ExpandableCard) ? x : ::Io::Flow::V0::Models::ExpandableCard.from_json(x))
            @amount = HttpClient::Preconditions.assert_class('amount', HttpClient::Helper.to_big_decimal(opts.delete(:amount)), BigDecimal)
            @currency = HttpClient::Preconditions.assert_class('currency', opts.delete(:currency), String)
            @requested = (x = opts.delete(:requested); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Money) ? x : ::Io::Flow::V0::Models::Money.new(x)))
            @customer = (x = opts.delete(:customer); x.is_a?(::Io::Flow::V0::Models::OrderCustomer) ? x : ::Io::Flow::V0::Models::OrderCustomer.new(x))
            @attributes = HttpClient::Preconditions.assert_class('attributes', opts.delete(:attributes), Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h }
            @destination = (x = opts.delete(:destination); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Address) ? x : ::Io::Flow::V0::Models::Address.new(x)))
            @billing_address = (x = opts.delete(:billing_address); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::BillingAddress) ? x : ::Io::Flow::V0::Models::BillingAddress.new(x)))
            @order = (x = opts.delete(:order); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::AuthorizationOrderReference) ? x : ::Io::Flow::V0::Models::AuthorizationOrderReference.new(x)))
            @payment_order_reference = (x = opts.delete(:payment_order_reference); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::PaymentOrderReference) ? x : ::Io::Flow::V0::Models::PaymentOrderReference.from_json(x)))
            @ip = (x = opts.delete(:ip); x.nil? ? nil : HttpClient::Preconditions.assert_class('ip', x, String))
            @result = (x = opts.delete(:result); x.is_a?(::Io::Flow::V0::Models::AuthorizationResult) ? x : ::Io::Flow::V0::Models::AuthorizationResult.new(x))
            @created_at = HttpClient::Preconditions.assert_class('created_at', HttpClient::Helper.to_date_time_iso8601(opts.delete(:created_at)), DateTime)
            @expires_at = (x = opts.delete(:expires_at); x.nil? ? nil : HttpClient::Preconditions.assert_class('expires_at', HttpClient::Helper.to_date_time_iso8601(x), DateTime))
            @base = (x = opts.delete(:base); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Money) ? x : ::Io::Flow::V0::Models::Money.new(x)))
            @processor = (x = opts.delete(:processor); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::ExpandablePaymentProcessor) ? x : ::Io::Flow::V0::Models::ExpandablePaymentProcessor.from_json(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CardAuthorization.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :id => id,
              :key => key,
              :merchant_of_record => merchant_of_record.value,
              :method => method.nil? ? nil : method.to_hash,
              :card => card.to_hash,
              :amount => amount.to_f.to_s,
              :currency => currency,
              :requested => requested.nil? ? nil : requested.to_hash,
              :customer => customer.to_hash,
              :attributes => attributes,
              :destination => destination.nil? ? nil : destination.to_hash,
              :billing_address => billing_address.nil? ? nil : billing_address.to_hash,
              :order => order.nil? ? nil : order.to_hash,
              :payment_order_reference => payment_order_reference.nil? ? nil : payment_order_reference.to_hash,
              :ip => ip,
              :result => result.to_hash,
              :created_at => created_at,
              :expires_at => expires_at,
              :base => base.nil? ? nil : base.to_hash,
              :processor => processor.nil? ? nil : processor.to_hash
            }
          end

        end

        class CardAuthorizationDeletedV2 < Event

          attr_reader :event_id, :timestamp, :organization, :authorization

          def initialize(incoming={})
            super(:discriminator => Event::Types::CARD_AUTHORIZATION_DELETED_V2)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :authorization], 'CardAuthorizationDeletedV2')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @authorization = (x = opts.delete(:authorization); x.is_a?(::Io::Flow::V0::Models::CardAuthorization) ? x : ::Io::Flow::V0::Models::CardAuthorization.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CardAuthorizationDeletedV2.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :authorization => authorization.to_hash
            }
          end

        end

        # Represents an authorization for a card payment method
        class CardAuthorizationUpsertedV2 < Event

          attr_reader :event_id, :timestamp, :organization, :id, :authorization

          def initialize(incoming={})
            super(:discriminator => Event::Types::CARD_AUTHORIZATION_UPSERTED_V2)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :id, :authorization], 'CardAuthorizationUpsertedV2')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @authorization = (x = opts.delete(:authorization); x.is_a?(::Io::Flow::V0::Models::CardAuthorization) ? x : ::Io::Flow::V0::Models::CardAuthorization.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CardAuthorizationUpsertedV2.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :id => id,
              :authorization => authorization.to_hash
            }
          end

        end

        # Instructions to the card issuer to render challenges to the user
        class CardBrowserActionConfiguration < BrowserActionConfiguration

          attr_reader :viewport

          def initialize(incoming={})
            super(:discriminator => BrowserActionConfiguration::Types::CARD_BROWSER_ACTION_CONFIGURATION)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @viewport = (x = (x = opts.delete(:viewport); x.nil? ? "xxx_small" : x); x.is_a?(::Io::Flow::V0::Models::ThreedsTwoChallengeViewport) ? x : ::Io::Flow::V0::Models::ThreedsTwoChallengeViewport.apply(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CardBrowserActionConfiguration.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :viewport => viewport.value
            }
          end

        end

        class CardDeleted < Event

          attr_reader :event_id, :timestamp, :organization, :id

          def initialize(incoming={})
            super(:discriminator => Event::Types::CARD_DELETED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :id], 'CardDeleted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CardDeleted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :id => id
            }
          end

        end

        class CardDeletedV2

          attr_reader :event_id, :timestamp, :organization, :card

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :card], 'CardDeletedV2')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @card = (x = opts.delete(:card); x.is_a?(::Io::Flow::V0::Models::Card) ? x : ::Io::Flow::V0::Models::Card.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CardDeletedV2.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :card => card.to_hash
            }
          end

        end

        # Details for why a card was not created
        class CardError

          attr_reader :code, :messages, :avs, :cvv

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:code, :messages], 'CardError')
            @code = (x = opts.delete(:code); x.is_a?(::Io::Flow::V0::Models::CardErrorCode) ? x : ::Io::Flow::V0::Models::CardErrorCode.apply(x))
            @messages = HttpClient::Preconditions.assert_class('messages', opts.delete(:messages), Array).map { |v| HttpClient::Preconditions.assert_class('messages', v, String) }
            @avs = (x = opts.delete(:avs); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Avs) ? x : ::Io::Flow::V0::Models::Avs.new(x)))
            @cvv = (x = opts.delete(:cvv); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Cvv) ? x : ::Io::Flow::V0::Models::Cvv.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CardError.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :code => code.value,
              :messages => messages,
              :avs => avs.nil? ? nil : avs.to_hash,
              :cvv => cvv.nil? ? nil : cvv.to_hash
            }
          end

        end

        class CardForm

          attr_reader :number, :cipher, :expiration_month, :expiration_year, :name, :cvv, :address, :ip, :challenge_text, :challenge_cipher, :token_type, :requested_currency, :metadata

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:expiration_month, :expiration_year, :name, :cvv], 'CardForm')
            @number = (x = opts.delete(:number); x.nil? ? nil : HttpClient::Preconditions.assert_class('number', x, String))
            @cipher = (x = opts.delete(:cipher); x.nil? ? nil : HttpClient::Preconditions.assert_class('cipher', x, String))
            @expiration_month = HttpClient::Preconditions.assert_class('expiration_month', opts.delete(:expiration_month), Integer)
            @expiration_year = HttpClient::Preconditions.assert_class('expiration_year', opts.delete(:expiration_year), Integer)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
            @cvv = HttpClient::Preconditions.assert_class('cvv', opts.delete(:cvv), String)
            @address = (x = opts.delete(:address); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::BillingAddress) ? x : ::Io::Flow::V0::Models::BillingAddress.new(x)))
            @ip = (x = opts.delete(:ip); x.nil? ? nil : HttpClient::Preconditions.assert_class('ip', x, String))
            @challenge_text = (x = opts.delete(:challenge_text); x.nil? ? nil : HttpClient::Preconditions.assert_class('challenge_text', x, String))
            @challenge_cipher = (x = opts.delete(:challenge_cipher); x.nil? ? nil : HttpClient::Preconditions.assert_class('challenge_cipher', x, String))
            @token_type = (x = opts.delete(:token_type); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::TokenType) ? x : ::Io::Flow::V0::Models::TokenType.apply(x)))
            @requested_currency = (x = opts.delete(:requested_currency); x.nil? ? nil : HttpClient::Preconditions.assert_class('requested_currency', x, String))
            @metadata = (x = opts.delete(:metadata); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::CardMetadata) ? x : ::Io::Flow::V0::Models::CardMetadata.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CardForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :number => number,
              :cipher => cipher,
              :expiration_month => expiration_month,
              :expiration_year => expiration_year,
              :name => name,
              :cvv => cvv,
              :address => address.nil? ? nil : address.to_hash,
              :ip => ip,
              :challenge_text => challenge_text,
              :challenge_cipher => challenge_cipher,
              :token_type => token_type.nil? ? nil : token_type.value,
              :requested_currency => requested_currency,
              :metadata => metadata.nil? ? nil : metadata.to_hash
            }
          end

        end

        class CardMetadata

          attr_reader :merchant_of_record

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @merchant_of_record = (x = opts.delete(:merchant_of_record); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::OrderMerchantOfRecord) ? x : ::Io::Flow::V0::Models::OrderMerchantOfRecord.apply(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CardMetadata.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :merchant_of_record => merchant_of_record.nil? ? nil : merchant_of_record.value
            }
          end

        end

        # The card nonce form presents a one time token to exchange server side for a
        # permanent, secure tokenized card
        class CardNonceForm

          attr_reader :token

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:token], 'CardNonceForm')
            @token = HttpClient::Preconditions.assert_class('token', opts.delete(:token), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CardNonceForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :token => token
            }
          end

        end

        # Represents a saved credit card payment method.
        class CardPaymentSource < PaymentSource

          attr_reader :id, :actions, :summary

          def initialize(incoming={})
            super(:discriminator => PaymentSource::Types::CARD_PAYMENT_SOURCE)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :summary], 'CardPaymentSource')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @actions = (x = opts.delete(:actions); x.nil? ? nil : HttpClient::Preconditions.assert_class('actions', x, Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::PaymentSourceConfirmationAction) ? x : ::Io::Flow::V0::Models::PaymentSourceConfirmationAction.new(x)) })
            @summary = (x = opts.delete(:summary); x.is_a?(::Io::Flow::V0::Models::CardPaymentSourceSummary) ? x : ::Io::Flow::V0::Models::CardPaymentSourceSummary.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CardPaymentSource.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :id => id,
              :actions => actions.nil? ? nil : actions.map { |o| o.to_hash },
              :summary => summary.to_hash
            }
          end

        end

        # Creates an authorization for a transaction from a card payment source.
        class CardPaymentSourceAuthorizationForm < AuthorizationForm

          attr_reader :key, :card_payment_source_id, :order_number, :amount, :currency, :browser_info, :inline_action_configuration

          def initialize(incoming={})
            super(:discriminator => AuthorizationForm::Types::CARD_PAYMENT_SOURCE_AUTHORIZATION_FORM)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:card_payment_source_id, :order_number, :amount, :currency], 'CardPaymentSourceAuthorizationForm')
            @key = (x = opts.delete(:key); x.nil? ? nil : HttpClient::Preconditions.assert_class('key', x, String))
            @card_payment_source_id = HttpClient::Preconditions.assert_class('card_payment_source_id', opts.delete(:card_payment_source_id), String)
            @order_number = HttpClient::Preconditions.assert_class('order_number', opts.delete(:order_number), String)
            @amount = HttpClient::Preconditions.assert_class('amount', HttpClient::Helper.to_big_decimal(opts.delete(:amount)), BigDecimal)
            @currency = HttpClient::Preconditions.assert_class('currency', opts.delete(:currency), String)
            @browser_info = (x = opts.delete(:browser_info); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::BrowserInfo) ? x : ::Io::Flow::V0::Models::BrowserInfo.new(x)))
            @inline_action_configuration = (x = opts.delete(:inline_action_configuration); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::InlineActionConfiguration) ? x : ::Io::Flow::V0::Models::InlineActionConfiguration.from_json(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CardPaymentSourceAuthorizationForm.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :key => key,
              :card_payment_source_id => card_payment_source_id,
              :order_number => order_number,
              :amount => amount.to_f.to_s,
              :currency => currency,
              :browser_info => browser_info.nil? ? nil : browser_info.to_hash,
              :inline_action_configuration => inline_action_configuration.nil? ? nil : inline_action_configuration.to_hash
            }
          end

        end

        # Contains a summary of a card, which is useful for displaying to a customer.
        class CardPaymentSourceForm < PaymentSourceForm

          attr_reader :customer_number, :card_id

          def initialize(incoming={})
            super(:discriminator => PaymentSourceForm::Types::CARD_PAYMENT_SOURCE_FORM)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:customer_number, :card_id], 'CardPaymentSourceForm')
            @customer_number = HttpClient::Preconditions.assert_class('customer_number', opts.delete(:customer_number), String)
            @card_id = HttpClient::Preconditions.assert_class('card_id', opts.delete(:card_id), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CardPaymentSourceForm.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :customer_number => customer_number,
              :card_id => card_id
            }
          end

        end

        # Contains a summary of a card, which is useful for displaying to a customer.
        class CardPaymentSourceSummary

          attr_reader :customer_number, :card

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:customer_number, :card], 'CardPaymentSourceSummary')
            @customer_number = HttpClient::Preconditions.assert_class('customer_number', opts.delete(:customer_number), String)
            @card = (x = opts.delete(:card); x.is_a?(::Io::Flow::V0::Models::CardSummary) ? x : ::Io::Flow::V0::Models::CardSummary.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CardPaymentSourceSummary.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :customer_number => customer_number,
              :card => card.to_hash
            }
          end

        end

        class CardReference < ExpandableCard

          attr_reader :id, :token

          def initialize(incoming={})
            super(:discriminator => ExpandableCard::Types::CARD_REFERENCE)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :token], 'CardReference')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @token = HttpClient::Preconditions.assert_class('token', opts.delete(:token), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CardReference.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :id => id,
              :token => token
            }
          end

        end

        # Card Summary is the card without the token
        class CardSummary < ExpandableCard

          attr_reader :id, :type, :expiration, :iin, :issuer, :last4, :name, :address

          def initialize(incoming={})
            super(:discriminator => ExpandableCard::Types::CARD_SUMMARY)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :type, :expiration, :iin, :last4, :name], 'CardSummary')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::V0::Models::CardType) ? x : ::Io::Flow::V0::Models::CardType.apply(x))
            @expiration = (x = opts.delete(:expiration); x.is_a?(::Io::Flow::V0::Models::Expiration) ? x : ::Io::Flow::V0::Models::Expiration.new(x))
            @iin = HttpClient::Preconditions.assert_class('iin', opts.delete(:iin), String)
            @issuer = (x = opts.delete(:issuer); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::IssuerSummary) ? x : ::Io::Flow::V0::Models::IssuerSummary.new(x)))
            @last4 = HttpClient::Preconditions.assert_class('last4', opts.delete(:last4), String)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
            @address = (x = opts.delete(:address); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::BillingAddress) ? x : ::Io::Flow::V0::Models::BillingAddress.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CardSummary.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :id => id,
              :type => type.value,
              :expiration => expiration.to_hash,
              :iin => iin,
              :issuer => issuer.nil? ? nil : issuer.to_hash,
              :last4 => last4,
              :name => name,
              :address => address.nil? ? nil : address.to_hash
            }
          end

        end

        class CardTokenForm

          attr_reader :token

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:token], 'CardTokenForm')
            @token = HttpClient::Preconditions.assert_class('token', opts.delete(:token), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CardTokenForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :token => token
            }
          end

        end

        class CardUpsertedV2 < Event

          attr_reader :event_id, :timestamp, :organization, :id, :card

          def initialize(incoming={})
            super(:discriminator => Event::Types::CARD_UPSERTED_V2)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :id, :card], 'CardUpsertedV2')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @card = (x = opts.delete(:card); x.is_a?(::Io::Flow::V0::Models::Card) ? x : ::Io::Flow::V0::Models::Card.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CardUpsertedV2.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :id => id,
              :card => card.to_hash
            }
          end

        end

        class CardVersion

          attr_reader :id, :timestamp, :type, :card

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :timestamp, :type, :card], 'CardVersion')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::V0::Models::ChangeType) ? x : ::Io::Flow::V0::Models::ChangeType.apply(x))
            @card = (x = opts.delete(:card); x.is_a?(::Io::Flow::V0::Models::Card) ? x : ::Io::Flow::V0::Models::Card.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CardVersion.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :timestamp => timestamp,
              :type => type.value,
              :card => card.to_hash
            }
          end

        end

        # Partner that actually takes a shipment between places (ex: FedEx, DHL, SF
        # Express)
        class Carrier

          attr_reader :id, :name, :tracking_url

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :name, :tracking_url], 'Carrier')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
            @tracking_url = HttpClient::Preconditions.assert_class('tracking_url', opts.delete(:tracking_url), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            Carrier.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :name => name,
              :tracking_url => tracking_url
            }
          end

        end

        class CarrierReference

          attr_reader :id

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id], 'CarrierReference')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CarrierReference.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id
            }
          end

        end

        # Specific service rendered by the carrier (fedex ground saturday, ups overnight
        # weekend, etc)
        class CarrierService

          attr_reader :id, :carrier, :name

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :carrier, :name], 'CarrierService')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @carrier = (x = opts.delete(:carrier); x.is_a?(::Io::Flow::V0::Models::Carrier) ? x : ::Io::Flow::V0::Models::Carrier.new(x))
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CarrierService.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :carrier => carrier.to_hash,
              :name => name
            }
          end

        end

        class CartReference

          attr_reader :id

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id], 'CartReference')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CartReference.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id
            }
          end

        end

        class Catalog

          attr_reader :id

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id], 'Catalog')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            Catalog.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id
            }
          end

        end

        class CatalogDeleted < Event

          attr_reader :event_id, :timestamp, :organization

          def initialize(incoming={})
            super(:discriminator => Event::Types::CATALOG_DELETED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization], 'CatalogDeleted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CatalogDeleted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization
            }
          end

        end

        class CatalogItemDeleted < Event

          attr_reader :event_id, :timestamp, :organization, :number

          def initialize(incoming={})
            super(:discriminator => Event::Types::CATALOG_ITEM_DELETED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :number], 'CatalogItemDeleted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @number = HttpClient::Preconditions.assert_class('number', opts.delete(:number), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CatalogItemDeleted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :number => number
            }
          end

        end

        class CatalogItemDeletedV2 < Event

          attr_reader :event_id, :timestamp, :organization, :item

          def initialize(incoming={})
            super(:discriminator => Event::Types::CATALOG_ITEM_DELETED_V2)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :item], 'CatalogItemDeletedV2')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @item = (x = opts.delete(:item); x.is_a?(::Io::Flow::V0::Models::Item) ? x : ::Io::Flow::V0::Models::Item.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CatalogItemDeletedV2.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :item => item.to_hash
            }
          end

        end

        class CatalogItemDocument < Document

          attr_reader :number, :name, :categories, :experiences, :attributes, :images

          def initialize(incoming={})
            super(:discriminator => Document::Types::CATALOG_ITEM_DOCUMENT)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:number, :name, :categories, :experiences, :attributes, :images], 'CatalogItemDocument')
            @number = HttpClient::Preconditions.assert_class('number', opts.delete(:number), String)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
            @categories = HttpClient::Preconditions.assert_class('categories', opts.delete(:categories), Array).map { |v| HttpClient::Preconditions.assert_class('categories', v, String) }
            @experiences = HttpClient::Preconditions.assert_class('experiences', opts.delete(:experiences), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::ExperienceSummary) ? x : ::Io::Flow::V0::Models::ExperienceSummary.new(x)) }
            @attributes = HttpClient::Preconditions.assert_class('attributes', opts.delete(:attributes), Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h }
            @images = (x = opts.delete(:images); x.is_a?(::Io::Flow::V0::Models::CatalogItemDocumentImages) ? x : ::Io::Flow::V0::Models::CatalogItemDocumentImages.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CatalogItemDocument.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :number => number,
              :name => name,
              :categories => categories,
              :experiences => experiences.map { |o| o.to_hash },
              :attributes => attributes,
              :images => images.to_hash
            }
          end

        end

        class CatalogItemDocumentImages

          attr_reader :thumbnail

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @thumbnail = (x = opts.delete(:thumbnail); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Image) ? x : ::Io::Flow::V0::Models::Image.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CatalogItemDocumentImages.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :thumbnail => thumbnail.nil? ? nil : thumbnail.to_hash
            }
          end

        end

        # Defines the filters that can be applied when requesting a catalog item data
        # export
        class CatalogItemExportType < ExportType

          attr_reader :numbers, :q, :sort

          def initialize(incoming={})
            super(:discriminator => ExportType::Types::CATALOG_ITEM_EXPORT_TYPE)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @numbers = (x = opts.delete(:numbers); x.nil? ? nil : HttpClient::Preconditions.assert_class('numbers', x, Array).map { |v| HttpClient::Preconditions.assert_class('numbers', v, String) })
            @q = (x = opts.delete(:q); x.nil? ? nil : HttpClient::Preconditions.assert_class('q', x, String))
            @sort = (x = opts.delete(:sort); x.nil? ? nil : HttpClient::Preconditions.assert_class('sort', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CatalogItemExportType.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :numbers => numbers.nil? ? nil : numbers,
              :q => q,
              :sort => sort
            }
          end

        end

        class CatalogItemReference

          attr_reader :id, :number

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :number], 'CatalogItemReference')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @number = HttpClient::Preconditions.assert_class('number', opts.delete(:number), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CatalogItemReference.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :number => number
            }
          end

        end

        class CatalogItemSummary

          attr_reader :number, :name, :attributes

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:number, :name, :attributes], 'CatalogItemSummary')
            @number = HttpClient::Preconditions.assert_class('number', opts.delete(:number), String)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
            @attributes = HttpClient::Preconditions.assert_class('attributes', opts.delete(:attributes), Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CatalogItemSummary.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :number => number,
              :name => name,
              :attributes => attributes
            }
          end

        end

        class CatalogItemUpserted < Event

          attr_reader :event_id, :timestamp, :organization, :number, :locale, :name, :currency, :price, :categories, :description, :attributes, :dimensions, :images

          def initialize(incoming={})
            super(:discriminator => Event::Types::CATALOG_ITEM_UPSERTED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :number, :locale, :name, :currency, :price, :categories, :attributes, :dimensions, :images], 'CatalogItemUpserted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @number = HttpClient::Preconditions.assert_class('number', opts.delete(:number), String)
            @locale = HttpClient::Preconditions.assert_class('locale', opts.delete(:locale), String)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
            @currency = HttpClient::Preconditions.assert_class('currency', opts.delete(:currency), String)
            @price = HttpClient::Preconditions.assert_class('price', opts.delete(:price), Numeric)
            @categories = HttpClient::Preconditions.assert_class('categories', opts.delete(:categories), Array).map { |v| HttpClient::Preconditions.assert_class('categories', v, String) }
            @description = (x = opts.delete(:description); x.nil? ? nil : HttpClient::Preconditions.assert_class('description', x, String))
            @attributes = HttpClient::Preconditions.assert_class('attributes', opts.delete(:attributes), Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h }
            @dimensions = HttpClient::Preconditions.assert_class('dimensions', HttpClient::Helper.to_object(opts.delete(:dimensions)), Hash)
            @images = HttpClient::Preconditions.assert_class('images', opts.delete(:images), Array).map { |v| HttpClient::Preconditions.assert_class('images', HttpClient::Helper.to_object(v), Hash) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CatalogItemUpserted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :number => number,
              :locale => locale,
              :name => name,
              :currency => currency,
              :price => price,
              :categories => categories,
              :description => description,
              :attributes => attributes,
              :dimensions => dimensions,
              :images => images
            }
          end

        end

        class CatalogItemUpsertedV2 < Event

          attr_reader :event_id, :timestamp, :organization, :item

          def initialize(incoming={})
            super(:discriminator => Event::Types::CATALOG_ITEM_UPSERTED_V2)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :item], 'CatalogItemUpsertedV2')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @item = (x = opts.delete(:item); x.is_a?(::Io::Flow::V0::Models::Item) ? x : ::Io::Flow::V0::Models::Item.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CatalogItemUpsertedV2.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :item => item.to_hash
            }
          end

        end

        # Represents the returned information for searching particular price book items
        class CatalogPriceBookItemDocument

          attr_reader :price_book_key, :price_book_item_key, :catalog, :price, :amount, :starts_at, :ends_at

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:price_book_key, :price_book_item_key, :catalog, :amount, :starts_at], 'CatalogPriceBookItemDocument')
            @price_book_key = HttpClient::Preconditions.assert_class('price_book_key', opts.delete(:price_book_key), String)
            @price_book_item_key = HttpClient::Preconditions.assert_class('price_book_item_key', opts.delete(:price_book_item_key), String)
            @catalog = (x = opts.delete(:catalog); x.is_a?(::Io::Flow::V0::Models::CatalogItemSummary) ? x : ::Io::Flow::V0::Models::CatalogItemSummary.new(x))
            @price = (x = opts.delete(:price); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Price) ? x : ::Io::Flow::V0::Models::Price.new(x)))
            @amount = HttpClient::Preconditions.assert_class('amount', HttpClient::Helper.to_big_decimal(opts.delete(:amount)), BigDecimal)
            @starts_at = HttpClient::Preconditions.assert_class('starts_at', HttpClient::Helper.to_date_time_iso8601(opts.delete(:starts_at)), DateTime)
            @ends_at = (x = opts.delete(:ends_at); x.nil? ? nil : HttpClient::Preconditions.assert_class('ends_at', HttpClient::Helper.to_date_time_iso8601(x), DateTime))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CatalogPriceBookItemDocument.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :price_book_key => price_book_key,
              :price_book_item_key => price_book_item_key,
              :catalog => catalog.to_hash,
              :price => price.nil? ? nil : price.to_hash,
              :amount => amount.to_f.to_s,
              :starts_at => starts_at,
              :ends_at => ends_at
            }
          end

        end

        class CatalogReference

          attr_reader :id

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id], 'CatalogReference')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CatalogReference.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id
            }
          end

        end

        # Statistics covering product catalog item information, including total catalog
        # item count, number of distinct categories, etc.
        class CatalogStatistics

          attr_reader :items, :categories

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:items, :categories], 'CatalogStatistics')
            @items = HttpClient::Preconditions.assert_class('items', opts.delete(:items), Integer)
            @categories = HttpClient::Preconditions.assert_class('categories', opts.delete(:categories), Integer)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CatalogStatistics.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :items => items,
              :categories => categories
            }
          end

        end

        class CatalogUpserted < Event

          attr_reader :event_id, :timestamp, :organization

          def initialize(incoming={})
            super(:discriminator => Event::Types::CATALOG_UPSERTED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization], 'CatalogUpserted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CatalogUpserted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization
            }
          end

        end

        class CatalogVersion

          attr_reader :id, :timestamp, :type, :catalog

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :timestamp, :type, :catalog], 'CatalogVersion')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::V0::Models::ChangeType) ? x : ::Io::Flow::V0::Models::ChangeType.apply(x))
            @catalog = (x = opts.delete(:catalog); x.is_a?(::Io::Flow::V0::Models::Catalog) ? x : ::Io::Flow::V0::Models::Catalog.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CatalogVersion.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :timestamp => timestamp,
              :type => type.value,
              :catalog => catalog.to_hash
            }
          end

        end

        class CategorySummary

          attr_reader :name, :count

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:count], 'CategorySummary')
            @name = (x = opts.delete(:name); x.nil? ? nil : HttpClient::Preconditions.assert_class('name', x, String))
            @count = HttpClient::Preconditions.assert_class('count', opts.delete(:count), Integer)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CategorySummary.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :name => name,
              :count => count
            }
          end

        end

        # Represents a facility capable of fulfilling a shipment
        class Center < ExpandableCenter

          attr_reader :id, :key, :address, :packaging, :name, :services, :schedule, :timezone, :capabilities, :partner_center

          def initialize(incoming={})
            super(:discriminator => ExpandableCenter::Types::CENTER)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :key, :address, :packaging, :name, :services, :schedule, :timezone], 'Center')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @key = HttpClient::Preconditions.assert_class('key', opts.delete(:key), String)
            @address = (x = opts.delete(:address); x.is_a?(::Io::Flow::V0::Models::ShippingAddress) ? x : ::Io::Flow::V0::Models::ShippingAddress.new(x))
            @packaging = HttpClient::Preconditions.assert_class('packaging', opts.delete(:packaging), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::Packaging) ? x : ::Io::Flow::V0::Models::Packaging.new(x)) }
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
            @services = HttpClient::Preconditions.assert_class('services', opts.delete(:services), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::AvailableService) ? x : ::Io::Flow::V0::Models::AvailableService.new(x)) }
            @schedule = (x = opts.delete(:schedule); x.is_a?(::Io::Flow::V0::Models::Schedule) ? x : ::Io::Flow::V0::Models::Schedule.new(x))
            @timezone = HttpClient::Preconditions.assert_class('timezone', opts.delete(:timezone), String)
            @capabilities = (x = opts.delete(:capabilities); x.nil? ? nil : HttpClient::Preconditions.assert_class('capabilities', x, Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::CenterCapability) ? x : ::Io::Flow::V0::Models::CenterCapability.apply(x)) })
            @partner_center = (x = opts.delete(:partner_center); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::PartnerCenter) ? x : ::Io::Flow::V0::Models::PartnerCenter.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            Center.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :id => id,
              :key => key,
              :address => address.to_hash,
              :packaging => packaging.map { |o| o.to_hash },
              :name => name,
              :services => services.map { |o| o.to_hash },
              :schedule => schedule.to_hash,
              :timezone => timezone,
              :capabilities => capabilities.nil? ? nil : capabilities.map { |o| o.value },
              :partner_center => partner_center.nil? ? nil : partner_center.to_hash
            }
          end

        end

        class CenterDeleted < Event

          attr_reader :event_id, :timestamp, :organization, :center

          def initialize(incoming={})
            super(:discriminator => Event::Types::CENTER_DELETED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :center], 'CenterDeleted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @center = (x = opts.delete(:center); x.is_a?(::Io::Flow::V0::Models::Center) ? x : ::Io::Flow::V0::Models::Center.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CenterDeleted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :center => center.to_hash
            }
          end

        end

        class CenterForm

          attr_reader :address, :packaging, :name, :services, :schedule, :timezone, :key, :capabilities, :partner_center_form

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:address, :packaging, :name, :services, :schedule], 'CenterForm')
            @address = (x = opts.delete(:address); x.is_a?(::Io::Flow::V0::Models::ShippingAddress) ? x : ::Io::Flow::V0::Models::ShippingAddress.new(x))
            @packaging = HttpClient::Preconditions.assert_class('packaging', opts.delete(:packaging), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::Packaging) ? x : ::Io::Flow::V0::Models::Packaging.new(x)) }
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
            @services = HttpClient::Preconditions.assert_class('services', opts.delete(:services), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::AvailableService) ? x : ::Io::Flow::V0::Models::AvailableService.new(x)) }
            @schedule = (x = opts.delete(:schedule); x.is_a?(::Io::Flow::V0::Models::Schedule) ? x : ::Io::Flow::V0::Models::Schedule.new(x))
            @timezone = (x = opts.delete(:timezone); x.nil? ? nil : HttpClient::Preconditions.assert_class('timezone', x, String))
            @key = (x = opts.delete(:key); x.nil? ? nil : HttpClient::Preconditions.assert_class('key', x, String))
            @capabilities = (x = opts.delete(:capabilities); x.nil? ? nil : HttpClient::Preconditions.assert_class('capabilities', x, Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::CenterCapability) ? x : ::Io::Flow::V0::Models::CenterCapability.apply(x)) })
            @partner_center_form = (x = opts.delete(:partner_center_form); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::PartnerCenterForm) ? x : ::Io::Flow::V0::Models::PartnerCenterForm.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CenterForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :address => address.to_hash,
              :packaging => packaging.map { |o| o.to_hash },
              :name => name,
              :services => services.map { |o| o.to_hash },
              :schedule => schedule.to_hash,
              :timezone => timezone,
              :key => key,
              :capabilities => capabilities.nil? ? nil : capabilities.map { |o| o.value },
              :partner_center_form => partner_center_form.nil? ? nil : partner_center_form.to_hash
            }
          end

        end

        class CenterQuery

          attr_reader :q

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:q], 'CenterQuery')
            @q = HttpClient::Preconditions.assert_class('q', opts.delete(:q), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CenterQuery.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :q => q
            }
          end

        end

        class CenterReference < ExpandableCenter

          attr_reader :organization_id, :center_key

          def initialize(incoming={})
            super(:discriminator => ExpandableCenter::Types::CENTER_REFERENCE)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:organization_id, :center_key], 'CenterReference')
            @organization_id = HttpClient::Preconditions.assert_class('organization_id', opts.delete(:organization_id), String)
            @center_key = HttpClient::Preconditions.assert_class('center_key', opts.delete(:center_key), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CenterReference.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :organization_id => organization_id,
              :center_key => center_key
            }
          end

        end

        class CenterSummary

          attr_reader :id, :key, :address

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :key], 'CenterSummary')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @key = HttpClient::Preconditions.assert_class('key', opts.delete(:key), String)
            @address = (x = opts.delete(:address); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::ShippingAddress) ? x : ::Io::Flow::V0::Models::ShippingAddress.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CenterSummary.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :key => key,
              :address => address.nil? ? nil : address.to_hash
            }
          end

        end

        class CenterUpserted < Event

          attr_reader :event_id, :timestamp, :organization, :center

          def initialize(incoming={})
            super(:discriminator => Event::Types::CENTER_UPSERTED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :center], 'CenterUpserted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @center = (x = opts.delete(:center); x.is_a?(::Io::Flow::V0::Models::Center) ? x : ::Io::Flow::V0::Models::Center.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CenterUpserted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :center => center.to_hash
            }
          end

        end

        class CenterVersion

          attr_reader :id, :timestamp, :type, :center

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :timestamp, :type, :center], 'CenterVersion')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::V0::Models::ChangeType) ? x : ::Io::Flow::V0::Models::ChangeType.apply(x))
            @center = (x = opts.delete(:center); x.is_a?(::Io::Flow::V0::Models::Center) ? x : ::Io::Flow::V0::Models::Center.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CenterVersion.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :timestamp => timestamp,
              :type => type.value,
              :center => center.to_hash
            }
          end

        end

        class ChannelAuthorization

          attr_reader :placeholder

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @placeholder = (x = opts.delete(:placeholder); x.nil? ? nil : HttpClient::Preconditions.assert_class('placeholder', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ChannelAuthorization.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :placeholder => placeholder
            }
          end

        end

        class ChannelAuthorizationForm

          attr_reader :channel_id

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:channel_id], 'ChannelAuthorizationForm')
            @channel_id = HttpClient::Preconditions.assert_class('channel_id', opts.delete(:channel_id), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ChannelAuthorizationForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :channel_id => channel_id
            }
          end

        end

        class ChannelCurrencyDeleted < Event

          attr_reader :event_id, :timestamp, :id

          def initialize(incoming={})
            super(:discriminator => Event::Types::CHANNEL_CURRENCY_DELETED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :id], 'ChannelCurrencyDeleted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ChannelCurrencyDeleted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :id => id
            }
          end

        end

        class ChannelCurrencyUpserted < Event

          attr_reader :event_id, :timestamp, :channel_currency

          def initialize(incoming={})
            super(:discriminator => Event::Types::CHANNEL_CURRENCY_UPSERTED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :channel_currency], 'ChannelCurrencyUpserted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @channel_currency = (x = opts.delete(:channel_currency); x.is_a?(::Io::Flow::Channel::Internal::V0::Models::ChannelCurrency) ? x : ::Io::Flow::Channel::Internal::V0::Models::ChannelCurrency.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ChannelCurrencyUpserted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :channel_currency => channel_currency.to_hash
            }
          end

        end

        class ChannelDeleted < Event

          attr_reader :event_id, :timestamp, :id

          def initialize(incoming={})
            super(:discriminator => Event::Types::CHANNEL_DELETED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :id], 'ChannelDeleted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ChannelDeleted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :id => id
            }
          end

        end

        class ChannelOrganization

          attr_reader :id, :organization, :key, :channel, :name, :slug, :defaults, :attributes

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :organization, :key, :channel, :name, :defaults], 'ChannelOrganization')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @organization = (x = opts.delete(:organization); x.is_a?(::Io::Flow::V0::Models::OrganizationReference) ? x : ::Io::Flow::V0::Models::OrganizationReference.new(x))
            @key = HttpClient::Preconditions.assert_class('key', opts.delete(:key), String)
            @channel = (x = opts.delete(:channel); x.is_a?(::Io::Flow::V0::Models::ChannelReference) ? x : ::Io::Flow::V0::Models::ChannelReference.new(x))
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
            @slug = (x = opts.delete(:slug); x.nil? ? nil : HttpClient::Preconditions.assert_class('slug', x, String))
            @defaults = (x = opts.delete(:defaults); x.is_a?(::Io::Flow::V0::Models::OrganizationDefaults) ? x : ::Io::Flow::V0::Models::OrganizationDefaults.new(x))
            @attributes = (x = opts.delete(:attributes); x.nil? ? nil : HttpClient::Preconditions.assert_class('attributes', x, Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h })
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ChannelOrganization.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :organization => organization.to_hash,
              :key => key,
              :channel => channel.to_hash,
              :name => name,
              :slug => slug,
              :defaults => defaults.to_hash,
              :attributes => attributes.nil? ? nil : attributes
            }
          end

        end

        class ChannelOrganizationAuthorization

          attr_reader :placeholder

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @placeholder = (x = opts.delete(:placeholder); x.nil? ? nil : HttpClient::Preconditions.assert_class('placeholder', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ChannelOrganizationAuthorization.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :placeholder => placeholder
            }
          end

        end

        class ChannelOrganizationAuthorizationForm

          attr_reader :channel_id, :organization_id

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:channel_id, :organization_id], 'ChannelOrganizationAuthorizationForm')
            @channel_id = HttpClient::Preconditions.assert_class('channel_id', opts.delete(:channel_id), String)
            @organization_id = HttpClient::Preconditions.assert_class('organization_id', opts.delete(:organization_id), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ChannelOrganizationAuthorizationForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :channel_id => channel_id,
              :organization_id => organization_id
            }
          end

        end

        class ChannelOrganizationDeleted < Event

          attr_reader :event_id, :timestamp, :id

          def initialize(incoming={})
            super(:discriminator => Event::Types::CHANNEL_ORGANIZATION_DELETED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :id], 'ChannelOrganizationDeleted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ChannelOrganizationDeleted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :id => id
            }
          end

        end

        class ChannelOrganizationForm

          attr_reader :key, :name, :slug, :defaults, :attributes

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:key, :defaults], 'ChannelOrganizationForm')
            @key = HttpClient::Preconditions.assert_class('key', opts.delete(:key), String)
            @name = (x = opts.delete(:name); x.nil? ? nil : HttpClient::Preconditions.assert_class('name', x, String))
            @slug = (x = opts.delete(:slug); x.nil? ? nil : HttpClient::Preconditions.assert_class('slug', x, String))
            @defaults = (x = opts.delete(:defaults); x.is_a?(::Io::Flow::V0::Models::OrganizationDefaults) ? x : ::Io::Flow::V0::Models::OrganizationDefaults.new(x))
            @attributes = (x = opts.delete(:attributes); x.nil? ? nil : HttpClient::Preconditions.assert_class('attributes', x, Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h })
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ChannelOrganizationForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :key => key,
              :name => name,
              :slug => slug,
              :defaults => defaults.to_hash,
              :attributes => attributes.nil? ? nil : attributes
            }
          end

        end

        class ChannelOrganizationPutForm

          attr_reader :name, :slug, :defaults, :attributes

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:defaults], 'ChannelOrganizationPutForm')
            @name = (x = opts.delete(:name); x.nil? ? nil : HttpClient::Preconditions.assert_class('name', x, String))
            @slug = (x = opts.delete(:slug); x.nil? ? nil : HttpClient::Preconditions.assert_class('slug', x, String))
            @defaults = (x = opts.delete(:defaults); x.is_a?(::Io::Flow::V0::Models::OrganizationDefaults) ? x : ::Io::Flow::V0::Models::OrganizationDefaults.new(x))
            @attributes = (x = opts.delete(:attributes); x.nil? ? nil : HttpClient::Preconditions.assert_class('attributes', x, Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h })
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ChannelOrganizationPutForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :name => name,
              :slug => slug,
              :defaults => defaults.to_hash,
              :attributes => attributes.nil? ? nil : attributes
            }
          end

        end

        class ChannelOrganizationUpserted < Event

          attr_reader :event_id, :timestamp, :channel_organization

          def initialize(incoming={})
            super(:discriminator => Event::Types::CHANNEL_ORGANIZATION_UPSERTED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :channel_organization], 'ChannelOrganizationUpserted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @channel_organization = (x = opts.delete(:channel_organization); x.is_a?(::Io::Flow::V0::Models::ChannelOrganization) ? x : ::Io::Flow::V0::Models::ChannelOrganization.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ChannelOrganizationUpserted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :channel_organization => channel_organization.to_hash
            }
          end

        end

        class ChannelRate

          attr_reader :placeholder

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @placeholder = (x = opts.delete(:placeholder); x.nil? ? nil : HttpClient::Preconditions.assert_class('placeholder', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ChannelRate.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :placeholder => placeholder
            }
          end

        end

        class ChannelReference

          attr_reader :id

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id], 'ChannelReference')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ChannelReference.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id
            }
          end

        end

        class ChannelToken < Token

          attr_reader :id, :channel, :user, :partial, :cleartext, :created_at, :description

          def initialize(incoming={})
            super(:discriminator => Token::Types::CHANNEL_TOKEN)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :channel, :user, :partial, :created_at], 'ChannelToken')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @channel = (x = opts.delete(:channel); x.is_a?(::Io::Flow::V0::Models::ChannelReference) ? x : ::Io::Flow::V0::Models::ChannelReference.new(x))
            @user = (x = opts.delete(:user); x.is_a?(::Io::Flow::V0::Models::UserReference) ? x : ::Io::Flow::V0::Models::UserReference.new(x))
            @partial = HttpClient::Preconditions.assert_class('partial', opts.delete(:partial), String)
            @cleartext = (x = opts.delete(:cleartext); x.nil? ? nil : HttpClient::Preconditions.assert_class('cleartext', x, String))
            @created_at = HttpClient::Preconditions.assert_class('created_at', HttpClient::Helper.to_date_time_iso8601(opts.delete(:created_at)), DateTime)
            @description = (x = opts.delete(:description); x.nil? ? nil : HttpClient::Preconditions.assert_class('description', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ChannelToken.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :id => id,
              :channel => channel.to_hash,
              :user => user.to_hash,
              :partial => partial,
              :cleartext => cleartext,
              :created_at => created_at,
              :description => description
            }
          end

        end

        class ChannelTokenForm

          attr_reader :channel_id, :description

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:channel_id], 'ChannelTokenForm')
            @channel_id = HttpClient::Preconditions.assert_class('channel_id', opts.delete(:channel_id), String)
            @description = (x = opts.delete(:description); x.nil? ? nil : HttpClient::Preconditions.assert_class('description', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ChannelTokenForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :channel_id => channel_id,
              :description => description
            }
          end

        end

        class ChannelTokenReference < TokenReference

          attr_reader :id, :channel, :user

          def initialize(incoming={})
            super(:discriminator => TokenReference::Types::CHANNEL_TOKEN_REFERENCE)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :channel, :user], 'ChannelTokenReference')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @channel = (x = opts.delete(:channel); x.is_a?(::Io::Flow::V0::Models::ChannelReference) ? x : ::Io::Flow::V0::Models::ChannelReference.new(x))
            @user = (x = opts.delete(:user); x.is_a?(::Io::Flow::V0::Models::UserReference) ? x : ::Io::Flow::V0::Models::UserReference.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ChannelTokenReference.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :id => id,
              :channel => channel.to_hash,
              :user => user.to_hash
            }
          end

        end

        class ChannelUpserted < Event

          attr_reader :event_id, :timestamp, :channel

          def initialize(incoming={})
            super(:discriminator => Event::Types::CHANNEL_UPSERTED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :channel], 'ChannelUpserted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @channel = (x = opts.delete(:channel); x.is_a?(::Io::Flow::Channel::Internal::V0::Models::Channel) ? x : ::Io::Flow::Channel::Internal::V0::Models::Channel.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ChannelUpserted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :channel => channel.to_hash
            }
          end

        end

        # A Checkout Attribute defines an attribute that will be made available via the
        # checkout item content. This is useful if you would like to surface a specific
        # attribute (like 'size' or 'color') in checkout.
        class CheckoutAttribute

          attr_reader :id, :experience, :key, :name, :attribute_keys, :position

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :experience, :key, :name, :attribute_keys, :position], 'CheckoutAttribute')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @experience = (x = opts.delete(:experience); x.is_a?(::Io::Flow::V0::Models::ExperienceReference) ? x : ::Io::Flow::V0::Models::ExperienceReference.new(x))
            @key = HttpClient::Preconditions.assert_class('key', opts.delete(:key), String)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
            @attribute_keys = HttpClient::Preconditions.assert_class('attribute_keys', opts.delete(:attribute_keys), Array).map { |v| HttpClient::Preconditions.assert_class('attribute_keys', v, String) }
            @position = HttpClient::Preconditions.assert_class('position', opts.delete(:position), Integer)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CheckoutAttribute.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :experience => experience.to_hash,
              :key => key,
              :name => name,
              :attribute_keys => attribute_keys,
              :position => position
            }
          end

        end

        class CheckoutAttributeForm

          attr_reader :key, :name, :experience_key, :attribute_keys, :position

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:key, :experience_key, :attribute_keys], 'CheckoutAttributeForm')
            @key = HttpClient::Preconditions.assert_class('key', opts.delete(:key), String)
            @name = (x = opts.delete(:name); x.nil? ? nil : HttpClient::Preconditions.assert_class('name', x, String))
            @experience_key = HttpClient::Preconditions.assert_class('experience_key', opts.delete(:experience_key), String)
            @attribute_keys = HttpClient::Preconditions.assert_class('attribute_keys', opts.delete(:attribute_keys), Array).map { |v| HttpClient::Preconditions.assert_class('attribute_keys', v, String) }
            @position = (x = opts.delete(:position); x.nil? ? nil : HttpClient::Preconditions.assert_class('position', x, Integer))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CheckoutAttributeForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :key => key,
              :name => name,
              :experience_key => experience_key,
              :attribute_keys => attribute_keys,
              :position => position
            }
          end

        end

        # A Checkout Item Content provides information about an item to support
        # rendering of that item in the context of checkout
        class CheckoutItemContent

          attr_reader :item, :name, :description, :attributes, :image

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:item, :name, :attributes], 'CheckoutItemContent')
            @item = (x = opts.delete(:item); x.is_a?(::Io::Flow::V0::Models::Item) ? x : ::Io::Flow::V0::Models::Item.new(x))
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
            @description = (x = opts.delete(:description); x.nil? ? nil : HttpClient::Preconditions.assert_class('description', x, String))
            @attributes = HttpClient::Preconditions.assert_class('attributes', opts.delete(:attributes), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::CheckoutItemContentAttribute) ? x : ::Io::Flow::V0::Models::CheckoutItemContentAttribute.new(x)) }
            @image = (x = opts.delete(:image); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Image) ? x : ::Io::Flow::V0::Models::Image.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CheckoutItemContent.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :item => item.to_hash,
              :name => name,
              :description => description,
              :attributes => attributes.map { |o| o.to_hash },
              :image => image.nil? ? nil : image.to_hash
            }
          end

        end

        class CheckoutItemContentAttribute

          attr_reader :key, :name, :value

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:key, :name, :value], 'CheckoutItemContentAttribute')
            @key = HttpClient::Preconditions.assert_class('key', opts.delete(:key), String)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
            @value = HttpClient::Preconditions.assert_class('value', opts.delete(:value), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CheckoutItemContentAttribute.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :key => key,
              :name => name,
              :value => value
            }
          end

        end

        class CheckoutOptinResponses

          attr_reader :id, :order_number, :session_id, :optin_responses

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :order_number, :session_id, :optin_responses], 'CheckoutOptinResponses')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @order_number = HttpClient::Preconditions.assert_class('order_number', opts.delete(:order_number), String)
            @session_id = HttpClient::Preconditions.assert_class('session_id', opts.delete(:session_id), String)
            @optin_responses = HttpClient::Preconditions.assert_class('optin_responses', opts.delete(:optin_responses), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::OptinResponse) ? x : ::Io::Flow::V0::Models::OptinResponse.new(x)) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CheckoutOptinResponses.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :order_number => order_number,
              :session_id => session_id,
              :optin_responses => optin_responses.map { |o| o.to_hash }
            }
          end

        end

        class CheckoutOptinResponsesDeleted < Event

          attr_reader :event_id, :timestamp, :organization, :id

          def initialize(incoming={})
            super(:discriminator => Event::Types::CHECKOUT_OPTIN_RESPONSES_DELETED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :id], 'CheckoutOptinResponsesDeleted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CheckoutOptinResponsesDeleted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :id => id
            }
          end

        end

        class CheckoutOptinResponsesUpserted < Event

          attr_reader :event_id, :timestamp, :organization, :checkout_optin_responses

          def initialize(incoming={})
            super(:discriminator => Event::Types::CHECKOUT_OPTIN_RESPONSES_UPSERTED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :checkout_optin_responses], 'CheckoutOptinResponsesUpserted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @checkout_optin_responses = (x = opts.delete(:checkout_optin_responses); x.is_a?(::Io::Flow::V0::Models::CheckoutOptinResponses) ? x : ::Io::Flow::V0::Models::CheckoutOptinResponses.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CheckoutOptinResponsesUpserted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :checkout_optin_responses => checkout_optin_responses.to_hash
            }
          end

        end

        class CheckoutReference

          attr_reader :id

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id], 'CheckoutReference')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CheckoutReference.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id
            }
          end

        end

        # Represents a secure token that can be used to redirect to Checkout UI
        class CheckoutToken

          attr_reader :id, :organization, :checkout, :order, :urls, :expires_at, :session, :customer

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :organization, :checkout, :order, :urls, :expires_at, :session], 'CheckoutToken')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @organization = (x = opts.delete(:organization); x.is_a?(::Io::Flow::V0::Models::OrganizationReference) ? x : ::Io::Flow::V0::Models::OrganizationReference.new(x))
            @checkout = (x = opts.delete(:checkout); x.is_a?(::Io::Flow::V0::Models::CheckoutReference) ? x : ::Io::Flow::V0::Models::CheckoutReference.new(x))
            @order = (x = opts.delete(:order); x.is_a?(::Io::Flow::V0::Models::OrderNumberReference) ? x : ::Io::Flow::V0::Models::OrderNumberReference.new(x))
            @urls = (x = opts.delete(:urls); x.is_a?(::Io::Flow::V0::Models::CheckoutUrls) ? x : ::Io::Flow::V0::Models::CheckoutUrls.new(x))
            @expires_at = HttpClient::Preconditions.assert_class('expires_at', HttpClient::Helper.to_date_time_iso8601(opts.delete(:expires_at)), DateTime)
            @session = (x = opts.delete(:session); x.is_a?(::Io::Flow::V0::Models::SessionReference) ? x : ::Io::Flow::V0::Models::SessionReference.new(x))
            @customer = (x = opts.delete(:customer); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::CustomerReference) ? x : ::Io::Flow::V0::Models::CustomerReference.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CheckoutToken.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :organization => organization.to_hash,
              :checkout => checkout.to_hash,
              :order => order.to_hash,
              :urls => urls.to_hash,
              :expires_at => expires_at,
              :session => session.to_hash,
              :customer => customer.nil? ? nil : customer.to_hash
            }
          end

        end

        # Use this form to securly pass order and optional customer information to be
        # created or updated.
        class CheckoutTokenOrderForm < CheckoutTokenForm

          attr_reader :order_form, :customer, :address_book, :payment_sources, :session_id, :urls, :identifiers

          def initialize(incoming={})
            super(:discriminator => CheckoutTokenForm::Types::CHECKOUT_TOKEN_ORDER_FORM)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:order_form, :session_id], 'CheckoutTokenOrderForm')
            @order_form = (x = opts.delete(:order_form); x.is_a?(::Io::Flow::V0::Models::OrderForm) ? x : ::Io::Flow::V0::Models::OrderForm.new(x))
            @customer = (x = opts.delete(:customer); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::CustomerForm) ? x : ::Io::Flow::V0::Models::CustomerForm.new(x)))
            @address_book = (x = opts.delete(:address_book); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::CustomerAddressBookForm) ? x : ::Io::Flow::V0::Models::CustomerAddressBookForm.new(x)))
            @payment_sources = (x = opts.delete(:payment_sources); x.nil? ? nil : HttpClient::Preconditions.assert_class('payment_sources', x, Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::PaymentSourceForm) ? x : ::Io::Flow::V0::Models::PaymentSourceForm.from_json(x)) })
            @session_id = HttpClient::Preconditions.assert_class('session_id', opts.delete(:session_id), String)
            @urls = (x = opts.delete(:urls); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::CheckoutUrlsForm) ? x : ::Io::Flow::V0::Models::CheckoutUrlsForm.new(x)))
            @identifiers = (x = opts.delete(:identifiers); x.nil? ? nil : HttpClient::Preconditions.assert_class('identifiers', x, Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::OrderSubmissionIdentifierForm) ? x : ::Io::Flow::V0::Models::OrderSubmissionIdentifierForm.new(x)) })
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CheckoutTokenOrderForm.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :order_form => order_form.to_hash,
              :customer => customer.nil? ? nil : customer.to_hash,
              :address_book => address_book.nil? ? nil : address_book.to_hash,
              :payment_sources => payment_sources.nil? ? nil : payment_sources.map { |o| o.to_hash },
              :session_id => session_id,
              :urls => urls.nil? ? nil : urls.to_hash,
              :identifiers => identifiers.nil? ? nil : identifiers.map { |o| o.to_hash }
            }
          end

        end

        # Use this form when order number and session id are known. Optional customer
        # information will be created or updated.
        class CheckoutTokenReferenceForm < CheckoutTokenForm

          attr_reader :order_number, :session_id, :urls

          def initialize(incoming={})
            super(:discriminator => CheckoutTokenForm::Types::CHECKOUT_TOKEN_REFERENCE_FORM)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:order_number, :session_id, :urls], 'CheckoutTokenReferenceForm')
            @order_number = HttpClient::Preconditions.assert_class('order_number', opts.delete(:order_number), String)
            @session_id = HttpClient::Preconditions.assert_class('session_id', opts.delete(:session_id), String)
            @urls = (x = opts.delete(:urls); x.is_a?(::Io::Flow::V0::Models::CheckoutUrlsForm) ? x : ::Io::Flow::V0::Models::CheckoutUrlsForm.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CheckoutTokenReferenceForm.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :order_number => order_number,
              :session_id => session_id,
              :urls => urls.to_hash
            }
          end

        end

        class CheckoutUrls

          attr_reader :continue_shopping, :confirmation, :invalid_checkout

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @continue_shopping = (x = opts.delete(:continue_shopping); x.nil? ? nil : HttpClient::Preconditions.assert_class('continue_shopping', x, String))
            @confirmation = (x = opts.delete(:confirmation); x.nil? ? nil : HttpClient::Preconditions.assert_class('confirmation', x, String))
            @invalid_checkout = (x = opts.delete(:invalid_checkout); x.nil? ? nil : HttpClient::Preconditions.assert_class('invalid_checkout', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CheckoutUrls.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :continue_shopping => continue_shopping,
              :confirmation => confirmation,
              :invalid_checkout => invalid_checkout
            }
          end

        end

        class CheckoutUrlsForm

          attr_reader :continue_shopping, :confirmation, :invalid_checkout

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @continue_shopping = (x = opts.delete(:continue_shopping); x.nil? ? nil : HttpClient::Preconditions.assert_class('continue_shopping', x, String))
            @confirmation = (x = opts.delete(:confirmation); x.nil? ? nil : HttpClient::Preconditions.assert_class('confirmation', x, String))
            @invalid_checkout = (x = opts.delete(:invalid_checkout); x.nil? ? nil : HttpClient::Preconditions.assert_class('invalid_checkout', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CheckoutUrlsForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :continue_shopping => continue_shopping,
              :confirmation => confirmation,
              :invalid_checkout => invalid_checkout
            }
          end

        end

        # The actual value of the API token. This is modeled as a separate resource as
        # it is fetched only on demand.
        class Cleartext

          attr_reader :value

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:value], 'Cleartext')
            @value = HttpClient::Preconditions.assert_class('value', opts.delete(:value), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            Cleartext.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :value => value
            }
          end

        end

        class CommercialInvoiceFee < PartnerCenterFee

          attr_reader :amount

          def initialize(incoming={})
            super(:discriminator => PartnerCenterFee::Types::COMMERCIAL_INVOICE_FEE)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:amount], 'CommercialInvoiceFee')
            @amount = (x = opts.delete(:amount); x.is_a?(::Io::Flow::V0::Models::Money) ? x : ::Io::Flow::V0::Models::Money.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CommercialInvoiceFee.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :amount => amount.to_hash
            }
          end

        end

        # The consumer invoice represents the details of a set of items from a given
        # order. This may represent either the full order or a partial fulfillment.
        class ConsumerInvoice

          attr_reader :id, :number, :status, :date, :key, :order, :entity, :payments, :center, :destination, :billing_address, :lines, :documents, :attributes, :tax_registration, :customer_type, :estimated_delivery_date

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :number, :status, :date, :key, :order, :entity, :payments, :destination, :lines, :documents, :attributes], 'ConsumerInvoice')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @number = HttpClient::Preconditions.assert_class('number', opts.delete(:number), String)
            @status = (x = opts.delete(:status); x.is_a?(::Io::Flow::V0::Models::ConsumerInvoiceStatus) ? x : ::Io::Flow::V0::Models::ConsumerInvoiceStatus.apply(x))
            @date = HttpClient::Preconditions.assert_class('date', HttpClient::Helper.to_date_time_iso8601(opts.delete(:date)), DateTime)
            @key = HttpClient::Preconditions.assert_class('key', opts.delete(:key), String)
            @order = (x = opts.delete(:order); x.is_a?(::Io::Flow::V0::Models::ConsumerInvoiceOrderSummary) ? x : ::Io::Flow::V0::Models::ConsumerInvoiceOrderSummary.new(x))
            @entity = (x = opts.delete(:entity); x.is_a?(::Io::Flow::V0::Models::MerchantOfRecordEntity) ? x : ::Io::Flow::V0::Models::MerchantOfRecordEntity.new(x))
            @payments = HttpClient::Preconditions.assert_class('payments', opts.delete(:payments), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::ConsumerInvoicePayment) ? x : ::Io::Flow::V0::Models::ConsumerInvoicePayment.new(x)) }
            @center = (x = opts.delete(:center); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::ConsumerInvoiceCenterReference) ? x : ::Io::Flow::V0::Models::ConsumerInvoiceCenterReference.new(x)))
            @destination = (x = opts.delete(:destination); x.is_a?(::Io::Flow::V0::Models::OrderAddress) ? x : ::Io::Flow::V0::Models::OrderAddress.new(x))
            @billing_address = (x = opts.delete(:billing_address); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::BillingAddress) ? x : ::Io::Flow::V0::Models::BillingAddress.new(x)))
            @lines = HttpClient::Preconditions.assert_class('lines', opts.delete(:lines), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::ConsumerInvoiceLine) ? x : ::Io::Flow::V0::Models::ConsumerInvoiceLine.from_json(x)) }
            @documents = HttpClient::Preconditions.assert_class('documents', opts.delete(:documents), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::ConsumerInvoiceDocument) ? x : ::Io::Flow::V0::Models::ConsumerInvoiceDocument.new(x)) }
            @attributes = HttpClient::Preconditions.assert_class('attributes', opts.delete(:attributes), Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h }
            @tax_registration = (x = opts.delete(:tax_registration); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::TaxRegistration) ? x : ::Io::Flow::V0::Models::TaxRegistration.new(x)))
            @customer_type = (x = opts.delete(:customer_type); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::ConsumerInvoiceCustomerType) ? x : ::Io::Flow::V0::Models::ConsumerInvoiceCustomerType.apply(x)))
            @estimated_delivery_date = (x = opts.delete(:estimated_delivery_date); x.nil? ? nil : HttpClient::Preconditions.assert_class('estimated_delivery_date', HttpClient::Helper.to_date_time_iso8601(x), DateTime))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ConsumerInvoice.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :number => number,
              :status => status.value,
              :date => date,
              :key => key,
              :order => order.to_hash,
              :entity => entity.to_hash,
              :payments => payments.map { |o| o.to_hash },
              :center => center.nil? ? nil : center.to_hash,
              :destination => destination.to_hash,
              :billing_address => billing_address.nil? ? nil : billing_address.to_hash,
              :lines => lines.map { |o| o.to_hash },
              :documents => documents.map { |o| o.to_hash },
              :attributes => attributes,
              :tax_registration => tax_registration.nil? ? nil : tax_registration.to_hash,
              :customer_type => customer_type.nil? ? nil : customer_type.value,
              :estimated_delivery_date => estimated_delivery_date
            }
          end

        end

        class ConsumerInvoiceCenterReference

          attr_reader :id, :key, :name, :address

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :key, :name, :address], 'ConsumerInvoiceCenterReference')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @key = HttpClient::Preconditions.assert_class('key', opts.delete(:key), String)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
            @address = (x = opts.delete(:address); x.is_a?(::Io::Flow::V0::Models::Address) ? x : ::Io::Flow::V0::Models::Address.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ConsumerInvoiceCenterReference.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :key => key,
              :name => name,
              :address => address.to_hash
            }
          end

        end

        class ConsumerInvoiceDeleted < Event

          attr_reader :event_id, :timestamp, :organization, :consumer_invoice

          def initialize(incoming={})
            super(:discriminator => Event::Types::CONSUMER_INVOICE_DELETED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :consumer_invoice], 'ConsumerInvoiceDeleted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @consumer_invoice = (x = opts.delete(:consumer_invoice); x.is_a?(::Io::Flow::V0::Models::ConsumerInvoice) ? x : ::Io::Flow::V0::Models::ConsumerInvoice.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ConsumerInvoiceDeleted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :consumer_invoice => consumer_invoice.to_hash
            }
          end

        end

        class ConsumerInvoiceDocument

          attr_reader :type, :language, :url

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:type, :language, :url], 'ConsumerInvoiceDocument')
            @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::V0::Models::ConsumerInvoiceDocumentType) ? x : ::Io::Flow::V0::Models::ConsumerInvoiceDocumentType.apply(x))
            @language = HttpClient::Preconditions.assert_class('language', opts.delete(:language), String)
            @url = HttpClient::Preconditions.assert_class('url', opts.delete(:url), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ConsumerInvoiceDocument.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :type => type.value,
              :language => language,
              :url => url
            }
          end

        end

        class ConsumerInvoiceForm

          attr_reader :order_number, :attributes

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:order_number], 'ConsumerInvoiceForm')
            @order_number = HttpClient::Preconditions.assert_class('order_number', opts.delete(:order_number), String)
            @attributes = (x = opts.delete(:attributes); x.nil? ? nil : HttpClient::Preconditions.assert_class('attributes', x, Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h })
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ConsumerInvoiceForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :order_number => order_number,
              :attributes => attributes.nil? ? nil : attributes
            }
          end

        end

        class ConsumerInvoiceFormByOrder

          attr_reader :attributes

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @attributes = (x = opts.delete(:attributes); x.nil? ? nil : HttpClient::Preconditions.assert_class('attributes', x, Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h })
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ConsumerInvoiceFormByOrder.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :attributes => attributes.nil? ? nil : attributes
            }
          end

        end

        class ConsumerInvoiceLevy

          attr_reader :rate, :value

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:rate, :value], 'ConsumerInvoiceLevy')
            @rate = HttpClient::Preconditions.assert_class('rate', HttpClient::Helper.to_big_decimal(opts.delete(:rate)), BigDecimal)
            @value = (x = opts.delete(:value); x.is_a?(::Io::Flow::V0::Models::Price) ? x : ::Io::Flow::V0::Models::Price.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ConsumerInvoiceLevy.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :rate => rate.to_f.to_s,
              :value => value.to_hash
            }
          end

        end

        class ConsumerInvoiceLevyForm

          attr_reader :rate, :amount

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:rate, :amount], 'ConsumerInvoiceLevyForm')
            @rate = HttpClient::Preconditions.assert_class('rate', HttpClient::Helper.to_big_decimal(opts.delete(:rate)), BigDecimal)
            @amount = HttpClient::Preconditions.assert_class('amount', HttpClient::Helper.to_big_decimal(opts.delete(:amount)), BigDecimal)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ConsumerInvoiceLevyForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :rate => rate.to_f.to_s,
              :amount => amount.to_f.to_s
            }
          end

        end

        class ConsumerInvoiceLineDiscount < ConsumerInvoiceLine

          attr_reader :price

          def initialize(incoming={})
            super(:discriminator => ConsumerInvoiceLine::Types::CONSUMER_INVOICE_LINE_DISCOUNT)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:price], 'ConsumerInvoiceLineDiscount')
            @price = (x = opts.delete(:price); x.is_a?(::Io::Flow::V0::Models::Price) ? x : ::Io::Flow::V0::Models::Price.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ConsumerInvoiceLineDiscount.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :price => price.to_hash
            }
          end

        end

        class ConsumerInvoiceLineDiscountForm < ConsumerInvoiceLineForm

          attr_reader :price

          def initialize(incoming={})
            super(:discriminator => ConsumerInvoiceLineForm::Types::CONSUMER_INVOICE_LINE_DISCOUNT_FORM)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:price], 'ConsumerInvoiceLineDiscountForm')
            @price = HttpClient::Preconditions.assert_class('price', HttpClient::Helper.to_big_decimal(opts.delete(:price)), BigDecimal)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ConsumerInvoiceLineDiscountForm.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :price => price.to_f.to_s
            }
          end

        end

        class ConsumerInvoiceLineItem < ConsumerInvoiceLine

          attr_reader :item, :description, :quantity, :unit_price, :unit_discount, :unit_tax, :unit_duty

          def initialize(incoming={})
            super(:discriminator => ConsumerInvoiceLine::Types::CONSUMER_INVOICE_LINE_ITEM)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:item, :description, :quantity, :unit_price], 'ConsumerInvoiceLineItem')
            @item = (x = opts.delete(:item); x.is_a?(::Io::Flow::V0::Models::ItemReference) ? x : ::Io::Flow::V0::Models::ItemReference.new(x))
            @description = HttpClient::Preconditions.assert_class('description', opts.delete(:description), String)
            @quantity = HttpClient::Preconditions.assert_class('quantity', opts.delete(:quantity), Integer)
            @unit_price = (x = opts.delete(:unit_price); x.is_a?(::Io::Flow::V0::Models::Price) ? x : ::Io::Flow::V0::Models::Price.new(x))
            @unit_discount = (x = opts.delete(:unit_discount); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Price) ? x : ::Io::Flow::V0::Models::Price.new(x)))
            @unit_tax = (x = opts.delete(:unit_tax); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::ConsumerInvoiceLevy) ? x : ::Io::Flow::V0::Models::ConsumerInvoiceLevy.new(x)))
            @unit_duty = (x = opts.delete(:unit_duty); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::ConsumerInvoiceLevy) ? x : ::Io::Flow::V0::Models::ConsumerInvoiceLevy.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ConsumerInvoiceLineItem.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :item => item.to_hash,
              :description => description,
              :quantity => quantity,
              :unit_price => unit_price.to_hash,
              :unit_discount => unit_discount.nil? ? nil : unit_discount.to_hash,
              :unit_tax => unit_tax.nil? ? nil : unit_tax.to_hash,
              :unit_duty => unit_duty.nil? ? nil : unit_duty.to_hash
            }
          end

        end

        class ConsumerInvoiceLineItemForm < ConsumerInvoiceLineForm

          attr_reader :item_number, :quantity, :unit_price, :unit_discount, :unit_tax, :unit_duty

          def initialize(incoming={})
            super(:discriminator => ConsumerInvoiceLineForm::Types::CONSUMER_INVOICE_LINE_ITEM_FORM)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:item_number, :quantity, :unit_price], 'ConsumerInvoiceLineItemForm')
            @item_number = HttpClient::Preconditions.assert_class('item_number', opts.delete(:item_number), String)
            @quantity = HttpClient::Preconditions.assert_class('quantity', opts.delete(:quantity), Integer)
            @unit_price = HttpClient::Preconditions.assert_class('unit_price', HttpClient::Helper.to_big_decimal(opts.delete(:unit_price)), BigDecimal)
            @unit_discount = (x = opts.delete(:unit_discount); x.nil? ? nil : HttpClient::Preconditions.assert_class('unit_discount', HttpClient::Helper.to_big_decimal(x), BigDecimal))
            @unit_tax = (x = opts.delete(:unit_tax); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::ConsumerInvoiceLevyForm) ? x : ::Io::Flow::V0::Models::ConsumerInvoiceLevyForm.new(x)))
            @unit_duty = (x = opts.delete(:unit_duty); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::ConsumerInvoiceLevyForm) ? x : ::Io::Flow::V0::Models::ConsumerInvoiceLevyForm.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ConsumerInvoiceLineItemForm.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :item_number => item_number,
              :quantity => quantity,
              :unit_price => unit_price.to_f.to_s,
              :unit_discount => unit_discount.to_f.to_s,
              :unit_tax => unit_tax.nil? ? nil : unit_tax.to_hash,
              :unit_duty => unit_duty.nil? ? nil : unit_duty.to_hash
            }
          end

        end

        class ConsumerInvoiceLineShipping < ConsumerInvoiceLine

          attr_reader :price, :discount, :tax, :duty

          def initialize(incoming={})
            super(:discriminator => ConsumerInvoiceLine::Types::CONSUMER_INVOICE_LINE_SHIPPING)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:price], 'ConsumerInvoiceLineShipping')
            @price = (x = opts.delete(:price); x.is_a?(::Io::Flow::V0::Models::Price) ? x : ::Io::Flow::V0::Models::Price.new(x))
            @discount = (x = opts.delete(:discount); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Price) ? x : ::Io::Flow::V0::Models::Price.new(x)))
            @tax = (x = opts.delete(:tax); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::ConsumerInvoiceLevy) ? x : ::Io::Flow::V0::Models::ConsumerInvoiceLevy.new(x)))
            @duty = (x = opts.delete(:duty); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::ConsumerInvoiceLevy) ? x : ::Io::Flow::V0::Models::ConsumerInvoiceLevy.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ConsumerInvoiceLineShipping.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :price => price.to_hash,
              :discount => discount.nil? ? nil : discount.to_hash,
              :tax => tax.nil? ? nil : tax.to_hash,
              :duty => duty.nil? ? nil : duty.to_hash
            }
          end

        end

        class ConsumerInvoiceLineShippingForm < ConsumerInvoiceLineForm

          attr_reader :price, :discount, :tax, :duty

          def initialize(incoming={})
            super(:discriminator => ConsumerInvoiceLineForm::Types::CONSUMER_INVOICE_LINE_SHIPPING_FORM)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:price], 'ConsumerInvoiceLineShippingForm')
            @price = HttpClient::Preconditions.assert_class('price', HttpClient::Helper.to_big_decimal(opts.delete(:price)), BigDecimal)
            @discount = (x = opts.delete(:discount); x.nil? ? nil : HttpClient::Preconditions.assert_class('discount', HttpClient::Helper.to_big_decimal(x), BigDecimal))
            @tax = (x = opts.delete(:tax); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::ConsumerInvoiceLevyForm) ? x : ::Io::Flow::V0::Models::ConsumerInvoiceLevyForm.new(x)))
            @duty = (x = opts.delete(:duty); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::ConsumerInvoiceLevyForm) ? x : ::Io::Flow::V0::Models::ConsumerInvoiceLevyForm.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ConsumerInvoiceLineShippingForm.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :price => price.to_f.to_s,
              :discount => discount.to_f.to_s,
              :tax => tax.nil? ? nil : tax.to_hash,
              :duty => duty.nil? ? nil : duty.to_hash
            }
          end

        end

        class ConsumerInvoiceOrderSummary

          attr_reader :id, :number, :submitted_at

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :number, :submitted_at], 'ConsumerInvoiceOrderSummary')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @number = HttpClient::Preconditions.assert_class('number', opts.delete(:number), String)
            @submitted_at = HttpClient::Preconditions.assert_class('submitted_at', HttpClient::Helper.to_date_time_iso8601(opts.delete(:submitted_at)), DateTime)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ConsumerInvoiceOrderSummary.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :number => number,
              :submitted_at => submitted_at
            }
          end

        end

        class ConsumerInvoicePayment

          attr_reader :date, :description, :value, :billing_address

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:date, :description, :value], 'ConsumerInvoicePayment')
            @date = HttpClient::Preconditions.assert_class('date', HttpClient::Helper.to_date_time_iso8601(opts.delete(:date)), DateTime)
            @description = HttpClient::Preconditions.assert_class('description', opts.delete(:description), String)
            @value = (x = opts.delete(:value); x.is_a?(::Io::Flow::V0::Models::Price) ? x : ::Io::Flow::V0::Models::Price.new(x))
            @billing_address = (x = opts.delete(:billing_address); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::BillingAddress) ? x : ::Io::Flow::V0::Models::BillingAddress.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ConsumerInvoicePayment.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :date => date,
              :description => description,
              :value => value.to_hash,
              :billing_address => billing_address.nil? ? nil : billing_address.to_hash
            }
          end

        end

        class ConsumerInvoiceReference

          attr_reader :id, :key, :number

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :key, :number], 'ConsumerInvoiceReference')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @key = HttpClient::Preconditions.assert_class('key', opts.delete(:key), String)
            @number = HttpClient::Preconditions.assert_class('number', opts.delete(:number), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ConsumerInvoiceReference.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :key => key,
              :number => number
            }
          end

        end

        class ConsumerInvoiceUpserted < Event

          attr_reader :event_id, :timestamp, :organization, :consumer_invoice

          def initialize(incoming={})
            super(:discriminator => Event::Types::CONSUMER_INVOICE_UPSERTED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :consumer_invoice], 'ConsumerInvoiceUpserted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @consumer_invoice = (x = opts.delete(:consumer_invoice); x.is_a?(::Io::Flow::V0::Models::ConsumerInvoice) ? x : ::Io::Flow::V0::Models::ConsumerInvoice.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ConsumerInvoiceUpserted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :consumer_invoice => consumer_invoice.to_hash
            }
          end

        end

        # Defines structured fields for a contact person. Typically used for specifying
        # contact person for an account, shipment, or organization representative
        class Contact

          attr_reader :name, :company, :email, :phone

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:name], 'Contact')
            @name = (x = opts.delete(:name); x.is_a?(::Io::Flow::V0::Models::Name) ? x : ::Io::Flow::V0::Models::Name.new(x))
            @company = (x = opts.delete(:company); x.nil? ? nil : HttpClient::Preconditions.assert_class('company', x, String))
            @email = (x = opts.delete(:email); x.nil? ? nil : HttpClient::Preconditions.assert_class('email', x, String))
            @phone = (x = opts.delete(:phone); x.nil? ? nil : HttpClient::Preconditions.assert_class('phone', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            Contact.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :name => name.to_hash,
              :company => company,
              :email => email,
              :phone => phone
            }
          end

        end

        class Context

          attr_reader :id, :experiments

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :experiments], 'Context')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @experiments = HttpClient::Preconditions.assert_class('experiments', opts.delete(:experiments), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::SessionContextExperiment) ? x : ::Io::Flow::V0::Models::SessionContextExperiment.new(x)) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            Context.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :experiments => experiments.map { |o| o.to_hash }
            }
          end

        end

        class ContextForm

          attr_reader :experiments

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:experiments], 'ContextForm')
            @experiments = HttpClient::Preconditions.assert_class('experiments', opts.delete(:experiments), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::SessionContextExperiment) ? x : ::Io::Flow::V0::Models::SessionContextExperiment.new(x)) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ContextForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :experiments => experiments.map { |o| o.to_hash }
            }
          end

        end

        class ContextReference

          attr_reader :id

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id], 'ContextReference')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ContextReference.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id
            }
          end

        end

        # ISO 3166 country codes. Note Flow APIs will accept either the 2 or 3 character
        # country code, but internally we normalize data and store as the 3 character,
        # upper case ISO code. See https://api.flow.io/reference/countries
        class Country

          attr_reader :name, :iso_3166_2, :iso_3166_3, :languages, :measurement_system, :default_currency, :default_language, :timezones, :default_delivered_duty

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:name, :iso_3166_2, :iso_3166_3, :languages, :measurement_system, :timezones], 'Country')
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
            @iso_3166_2 = HttpClient::Preconditions.assert_class('iso_3166_2', opts.delete(:iso_3166_2), String)
            @iso_3166_3 = HttpClient::Preconditions.assert_class('iso_3166_3', opts.delete(:iso_3166_3), String)
            @languages = HttpClient::Preconditions.assert_class('languages', opts.delete(:languages), Array).map { |v| HttpClient::Preconditions.assert_class('languages', v, String) }
            @measurement_system = HttpClient::Preconditions.assert_class('measurement_system', opts.delete(:measurement_system), String)
            @default_currency = (x = opts.delete(:default_currency); x.nil? ? nil : HttpClient::Preconditions.assert_class('default_currency', x, String))
            @default_language = (x = opts.delete(:default_language); x.nil? ? nil : HttpClient::Preconditions.assert_class('default_language', x, String))
            @timezones = HttpClient::Preconditions.assert_class('timezones', opts.delete(:timezones), Array).map { |v| HttpClient::Preconditions.assert_class('timezones', v, String) }
            @default_delivered_duty = (x = opts.delete(:default_delivered_duty); x.nil? ? nil : HttpClient::Preconditions.assert_class('default_delivered_duty', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            Country.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :name => name,
              :iso_3166_2 => iso_3166_2,
              :iso_3166_3 => iso_3166_3,
              :languages => languages,
              :measurement_system => measurement_system,
              :default_currency => default_currency,
              :default_language => default_language,
              :timezones => timezones,
              :default_delivered_duty => default_delivered_duty
            }
          end

        end

        class CountryAvailability

          attr_reader :status, :countries

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:status, :countries], 'CountryAvailability')
            @status = (x = opts.delete(:status); x.is_a?(::Io::Flow::V0::Models::ItemAvailabilityStatus) ? x : ::Io::Flow::V0::Models::ItemAvailabilityStatus.apply(x))
            @countries = HttpClient::Preconditions.assert_class('countries', opts.delete(:countries), Array).map { |v| HttpClient::Preconditions.assert_class('countries', v, String) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CountryAvailability.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :status => status.value,
              :countries => countries
            }
          end

        end

        # Provides country level default settings for currency, language, etc.
        class CountryDefaults

          attr_reader :country, :currency, :language

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:country, :currency, :language], 'CountryDefaults')
            @country = HttpClient::Preconditions.assert_class('country', opts.delete(:country), String)
            @currency = HttpClient::Preconditions.assert_class('currency', opts.delete(:currency), String)
            @language = HttpClient::Preconditions.assert_class('language', opts.delete(:language), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CountryDefaults.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :country => country,
              :currency => currency,
              :language => language
            }
          end

        end

        # The Country Picker manages the configuration of your country picker.
        class CountryPicker

          attr_reader :id, :source

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :source], 'CountryPicker')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @source = (x = opts.delete(:source); x.is_a?(::Io::Flow::V0::Models::CountryPickerSource) ? x : ::Io::Flow::V0::Models::CountryPickerSource.apply(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CountryPicker.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :source => source.value
            }
          end

        end

        class CountryPickerForm

          attr_reader :source

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @source = (x = (x = opts.delete(:source); x.nil? ? "experience" : x); x.is_a?(::Io::Flow::V0::Models::CountryPickerSource) ? x : ::Io::Flow::V0::Models::CountryPickerSource.apply(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CountryPickerForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :source => source.value
            }
          end

        end

        class CountryShippingPricing

          attr_reader :pricing, :countries

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:pricing, :countries], 'CountryShippingPricing')
            @pricing = (x = opts.delete(:pricing); x.is_a?(::Io::Flow::V0::Models::ItemShippingPricing) ? x : ::Io::Flow::V0::Models::ItemShippingPricing.new(x))
            @countries = HttpClient::Preconditions.assert_class('countries', opts.delete(:countries), Array).map { |v| HttpClient::Preconditions.assert_class('countries', v, String) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CountryShippingPricing.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :pricing => pricing.to_hash,
              :countries => countries
            }
          end

        end

        class CountryStatus

          attr_reader :id, :country, :status

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :country, :status], 'CountryStatus')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @country = HttpClient::Preconditions.assert_class('country', opts.delete(:country), String)
            @status = (x = opts.delete(:status); x.is_a?(::Io::Flow::V0::Models::ExperienceCountryStatus) ? x : ::Io::Flow::V0::Models::ExperienceCountryStatus.apply(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CountryStatus.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :country => country,
              :status => status.value
            }
          end

        end

        class CountryStatusDeleted < Event

          attr_reader :event_id, :timestamp, :organization, :country_status

          def initialize(incoming={})
            super(:discriminator => Event::Types::COUNTRY_STATUS_DELETED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :country_status], 'CountryStatusDeleted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @country_status = (x = opts.delete(:country_status); x.is_a?(::Io::Flow::V0::Models::CountryStatus) ? x : ::Io::Flow::V0::Models::CountryStatus.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CountryStatusDeleted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :country_status => country_status.to_hash
            }
          end

        end

        class CountryStatusForm

          attr_reader :status

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:status], 'CountryStatusForm')
            @status = (x = opts.delete(:status); x.is_a?(::Io::Flow::V0::Models::ExperienceCountryStatus) ? x : ::Io::Flow::V0::Models::ExperienceCountryStatus.apply(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CountryStatusForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :status => status.value
            }
          end

        end

        class CountryStatusUpserted < Event

          attr_reader :event_id, :timestamp, :organization, :country_status

          def initialize(incoming={})
            super(:discriminator => Event::Types::COUNTRY_STATUS_UPSERTED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :country_status], 'CountryStatusUpserted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @country_status = (x = opts.delete(:country_status); x.is_a?(::Io::Flow::V0::Models::CountryStatus) ? x : ::Io::Flow::V0::Models::CountryStatus.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CountryStatusUpserted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :country_status => country_status.to_hash
            }
          end

        end

        # The credit memo represents the details of a refund and the reasons for the
        # issuance of the refund.
        class CreditMemo

          attr_reader :id, :number, :status, :date, :key, :invoice, :entity, :payments, :lines, :documents, :attributes, :tax_registration

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :status, :date, :key, :invoice, :entity, :payments, :lines, :documents, :attributes], 'CreditMemo')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @number = (x = opts.delete(:number); x.nil? ? nil : HttpClient::Preconditions.assert_class('number', x, String))
            @status = (x = opts.delete(:status); x.is_a?(::Io::Flow::V0::Models::ConsumerInvoiceStatus) ? x : ::Io::Flow::V0::Models::ConsumerInvoiceStatus.apply(x))
            @date = HttpClient::Preconditions.assert_class('date', HttpClient::Helper.to_date_time_iso8601(opts.delete(:date)), DateTime)
            @key = HttpClient::Preconditions.assert_class('key', opts.delete(:key), String)
            @invoice = (x = opts.delete(:invoice); x.is_a?(::Io::Flow::V0::Models::ConsumerInvoiceReference) ? x : ::Io::Flow::V0::Models::ConsumerInvoiceReference.new(x))
            @entity = (x = opts.delete(:entity); x.is_a?(::Io::Flow::V0::Models::MerchantOfRecordEntity) ? x : ::Io::Flow::V0::Models::MerchantOfRecordEntity.new(x))
            @payments = HttpClient::Preconditions.assert_class('payments', opts.delete(:payments), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::ConsumerInvoicePayment) ? x : ::Io::Flow::V0::Models::ConsumerInvoicePayment.new(x)) }
            @lines = HttpClient::Preconditions.assert_class('lines', opts.delete(:lines), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::ConsumerInvoiceLine) ? x : ::Io::Flow::V0::Models::ConsumerInvoiceLine.from_json(x)) }
            @documents = HttpClient::Preconditions.assert_class('documents', opts.delete(:documents), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::ConsumerInvoiceDocument) ? x : ::Io::Flow::V0::Models::ConsumerInvoiceDocument.new(x)) }
            @attributes = HttpClient::Preconditions.assert_class('attributes', opts.delete(:attributes), Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h }
            @tax_registration = (x = opts.delete(:tax_registration); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::TaxRegistration) ? x : ::Io::Flow::V0::Models::TaxRegistration.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CreditMemo.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :number => number,
              :status => status.value,
              :date => date,
              :key => key,
              :invoice => invoice.to_hash,
              :entity => entity.to_hash,
              :payments => payments.map { |o| o.to_hash },
              :lines => lines.map { |o| o.to_hash },
              :documents => documents.map { |o| o.to_hash },
              :attributes => attributes,
              :tax_registration => tax_registration.nil? ? nil : tax_registration.to_hash
            }
          end

        end

        class CreditMemoDeleted < Event

          attr_reader :event_id, :timestamp, :organization, :credit_memo

          def initialize(incoming={})
            super(:discriminator => Event::Types::CREDIT_MEMO_DELETED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :credit_memo], 'CreditMemoDeleted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @credit_memo = (x = opts.delete(:credit_memo); x.is_a?(::Io::Flow::V0::Models::CreditMemo) ? x : ::Io::Flow::V0::Models::CreditMemo.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CreditMemoDeleted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :credit_memo => credit_memo.to_hash
            }
          end

        end

        # A credit memo form defines the information needed to create a credit memo. You
        # must provide a way to identify the refund issued - either by id, key or
        # identifier.
        class CreditMemoForm

          attr_reader :refund_id, :refund_key, :refund_identifier, :lines, :attributes

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:lines], 'CreditMemoForm')
            @refund_id = (x = opts.delete(:refund_id); x.nil? ? nil : HttpClient::Preconditions.assert_class('refund_id', x, String))
            @refund_key = (x = opts.delete(:refund_key); x.nil? ? nil : HttpClient::Preconditions.assert_class('refund_key', x, String))
            @refund_identifier = (x = opts.delete(:refund_identifier); x.nil? ? nil : HttpClient::Preconditions.assert_class('refund_identifier', x, String))
            @lines = HttpClient::Preconditions.assert_class('lines', opts.delete(:lines), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::ConsumerInvoiceLineForm) ? x : ::Io::Flow::V0::Models::ConsumerInvoiceLineForm.from_json(x)) }
            @attributes = (x = opts.delete(:attributes); x.nil? ? nil : HttpClient::Preconditions.assert_class('attributes', x, Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h })
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CreditMemoForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :refund_id => refund_id,
              :refund_key => refund_key,
              :refund_identifier => refund_identifier,
              :lines => lines.map { |o| o.to_hash },
              :attributes => attributes.nil? ? nil : attributes
            }
          end

        end

        class CreditMemoUpserted < Event

          attr_reader :event_id, :timestamp, :organization, :credit_memo

          def initialize(incoming={})
            super(:discriminator => Event::Types::CREDIT_MEMO_UPSERTED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :credit_memo], 'CreditMemoUpserted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @credit_memo = (x = opts.delete(:credit_memo); x.is_a?(::Io::Flow::V0::Models::CreditMemo) ? x : ::Io::Flow::V0::Models::CreditMemo.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CreditMemoUpserted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :credit_memo => credit_memo.to_hash
            }
          end

        end

        # A Credit Payment records a 'non cash' payment against an order (e.g. a store
        # credit, gift card, etc.), recording the amount of that credit and additional
        # details to reconcile payments. The primary purpose of the credit payment is to
        # record that a payment has been made against an order so the remaining balance
        # can be correctly computed.
        class CreditPayment

          attr_reader :id, :order, :key, :description, :value, :original, :attributes

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :order, :key, :description, :value, :original, :attributes], 'CreditPayment')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @order = (x = opts.delete(:order); x.is_a?(::Io::Flow::V0::Models::ExpandableOrder) ? x : ::Io::Flow::V0::Models::ExpandableOrder.from_json(x))
            @key = HttpClient::Preconditions.assert_class('key', opts.delete(:key), String)
            @description = HttpClient::Preconditions.assert_class('description', opts.delete(:description), String)
            @value = (x = opts.delete(:value); x.is_a?(::Io::Flow::V0::Models::PriceWithBase) ? x : ::Io::Flow::V0::Models::PriceWithBase.new(x))
            @original = (x = opts.delete(:original); x.is_a?(::Io::Flow::V0::Models::OriginalPrices) ? x : ::Io::Flow::V0::Models::OriginalPrices.new(x))
            @attributes = HttpClient::Preconditions.assert_class('attributes', opts.delete(:attributes), Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CreditPayment.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :order => order.to_hash,
              :key => key,
              :description => description,
              :value => value.to_hash,
              :original => original.to_hash,
              :attributes => attributes
            }
          end

        end

        class CreditPaymentError

          attr_reader :code, :messages, :codes

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:code, :messages, :codes], 'CreditPaymentError')
            @code = (x = opts.delete(:code); x.is_a?(::Io::Flow::V0::Models::CreditPaymentErrorCode) ? x : ::Io::Flow::V0::Models::CreditPaymentErrorCode.apply(x))
            @messages = HttpClient::Preconditions.assert_class('messages', opts.delete(:messages), Array).map { |v| HttpClient::Preconditions.assert_class('messages', v, String) }
            @codes = HttpClient::Preconditions.assert_class('codes', opts.delete(:codes), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::CreditPaymentErrorCode) ? x : ::Io::Flow::V0::Models::CreditPaymentErrorCode.apply(x)) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CreditPaymentError.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :code => code.value,
              :messages => messages,
              :codes => codes.map { |o| o.value }
            }
          end

        end

        class CreditPaymentForm

          attr_reader :order_number, :description, :amount, :max, :currency, :attributes

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:order_number, :description, :amount, :max, :currency], 'CreditPaymentForm')
            @order_number = HttpClient::Preconditions.assert_class('order_number', opts.delete(:order_number), String)
            @description = HttpClient::Preconditions.assert_class('description', opts.delete(:description), String)
            @amount = HttpClient::Preconditions.assert_class('amount', HttpClient::Helper.to_big_decimal(opts.delete(:amount)), BigDecimal)
            @max = HttpClient::Preconditions.assert_class('max', HttpClient::Helper.to_big_decimal(opts.delete(:max)), BigDecimal)
            @currency = HttpClient::Preconditions.assert_class('currency', opts.delete(:currency), String)
            @attributes = (x = opts.delete(:attributes); x.nil? ? nil : HttpClient::Preconditions.assert_class('attributes', x, Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h })
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CreditPaymentForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :order_number => order_number,
              :description => description,
              :amount => amount.to_f.to_s,
              :max => max.to_f.to_s,
              :currency => currency,
              :attributes => attributes.nil? ? nil : attributes
            }
          end

        end

        class CreditPaymentVersion

          attr_reader :id, :timestamp, :type, :credit_payment

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :timestamp, :type, :credit_payment], 'CreditPaymentVersion')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::V0::Models::ChangeType) ? x : ::Io::Flow::V0::Models::ChangeType.apply(x))
            @credit_payment = (x = opts.delete(:credit_payment); x.is_a?(::Io::Flow::V0::Models::CreditPayment) ? x : ::Io::Flow::V0::Models::CreditPayment.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CreditPaymentVersion.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :timestamp => timestamp,
              :type => type.value,
              :credit_payment => credit_payment.to_hash
            }
          end

        end

        class CrossdockRatecardFee < RatecardFee

          attr_reader :amount

          def initialize(incoming={})
            super(:discriminator => RatecardFee::Types::CROSSDOCK_RATECARD_FEE)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:amount], 'CrossdockRatecardFee')
            @amount = (x = opts.delete(:amount); x.is_a?(::Io::Flow::V0::Models::Money) ? x : ::Io::Flow::V0::Models::Money.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CrossdockRatecardFee.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :amount => amount.to_hash
            }
          end

        end

        class CrossdockShipment

          attr_reader :partner_id, :center_id, :tracking_id, :order_number, :status

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:partner_id, :center_id, :tracking_id, :order_number, :status], 'CrossdockShipment')
            @partner_id = HttpClient::Preconditions.assert_class('partner_id', opts.delete(:partner_id), String)
            @center_id = HttpClient::Preconditions.assert_class('center_id', opts.delete(:center_id), String)
            @tracking_id = HttpClient::Preconditions.assert_class('tracking_id', opts.delete(:tracking_id), String)
            @order_number = HttpClient::Preconditions.assert_class('order_number', opts.delete(:order_number), String)
            @status = HttpClient::Preconditions.assert_class('status', opts.delete(:status), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CrossdockShipment.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :partner_id => partner_id,
              :center_id => center_id,
              :tracking_id => tracking_id,
              :order_number => order_number,
              :status => status
            }
          end

        end

        class CrossdockShipmentUpserted < Event

          attr_reader :event_id, :timestamp, :organization, :crossdock_shipment

          def initialize(incoming={})
            super(:discriminator => Event::Types::CROSSDOCK_SHIPMENT_UPSERTED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :crossdock_shipment], 'CrossdockShipmentUpserted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @crossdock_shipment = (x = opts.delete(:crossdock_shipment); x.is_a?(::Io::Flow::V0::Models::CrossdockShipment) ? x : ::Io::Flow::V0::Models::CrossdockShipment.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CrossdockShipmentUpserted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :crossdock_shipment => crossdock_shipment.to_hash
            }
          end

        end

        # Represents online payment
        class CryptopayAuthorizationDetails < OnlineAuthorizationDetails

          attr_reader :payment_id

          def initialize(incoming={})
            super(:discriminator => OnlineAuthorizationDetails::Types::CRYPTOPAY_AUTHORIZATION_DETAILS)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:payment_id], 'CryptopayAuthorizationDetails')
            @payment_id = HttpClient::Preconditions.assert_class('payment_id', opts.delete(:payment_id), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CryptopayAuthorizationDetails.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :payment_id => payment_id
            }
          end

        end

        class CsvPriceBookItemExportRowByItemNumber

          attr_reader :item_number, :price_book_key, :price_book_item_key, :item_name, :amount, :item_attributes, :schedule

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:item_number, :price_book_key, :price_book_item_key, :item_name, :amount, :schedule], 'CsvPriceBookItemExportRowByItemNumber')
            @item_number = HttpClient::Preconditions.assert_class('item_number', opts.delete(:item_number), String)
            @price_book_key = HttpClient::Preconditions.assert_class('price_book_key', opts.delete(:price_book_key), String)
            @price_book_item_key = HttpClient::Preconditions.assert_class('price_book_item_key', opts.delete(:price_book_item_key), String)
            @item_name = HttpClient::Preconditions.assert_class('item_name', opts.delete(:item_name), String)
            @amount = HttpClient::Preconditions.assert_class('amount', HttpClient::Helper.to_big_decimal(opts.delete(:amount)), BigDecimal)
            @item_attributes = (x = opts.delete(:item_attributes); x.nil? ? nil : HttpClient::Preconditions.assert_class('item_attributes', x, Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('item_attributes', d[1], String); h })
            @schedule = (x = opts.delete(:schedule); x.is_a?(::Io::Flow::V0::Models::PriceBookItemSchedule) ? x : ::Io::Flow::V0::Models::PriceBookItemSchedule.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CsvPriceBookItemExportRowByItemNumber.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :item_number => item_number,
              :price_book_key => price_book_key,
              :price_book_item_key => price_book_item_key,
              :item_name => item_name,
              :amount => amount.to_f.to_s,
              :item_attributes => item_attributes.nil? ? nil : item_attributes,
              :schedule => schedule.to_hash
            }
          end

        end

        class CsvPriceBookItemExportRowBySku

          attr_reader :sku, :price_book_key, :price_book_item_key, :item_name, :amount, :item_attributes, :schedule

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:sku, :price_book_key, :price_book_item_key, :item_name, :amount, :schedule], 'CsvPriceBookItemExportRowBySku')
            @sku = HttpClient::Preconditions.assert_class('sku', opts.delete(:sku), String)
            @price_book_key = HttpClient::Preconditions.assert_class('price_book_key', opts.delete(:price_book_key), String)
            @price_book_item_key = HttpClient::Preconditions.assert_class('price_book_item_key', opts.delete(:price_book_item_key), String)
            @item_name = HttpClient::Preconditions.assert_class('item_name', opts.delete(:item_name), String)
            @amount = HttpClient::Preconditions.assert_class('amount', HttpClient::Helper.to_big_decimal(opts.delete(:amount)), BigDecimal)
            @item_attributes = (x = opts.delete(:item_attributes); x.nil? ? nil : HttpClient::Preconditions.assert_class('item_attributes', x, Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('item_attributes', d[1], String); h })
            @schedule = (x = opts.delete(:schedule); x.is_a?(::Io::Flow::V0::Models::PriceBookItemSchedule) ? x : ::Io::Flow::V0::Models::PriceBookItemSchedule.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CsvPriceBookItemExportRowBySku.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :sku => sku,
              :price_book_key => price_book_key,
              :price_book_item_key => price_book_item_key,
              :item_name => item_name,
              :amount => amount.to_f.to_s,
              :item_attributes => item_attributes.nil? ? nil : item_attributes,
              :schedule => schedule.to_hash
            }
          end

        end

        # ISO 4217 3-character currency code. See
        # https://api.flow.io/reference/currencies
        class Currency

          attr_reader :name, :iso_4217_3, :number_decimals, :symbols, :default_locale

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:name, :iso_4217_3, :number_decimals], 'Currency')
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
            @iso_4217_3 = HttpClient::Preconditions.assert_class('iso_4217_3', opts.delete(:iso_4217_3), String)
            @number_decimals = HttpClient::Preconditions.assert_class('number_decimals', opts.delete(:number_decimals), Integer)
            @symbols = (x = opts.delete(:symbols); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::CurrencySymbols) ? x : ::Io::Flow::V0::Models::CurrencySymbols.new(x)))
            @default_locale = (x = opts.delete(:default_locale); x.nil? ? nil : HttpClient::Preconditions.assert_class('default_locale', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            Currency.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :name => name,
              :iso_4217_3 => iso_4217_3,
              :number_decimals => number_decimals,
              :symbols => symbols.nil? ? nil : symbols.to_hash,
              :default_locale => default_locale
            }
          end

        end

        class CurrencyFormat

          attr_reader :symbol, :label_formatters

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:symbol, :label_formatters], 'CurrencyFormat')
            @symbol = (x = opts.delete(:symbol); x.is_a?(::Io::Flow::V0::Models::CurrencySymbolFormat) ? x : ::Io::Flow::V0::Models::CurrencySymbolFormat.apply(x))
            @label_formatters = HttpClient::Preconditions.assert_class('label_formatters', opts.delete(:label_formatters), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::CurrencyLabelFormatter) ? x : ::Io::Flow::V0::Models::CurrencyLabelFormatter.apply(x)) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CurrencyFormat.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :symbol => symbol.value,
              :label_formatters => label_formatters.map { |o| o.value }
            }
          end

        end

        class CurrencyFormatDeleted < Event

          attr_reader :event_id, :timestamp, :organization, :id

          def initialize(incoming={})
            super(:discriminator => Event::Types::CURRENCY_FORMAT_DELETED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :id], 'CurrencyFormatDeleted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CurrencyFormatDeleted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :id => id
            }
          end

        end

        class CurrencyFormatUpserted < Event

          attr_reader :event_id, :timestamp, :organization, :id, :experience_key, :symbol, :label_formatters

          def initialize(incoming={})
            super(:discriminator => Event::Types::CURRENCY_FORMAT_UPSERTED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :id, :experience_key, :symbol, :label_formatters], 'CurrencyFormatUpserted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @experience_key = HttpClient::Preconditions.assert_class('experience_key', opts.delete(:experience_key), String)
            @symbol = (x = opts.delete(:symbol); x.is_a?(::Io::Flow::V0::Models::CurrencySymbolFormat) ? x : ::Io::Flow::V0::Models::CurrencySymbolFormat.apply(x))
            @label_formatters = HttpClient::Preconditions.assert_class('label_formatters', opts.delete(:label_formatters), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::CurrencyLabelFormatter) ? x : ::Io::Flow::V0::Models::CurrencyLabelFormatter.apply(x)) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CurrencyFormatUpserted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :id => id,
              :experience_key => experience_key,
              :symbol => symbol.value,
              :label_formatters => label_formatters.map { |o| o.value }
            }
          end

        end

        # Defines one or more symbols representing this currency
        class CurrencySymbols

          attr_reader :primary, :narrow

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:primary], 'CurrencySymbols')
            @primary = HttpClient::Preconditions.assert_class('primary', opts.delete(:primary), String)
            @narrow = (x = opts.delete(:narrow); x.nil? ? nil : HttpClient::Preconditions.assert_class('narrow', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CurrencySymbols.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :primary => primary,
              :narrow => narrow
            }
          end

        end

        # A customer represents the actual person placing an order.
        class Customer

          attr_reader :id, :number, :email, :name, :phone

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :number], 'Customer')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @number = HttpClient::Preconditions.assert_class('number', opts.delete(:number), String)
            @email = (x = opts.delete(:email); x.nil? ? nil : HttpClient::Preconditions.assert_class('email', x, String))
            @name = (x = opts.delete(:name); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Name) ? x : ::Io::Flow::V0::Models::Name.new(x)))
            @phone = (x = opts.delete(:phone); x.nil? ? nil : HttpClient::Preconditions.assert_class('phone', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            Customer.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :number => number,
              :email => email,
              :name => name.nil? ? nil : name.to_hash,
              :phone => phone
            }
          end

        end

        # A composed model representing a customer's address book contacts.
        class CustomerAddressBook

          attr_reader :contacts

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:contacts], 'CustomerAddressBook')
            @contacts = HttpClient::Preconditions.assert_class('contacts', opts.delete(:contacts), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::CustomerAddressBookContact) ? x : ::Io::Flow::V0::Models::CustomerAddressBookContact.new(x)) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CustomerAddressBook.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :contacts => contacts.map { |o| o.to_hash }
            }
          end

        end

        # Preferences may indicate a contact is preferred for billing, invoicing, and/or
        # shipping.
        class CustomerAddressBookContact

          attr_reader :id, :address, :contact, :address_preferences

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :address, :contact, :address_preferences], 'CustomerAddressBookContact')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @address = (x = opts.delete(:address); x.is_a?(::Io::Flow::V0::Models::Address) ? x : ::Io::Flow::V0::Models::Address.new(x))
            @contact = (x = opts.delete(:contact); x.is_a?(::Io::Flow::V0::Models::Contact) ? x : ::Io::Flow::V0::Models::Contact.new(x))
            @address_preferences = HttpClient::Preconditions.assert_class('address_preferences', opts.delete(:address_preferences), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::CustomerAddressPreference) ? x : ::Io::Flow::V0::Models::CustomerAddressPreference.new(x)) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CustomerAddressBookContact.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :address => address.to_hash,
              :contact => contact.to_hash,
              :address_preferences => address_preferences.map { |o| o.to_hash }
            }
          end

        end

        class CustomerAddressBookContactDeleted < Event

          attr_reader :event_id, :timestamp, :organization, :customer_address_book_contact

          def initialize(incoming={})
            super(:discriminator => Event::Types::CUSTOMER_ADDRESS_BOOK_CONTACT_DELETED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :customer_address_book_contact], 'CustomerAddressBookContactDeleted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @customer_address_book_contact = (x = opts.delete(:customer_address_book_contact); x.is_a?(::Io::Flow::V0::Models::CustomerAddressBookContact) ? x : ::Io::Flow::V0::Models::CustomerAddressBookContact.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CustomerAddressBookContactDeleted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :customer_address_book_contact => customer_address_book_contact.to_hash
            }
          end

        end

        class CustomerAddressBookContactForm

          attr_reader :address, :contact, :address_preferences

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:address], 'CustomerAddressBookContactForm')
            @address = (x = opts.delete(:address); x.is_a?(::Io::Flow::V0::Models::Address) ? x : ::Io::Flow::V0::Models::Address.new(x))
            @contact = (x = opts.delete(:contact); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Contact) ? x : ::Io::Flow::V0::Models::Contact.new(x)))
            @address_preferences = (x = opts.delete(:address_preferences); x.nil? ? nil : HttpClient::Preconditions.assert_class('address_preferences', x, Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::CustomerAddressPreference) ? x : ::Io::Flow::V0::Models::CustomerAddressPreference.new(x)) })
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CustomerAddressBookContactForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :address => address.to_hash,
              :contact => contact.nil? ? nil : contact.to_hash,
              :address_preferences => address_preferences.nil? ? nil : address_preferences.map { |o| o.to_hash }
            }
          end

        end

        class CustomerAddressBookContactUpserted < Event

          attr_reader :event_id, :timestamp, :organization, :customer_address_book_contact

          def initialize(incoming={})
            super(:discriminator => Event::Types::CUSTOMER_ADDRESS_BOOK_CONTACT_UPSERTED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :customer_address_book_contact], 'CustomerAddressBookContactUpserted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @customer_address_book_contact = (x = opts.delete(:customer_address_book_contact); x.is_a?(::Io::Flow::V0::Models::CustomerAddressBookContact) ? x : ::Io::Flow::V0::Models::CustomerAddressBookContact.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CustomerAddressBookContactUpserted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :customer_address_book_contact => customer_address_book_contact.to_hash
            }
          end

        end

        # Represents address book contacts to append in bulk.
        class CustomerAddressBookForm

          attr_reader :contacts

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:contacts], 'CustomerAddressBookForm')
            @contacts = HttpClient::Preconditions.assert_class('contacts', opts.delete(:contacts), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::CustomerAddressBookContactForm) ? x : ::Io::Flow::V0::Models::CustomerAddressBookContactForm.new(x)) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CustomerAddressBookForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :contacts => contacts.map { |o| o.to_hash }
            }
          end

        end

        # Represents a customer address preference. Only a single address book contact
        # can be associated per type. If contact is created or updated with a
        # preference, existing preferences of the same type will be removed.
        class CustomerAddressPreference

          attr_reader :type

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:type], 'CustomerAddressPreference')
            @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::V0::Models::CustomerAddressType) ? x : ::Io::Flow::V0::Models::CustomerAddressType.apply(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CustomerAddressPreference.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :type => type.value
            }
          end

        end

        # A bundle of all the content needed to render customer data.
        class CustomerBundle

          attr_reader :customer, :last_used

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:customer], 'CustomerBundle')
            @customer = (x = opts.delete(:customer); x.is_a?(::Io::Flow::V0::Models::Customer) ? x : ::Io::Flow::V0::Models::Customer.new(x))
            @last_used = (x = opts.delete(:last_used); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::CustomerLastUsed) ? x : ::Io::Flow::V0::Models::CustomerLastUsed.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CustomerBundle.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :customer => customer.to_hash,
              :last_used => last_used.nil? ? nil : last_used.to_hash
            }
          end

        end

        class CustomerClientToken

          attr_reader :token

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:token], 'CustomerClientToken')
            @token = HttpClient::Preconditions.assert_class('token', opts.delete(:token), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CustomerClientToken.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :token => token
            }
          end

        end

        class CustomerDeleted < Event

          attr_reader :event_id, :timestamp, :organization, :customer

          def initialize(incoming={})
            super(:discriminator => Event::Types::CUSTOMER_DELETED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :customer], 'CustomerDeleted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @customer = (x = opts.delete(:customer); x.is_a?(::Io::Flow::V0::Models::Customer) ? x : ::Io::Flow::V0::Models::Customer.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CustomerDeleted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :customer => customer.to_hash
            }
          end

        end

        class CustomerForm

          attr_reader :number, :email, :name, :phone

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:number], 'CustomerForm')
            @number = HttpClient::Preconditions.assert_class('number', opts.delete(:number), String)
            @email = (x = opts.delete(:email); x.nil? ? nil : HttpClient::Preconditions.assert_class('email', x, String))
            @name = (x = opts.delete(:name); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Name) ? x : ::Io::Flow::V0::Models::Name.new(x)))
            @phone = (x = opts.delete(:phone); x.nil? ? nil : HttpClient::Preconditions.assert_class('phone', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CustomerForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :number => number,
              :email => email,
              :name => name.nil? ? nil : name.to_hash,
              :phone => phone
            }
          end

        end

        class CustomerInvoice

          attr_reader :address

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @address = (x = opts.delete(:address); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::BillingAddress) ? x : ::Io::Flow::V0::Models::BillingAddress.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CustomerInvoice.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :address => address.nil? ? nil : address.to_hash
            }
          end

        end

        # Last used details pertaining to a customer.
        class CustomerLastUsed

          attr_reader :order, :payment

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:order, :payment], 'CustomerLastUsed')
            @order = (x = opts.delete(:order); x.is_a?(::Io::Flow::V0::Models::CustomerOrder) ? x : ::Io::Flow::V0::Models::CustomerOrder.new(x))
            @payment = (x = opts.delete(:payment); x.is_a?(::Io::Flow::V0::Models::CustomerPayment) ? x : ::Io::Flow::V0::Models::CustomerPayment.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CustomerLastUsed.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :order => order.to_hash,
              :payment => payment.to_hash
            }
          end

        end

        # Order details pertaining to a customer.
        class CustomerOrder

          attr_reader :number, :destination, :payments, :submitted_at

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:number, :destination], 'CustomerOrder')
            @number = HttpClient::Preconditions.assert_class('number', opts.delete(:number), String)
            @destination = (x = opts.delete(:destination); x.is_a?(::Io::Flow::V0::Models::OrderAddress) ? x : ::Io::Flow::V0::Models::OrderAddress.new(x))
            @payments = (x = opts.delete(:payments); x.nil? ? nil : HttpClient::Preconditions.assert_class('payments', x, Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::OrderPayment) ? x : ::Io::Flow::V0::Models::OrderPayment.new(x)) })
            @submitted_at = (x = opts.delete(:submitted_at); x.nil? ? nil : HttpClient::Preconditions.assert_class('submitted_at', HttpClient::Helper.to_date_time_iso8601(x), DateTime))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CustomerOrder.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :number => number,
              :destination => destination.to_hash,
              :payments => payments.nil? ? nil : payments.map { |o| o.to_hash },
              :submitted_at => submitted_at
            }
          end

        end

        # Customer payment details.
        class CustomerPayment

          attr_reader :payment_methods

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:payment_methods], 'CustomerPayment')
            @payment_methods = HttpClient::Preconditions.assert_class('payment_methods', opts.delete(:payment_methods), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::PaymentMethod) ? x : ::Io::Flow::V0::Models::PaymentMethod.new(x)) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CustomerPayment.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :payment_methods => payment_methods.map { |o| o.to_hash }
            }
          end

        end

        # Represent settings for when to purge customer data
        class CustomerPurgeSettings

          attr_reader :id, :days_until_purge_unused, :days_until_purge_used

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :days_until_purge_unused, :days_until_purge_used], 'CustomerPurgeSettings')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @days_until_purge_unused = HttpClient::Preconditions.assert_class('days_until_purge_unused', opts.delete(:days_until_purge_unused), Integer)
            @days_until_purge_used = HttpClient::Preconditions.assert_class('days_until_purge_used', opts.delete(:days_until_purge_used), Integer)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CustomerPurgeSettings.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :days_until_purge_unused => days_until_purge_unused,
              :days_until_purge_used => days_until_purge_used
            }
          end

        end

        # Represent settings for when to purge customer data
        class CustomerPurgeSettingsForm

          attr_reader :days_until_purge_unused, :days_until_purge_used

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:days_until_purge_unused, :days_until_purge_used], 'CustomerPurgeSettingsForm')
            @days_until_purge_unused = HttpClient::Preconditions.assert_class('days_until_purge_unused', opts.delete(:days_until_purge_unused), Integer)
            @days_until_purge_used = HttpClient::Preconditions.assert_class('days_until_purge_used', opts.delete(:days_until_purge_used), Integer)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CustomerPurgeSettingsForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :days_until_purge_unused => days_until_purge_unused,
              :days_until_purge_used => days_until_purge_used
            }
          end

        end

        class CustomerPutForm

          attr_reader :email, :name, :phone

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @email = (x = opts.delete(:email); x.nil? ? nil : HttpClient::Preconditions.assert_class('email', x, String))
            @name = (x = opts.delete(:name); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Name) ? x : ::Io::Flow::V0::Models::Name.new(x)))
            @phone = (x = opts.delete(:phone); x.nil? ? nil : HttpClient::Preconditions.assert_class('phone', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CustomerPutForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :email => email,
              :name => name.nil? ? nil : name.to_hash,
              :phone => phone
            }
          end

        end

        class CustomerReference

          attr_reader :number

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:number], 'CustomerReference')
            @number = HttpClient::Preconditions.assert_class('number', opts.delete(:number), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CustomerReference.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :number => number
            }
          end

        end

        # Represents a mapping between a customer number and a token
        class CustomerToken

          attr_reader :id, :customer, :token

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :customer, :token], 'CustomerToken')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @customer = (x = opts.delete(:customer); x.is_a?(::Io::Flow::V0::Models::CustomerReference) ? x : ::Io::Flow::V0::Models::CustomerReference.new(x))
            @token = HttpClient::Preconditions.assert_class('token', opts.delete(:token), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CustomerToken.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :customer => customer.to_hash,
              :token => token
            }
          end

        end

        class CustomerUpserted < Event

          attr_reader :event_id, :timestamp, :organization, :customer

          def initialize(incoming={})
            super(:discriminator => Event::Types::CUSTOMER_UPSERTED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :customer], 'CustomerUpserted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @customer = (x = opts.delete(:customer); x.is_a?(::Io::Flow::V0::Models::Customer) ? x : ::Io::Flow::V0::Models::Customer.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            CustomerUpserted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :customer => customer.to_hash
            }
          end

        end

        # Represents the card verification results
        class Cvv

          attr_reader :code, :description

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:code], 'Cvv')
            @code = (x = opts.delete(:code); x.is_a?(::Io::Flow::V0::Models::CvvCode) ? x : ::Io::Flow::V0::Models::CvvCode.apply(x))
            @description = (x = opts.delete(:description); x.nil? ? nil : HttpClient::Preconditions.assert_class('description', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            Cvv.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :code => code.value,
              :description => description
            }
          end

        end

        class DatetimeRange

          attr_reader :from, :to

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:from, :to], 'DatetimeRange')
            @from = HttpClient::Preconditions.assert_class('from', HttpClient::Helper.to_date_time_iso8601(opts.delete(:from)), DateTime)
            @to = HttpClient::Preconditions.assert_class('to', HttpClient::Helper.to_date_time_iso8601(opts.delete(:to)), DateTime)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            DatetimeRange.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :from => from,
              :to => to
            }
          end

        end

        class DatetimeWithTimezone

          attr_reader :datetime, :timezone

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:datetime, :timezone], 'DatetimeWithTimezone')
            @datetime = HttpClient::Preconditions.assert_class('datetime', HttpClient::Helper.to_date_time_iso8601(opts.delete(:datetime)), DateTime)
            @timezone = HttpClient::Preconditions.assert_class('timezone', opts.delete(:timezone), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            DatetimeWithTimezone.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :datetime => datetime,
              :timezone => timezone
            }
          end

        end

        class DdpRatecardFee < RatecardFee

          attr_reader :amount

          def initialize(incoming={})
            super(:discriminator => RatecardFee::Types::DDP_RATECARD_FEE)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:amount], 'DdpRatecardFee')
            @amount = HttpClient::Preconditions.assert_class('amount', HttpClient::Helper.to_big_decimal(opts.delete(:amount)), BigDecimal)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            DdpRatecardFee.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :amount => amount.to_f.to_s
            }
          end

        end

        class DeliveredDutySetting

          attr_reader :default, :available, :display

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:default, :available], 'DeliveredDutySetting')
            @default = (x = opts.delete(:default); x.is_a?(::Io::Flow::V0::Models::DeliveredDuty) ? x : ::Io::Flow::V0::Models::DeliveredDuty.apply(x))
            @available = HttpClient::Preconditions.assert_class('available', opts.delete(:available), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::DeliveredDuty) ? x : ::Io::Flow::V0::Models::DeliveredDuty.apply(x)) }
            @display = (x = opts.delete(:display); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::DeliveredDutyDisplayType) ? x : ::Io::Flow::V0::Models::DeliveredDutyDisplayType.apply(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            DeliveredDutySetting.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :default => default.value,
              :available => available.map { |o| o.value },
              :display => display.nil? ? nil : display.value
            }
          end

        end

        class DeliveryItem

          attr_reader :id, :number, :quantity, :shipment_estimate, :price, :attributes, :center, :line_number

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:number, :quantity], 'DeliveryItem')
            @id = (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, String))
            @number = HttpClient::Preconditions.assert_class('number', opts.delete(:number), String)
            @quantity = HttpClient::Preconditions.assert_class('quantity', opts.delete(:quantity), Integer)
            @shipment_estimate = (x = opts.delete(:shipment_estimate); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::DatetimeRange) ? x : ::Io::Flow::V0::Models::DatetimeRange.new(x)))
            @price = (x = opts.delete(:price); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::MoneyWithOptionalBase) ? x : ::Io::Flow::V0::Models::MoneyWithOptionalBase.new(x)))
            @attributes = (x = opts.delete(:attributes); x.nil? ? nil : HttpClient::Preconditions.assert_class('attributes', x, Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h })
            @center = (x = opts.delete(:center); x.nil? ? nil : HttpClient::Preconditions.assert_class('center', x, String))
            @line_number = (x = opts.delete(:line_number); x.nil? ? nil : HttpClient::Preconditions.assert_class('line_number', x, Integer))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            DeliveryItem.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :number => number,
              :quantity => quantity,
              :shipment_estimate => shipment_estimate.nil? ? nil : shipment_estimate.to_hash,
              :price => price.nil? ? nil : price.to_hash,
              :attributes => attributes.nil? ? nil : attributes,
              :center => center,
              :line_number => line_number
            }
          end

        end

        # Represents a way to fulfill a delivery, including an estimates for the date
        # range and cost
        class DeliveryOption

          attr_reader :id, :cost, :delivered_duty, :price, :service, :tier, :window, :rule_outcome, :weight, :send_to, :surcharge, :ratecard_owner

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :cost, :delivered_duty, :price, :service, :tier, :window], 'DeliveryOption')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @cost = (x = opts.delete(:cost); x.is_a?(::Io::Flow::V0::Models::PriceWithBaseAndDetails) ? x : ::Io::Flow::V0::Models::PriceWithBaseAndDetails.new(x))
            @delivered_duty = (x = opts.delete(:delivered_duty); x.is_a?(::Io::Flow::V0::Models::DeliveredDuty) ? x : ::Io::Flow::V0::Models::DeliveredDuty.apply(x))
            @price = (x = opts.delete(:price); x.is_a?(::Io::Flow::V0::Models::PriceWithBaseAndDetails) ? x : ::Io::Flow::V0::Models::PriceWithBaseAndDetails.new(x))
            @service = (x = opts.delete(:service); x.is_a?(::Io::Flow::V0::Models::ServiceSummary) ? x : ::Io::Flow::V0::Models::ServiceSummary.new(x))
            @tier = (x = opts.delete(:tier); x.is_a?(::Io::Flow::V0::Models::TierSummary) ? x : ::Io::Flow::V0::Models::TierSummary.new(x))
            @window = (x = opts.delete(:window); x.is_a?(::Io::Flow::V0::Models::DeliveryWindow) ? x : ::Io::Flow::V0::Models::DeliveryWindow.new(x))
            @rule_outcome = (x = opts.delete(:rule_outcome); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::TierRuleOutcome) ? x : ::Io::Flow::V0::Models::TierRuleOutcome.from_json(x)))
            @weight = (x = opts.delete(:weight); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::OptionWeightEstimates) ? x : ::Io::Flow::V0::Models::OptionWeightEstimates.new(x)))
            @send_to = (x = opts.delete(:send_to); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::ShippingAddress) ? x : ::Io::Flow::V0::Models::ShippingAddress.new(x)))
            @surcharge = (x = opts.delete(:surcharge); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::PriceWithBaseAndDetails) ? x : ::Io::Flow::V0::Models::PriceWithBaseAndDetails.new(x)))
            @ratecard_owner = (x = opts.delete(:ratecard_owner); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::RatecardOwner) ? x : ::Io::Flow::V0::Models::RatecardOwner.apply(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            DeliveryOption.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :cost => cost.to_hash,
              :delivered_duty => delivered_duty.value,
              :price => price.to_hash,
              :service => service.to_hash,
              :tier => tier.to_hash,
              :window => window.to_hash,
              :rule_outcome => rule_outcome.nil? ? nil : rule_outcome.to_hash,
              :weight => weight.nil? ? nil : weight.to_hash,
              :send_to => send_to.nil? ? nil : send_to.to_hash,
              :surcharge => surcharge.nil? ? nil : surcharge.to_hash,
              :ratecard_owner => ratecard_owner.nil? ? nil : ratecard_owner.value
            }
          end

        end

        class DeliveryOptionCostComponent

          attr_reader :key, :currency, :amount, :label, :base

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:key, :currency, :amount, :label], 'DeliveryOptionCostComponent')
            @key = (x = opts.delete(:key); x.is_a?(::Io::Flow::V0::Models::DeliveryOptionCostDetailComponentKey) ? x : ::Io::Flow::V0::Models::DeliveryOptionCostDetailComponentKey.apply(x))
            @currency = HttpClient::Preconditions.assert_class('currency', opts.delete(:currency), String)
            @amount = HttpClient::Preconditions.assert_class('amount', HttpClient::Helper.to_big_decimal(opts.delete(:amount)), BigDecimal)
            @label = HttpClient::Preconditions.assert_class('label', opts.delete(:label), String)
            @base = (x = opts.delete(:base); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Price) ? x : ::Io::Flow::V0::Models::Price.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            DeliveryOptionCostComponent.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :key => key.value,
              :currency => currency,
              :amount => amount.to_f.to_s,
              :label => label,
              :base => base.nil? ? nil : base.to_hash
            }
          end

        end

        class DeliveryOptionCostDetail

          attr_reader :source, :currency, :amount, :label, :base, :components

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:source, :currency, :amount, :label, :components], 'DeliveryOptionCostDetail')
            @source = (x = opts.delete(:source); x.is_a?(::Io::Flow::V0::Models::DeliveryOptionCostDetailSource) ? x : ::Io::Flow::V0::Models::DeliveryOptionCostDetailSource.apply(x))
            @currency = HttpClient::Preconditions.assert_class('currency', opts.delete(:currency), String)
            @amount = HttpClient::Preconditions.assert_class('amount', HttpClient::Helper.to_big_decimal(opts.delete(:amount)), BigDecimal)
            @label = HttpClient::Preconditions.assert_class('label', opts.delete(:label), String)
            @base = (x = opts.delete(:base); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Price) ? x : ::Io::Flow::V0::Models::Price.new(x)))
            @components = HttpClient::Preconditions.assert_class('components', opts.delete(:components), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::DeliveryOptionCostComponent) ? x : ::Io::Flow::V0::Models::DeliveryOptionCostComponent.new(x)) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            DeliveryOptionCostDetail.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :source => source.value,
              :currency => currency,
              :amount => amount.to_f.to_s,
              :label => label,
              :base => base.nil? ? nil : base.to_hash,
              :components => components.map { |o| o.to_hash }
            }
          end

        end

        # Represents a way to fulfill a delivery, including an estimates for the date
        # range and cost
        class DeliveryOptionForm

          attr_reader :delivery, :items, :destination

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:delivery, :items, :destination], 'DeliveryOptionForm')
            @delivery = HttpClient::Preconditions.assert_class('delivery', opts.delete(:delivery), String)
            @items = HttpClient::Preconditions.assert_class('items', opts.delete(:items), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::QuoteLineItemForm) ? x : ::Io::Flow::V0::Models::QuoteLineItemForm.new(x)) }
            @destination = (x = opts.delete(:destination); x.is_a?(::Io::Flow::V0::Models::ShippingAddress) ? x : ::Io::Flow::V0::Models::ShippingAddress.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            DeliveryOptionForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :delivery => delivery,
              :items => items.map { |o| o.to_hash },
              :destination => destination.to_hash
            }
          end

        end

        class DeliveryOptionReference

          attr_reader :id

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id], 'DeliveryOptionReference')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            DeliveryOptionReference.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id
            }
          end

        end

        class DeliveryOptionSummary

          attr_reader :id, :cost, :delivered_duty, :price, :service, :tier, :window

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :cost, :delivered_duty, :price, :service, :tier, :window], 'DeliveryOptionSummary')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @cost = (x = opts.delete(:cost); x.is_a?(::Io::Flow::V0::Models::Price) ? x : ::Io::Flow::V0::Models::Price.new(x))
            @delivered_duty = (x = opts.delete(:delivered_duty); x.is_a?(::Io::Flow::V0::Models::DeliveredDuty) ? x : ::Io::Flow::V0::Models::DeliveredDuty.apply(x))
            @price = (x = opts.delete(:price); x.is_a?(::Io::Flow::V0::Models::Price) ? x : ::Io::Flow::V0::Models::Price.new(x))
            @service = (x = opts.delete(:service); x.is_a?(::Io::Flow::V0::Models::ServiceReference) ? x : ::Io::Flow::V0::Models::ServiceReference.new(x))
            @tier = (x = opts.delete(:tier); x.is_a?(::Io::Flow::V0::Models::TierReference) ? x : ::Io::Flow::V0::Models::TierReference.new(x))
            @window = (x = opts.delete(:window); x.is_a?(::Io::Flow::V0::Models::DatetimeRange) ? x : ::Io::Flow::V0::Models::DatetimeRange.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            DeliveryOptionSummary.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :cost => cost.to_hash,
              :delivered_duty => delivered_duty.value,
              :price => price.to_hash,
              :service => service.to_hash,
              :tier => tier.to_hash,
              :window => window.to_hash
            }
          end

        end

        class DeliveryOptionVersion

          attr_reader :id, :timestamp, :type, :delivery_option

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :timestamp, :type, :delivery_option], 'DeliveryOptionVersion')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::V0::Models::ChangeType) ? x : ::Io::Flow::V0::Models::ChangeType.apply(x))
            @delivery_option = (x = opts.delete(:delivery_option); x.is_a?(::Io::Flow::V0::Models::DeliveryOptionSummary) ? x : ::Io::Flow::V0::Models::DeliveryOptionSummary.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            DeliveryOptionVersion.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :timestamp => timestamp,
              :type => type.value,
              :delivery_option => delivery_option.to_hash
            }
          end

        end

        class DeliverySummary

          attr_reader :id, :items

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :items], 'DeliverySummary')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @items = HttpClient::Preconditions.assert_class('items', opts.delete(:items), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::LineItemForm) ? x : ::Io::Flow::V0::Models::LineItemForm.new(x)) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            DeliverySummary.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :items => items.map { |o| o.to_hash }
            }
          end

        end

        class DeliveryVersion

          attr_reader :id, :timestamp, :type, :delivery

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :timestamp, :type, :delivery], 'DeliveryVersion')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::V0::Models::ChangeType) ? x : ::Io::Flow::V0::Models::ChangeType.apply(x))
            @delivery = (x = opts.delete(:delivery); x.is_a?(::Io::Flow::V0::Models::DeliverySummary) ? x : ::Io::Flow::V0::Models::DeliverySummary.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            DeliveryVersion.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :timestamp => timestamp,
              :type => type.value,
              :delivery => delivery.to_hash
            }
          end

        end

        # Flow's estimate of when a shipment for this delivery will actually arrive at
        # the final destination, taking into account a shipment estimate, center
        # schedules, and carrier transit windows.
        class DeliveryWindow

          attr_reader :from, :to, :timezone, :label, :min_days, :max_days

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:from, :to], 'DeliveryWindow')
            @from = HttpClient::Preconditions.assert_class('from', HttpClient::Helper.to_date_time_iso8601(opts.delete(:from)), DateTime)
            @to = HttpClient::Preconditions.assert_class('to', HttpClient::Helper.to_date_time_iso8601(opts.delete(:to)), DateTime)
            @timezone = (x = opts.delete(:timezone); x.nil? ? nil : HttpClient::Preconditions.assert_class('timezone', x, String))
            @label = (x = opts.delete(:label); x.nil? ? nil : HttpClient::Preconditions.assert_class('label', x, String))
            @min_days = (x = opts.delete(:min_days); x.nil? ? nil : HttpClient::Preconditions.assert_class('min_days', x, Integer))
            @max_days = (x = opts.delete(:max_days); x.nil? ? nil : HttpClient::Preconditions.assert_class('max_days', x, Integer))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            DeliveryWindow.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :from => from,
              :to => to,
              :timezone => timezone,
              :label => label,
              :min_days => min_days,
              :max_days => max_days
            }
          end

        end

        class DeliveryWindowComponent

          attr_reader :from, :to, :source

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:from, :to, :source], 'DeliveryWindowComponent')
            @from = HttpClient::Preconditions.assert_class('from', HttpClient::Helper.to_date_time_iso8601(opts.delete(:from)), DateTime)
            @to = HttpClient::Preconditions.assert_class('to', HttpClient::Helper.to_date_time_iso8601(opts.delete(:to)), DateTime)
            @source = (x = opts.delete(:source); x.is_a?(::Io::Flow::V0::Models::DeliveryWindowComponentSource) ? x : ::Io::Flow::V0::Models::DeliveryWindowComponentSource.apply(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            DeliveryWindowComponent.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :from => from,
              :to => to,
              :source => source.value
            }
          end

        end

        # Components and information taken into account when calculating a final
        # delivery window.
        class DeliveryWindowComponents

          attr_reader :shipment_estimate, :transit_estimate

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:shipment_estimate, :transit_estimate], 'DeliveryWindowComponents')
            @shipment_estimate = (x = opts.delete(:shipment_estimate); x.is_a?(::Io::Flow::V0::Models::DeliveryWindowComponent) ? x : ::Io::Flow::V0::Models::DeliveryWindowComponent.new(x))
            @transit_estimate = (x = opts.delete(:transit_estimate); x.is_a?(::Io::Flow::V0::Models::DeliveryWindowComponent) ? x : ::Io::Flow::V0::Models::DeliveryWindowComponent.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            DeliveryWindowComponents.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :shipment_estimate => shipment_estimate.to_hash,
              :transit_estimate => transit_estimate.to_hash
            }
          end

        end

        # Components and information taken into account when calculating a final
        # delivery window
        class DeliveryWindowComponentsV2

          attr_reader :processing_estimates, :transit_estimates

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:processing_estimates, :transit_estimates], 'DeliveryWindowComponentsV2')
            @processing_estimates = HttpClient::Preconditions.assert_class('processing_estimates', opts.delete(:processing_estimates), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::ProcessingEstimate) ? x : ::Io::Flow::V0::Models::ProcessingEstimate.new(x)) }
            @transit_estimates = HttpClient::Preconditions.assert_class('transit_estimates', opts.delete(:transit_estimates), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::TransitEstimate) ? x : ::Io::Flow::V0::Models::TransitEstimate.new(x)) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            DeliveryWindowComponentsV2.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :processing_estimates => processing_estimates.map { |o| o.to_hash },
              :transit_estimates => transit_estimates.map { |o| o.to_hash }
            }
          end

        end

        class DeliveryWindowSummary

          attr_reader :country, :delivery_window

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:country, :delivery_window], 'DeliveryWindowSummary')
            @country = HttpClient::Preconditions.assert_class('country', opts.delete(:country), String)
            @delivery_window = (x = opts.delete(:delivery_window); x.is_a?(::Io::Flow::V0::Models::DeliveryWindow) ? x : ::Io::Flow::V0::Models::DeliveryWindow.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            DeliveryWindowSummary.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :country => country,
              :delivery_window => delivery_window.to_hash
            }
          end

        end

        # De Minimis per item describes rules which require minimum and/or maximum
        # values per item
        class DeminimisPerItem < Deminimis

          attr_reader :currency, :minimum, :maximum

          def initialize(incoming={})
            super(:discriminator => Deminimis::Types::DEMINIMIS_PER_ITEM)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:currency], 'DeminimisPerItem')
            @currency = HttpClient::Preconditions.assert_class('currency', opts.delete(:currency), String)
            @minimum = (x = opts.delete(:minimum); x.nil? ? nil : HttpClient::Preconditions.assert_class('minimum', HttpClient::Helper.to_big_decimal(x), BigDecimal))
            @maximum = (x = opts.delete(:maximum); x.nil? ? nil : HttpClient::Preconditions.assert_class('maximum', HttpClient::Helper.to_big_decimal(x), BigDecimal))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            DeminimisPerItem.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :currency => currency,
              :minimum => minimum.to_f.to_s,
              :maximum => maximum.to_f.to_s
            }
          end

        end

        # De Minimis for most common example which includes a value threshold and rules
        # on what components are used in the duty calculation
        class DeminimisSimple < Deminimis

          attr_reader :value, :currency, :components, :minimum

          def initialize(incoming={})
            super(:discriminator => Deminimis::Types::DEMINIMIS_SIMPLE)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:currency, :components], 'DeminimisSimple')
            @value = (x = opts.delete(:value); x.nil? ? nil : HttpClient::Preconditions.assert_class('value', HttpClient::Helper.to_big_decimal(x), BigDecimal))
            @currency = HttpClient::Preconditions.assert_class('currency', opts.delete(:currency), String)
            @components = HttpClient::Preconditions.assert_class('components', opts.delete(:components), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::LevyComponent) ? x : ::Io::Flow::V0::Models::LevyComponent.apply(x)) }
            @minimum = (x = opts.delete(:minimum); x.nil? ? nil : HttpClient::Preconditions.assert_class('minimum', HttpClient::Helper.to_big_decimal(x), BigDecimal))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            DeminimisSimple.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :value => value.to_f.to_s,
              :currency => currency,
              :components => components.map { |o| o.value },
              :minimum => minimum.to_f.to_s
            }
          end

        end

        class DetailedShippingLabelForm < ShippingLabelForm

          attr_reader :destination, :origin, :package, :attributes, :delivered_duty, :direction, :order_number, :service, :shipment_recipient

          def initialize(incoming={})
            super(:discriminator => ShippingLabelForm::Types::DETAILED_SHIPPING_LABEL_FORM)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:destination, :origin, :package], 'DetailedShippingLabelForm')
            @destination = (x = opts.delete(:destination); x.is_a?(::Io::Flow::V0::Models::ShippingAddress) ? x : ::Io::Flow::V0::Models::ShippingAddress.new(x))
            @origin = (x = opts.delete(:origin); x.is_a?(::Io::Flow::V0::Models::ShippingAddress) ? x : ::Io::Flow::V0::Models::ShippingAddress.new(x))
            @package = (x = opts.delete(:package); x.is_a?(::Io::Flow::V0::Models::ShippingLabelPackage) ? x : ::Io::Flow::V0::Models::ShippingLabelPackage.new(x))
            @attributes = (x = opts.delete(:attributes); x.nil? ? nil : HttpClient::Preconditions.assert_class('attributes', x, Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h })
            @delivered_duty = (x = opts.delete(:delivered_duty); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::DeliveredDuty) ? x : ::Io::Flow::V0::Models::DeliveredDuty.apply(x)))
            @direction = (x = opts.delete(:direction); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Direction) ? x : ::Io::Flow::V0::Models::Direction.apply(x)))
            @order_number = (x = opts.delete(:order_number); x.nil? ? nil : HttpClient::Preconditions.assert_class('order_number', x, String))
            @service = (x = opts.delete(:service); x.nil? ? nil : HttpClient::Preconditions.assert_class('service', x, String))
            @shipment_recipient = (x = opts.delete(:shipment_recipient); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::ShipmentRecipient) ? x : ::Io::Flow::V0::Models::ShipmentRecipient.apply(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            DetailedShippingLabelForm.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :destination => destination.to_hash,
              :origin => origin.to_hash,
              :package => package.to_hash,
              :attributes => attributes.nil? ? nil : attributes,
              :delivered_duty => delivered_duty.nil? ? nil : delivered_duty.value,
              :direction => direction.nil? ? nil : direction.value,
              :order_number => order_number,
              :service => service,
              :shipment_recipient => shipment_recipient.nil? ? nil : shipment_recipient.value
            }
          end

        end

        # Detailed form for information about a client-facilitated shipment where the
        # shipping label and fulfillment was not handled by Flow.
        class DetailedShippingNotificationForm < ShippingNotificationForm

          attr_reader :key, :attributes, :carrier_tracking_number, :destination, :order_number, :package, :service, :origin, :shipment_recipient

          def initialize(incoming={})
            super(:discriminator => ShippingNotificationForm::Types::DETAILED_SHIPPING_NOTIFICATION_FORM)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:carrier_tracking_number, :destination, :order_number, :package, :service], 'DetailedShippingNotificationForm')
            @key = (x = opts.delete(:key); x.nil? ? nil : HttpClient::Preconditions.assert_class('key', x, String))
            @attributes = (x = opts.delete(:attributes); x.nil? ? nil : HttpClient::Preconditions.assert_class('attributes', x, Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h })
            @carrier_tracking_number = HttpClient::Preconditions.assert_class('carrier_tracking_number', opts.delete(:carrier_tracking_number), String)
            @destination = (x = opts.delete(:destination); x.is_a?(::Io::Flow::V0::Models::ShippingAddress) ? x : ::Io::Flow::V0::Models::ShippingAddress.new(x))
            @order_number = HttpClient::Preconditions.assert_class('order_number', opts.delete(:order_number), String)
            @package = (x = opts.delete(:package); x.is_a?(::Io::Flow::V0::Models::ShippingLabelPackage) ? x : ::Io::Flow::V0::Models::ShippingLabelPackage.new(x))
            @service = HttpClient::Preconditions.assert_class('service', opts.delete(:service), String)
            @origin = (x = opts.delete(:origin); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::ShippingAddress) ? x : ::Io::Flow::V0::Models::ShippingAddress.new(x)))
            @shipment_recipient = (x = opts.delete(:shipment_recipient); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::ShipmentRecipient) ? x : ::Io::Flow::V0::Models::ShipmentRecipient.apply(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            DetailedShippingNotificationForm.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :key => key,
              :attributes => attributes.nil? ? nil : attributes,
              :carrier_tracking_number => carrier_tracking_number,
              :destination => destination.to_hash,
              :order_number => order_number,
              :package => package.to_hash,
              :service => service,
              :origin => origin.nil? ? nil : origin.to_hash,
              :shipment_recipient => shipment_recipient.nil? ? nil : shipment_recipient.value
            }
          end

        end

        # Result of looking up a specific tax registration number. Includes details of
        # both the consumer request and the VIES response.
        class DetailedTaxRegistration

          attr_reader :id, :key, :consumer_company_name, :number, :country, :success, :timestamp, :vies_result, :vies_result_reason, :vies_company_name, :vies_company_address, :company_name_match_result, :company_name_match_result_reason

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :key, :number, :country, :success, :timestamp, :vies_result, :company_name_match_result], 'DetailedTaxRegistration')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @key = HttpClient::Preconditions.assert_class('key', opts.delete(:key), String)
            @consumer_company_name = (x = opts.delete(:consumer_company_name); x.nil? ? nil : HttpClient::Preconditions.assert_class('consumer_company_name', x, String))
            @number = HttpClient::Preconditions.assert_class('number', opts.delete(:number), String)
            @country = HttpClient::Preconditions.assert_class('country', opts.delete(:country), String)
            @success = HttpClient::Preconditions.assert_boolean('success', opts.delete(:success))
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @vies_result = (x = opts.delete(:vies_result); x.is_a?(::Io::Flow::V0::Models::TaxVerificationResult) ? x : ::Io::Flow::V0::Models::TaxVerificationResult.apply(x))
            @vies_result_reason = (x = opts.delete(:vies_result_reason); x.nil? ? nil : HttpClient::Preconditions.assert_class('vies_result_reason', x, String))
            @vies_company_name = (x = opts.delete(:vies_company_name); x.nil? ? nil : HttpClient::Preconditions.assert_class('vies_company_name', x, String))
            @vies_company_address = (x = opts.delete(:vies_company_address); x.nil? ? nil : HttpClient::Preconditions.assert_class('vies_company_address', x, String))
            @company_name_match_result = (x = opts.delete(:company_name_match_result); x.is_a?(::Io::Flow::V0::Models::TaxVerificationResult) ? x : ::Io::Flow::V0::Models::TaxVerificationResult.apply(x))
            @company_name_match_result_reason = (x = opts.delete(:company_name_match_result_reason); x.nil? ? nil : HttpClient::Preconditions.assert_class('company_name_match_result_reason', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            DetailedTaxRegistration.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :key => key,
              :consumer_company_name => consumer_company_name,
              :number => number,
              :country => country,
              :success => success,
              :timestamp => timestamp,
              :vies_result => vies_result.value,
              :vies_result_reason => vies_result_reason,
              :vies_company_name => vies_company_name,
              :vies_company_address => vies_company_address,
              :company_name_match_result => company_name_match_result.value,
              :company_name_match_result_reason => company_name_match_result_reason
            }
          end

        end

        class DeviceDetailsBrowser < DeviceDetails

          attr_reader :user_agent, :origin, :accept_language, :ip

          def initialize(incoming={})
            super(:type => DeviceDetails::Types::DEVICE_DETAILS_BROWSER)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:user_agent, :origin, :accept_language], 'DeviceDetailsBrowser')
            @user_agent = HttpClient::Preconditions.assert_class('user_agent', opts.delete(:user_agent), String)
            @origin = HttpClient::Preconditions.assert_class('origin', opts.delete(:origin), String)
            @accept_language = HttpClient::Preconditions.assert_class('accept_language', opts.delete(:accept_language), String)
            @ip = (x = opts.delete(:ip); x.nil? ? nil : HttpClient::Preconditions.assert_class('ip', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            DeviceDetailsBrowser.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :user_agent => user_agent,
              :origin => origin,
              :accept_language => accept_language,
              :ip => ip
            }
          end

        end

        # Used to identify device during 3ds verification.
        class DeviceFingerprintDetailsBrowser < DeviceFingerprintDetails

          attr_reader :accept, :java_enabled, :color_depth, :screen_height, :screen_width, :time_zone_offset

          def initialize(incoming={})
            super(:type => DeviceFingerprintDetails::Types::DEVICE_FINGERPRINT_DETAILS_BROWSER)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:java_enabled, :color_depth, :screen_height, :screen_width, :time_zone_offset], 'DeviceFingerprintDetailsBrowser')
            @accept = (x = opts.delete(:accept); x.nil? ? nil : HttpClient::Preconditions.assert_class('accept', x, String))
            @java_enabled = HttpClient::Preconditions.assert_boolean('java_enabled', opts.delete(:java_enabled))
            @color_depth = HttpClient::Preconditions.assert_class('color_depth', opts.delete(:color_depth), Integer)
            @screen_height = HttpClient::Preconditions.assert_class('screen_height', opts.delete(:screen_height), Integer)
            @screen_width = HttpClient::Preconditions.assert_class('screen_width', opts.delete(:screen_width), Integer)
            @time_zone_offset = HttpClient::Preconditions.assert_class('time_zone_offset', opts.delete(:time_zone_offset), Integer)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            DeviceFingerprintDetailsBrowser.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :accept => accept,
              :java_enabled => java_enabled,
              :color_depth => color_depth,
              :screen_height => screen_height,
              :screen_width => screen_width,
              :time_zone_offset => time_zone_offset
            }
          end

        end

        # Represents a collection of items that are digitally available and do not
        # require a physical shipment
        class DigitalDelivery < Delivery

          attr_reader :id, :key, :items, :prices, :total

          def initialize(incoming={})
            super(:discriminator => Delivery::Types::DIGITAL_DELIVERY)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :items], 'DigitalDelivery')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @key = (x = opts.delete(:key); x.nil? ? nil : HttpClient::Preconditions.assert_class('key', x, String))
            @items = HttpClient::Preconditions.assert_class('items', opts.delete(:items), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::DeliveryItem) ? x : ::Io::Flow::V0::Models::DeliveryItem.new(x)) }
            @prices = (x = opts.delete(:prices); x.nil? ? nil : HttpClient::Preconditions.assert_class('prices', x, Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::OrderPriceDetail) ? x : ::Io::Flow::V0::Models::OrderPriceDetail.new(x)) })
            @total = (x = opts.delete(:total); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::LocalizedTotal) ? x : ::Io::Flow::V0::Models::LocalizedTotal.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            DigitalDelivery.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :id => id,
              :key => key,
              :items => items.map { |o| o.to_hash },
              :prices => prices.nil? ? nil : prices.map { |o| o.to_hash },
              :total => total.nil? ? nil : total.to_hash
            }
          end

        end

        class Dimension

          attr_reader :depth, :diameter, :length, :weight, :width

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @depth = (x = opts.delete(:depth); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Measurement) ? x : ::Io::Flow::V0::Models::Measurement.new(x)))
            @diameter = (x = opts.delete(:diameter); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Measurement) ? x : ::Io::Flow::V0::Models::Measurement.new(x)))
            @length = (x = opts.delete(:length); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Measurement) ? x : ::Io::Flow::V0::Models::Measurement.new(x)))
            @weight = (x = opts.delete(:weight); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Measurement) ? x : ::Io::Flow::V0::Models::Measurement.new(x)))
            @width = (x = opts.delete(:width); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Measurement) ? x : ::Io::Flow::V0::Models::Measurement.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            Dimension.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :depth => depth.nil? ? nil : depth.to_hash,
              :diameter => diameter.nil? ? nil : diameter.to_hash,
              :length => length.nil? ? nil : length.to_hash,
              :weight => weight.nil? ? nil : weight.to_hash,
              :width => width.nil? ? nil : width.to_hash
            }
          end

        end

        class DimensionEstimate

          attr_reader :id, :q, :dimensions, :position

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :q, :dimensions, :position], 'DimensionEstimate')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @q = HttpClient::Preconditions.assert_class('q', opts.delete(:q), String)
            @dimensions = (x = opts.delete(:dimensions); x.is_a?(::Io::Flow::V0::Models::EstimatedDimensions) ? x : ::Io::Flow::V0::Models::EstimatedDimensions.new(x))
            @position = HttpClient::Preconditions.assert_class('position', opts.delete(:position), Integer)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            DimensionEstimate.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :q => q,
              :dimensions => dimensions.to_hash,
              :position => position
            }
          end

        end

        class DimensionEstimateForm

          attr_reader :q, :dimensions, :position

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:q, :dimensions], 'DimensionEstimateForm')
            @q = HttpClient::Preconditions.assert_class('q', opts.delete(:q), String)
            @dimensions = (x = opts.delete(:dimensions); x.is_a?(::Io::Flow::V0::Models::EstimatedDimensions) ? x : ::Io::Flow::V0::Models::EstimatedDimensions.new(x))
            @position = (x = opts.delete(:position); x.nil? ? nil : HttpClient::Preconditions.assert_class('position', x, Integer))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            DimensionEstimateForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :q => q,
              :dimensions => dimensions.to_hash,
              :position => position
            }
          end

        end

        class DimensionEstimateVersion

          attr_reader :id, :timestamp, :type, :dimension_estimate

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :timestamp, :type, :dimension_estimate], 'DimensionEstimateVersion')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::V0::Models::ChangeType) ? x : ::Io::Flow::V0::Models::ChangeType.apply(x))
            @dimension_estimate = (x = opts.delete(:dimension_estimate); x.is_a?(::Io::Flow::V0::Models::DimensionEstimate) ? x : ::Io::Flow::V0::Models::DimensionEstimate.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            DimensionEstimateVersion.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :timestamp => timestamp,
              :type => type.value,
              :dimension_estimate => dimension_estimate.to_hash
            }
          end

        end

        class Dimensions

          attr_reader :product, :packaging

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @product = (x = opts.delete(:product); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Dimension) ? x : ::Io::Flow::V0::Models::Dimension.new(x)))
            @packaging = (x = opts.delete(:packaging); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Dimension) ? x : ::Io::Flow::V0::Models::Dimension.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            Dimensions.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :product => product.nil? ? nil : product.to_hash,
              :packaging => packaging.nil? ? nil : packaging.to_hash
            }
          end

        end

        # Creates an authorization for a transaction in which you remain the merchant of
        # record. An authorization is used to check and reserve funds w/ a given payment
        # method. No funds are actually transferred; once you have you an authorization,
        # you can capture up to the amount of the authorization.
        class DirectAuthorizationForm < AuthorizationForm

          attr_reader :token, :amount, :currency, :customer, :key, :cvv, :attributes, :destination, :billing_address, :ip, :options, :redirect_urls, :browser_info, :inline_action_configuration

          def initialize(incoming={})
            super(:discriminator => AuthorizationForm::Types::DIRECT_AUTHORIZATION_FORM)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:token, :amount, :currency], 'DirectAuthorizationForm')
            @token = HttpClient::Preconditions.assert_class('token', opts.delete(:token), String)
            @amount = HttpClient::Preconditions.assert_class('amount', HttpClient::Helper.to_big_decimal(opts.delete(:amount)), BigDecimal)
            @currency = HttpClient::Preconditions.assert_class('currency', opts.delete(:currency), String)
            @customer = (x = opts.delete(:customer); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::OrderCustomer) ? x : ::Io::Flow::V0::Models::OrderCustomer.new(x)))
            @key = (x = opts.delete(:key); x.nil? ? nil : HttpClient::Preconditions.assert_class('key', x, String))
            @cvv = (x = opts.delete(:cvv); x.nil? ? nil : HttpClient::Preconditions.assert_class('cvv', x, String))
            @attributes = (x = opts.delete(:attributes); x.nil? ? nil : HttpClient::Preconditions.assert_class('attributes', x, Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h })
            @destination = (x = opts.delete(:destination); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Address) ? x : ::Io::Flow::V0::Models::Address.new(x)))
            @billing_address = (x = opts.delete(:billing_address); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::BillingAddress) ? x : ::Io::Flow::V0::Models::BillingAddress.new(x)))
            @ip = (x = opts.delete(:ip); x.nil? ? nil : HttpClient::Preconditions.assert_class('ip', x, String))
            @options = (x = opts.delete(:options); x.nil? ? nil : HttpClient::Preconditions.assert_class('options', x, Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::AuthorizationOption) ? x : ::Io::Flow::V0::Models::AuthorizationOption.apply(x)) })
            @redirect_urls = (x = opts.delete(:redirect_urls); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::PostPaymentRedirectUrls) ? x : ::Io::Flow::V0::Models::PostPaymentRedirectUrls.new(x)))
            @browser_info = (x = opts.delete(:browser_info); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::BrowserInfo) ? x : ::Io::Flow::V0::Models::BrowserInfo.new(x)))
            @inline_action_configuration = (x = opts.delete(:inline_action_configuration); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::InlineActionConfiguration) ? x : ::Io::Flow::V0::Models::InlineActionConfiguration.from_json(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            DirectAuthorizationForm.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :token => token,
              :amount => amount.to_f.to_s,
              :currency => currency,
              :customer => customer.nil? ? nil : customer.to_hash,
              :key => key,
              :cvv => cvv,
              :attributes => attributes.nil? ? nil : attributes,
              :destination => destination.nil? ? nil : destination.to_hash,
              :billing_address => billing_address.nil? ? nil : billing_address.to_hash,
              :ip => ip,
              :options => options.nil? ? nil : options.map { |o| o.value },
              :redirect_urls => redirect_urls.nil? ? nil : redirect_urls.to_hash,
              :browser_info => browser_info.nil? ? nil : browser_info.to_hash,
              :inline_action_configuration => inline_action_configuration.nil? ? nil : inline_action_configuration.to_hash
            }
          end

        end

        # Represents an online direct debit payment.
        class DirectDebit < ConfirmationDetails

          attr_reader :routing_number, :last4

          def initialize(incoming={})
            super(:discriminator => ConfirmationDetails::Types::DIRECT_DEBIT)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:routing_number, :last4], 'DirectDebit')
            @routing_number = HttpClient::Preconditions.assert_class('routing_number', opts.delete(:routing_number), String)
            @last4 = HttpClient::Preconditions.assert_class('last4', opts.delete(:last4), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            DirectDebit.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :routing_number => routing_number,
              :last4 => last4
            }
          end

        end

        class Discount < Promotion

          attr_reader :id, :code, :label, :price, :attributes

          def initialize(incoming={})
            super(:discriminator => Promotion::Types::DISCOUNT)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :label, :price], 'Discount')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @code = (x = opts.delete(:code); x.nil? ? nil : HttpClient::Preconditions.assert_class('code', x, String))
            @label = HttpClient::Preconditions.assert_class('label', opts.delete(:label), String)
            @price = (x = opts.delete(:price); x.is_a?(::Io::Flow::V0::Models::PriceWithBase) ? x : ::Io::Flow::V0::Models::PriceWithBase.new(x))
            @attributes = (x = opts.delete(:attributes); x.nil? ? nil : HttpClient::Preconditions.assert_class('attributes', x, Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h })
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            Discount.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :id => id,
              :code => code,
              :label => label,
              :price => price.to_hash,
              :attributes => attributes.nil? ? nil : attributes
            }
          end

        end

        class DiscountForm

          attr_reader :offer, :target, :label

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:offer], 'DiscountForm')
            @offer = (x = opts.delete(:offer); x.is_a?(::Io::Flow::V0::Models::DiscountOffer) ? x : ::Io::Flow::V0::Models::DiscountOffer.from_json(x))
            @target = (x = (x = opts.delete(:target); x.nil? ? "item" : x); x.is_a?(::Io::Flow::V0::Models::DiscountTarget) ? x : ::Io::Flow::V0::Models::DiscountTarget.apply(x))
            @label = (x = opts.delete(:label); x.nil? ? nil : HttpClient::Preconditions.assert_class('label', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            DiscountForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :offer => offer.to_hash,
              :target => target.value,
              :label => label
            }
          end

        end

        class DiscountOfferFixed < DiscountOffer

          attr_reader :money

          def initialize(incoming={})
            super(:discriminator => DiscountOffer::Types::DISCOUNT_OFFER_FIXED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:money], 'DiscountOfferFixed')
            @money = (x = opts.delete(:money); x.is_a?(::Io::Flow::V0::Models::Money) ? x : ::Io::Flow::V0::Models::Money.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            DiscountOfferFixed.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :money => money.to_hash
            }
          end

        end

        class DiscountOfferPercent < DiscountOffer

          attr_reader :percent

          def initialize(incoming={})
            super(:discriminator => DiscountOffer::Types::DISCOUNT_OFFER_PERCENT)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:percent], 'DiscountOfferPercent')
            @percent = HttpClient::Preconditions.assert_class('percent', HttpClient::Helper.to_big_decimal(opts.delete(:percent)), BigDecimal)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            DiscountOfferPercent.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :percent => percent.to_f.to_s
            }
          end

        end

        class DiscountRule

          attr_reader :offers

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:offers], 'DiscountRule')
            @offers = HttpClient::Preconditions.assert_class('offers', opts.delete(:offers), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::DiscountRuleOffer) ? x : ::Io::Flow::V0::Models::DiscountRuleOffer.new(x)) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            DiscountRule.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :offers => offers.map { |o| o.to_hash }
            }
          end

        end

        class DiscountRuleOffer

          attr_reader :discount, :entitlement

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:discount, :entitlement], 'DiscountRuleOffer')
            @discount = (x = opts.delete(:discount); x.is_a?(::Io::Flow::V0::Models::DiscountOffer) ? x : ::Io::Flow::V0::Models::DiscountOffer.from_json(x))
            @entitlement = (x = opts.delete(:entitlement); x.is_a?(::Io::Flow::V0::Models::DiscountRuleEntitlement) ? x : ::Io::Flow::V0::Models::DiscountRuleEntitlement.from_json(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            DiscountRuleOffer.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :discount => discount.to_hash,
              :entitlement => entitlement.to_hash
            }
          end

        end

        class DiscountRuleSettings

          attr_reader :id, :name, :from_with_tz, :to_with_tz, :status, :experience_keys, :rule

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :name, :from_with_tz, :status, :experience_keys, :rule], 'DiscountRuleSettings')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
            @from_with_tz = (x = opts.delete(:from_with_tz); x.is_a?(::Io::Flow::V0::Models::DatetimeWithTimezone) ? x : ::Io::Flow::V0::Models::DatetimeWithTimezone.new(x))
            @to_with_tz = (x = opts.delete(:to_with_tz); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::DatetimeWithTimezone) ? x : ::Io::Flow::V0::Models::DatetimeWithTimezone.new(x)))
            @status = (x = opts.delete(:status); x.is_a?(::Io::Flow::V0::Models::DiscountRuleStatus) ? x : ::Io::Flow::V0::Models::DiscountRuleStatus.apply(x))
            @experience_keys = HttpClient::Preconditions.assert_class('experience_keys', opts.delete(:experience_keys), Array).map { |v| HttpClient::Preconditions.assert_class('experience_keys', v, String) }
            @rule = (x = opts.delete(:rule); x.is_a?(::Io::Flow::V0::Models::DiscountRule) ? x : ::Io::Flow::V0::Models::DiscountRule.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            DiscountRuleSettings.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :name => name,
              :from_with_tz => from_with_tz.to_hash,
              :to_with_tz => to_with_tz.nil? ? nil : to_with_tz.to_hash,
              :status => status.value,
              :experience_keys => experience_keys,
              :rule => rule.to_hash
            }
          end

        end

        class DiscountRuleSettingsForm

          attr_reader :name, :from_with_tz, :to_with_tz, :experience_keys, :rule

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:name, :from_with_tz, :experience_keys, :rule], 'DiscountRuleSettingsForm')
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
            @from_with_tz = (x = opts.delete(:from_with_tz); x.is_a?(::Io::Flow::V0::Models::DatetimeWithTimezone) ? x : ::Io::Flow::V0::Models::DatetimeWithTimezone.new(x))
            @to_with_tz = (x = opts.delete(:to_with_tz); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::DatetimeWithTimezone) ? x : ::Io::Flow::V0::Models::DatetimeWithTimezone.new(x)))
            @experience_keys = HttpClient::Preconditions.assert_class('experience_keys', opts.delete(:experience_keys), Array).map { |v| HttpClient::Preconditions.assert_class('experience_keys', v, String) }
            @rule = (x = opts.delete(:rule); x.is_a?(::Io::Flow::V0::Models::DiscountRule) ? x : ::Io::Flow::V0::Models::DiscountRule.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            DiscountRuleSettingsForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :name => name,
              :from_with_tz => from_with_tz.to_hash,
              :to_with_tz => to_with_tz.nil? ? nil : to_with_tz.to_hash,
              :experience_keys => experience_keys,
              :rule => rule.to_hash
            }
          end

        end

        class DiscountRuleSubsidyEntitlement < DiscountRuleEntitlement

          attr_reader :targets

          def initialize(incoming={})
            super(:discriminator => DiscountRuleEntitlement::Types::DISCOUNT_RULE_SUBSIDY_ENTITLEMENT)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:targets], 'DiscountRuleSubsidyEntitlement')
            @targets = HttpClient::Preconditions.assert_class('targets', opts.delete(:targets), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::DiscountRuleSubsidyTarget) ? x : ::Io::Flow::V0::Models::DiscountRuleSubsidyTarget.apply(x)) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            DiscountRuleSubsidyEntitlement.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :targets => targets.map { |o| o.value }
            }
          end

        end

        class DiscountsForm

          attr_reader :discounts

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:discounts], 'DiscountsForm')
            @discounts = HttpClient::Preconditions.assert_class('discounts', opts.delete(:discounts), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::DiscountForm) ? x : ::Io::Flow::V0::Models::DiscountForm.new(x)) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            DiscountsForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :discounts => discounts.map { |o| o.to_hash }
            }
          end

        end

        # Represents a duration of time.
        class Duration

          attr_reader :unit, :value

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:unit, :value], 'Duration')
            @unit = (x = opts.delete(:unit); x.is_a?(::Io::Flow::V0::Models::UnitOfTime) ? x : ::Io::Flow::V0::Models::UnitOfTime.apply(x))
            @value = HttpClient::Preconditions.assert_class('value', opts.delete(:value), Integer)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            Duration.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :unit => unit.value,
              :value => value
            }
          end

        end

        class DutiesTaxesPaidSurchargeRatecardFee < RatecardFee

          attr_reader :amount, :starts_at, :ends_at

          def initialize(incoming={})
            super(:discriminator => RatecardFee::Types::DUTIES_TAXES_PAID_SURCHARGE_RATECARD_FEE)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:amount], 'DutiesTaxesPaidSurchargeRatecardFee')
            @amount = (x = opts.delete(:amount); x.is_a?(::Io::Flow::V0::Models::Money) ? x : ::Io::Flow::V0::Models::Money.new(x))
            @starts_at = (x = opts.delete(:starts_at); x.nil? ? nil : HttpClient::Preconditions.assert_class('starts_at', HttpClient::Helper.to_date_time_iso8601(x), DateTime))
            @ends_at = (x = opts.delete(:ends_at); x.nil? ? nil : HttpClient::Preconditions.assert_class('ends_at', HttpClient::Helper.to_date_time_iso8601(x), DateTime))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            DutiesTaxesPaidSurchargeRatecardFee.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :amount => amount.to_hash,
              :starts_at => starts_at,
              :ends_at => ends_at
            }
          end

        end

        class DutiesTaxesPaidSurchargeServiceFee < ServiceFee

          attr_reader :amount, :starts_at, :ends_at

          def initialize(incoming={})
            super(:discriminator => ServiceFee::Types::DUTIES_TAXES_PAID_SURCHARGE_SERVICE_FEE)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:amount], 'DutiesTaxesPaidSurchargeServiceFee')
            @amount = (x = opts.delete(:amount); x.is_a?(::Io::Flow::V0::Models::Money) ? x : ::Io::Flow::V0::Models::Money.new(x))
            @starts_at = (x = opts.delete(:starts_at); x.nil? ? nil : HttpClient::Preconditions.assert_class('starts_at', HttpClient::Helper.to_date_time_iso8601(x), DateTime))
            @ends_at = (x = opts.delete(:ends_at); x.nil? ? nil : HttpClient::Preconditions.assert_class('ends_at', HttpClient::Helper.to_date_time_iso8601(x), DateTime))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            DutiesTaxesPaidSurchargeServiceFee.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :amount => amount.to_hash,
              :starts_at => starts_at,
              :ends_at => ends_at
            }
          end

        end

        # Represents a simple model of duties that apply to a given item / trade lane.
        class Duty

          attr_reader :rate, :components, :deminimis, :name

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:rate, :components], 'Duty')
            @rate = HttpClient::Preconditions.assert_class('rate', HttpClient::Helper.to_big_decimal(opts.delete(:rate)), BigDecimal)
            @components = HttpClient::Preconditions.assert_class('components', opts.delete(:components), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::LevyComponent) ? x : ::Io::Flow::V0::Models::LevyComponent.apply(x)) }
            @deminimis = (x = opts.delete(:deminimis); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Deminimis) ? x : ::Io::Flow::V0::Models::Deminimis.from_json(x)))
            @name = (x = opts.delete(:name); x.nil? ? nil : HttpClient::Preconditions.assert_class('name', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            Duty.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :rate => rate.to_f.to_s,
              :components => components.map { |o| o.value },
              :deminimis => deminimis.nil? ? nil : deminimis.to_hash,
              :name => name
            }
          end

        end

        class DutyItem

          attr_reader :number, :name, :product_id, :sku, :customs_description, :origin_criteria, :approvals

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:number, :name, :customs_description], 'DutyItem')
            @number = HttpClient::Preconditions.assert_class('number', opts.delete(:number), String)
            @name = (x = opts.delete(:name); x.is_a?(::Io::Flow::V0::Models::TradeAgreementName) ? x : ::Io::Flow::V0::Models::TradeAgreementName.apply(x))
            @product_id = (x = opts.delete(:product_id); x.nil? ? nil : HttpClient::Preconditions.assert_class('product_id', x, String))
            @sku = (x = opts.delete(:sku); x.nil? ? nil : HttpClient::Preconditions.assert_class('sku', x, String))
            @customs_description = HttpClient::Preconditions.assert_class('customs_description', opts.delete(:customs_description), String)
            @origin_criteria = (x = opts.delete(:origin_criteria); x.nil? ? nil : HttpClient::Preconditions.assert_class('origin_criteria', x, String))
            @approvals = (x = opts.delete(:approvals); x.nil? ? nil : HttpClient::Preconditions.assert_class('approvals', x, Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::DutyItemApproval) ? x : ::Io::Flow::V0::Models::DutyItemApproval.new(x)) })
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            DutyItem.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :number => number,
              :name => name.value,
              :product_id => product_id,
              :sku => sku,
              :customs_description => customs_description,
              :origin_criteria => origin_criteria,
              :approvals => approvals.nil? ? nil : approvals.map { |o| o.to_hash }
            }
          end

        end

        class DutyItemApproval

          attr_reader :status, :trade_agreement, :certifier, :producer, :effective_at

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:status, :trade_agreement, :certifier, :producer, :effective_at], 'DutyItemApproval')
            @status = (x = opts.delete(:status); x.is_a?(::Io::Flow::V0::Models::DutyItemApprovalStatus) ? x : ::Io::Flow::V0::Models::DutyItemApprovalStatus.apply(x))
            @trade_agreement = (x = opts.delete(:trade_agreement); x.is_a?(::Io::Flow::V0::Models::TradeAgreement) ? x : ::Io::Flow::V0::Models::TradeAgreement.new(x))
            @certifier = (x = opts.delete(:certifier); x.is_a?(::Io::Flow::V0::Models::TradeAgreementCertifier) ? x : ::Io::Flow::V0::Models::TradeAgreementCertifier.new(x))
            @producer = (x = opts.delete(:producer); x.is_a?(::Io::Flow::V0::Models::DutyItemProducer) ? x : ::Io::Flow::V0::Models::DutyItemProducer.new(x))
            @effective_at = HttpClient::Preconditions.assert_class('effective_at', HttpClient::Helper.to_date_time_iso8601(opts.delete(:effective_at)), DateTime)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            DutyItemApproval.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :status => status.value,
              :trade_agreement => trade_agreement.to_hash,
              :certifier => certifier.to_hash,
              :producer => producer.to_hash,
              :effective_at => effective_at
            }
          end

        end

        class DutyItemApprovalForm

          attr_reader :status, :trade_agreement_key, :trade_agreement_certifier_key, :producer_key, :effective_at

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:status, :trade_agreement_key, :trade_agreement_certifier_key, :producer_key, :effective_at], 'DutyItemApprovalForm')
            @status = (x = opts.delete(:status); x.is_a?(::Io::Flow::V0::Models::DutyItemApprovalStatus) ? x : ::Io::Flow::V0::Models::DutyItemApprovalStatus.apply(x))
            @trade_agreement_key = HttpClient::Preconditions.assert_class('trade_agreement_key', opts.delete(:trade_agreement_key), String)
            @trade_agreement_certifier_key = HttpClient::Preconditions.assert_class('trade_agreement_certifier_key', opts.delete(:trade_agreement_certifier_key), String)
            @producer_key = HttpClient::Preconditions.assert_class('producer_key', opts.delete(:producer_key), String)
            @effective_at = HttpClient::Preconditions.assert_class('effective_at', HttpClient::Helper.to_date_time_iso8601(opts.delete(:effective_at)), DateTime)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            DutyItemApprovalForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :status => status.value,
              :trade_agreement_key => trade_agreement_key,
              :trade_agreement_certifier_key => trade_agreement_certifier_key,
              :producer_key => producer_key,
              :effective_at => effective_at
            }
          end

        end

        class DutyItemForm

          attr_reader :number, :name, :product_id, :sku, :customs_description, :origin_criteria

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:number, :name, :customs_description], 'DutyItemForm')
            @number = HttpClient::Preconditions.assert_class('number', opts.delete(:number), String)
            @name = (x = opts.delete(:name); x.is_a?(::Io::Flow::V0::Models::TradeAgreementName) ? x : ::Io::Flow::V0::Models::TradeAgreementName.apply(x))
            @product_id = (x = opts.delete(:product_id); x.nil? ? nil : HttpClient::Preconditions.assert_class('product_id', x, String))
            @sku = (x = opts.delete(:sku); x.nil? ? nil : HttpClient::Preconditions.assert_class('sku', x, String))
            @customs_description = HttpClient::Preconditions.assert_class('customs_description', opts.delete(:customs_description), String)
            @origin_criteria = (x = opts.delete(:origin_criteria); x.nil? ? nil : HttpClient::Preconditions.assert_class('origin_criteria', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            DutyItemForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :number => number,
              :name => name.value,
              :product_id => product_id,
              :sku => sku,
              :customs_description => customs_description,
              :origin_criteria => origin_criteria
            }
          end

        end

        # Manufacturer of an item.
        class DutyItemProducer

          attr_reader :key, :name, :location, :contact

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:key, :name, :location], 'DutyItemProducer')
            @key = HttpClient::Preconditions.assert_class('key', opts.delete(:key), String)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
            @location = (x = opts.delete(:location); x.is_a?(::Io::Flow::V0::Models::Address) ? x : ::Io::Flow::V0::Models::Address.new(x))
            @contact = (x = opts.delete(:contact); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Contact) ? x : ::Io::Flow::V0::Models::Contact.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            DutyItemProducer.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :key => key,
              :name => name,
              :location => location.to_hash,
              :contact => contact.nil? ? nil : contact.to_hash
            }
          end

        end

        # The Ecommerce Platform defines what the organization is using for their
        # ecommerce systems.
        class EcommercePlatform

          attr_reader :id, :type, :version

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :type], 'EcommercePlatform')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::V0::Models::EcommercePlatformType) ? x : ::Io::Flow::V0::Models::EcommercePlatformType.apply(x))
            @version = (x = opts.delete(:version); x.nil? ? nil : HttpClient::Preconditions.assert_class('version', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            EcommercePlatform.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :type => type.value,
              :version => version
            }
          end

        end

        class EcommercePlatformDeleted < Event

          attr_reader :event_id, :timestamp, :organization, :ecommerce_platform

          def initialize(incoming={})
            super(:discriminator => Event::Types::ECOMMERCE_PLATFORM_DELETED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :ecommerce_platform], 'EcommercePlatformDeleted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @ecommerce_platform = (x = opts.delete(:ecommerce_platform); x.is_a?(::Io::Flow::V0::Models::EcommercePlatform) ? x : ::Io::Flow::V0::Models::EcommercePlatform.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            EcommercePlatformDeleted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :ecommerce_platform => ecommerce_platform.to_hash
            }
          end

        end

        class EcommercePlatformForm

          attr_reader :type, :version

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:type], 'EcommercePlatformForm')
            @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::V0::Models::EcommercePlatformType) ? x : ::Io::Flow::V0::Models::EcommercePlatformType.apply(x))
            @version = (x = opts.delete(:version); x.nil? ? nil : HttpClient::Preconditions.assert_class('version', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            EcommercePlatformForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :type => type.value,
              :version => version
            }
          end

        end

        class EcommercePlatformUpserted < Event

          attr_reader :event_id, :timestamp, :organization, :ecommerce_platform

          def initialize(incoming={})
            super(:discriminator => Event::Types::ECOMMERCE_PLATFORM_UPSERTED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :ecommerce_platform], 'EcommercePlatformUpserted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @ecommerce_platform = (x = opts.delete(:ecommerce_platform); x.is_a?(::Io::Flow::V0::Models::EcommercePlatform) ? x : ::Io::Flow::V0::Models::EcommercePlatform.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            EcommercePlatformUpserted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :ecommerce_platform => ecommerce_platform.to_hash
            }
          end

        end

        class EmailAbandonedOrderPromotion

          attr_reader :discount_form, :attributes

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:discount_form, :attributes], 'EmailAbandonedOrderPromotion')
            @discount_form = (x = opts.delete(:discount_form); x.is_a?(::Io::Flow::V0::Models::DiscountForm) ? x : ::Io::Flow::V0::Models::DiscountForm.new(x))
            @attributes = HttpClient::Preconditions.assert_class('attributes', opts.delete(:attributes), Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            EmailAbandonedOrderPromotion.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :discount_form => discount_form.to_hash,
              :attributes => attributes
            }
          end

        end

        class EmailAbandonedOrderUrls

          attr_reader :checkout

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:checkout], 'EmailAbandonedOrderUrls')
            @checkout = HttpClient::Preconditions.assert_class('checkout', opts.delete(:checkout), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            EmailAbandonedOrderUrls.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :checkout => checkout
            }
          end

        end

        # An Email Notification indicates that an email message should be delivered. The
        # type of email depends on the data and can be found in the field
        # data.discriminator.
        class EmailNotification

          attr_reader :id, :to, :created_at, :data

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :to, :created_at, :data], 'EmailNotification')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @to = (x = opts.delete(:to); x.is_a?(::Io::Flow::V0::Models::EmailRecipient) ? x : ::Io::Flow::V0::Models::EmailRecipient.new(x))
            @created_at = HttpClient::Preconditions.assert_class('created_at', HttpClient::Helper.to_date_time_iso8601(opts.delete(:created_at)), DateTime)
            @data = (x = opts.delete(:data); x.is_a?(::Io::Flow::V0::Models::EmailNotificationData) ? x : ::Io::Flow::V0::Models::EmailNotificationData.from_json(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            EmailNotification.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :to => to.to_hash,
              :created_at => created_at,
              :data => data.to_hash
            }
          end

        end

        # Data about an abandoned order. Today at Flow, this can be triggered by a
        # consumer initating checkout (without completing)
        class EmailNotificationAbandonedOrder < EmailNotificationData

          attr_reader :order, :urls, :promotion

          def initialize(incoming={})
            super(:discriminator => EmailNotificationData::Types::EMAIL_NOTIFICATION_ABANDONED_ORDER)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:order, :urls], 'EmailNotificationAbandonedOrder')
            @order = (x = opts.delete(:order); x.is_a?(::Io::Flow::V0::Models::OrderSummary) ? x : ::Io::Flow::V0::Models::OrderSummary.new(x))
            @urls = (x = opts.delete(:urls); x.is_a?(::Io::Flow::V0::Models::EmailAbandonedOrderUrls) ? x : ::Io::Flow::V0::Models::EmailAbandonedOrderUrls.new(x))
            @promotion = (x = opts.delete(:promotion); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::EmailAbandonedOrderPromotion) ? x : ::Io::Flow::V0::Models::EmailAbandonedOrderPromotion.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            EmailNotificationAbandonedOrder.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :order => order.to_hash,
              :urls => urls.to_hash,
              :promotion => promotion.nil? ? nil : promotion.to_hash
            }
          end

        end

        # Sends an refund confirmation email to the customer (using the
        # order.customer.email as the recipient).
        class EmailNotificationDataRefund < EmailNotificationData

          attr_reader :order, :return_, :payment

          def initialize(incoming={})
            super(:discriminator => EmailNotificationData::Types::EMAIL_NOTIFICATION_DATA_REFUND)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:order, :return_, :payment], 'EmailNotificationDataRefund')
            @order = (x = opts.delete(:order); x.is_a?(::Io::Flow::V0::Models::OrderSummary) ? x : ::Io::Flow::V0::Models::OrderSummary.new(x))
            @return_ = (x = opts.delete(:return); x.is_a?(::Io::Flow::V0::Models::OrderSummary) ? x : ::Io::Flow::V0::Models::OrderSummary.new(x))
            @payment = (x = opts.delete(:payment); x.is_a?(::Io::Flow::V0::Models::EmailPaymentSummary) ? x : ::Io::Flow::V0::Models::EmailPaymentSummary.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            EmailNotificationDataRefund.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :order => order.to_hash,
              :return => return_.to_hash,
              :payment => payment.to_hash
            }
          end

        end

        class EmailNotificationDeleted < Event

          attr_reader :event_id, :timestamp, :organization, :notification

          def initialize(incoming={})
            super(:discriminator => Event::Types::EMAIL_NOTIFICATION_DELETED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :notification], 'EmailNotificationDeleted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @notification = (x = opts.delete(:notification); x.is_a?(::Io::Flow::V0::Models::EmailNotification) ? x : ::Io::Flow::V0::Models::EmailNotification.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            EmailNotificationDeleted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :notification => notification.to_hash
            }
          end

        end

        class EmailNotificationForm

          attr_reader :to, :created_at, :data

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:to, :created_at, :data], 'EmailNotificationForm')
            @to = (x = opts.delete(:to); x.is_a?(::Io::Flow::V0::Models::EmailRecipient) ? x : ::Io::Flow::V0::Models::EmailRecipient.new(x))
            @created_at = HttpClient::Preconditions.assert_class('created_at', HttpClient::Helper.to_date_time_iso8601(opts.delete(:created_at)), DateTime)
            @data = (x = opts.delete(:data); x.is_a?(::Io::Flow::V0::Models::EmailNotificationData) ? x : ::Io::Flow::V0::Models::EmailNotificationData.from_json(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            EmailNotificationForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :to => to.to_hash,
              :created_at => created_at,
              :data => data.to_hash
            }
          end

        end

        class EmailNotificationUpserted < Event

          attr_reader :event_id, :timestamp, :organization, :notification

          def initialize(incoming={})
            super(:discriminator => Event::Types::EMAIL_NOTIFICATION_UPSERTED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :notification], 'EmailNotificationUpserted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @notification = (x = opts.delete(:notification); x.is_a?(::Io::Flow::V0::Models::EmailNotification) ? x : ::Io::Flow::V0::Models::EmailNotification.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            EmailNotificationUpserted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :notification => notification.to_hash
            }
          end

        end

        class EmailPaymentSummary

          attr_reader :refund

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:refund], 'EmailPaymentSummary')
            @refund = (x = opts.delete(:refund); x.is_a?(::Io::Flow::V0::Models::Refund) ? x : ::Io::Flow::V0::Models::Refund.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            EmailPaymentSummary.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :refund => refund.to_hash
            }
          end

        end

        class EmailRecipient

          attr_reader :email, :name

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:email], 'EmailRecipient')
            @email = HttpClient::Preconditions.assert_class('email', opts.delete(:email), String)
            @name = (x = opts.delete(:name); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Name) ? x : ::Io::Flow::V0::Models::Name.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            EmailRecipient.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :email => email,
              :name => name.nil? ? nil : name.to_hash
            }
          end

        end

        # Represents the successful response of an email verification token. We return
        # the email address in this case to allow the UI to display which email address
        # was verified.
        class EmailVerification

          attr_reader :email

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:email], 'EmailVerification')
            @email = HttpClient::Preconditions.assert_class('email', opts.delete(:email), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            EmailVerification.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :email => email
            }
          end

        end

        class EmergencySituationSurchargeRatecardFee < RatecardFee

          attr_reader :amount

          def initialize(incoming={})
            super(:discriminator => RatecardFee::Types::EMERGENCY_SITUATION_SURCHARGE_RATECARD_FEE)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:amount], 'EmergencySituationSurchargeRatecardFee')
            @amount = (x = opts.delete(:amount); x.is_a?(::Io::Flow::V0::Models::Money) ? x : ::Io::Flow::V0::Models::Money.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            EmergencySituationSurchargeRatecardFee.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :amount => amount.to_hash
            }
          end

        end

        class EmergencySituationSurchargeServiceFee < ServiceFee

          attr_reader :amount, :origin_region, :destination_region, :interval_unit

          def initialize(incoming={})
            super(:discriminator => ServiceFee::Types::EMERGENCY_SITUATION_SURCHARGE_SERVICE_FEE)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:amount], 'EmergencySituationSurchargeServiceFee')
            @amount = (x = opts.delete(:amount); x.is_a?(::Io::Flow::V0::Models::Money) ? x : ::Io::Flow::V0::Models::Money.new(x))
            @origin_region = (x = opts.delete(:origin_region); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::RatecardRegionReference) ? x : ::Io::Flow::V0::Models::RatecardRegionReference.new(x)))
            @destination_region = (x = opts.delete(:destination_region); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::RatecardRegionReference) ? x : ::Io::Flow::V0::Models::RatecardRegionReference.new(x)))
            @interval_unit = (x = opts.delete(:interval_unit); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::UnitOfMeasurement) ? x : ::Io::Flow::V0::Models::UnitOfMeasurement.apply(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            EmergencySituationSurchargeServiceFee.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :amount => amount.to_hash,
              :origin_region => origin_region.nil? ? nil : origin_region.to_hash,
              :destination_region => destination_region.nil? ? nil : destination_region.to_hash,
              :interval_unit => interval_unit.nil? ? nil : interval_unit.value
            }
          end

        end

        # Tax identifier could be associated to a merchant of record entity.
        class EntityIdentifier

          attr_reader :name, :number, :issuing_country

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:name, :number], 'EntityIdentifier')
            @name = (x = opts.delete(:name); x.is_a?(::Io::Flow::V0::Models::EntityIdentifierType) ? x : ::Io::Flow::V0::Models::EntityIdentifierType.apply(x))
            @number = HttpClient::Preconditions.assert_class('number', opts.delete(:number), String)
            @issuing_country = (x = opts.delete(:issuing_country); x.nil? ? nil : HttpClient::Preconditions.assert_class('issuing_country', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            EntityIdentifier.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :name => name.value,
              :number => number,
              :issuing_country => issuing_country
            }
          end

        end

        class EstimatedDimensions

          attr_reader :depth, :length, :weight, :width

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:depth, :length, :weight, :width], 'EstimatedDimensions')
            @depth = (x = opts.delete(:depth); x.is_a?(::Io::Flow::V0::Models::Measurement) ? x : ::Io::Flow::V0::Models::Measurement.new(x))
            @length = (x = opts.delete(:length); x.is_a?(::Io::Flow::V0::Models::Measurement) ? x : ::Io::Flow::V0::Models::Measurement.new(x))
            @weight = (x = opts.delete(:weight); x.is_a?(::Io::Flow::V0::Models::Measurement) ? x : ::Io::Flow::V0::Models::Measurement.new(x))
            @width = (x = opts.delete(:width); x.is_a?(::Io::Flow::V0::Models::Measurement) ? x : ::Io::Flow::V0::Models::Measurement.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            EstimatedDimensions.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :depth => depth.to_hash,
              :length => length.to_hash,
              :weight => weight.to_hash,
              :width => width.to_hash
            }
          end

        end

        # Range of time given a from and to number and the unit. For example: 1-4 hours
        # or 4-7 days
        class EstimatedWindow

          attr_reader :from, :to, :unit

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:from, :to, :unit], 'EstimatedWindow')
            @from = HttpClient::Preconditions.assert_class('from', opts.delete(:from), Integer)
            @to = HttpClient::Preconditions.assert_class('to', opts.delete(:to), Integer)
            @unit = (x = opts.delete(:unit); x.is_a?(::Io::Flow::V0::Models::UnitOfTime) ? x : ::Io::Flow::V0::Models::UnitOfTime.apply(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            EstimatedWindow.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :from => from,
              :to => to,
              :unit => unit.value
            }
          end

        end

        # Represents an exception to the schedule of a center.
        class Exception

          attr_reader :type, :datetime_range

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:type, :datetime_range], 'Exception')
            @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::V0::Models::ExceptionType) ? x : ::Io::Flow::V0::Models::ExceptionType.apply(x))
            @datetime_range = (x = opts.delete(:datetime_range); x.is_a?(::Io::Flow::V0::Models::DatetimeRange) ? x : ::Io::Flow::V0::Models::DatetimeRange.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            Exception.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :type => type.value,
              :datetime_range => datetime_range.to_hash
            }
          end

        end

        # A global exclusion rule allows the user to select 1 or more items by query and
        # to globally exclude those items from sale in one or more regions.
        class ExclusionRule

          attr_reader :id, :q, :query, :regions, :status, :description, :statistics

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :q, :query, :regions, :status, :statistics], 'ExclusionRule')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @q = HttpClient::Preconditions.assert_class('q', opts.delete(:q), String)
            @query = (x = opts.delete(:query); x.is_a?(::Io::Flow::V0::Models::Query) ? x : ::Io::Flow::V0::Models::Query.new(x))
            @regions = HttpClient::Preconditions.assert_class('regions', opts.delete(:regions), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::Region) ? x : ::Io::Flow::V0::Models::Region.new(x)) }
            @status = (x = opts.delete(:status); x.is_a?(::Io::Flow::V0::Models::SubcatalogItemStatus) ? x : ::Io::Flow::V0::Models::SubcatalogItemStatus.apply(x))
            @description = (x = opts.delete(:description); x.nil? ? nil : HttpClient::Preconditions.assert_class('description', x, String))
            @statistics = (x = opts.delete(:statistics); x.is_a?(::Io::Flow::V0::Models::ExclusionRuleStatistic) ? x : ::Io::Flow::V0::Models::ExclusionRuleStatistic.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ExclusionRule.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :q => q,
              :query => query.to_hash,
              :regions => regions.map { |o| o.to_hash },
              :status => status.value,
              :description => description,
              :statistics => statistics.to_hash
            }
          end

        end

        class ExclusionRuleForm

          attr_reader :q, :regions, :description

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:q, :regions], 'ExclusionRuleForm')
            @q = HttpClient::Preconditions.assert_class('q', opts.delete(:q), String)
            @regions = HttpClient::Preconditions.assert_class('regions', opts.delete(:regions), Array).map { |v| HttpClient::Preconditions.assert_class('regions', v, String) }
            @description = (x = opts.delete(:description); x.nil? ? nil : HttpClient::Preconditions.assert_class('description', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ExclusionRuleForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :q => q,
              :regions => regions,
              :description => description
            }
          end

        end

        class ExclusionRuleStatistic

          attr_reader :state, :number_items

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:state, :number_items], 'ExclusionRuleStatistic')
            @state = (x = opts.delete(:state); x.is_a?(::Io::Flow::V0::Models::ExclusionRuleState) ? x : ::Io::Flow::V0::Models::ExclusionRuleState.apply(x))
            @number_items = HttpClient::Preconditions.assert_class('number_items', opts.delete(:number_items), Integer)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ExclusionRuleStatistic.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :state => state.value,
              :number_items => number_items
            }
          end

        end

        class ExclusionRuleVersion

          attr_reader :id, :timestamp, :type, :exclusion_rule

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :timestamp, :type, :exclusion_rule], 'ExclusionRuleVersion')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::V0::Models::ChangeType) ? x : ::Io::Flow::V0::Models::ChangeType.apply(x))
            @exclusion_rule = (x = opts.delete(:exclusion_rule); x.is_a?(::Io::Flow::V0::Models::ExclusionRule) ? x : ::Io::Flow::V0::Models::ExclusionRule.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ExclusionRuleVersion.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :timestamp => timestamp,
              :type => type.value,
              :exclusion_rule => exclusion_rule.to_hash
            }
          end

        end

        # Defines the filters that can be applied when requesting an exclusion rule data
        # export
        class ExclusionRulesExportType < ExportType

          attr_reader :states, :sort

          def initialize(incoming={})
            super(:discriminator => ExportType::Types::EXCLUSION_RULES_EXPORT_TYPE)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @states = (x = opts.delete(:states); x.nil? ? nil : HttpClient::Preconditions.assert_class('states', x, Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::ExclusionRuleState) ? x : ::Io::Flow::V0::Models::ExclusionRuleState.apply(x)) })
            @sort = (x = opts.delete(:sort); x.nil? ? nil : HttpClient::Preconditions.assert_class('sort', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ExclusionRulesExportType.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :states => states.nil? ? nil : states.map { |o| o.value },
              :sort => sort
            }
          end

        end

        # Experiences define a local experience for a given geographic region
        class Experience < ExpandableExperience

          attr_reader :id, :key, :name, :delivered_duty, :region, :country, :currency, :language, :measurement_system, :subcatalog, :position, :settings, :status

          def initialize(incoming={})
            super(:discriminator => ExpandableExperience::Types::EXPERIENCE)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :key, :name, :delivered_duty, :region, :country, :currency, :language, :measurement_system, :subcatalog, :position, :settings], 'Experience')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @key = HttpClient::Preconditions.assert_class('key', opts.delete(:key), String)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
            @delivered_duty = (x = opts.delete(:delivered_duty); x.is_a?(::Io::Flow::V0::Models::DeliveredDuty) ? x : ::Io::Flow::V0::Models::DeliveredDuty.apply(x))
            @region = (x = opts.delete(:region); x.is_a?(::Io::Flow::V0::Models::RegionReference) ? x : ::Io::Flow::V0::Models::RegionReference.new(x))
            @country = HttpClient::Preconditions.assert_class('country', opts.delete(:country), String)
            @currency = HttpClient::Preconditions.assert_class('currency', opts.delete(:currency), String)
            @language = HttpClient::Preconditions.assert_class('language', opts.delete(:language), String)
            @measurement_system = (x = opts.delete(:measurement_system); x.is_a?(::Io::Flow::V0::Models::MeasurementSystem) ? x : ::Io::Flow::V0::Models::MeasurementSystem.apply(x))
            @subcatalog = (x = opts.delete(:subcatalog); x.is_a?(::Io::Flow::V0::Models::SubcatalogReference) ? x : ::Io::Flow::V0::Models::SubcatalogReference.new(x))
            @position = HttpClient::Preconditions.assert_class('position', opts.delete(:position), Integer)
            @settings = (x = opts.delete(:settings); x.is_a?(::Io::Flow::V0::Models::ExperienceSettings) ? x : ::Io::Flow::V0::Models::ExperienceSettings.new(x))
            @status = (x = opts.delete(:status); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::ExperienceStatus) ? x : ::Io::Flow::V0::Models::ExperienceStatus.apply(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            Experience.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :id => id,
              :key => key,
              :name => name,
              :delivered_duty => delivered_duty.value,
              :region => region.to_hash,
              :country => country,
              :currency => currency,
              :language => language,
              :measurement_system => measurement_system.value,
              :subcatalog => subcatalog.to_hash,
              :position => position,
              :settings => settings.to_hash,
              :status => status.nil? ? nil : status.value
            }
          end

        end

        class ExperienceCheckoutConfigurationSettings

          attr_reader :configuration

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:configuration], 'ExperienceCheckoutConfigurationSettings')
            @configuration = (x = opts.delete(:configuration); x.is_a?(::Io::Flow::V0::Models::ExperienceConfigurationReference) ? x : ::Io::Flow::V0::Models::ExperienceConfigurationReference.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ExperienceCheckoutConfigurationSettings.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :configuration => configuration.to_hash
            }
          end

        end

        class ExperienceCheckoutSettings

          attr_reader :id, :experience, :checkout_configuration

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :experience, :checkout_configuration], 'ExperienceCheckoutSettings')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @experience = (x = opts.delete(:experience); x.is_a?(::Io::Flow::V0::Models::ExperienceOverview) ? x : ::Io::Flow::V0::Models::ExperienceOverview.new(x))
            @checkout_configuration = (x = opts.delete(:checkout_configuration); x.is_a?(::Io::Flow::V0::Models::ExperienceConfigurationReference) ? x : ::Io::Flow::V0::Models::ExperienceConfigurationReference.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ExperienceCheckoutSettings.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :experience => experience.to_hash,
              :checkout_configuration => checkout_configuration.to_hash
            }
          end

        end

        class ExperienceCheckoutSettingsForm

          attr_reader :checkout_configuration_id

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:checkout_configuration_id], 'ExperienceCheckoutSettingsForm')
            @checkout_configuration_id = HttpClient::Preconditions.assert_class('checkout_configuration_id', opts.delete(:checkout_configuration_id), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ExperienceCheckoutSettingsForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :checkout_configuration_id => checkout_configuration_id
            }
          end

        end

        # Represents a request to clone an experience.
        class ExperienceClone

          attr_reader :id, :source_experience, :cloned_experience, :status

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :source_experience, :status], 'ExperienceClone')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @source_experience = (x = opts.delete(:source_experience); x.is_a?(::Io::Flow::V0::Models::ExperienceReference) ? x : ::Io::Flow::V0::Models::ExperienceReference.new(x))
            @cloned_experience = (x = opts.delete(:cloned_experience); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::ExperienceReference) ? x : ::Io::Flow::V0::Models::ExperienceReference.new(x)))
            @status = (x = opts.delete(:status); x.is_a?(::Io::Flow::V0::Models::ExperienceCloneStatus) ? x : ::Io::Flow::V0::Models::ExperienceCloneStatus.apply(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ExperienceClone.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :source_experience => source_experience.to_hash,
              :cloned_experience => cloned_experience.nil? ? nil : cloned_experience.to_hash,
              :status => status.value
            }
          end

        end

        # Form for cloning an experience
        class ExperienceCloneForm

          attr_reader :name

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = (x = opts.delete(:name); x.nil? ? nil : HttpClient::Preconditions.assert_class('name', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ExperienceCloneForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :name => name
            }
          end

        end

        class ExperienceConfigurationReference

          attr_reader :id

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id], 'ExperienceConfigurationReference')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ExperienceConfigurationReference.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id
            }
          end

        end

        class ExperienceCurrencyFormat

          attr_reader :symbol, :label_formatters

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:symbol, :label_formatters], 'ExperienceCurrencyFormat')
            @symbol = (x = opts.delete(:symbol); x.is_a?(::Io::Flow::V0::Models::CurrencySymbolFormat) ? x : ::Io::Flow::V0::Models::CurrencySymbolFormat.apply(x))
            @label_formatters = HttpClient::Preconditions.assert_class('label_formatters', opts.delete(:label_formatters), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::CurrencyLabelFormatter) ? x : ::Io::Flow::V0::Models::CurrencyLabelFormatter.apply(x)) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ExperienceCurrencyFormat.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :symbol => symbol.value,
              :label_formatters => label_formatters.map { |o| o.value }
            }
          end

        end

        class ExperienceCurrencyFormatForm

          attr_reader :symbol, :label_formatters

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:symbol, :label_formatters], 'ExperienceCurrencyFormatForm')
            @symbol = (x = opts.delete(:symbol); x.is_a?(::Io::Flow::V0::Models::CurrencySymbolFormat) ? x : ::Io::Flow::V0::Models::CurrencySymbolFormat.apply(x))
            @label_formatters = HttpClient::Preconditions.assert_class('label_formatters', opts.delete(:label_formatters), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::CurrencyLabelFormatter) ? x : ::Io::Flow::V0::Models::CurrencyLabelFormatter.apply(x)) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ExperienceCurrencyFormatForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :symbol => symbol.value,
              :label_formatters => label_formatters.map { |o| o.value }
            }
          end

        end

        # Defines a set of defaults for a given organization and region
        class ExperienceDefaults

          attr_reader :key, :name, :delivered_duty, :country, :currency, :language, :measurement_system

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:key, :name, :delivered_duty, :country, :currency, :language, :measurement_system], 'ExperienceDefaults')
            @key = HttpClient::Preconditions.assert_class('key', opts.delete(:key), String)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
            @delivered_duty = (x = opts.delete(:delivered_duty); x.is_a?(::Io::Flow::V0::Models::DeliveredDuty) ? x : ::Io::Flow::V0::Models::DeliveredDuty.apply(x))
            @country = HttpClient::Preconditions.assert_class('country', opts.delete(:country), String)
            @currency = HttpClient::Preconditions.assert_class('currency', opts.delete(:currency), String)
            @language = HttpClient::Preconditions.assert_class('language', opts.delete(:language), String)
            @measurement_system = (x = opts.delete(:measurement_system); x.is_a?(::Io::Flow::V0::Models::MeasurementSystem) ? x : ::Io::Flow::V0::Models::MeasurementSystem.apply(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ExperienceDefaults.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :key => key,
              :name => name,
              :delivered_duty => delivered_duty.value,
              :country => country,
              :currency => currency,
              :language => language,
              :measurement_system => measurement_system.value
            }
          end

        end

        class ExperienceDeleted < Event

          attr_reader :event_id, :timestamp, :organization, :key, :subcatalog_id

          def initialize(incoming={})
            super(:discriminator => Event::Types::EXPERIENCE_DELETED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :key, :subcatalog_id], 'ExperienceDeleted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @key = HttpClient::Preconditions.assert_class('key', opts.delete(:key), String)
            @subcatalog_id = HttpClient::Preconditions.assert_class('subcatalog_id', opts.delete(:subcatalog_id), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ExperienceDeleted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :key => key,
              :subcatalog_id => subcatalog_id
            }
          end

        end

        class ExperienceDeletedV2 < Event

          attr_reader :event_id, :timestamp, :organization, :experience

          def initialize(incoming={})
            super(:discriminator => Event::Types::EXPERIENCE_DELETED_V2)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :experience], 'ExperienceDeletedV2')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @experience = (x = opts.delete(:experience); x.is_a?(::Io::Flow::V0::Models::Experience) ? x : ::Io::Flow::V0::Models::Experience.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ExperienceDeletedV2.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :experience => experience.to_hash
            }
          end

        end

        # Defines the filters that can be applied when requesting an experience data
        # export
        class ExperienceExportType < ExportType

          attr_reader :organization_id, :ids, :keys

          def initialize(incoming={})
            super(:discriminator => ExportType::Types::EXPERIENCE_EXPORT_TYPE)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:organization_id], 'ExperienceExportType')
            @organization_id = HttpClient::Preconditions.assert_class('organization_id', opts.delete(:organization_id), String)
            @ids = (x = opts.delete(:ids); x.nil? ? nil : HttpClient::Preconditions.assert_class('ids', x, Array).map { |v| HttpClient::Preconditions.assert_class('ids', v, String) })
            @keys = (x = opts.delete(:keys); x.nil? ? nil : HttpClient::Preconditions.assert_class('keys', x, Array).map { |v| HttpClient::Preconditions.assert_class('keys', v, String) })
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ExperienceExportType.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :organization_id => organization_id,
              :ids => ids.nil? ? nil : ids,
              :keys => keys.nil? ? nil : keys
            }
          end

        end

        # Experiences define a local experience for a given geographic region
        class ExperienceForm

          attr_reader :region_id, :name, :delivered_duty, :country, :currency, :language, :key, :position, :measurement_system, :subcatalog_id

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:region_id, :name], 'ExperienceForm')
            @region_id = HttpClient::Preconditions.assert_class('region_id', opts.delete(:region_id), String)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
            @delivered_duty = (x = opts.delete(:delivered_duty); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::DeliveredDuty) ? x : ::Io::Flow::V0::Models::DeliveredDuty.apply(x)))
            @country = (x = opts.delete(:country); x.nil? ? nil : HttpClient::Preconditions.assert_class('country', x, String))
            @currency = (x = opts.delete(:currency); x.nil? ? nil : HttpClient::Preconditions.assert_class('currency', x, String))
            @language = (x = opts.delete(:language); x.nil? ? nil : HttpClient::Preconditions.assert_class('language', x, String))
            @key = (x = opts.delete(:key); x.nil? ? nil : HttpClient::Preconditions.assert_class('key', x, String))
            @position = (x = opts.delete(:position); x.nil? ? nil : HttpClient::Preconditions.assert_class('position', x, Integer))
            @measurement_system = (x = opts.delete(:measurement_system); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::MeasurementSystem) ? x : ::Io::Flow::V0::Models::MeasurementSystem.apply(x)))
            @subcatalog_id = (x = opts.delete(:subcatalog_id); x.nil? ? nil : HttpClient::Preconditions.assert_class('subcatalog_id', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ExperienceForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :region_id => region_id,
              :name => name,
              :delivered_duty => delivered_duty.nil? ? nil : delivered_duty.value,
              :country => country,
              :currency => currency,
              :language => language,
              :key => key,
              :position => position,
              :measurement_system => measurement_system.nil? ? nil : measurement_system.value,
              :subcatalog_id => subcatalog_id
            }
          end

        end

        # Experience Geo summarizes an experience along with geographic info
        class ExperienceGeo

          attr_reader :key, :name, :region, :country, :currency, :language, :measurement_system

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:key, :name, :region, :country, :currency, :language, :measurement_system], 'ExperienceGeo')
            @key = HttpClient::Preconditions.assert_class('key', opts.delete(:key), String)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
            @region = (x = opts.delete(:region); x.is_a?(::Io::Flow::V0::Models::RegionReference) ? x : ::Io::Flow::V0::Models::RegionReference.new(x))
            @country = HttpClient::Preconditions.assert_class('country', opts.delete(:country), String)
            @currency = HttpClient::Preconditions.assert_class('currency', opts.delete(:currency), String)
            @language = HttpClient::Preconditions.assert_class('language', opts.delete(:language), String)
            @measurement_system = (x = opts.delete(:measurement_system); x.is_a?(::Io::Flow::V0::Models::MeasurementSystem) ? x : ::Io::Flow::V0::Models::MeasurementSystem.apply(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ExperienceGeo.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :key => key,
              :name => name,
              :region => region.to_hash,
              :country => country,
              :currency => currency,
              :language => language,
              :measurement_system => measurement_system.value
            }
          end

        end

        class ExperienceLogisticsSettings

          attr_reader :id, :experience, :shipping_configuration

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :experience, :shipping_configuration], 'ExperienceLogisticsSettings')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @experience = (x = opts.delete(:experience); x.is_a?(::Io::Flow::V0::Models::ExperienceOverview) ? x : ::Io::Flow::V0::Models::ExperienceOverview.new(x))
            @shipping_configuration = (x = opts.delete(:shipping_configuration); x.is_a?(::Io::Flow::V0::Models::ShippingConfigurationReference) ? x : ::Io::Flow::V0::Models::ShippingConfigurationReference.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ExperienceLogisticsSettings.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :experience => experience.to_hash,
              :shipping_configuration => shipping_configuration.to_hash
            }
          end

        end

        class ExperienceLogisticsSettingsDeleted < Event

          attr_reader :event_id, :timestamp, :organization, :logistics_settings

          def initialize(incoming={})
            super(:discriminator => Event::Types::EXPERIENCE_LOGISTICS_SETTINGS_DELETED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :logistics_settings], 'ExperienceLogisticsSettingsDeleted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @logistics_settings = (x = opts.delete(:logistics_settings); x.is_a?(::Io::Flow::V0::Models::ExperienceLogisticsSettings) ? x : ::Io::Flow::V0::Models::ExperienceLogisticsSettings.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ExperienceLogisticsSettingsDeleted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :logistics_settings => logistics_settings.to_hash
            }
          end

        end

        # Assigns logistics related settings to an experience
        class ExperienceLogisticsSettingsPutForm

          attr_reader :shipping_configuration_key

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:shipping_configuration_key], 'ExperienceLogisticsSettingsPutForm')
            @shipping_configuration_key = HttpClient::Preconditions.assert_class('shipping_configuration_key', opts.delete(:shipping_configuration_key), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ExperienceLogisticsSettingsPutForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :shipping_configuration_key => shipping_configuration_key
            }
          end

        end

        class ExperienceLogisticsSettingsUpserted < Event

          attr_reader :event_id, :timestamp, :organization, :logistics_settings

          def initialize(incoming={})
            super(:discriminator => Event::Types::EXPERIENCE_LOGISTICS_SETTINGS_UPSERTED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :logistics_settings], 'ExperienceLogisticsSettingsUpserted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @logistics_settings = (x = opts.delete(:logistics_settings); x.is_a?(::Io::Flow::V0::Models::ExperienceLogisticsSettings) ? x : ::Io::Flow::V0::Models::ExperienceLogisticsSettings.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ExperienceLogisticsSettingsUpserted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :logistics_settings => logistics_settings.to_hash
            }
          end

        end

        class ExperienceLogisticsSummary

          attr_reader :outbound, :return_

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @outbound = (x = opts.delete(:outbound); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::ExperienceLogisticsTierSummary) ? x : ::Io::Flow::V0::Models::ExperienceLogisticsTierSummary.new(x)))
            @return_ = (x = opts.delete(:return); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::ExperienceLogisticsTierSummary) ? x : ::Io::Flow::V0::Models::ExperienceLogisticsTierSummary.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ExperienceLogisticsSummary.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :outbound => outbound.nil? ? nil : outbound.to_hash,
              :return => return_.nil? ? nil : return_.to_hash
            }
          end

        end

        class ExperienceLogisticsTierSummary

          attr_reader :prices

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:prices], 'ExperienceLogisticsTierSummary')
            @prices = (x = opts.delete(:prices); x.is_a?(::Io::Flow::V0::Models::ExperienceLogisticsTierSummaryPrices) ? x : ::Io::Flow::V0::Models::ExperienceLogisticsTierSummaryPrices.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ExperienceLogisticsTierSummary.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :prices => prices.to_hash
            }
          end

        end

        class ExperienceLogisticsTierSummaryPrices

          attr_reader :minimum

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:minimum], 'ExperienceLogisticsTierSummaryPrices')
            @minimum = (x = opts.delete(:minimum); x.is_a?(::Io::Flow::V0::Models::Price) ? x : ::Io::Flow::V0::Models::Price.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ExperienceLogisticsTierSummaryPrices.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :minimum => minimum.to_hash
            }
          end

        end

        class ExperienceOverview

          attr_reader :id, :key

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :key], 'ExperienceOverview')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @key = HttpClient::Preconditions.assert_class('key', opts.delete(:key), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ExperienceOverview.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :key => key
            }
          end

        end

        class ExperiencePaymentMethodRule

          attr_reader :experience_key, :payment_method_rules

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:experience_key, :payment_method_rules], 'ExperiencePaymentMethodRule')
            @experience_key = HttpClient::Preconditions.assert_class('experience_key', opts.delete(:experience_key), String)
            @payment_method_rules = HttpClient::Preconditions.assert_class('payment_method_rules', opts.delete(:payment_method_rules), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::PaymentMethodRule) ? x : ::Io::Flow::V0::Models::PaymentMethodRule.new(x)) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ExperiencePaymentMethodRule.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :experience_key => experience_key,
              :payment_method_rules => payment_method_rules.map { |o| o.to_hash }
            }
          end

        end

        class ExperiencePaymentMethodRuleForm

          attr_reader :payment_method_id, :tags, :q

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:payment_method_id, :tags], 'ExperiencePaymentMethodRuleForm')
            @payment_method_id = HttpClient::Preconditions.assert_class('payment_method_id', opts.delete(:payment_method_id), String)
            @tags = HttpClient::Preconditions.assert_class('tags', opts.delete(:tags), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::ExperiencePaymentMethodTag) ? x : ::Io::Flow::V0::Models::ExperiencePaymentMethodTag.apply(x)) }
            @q = (x = opts.delete(:q); x.nil? ? nil : HttpClient::Preconditions.assert_class('q', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ExperiencePaymentMethodRuleForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :payment_method_id => payment_method_id,
              :tags => tags.map { |o| o.value },
              :q => q
            }
          end

        end

        class ExperiencePriceBookMapping

          attr_reader :id, :experience, :price_book, :position

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :experience, :price_book, :position], 'ExperiencePriceBookMapping')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @experience = (x = opts.delete(:experience); x.is_a?(::Io::Flow::V0::Models::ExperienceReference) ? x : ::Io::Flow::V0::Models::ExperienceReference.new(x))
            @price_book = (x = opts.delete(:price_book); x.is_a?(::Io::Flow::V0::Models::PriceBookReference) ? x : ::Io::Flow::V0::Models::PriceBookReference.new(x))
            @position = HttpClient::Preconditions.assert_class('position', opts.delete(:position), Integer)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ExperiencePriceBookMapping.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :experience => experience.to_hash,
              :price_book => price_book.to_hash,
              :position => position
            }
          end

        end

        class ExperiencePriceBookMappingDeleted < Event

          attr_reader :event_id, :timestamp, :organization, :id

          def initialize(incoming={})
            super(:discriminator => Event::Types::EXPERIENCE_PRICE_BOOK_MAPPING_DELETED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :id], 'ExperiencePriceBookMappingDeleted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ExperiencePriceBookMappingDeleted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :id => id
            }
          end

        end

        class ExperiencePriceBookMappingForm

          attr_reader :price_book_key, :position

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:price_book_key], 'ExperiencePriceBookMappingForm')
            @price_book_key = HttpClient::Preconditions.assert_class('price_book_key', opts.delete(:price_book_key), String)
            @position = (x = opts.delete(:position); x.nil? ? nil : HttpClient::Preconditions.assert_class('position', x, Integer))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ExperiencePriceBookMappingForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :price_book_key => price_book_key,
              :position => position
            }
          end

        end

        class ExperiencePriceBookMappingPutForm

          attr_reader :price_books

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:price_books], 'ExperiencePriceBookMappingPutForm')
            @price_books = HttpClient::Preconditions.assert_class('price_books', opts.delete(:price_books), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::ExperiencePriceBookMappingForm) ? x : ::Io::Flow::V0::Models::ExperiencePriceBookMappingForm.new(x)) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ExperiencePriceBookMappingPutForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :price_books => price_books.map { |o| o.to_hash }
            }
          end

        end

        class ExperiencePriceBookMappingUpserted < Event

          attr_reader :event_id, :timestamp, :organization, :experience_price_book_mapping

          def initialize(incoming={})
            super(:discriminator => Event::Types::EXPERIENCE_PRICE_BOOK_MAPPING_UPSERTED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :experience_price_book_mapping], 'ExperiencePriceBookMappingUpserted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @experience_price_book_mapping = (x = opts.delete(:experience_price_book_mapping); x.is_a?(::Io::Flow::V0::Models::ExperiencePriceBookMapping) ? x : ::Io::Flow::V0::Models::ExperiencePriceBookMapping.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ExperiencePriceBookMappingUpserted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :experience_price_book_mapping => experience_price_book_mapping.to_hash
            }
          end

        end

        class ExperiencePriceConversion

          attr_reader :request, :price

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:request, :price], 'ExperiencePriceConversion')
            @request = (x = opts.delete(:request); x.is_a?(::Io::Flow::V0::Models::ExperiencePriceConversionRequest) ? x : ::Io::Flow::V0::Models::ExperiencePriceConversionRequest.new(x))
            @price = (x = opts.delete(:price); x.is_a?(::Io::Flow::V0::Models::PriceWithBase) ? x : ::Io::Flow::V0::Models::PriceWithBase.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ExperiencePriceConversion.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :request => request.to_hash,
              :price => price.to_hash
            }
          end

        end

        class ExperiencePriceConversionRequest

          attr_reader :value, :base, :local

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:value, :base, :local], 'ExperiencePriceConversionRequest')
            @value = HttpClient::Preconditions.assert_class('value', HttpClient::Helper.to_big_decimal(opts.delete(:value)), BigDecimal)
            @base = HttpClient::Preconditions.assert_class('base', opts.delete(:base), String)
            @local = HttpClient::Preconditions.assert_class('local', opts.delete(:local), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ExperiencePriceConversionRequest.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :value => value.to_f.to_s,
              :base => base,
              :local => local
            }
          end

        end

        # Conversion of a price from the organization's base currency into a local
        # currency, using display rules suitable for price facets in search.
        class ExperiencePriceConversionResponse

          attr_reader :prices

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:prices], 'ExperiencePriceConversionResponse')
            @prices = HttpClient::Preconditions.assert_class('prices', opts.delete(:prices), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::ExperiencePriceConversion) ? x : ::Io::Flow::V0::Models::ExperiencePriceConversion.new(x)) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ExperiencePriceConversionResponse.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :prices => prices.map { |o| o.to_hash }
            }
          end

        end

        class ExperiencePriceFacetConversion

          attr_reader :request, :price

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:request, :price], 'ExperiencePriceFacetConversion')
            @request = (x = opts.delete(:request); x.is_a?(::Io::Flow::V0::Models::ExperiencePriceFacetConversionRequest) ? x : ::Io::Flow::V0::Models::ExperiencePriceFacetConversionRequest.new(x))
            @price = (x = opts.delete(:price); x.is_a?(::Io::Flow::V0::Models::PriceWithBase) ? x : ::Io::Flow::V0::Models::PriceWithBase.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ExperiencePriceFacetConversion.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :request => request.to_hash,
              :price => price.to_hash
            }
          end

        end

        class ExperiencePriceFacetConversionRequest

          attr_reader :boundary, :value, :base, :local

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:boundary, :value, :base, :local], 'ExperiencePriceFacetConversionRequest')
            @boundary = (x = opts.delete(:boundary); x.is_a?(::Io::Flow::V0::Models::PriceFacetBoundary) ? x : ::Io::Flow::V0::Models::PriceFacetBoundary.apply(x))
            @value = HttpClient::Preconditions.assert_class('value', HttpClient::Helper.to_big_decimal(opts.delete(:value)), BigDecimal)
            @base = HttpClient::Preconditions.assert_class('base', opts.delete(:base), String)
            @local = HttpClient::Preconditions.assert_class('local', opts.delete(:local), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ExperiencePriceFacetConversionRequest.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :boundary => boundary.value,
              :value => value.to_f.to_s,
              :base => base,
              :local => local
            }
          end

        end

        # Conversion of a price from the organization's base currency into a local
        # currency, using display rules suitable for price facets in search.
        class ExperiencePriceFacetConversionResponse

          attr_reader :facets

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:facets], 'ExperiencePriceFacetConversionResponse')
            @facets = HttpClient::Preconditions.assert_class('facets', opts.delete(:facets), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::ExperiencePriceFacetConversion) ? x : ::Io::Flow::V0::Models::ExperiencePriceFacetConversion.new(x)) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ExperiencePriceFacetConversionResponse.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :facets => facets.map { |o| o.to_hash }
            }
          end

        end

        class ExperienceReference < ExpandableExperience

          attr_reader :key

          def initialize(incoming={})
            super(:discriminator => ExpandableExperience::Types::EXPERIENCE_REFERENCE)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:key], 'ExperienceReference')
            @key = HttpClient::Preconditions.assert_class('key', opts.delete(:key), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ExperienceReference.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :key => key
            }
          end

        end

        class ExperienceSettings

          attr_reader :delivered_duty, :pricing_settings, :logistics_settings, :checkout_settings

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:delivered_duty], 'ExperienceSettings')
            @delivered_duty = (x = opts.delete(:delivered_duty); x.is_a?(::Io::Flow::V0::Models::DeliveredDutySetting) ? x : ::Io::Flow::V0::Models::DeliveredDutySetting.new(x))
            @pricing_settings = (x = opts.delete(:pricing_settings); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::PricingSettings) ? x : ::Io::Flow::V0::Models::PricingSettings.new(x)))
            @logistics_settings = (x = opts.delete(:logistics_settings); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::LogisticsSettings) ? x : ::Io::Flow::V0::Models::LogisticsSettings.new(x)))
            @checkout_settings = (x = opts.delete(:checkout_settings); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::ExperienceCheckoutConfigurationSettings) ? x : ::Io::Flow::V0::Models::ExperienceCheckoutConfigurationSettings.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ExperienceSettings.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :delivered_duty => delivered_duty.to_hash,
              :pricing_settings => pricing_settings.nil? ? nil : pricing_settings.to_hash,
              :logistics_settings => logistics_settings.nil? ? nil : logistics_settings.to_hash,
              :checkout_settings => checkout_settings.nil? ? nil : checkout_settings.to_hash
            }
          end

        end

        # The experience status form is used to update the status of a particular
        # experience.
        class ExperienceStatusForm

          attr_reader :status

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:status], 'ExperienceStatusForm')
            @status = (x = opts.delete(:status); x.is_a?(::Io::Flow::V0::Models::ExperienceStatus) ? x : ::Io::Flow::V0::Models::ExperienceStatus.apply(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ExperienceStatusForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :status => status.value
            }
          end

        end

        # Some important fields related to experiences used in various APIs
        class ExperienceSummary

          attr_reader :id, :key, :name, :country, :currency, :language

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :key, :name], 'ExperienceSummary')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @key = HttpClient::Preconditions.assert_class('key', opts.delete(:key), String)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
            @country = (x = opts.delete(:country); x.nil? ? nil : HttpClient::Preconditions.assert_class('country', x, String))
            @currency = (x = opts.delete(:currency); x.nil? ? nil : HttpClient::Preconditions.assert_class('currency', x, String))
            @language = (x = opts.delete(:language); x.nil? ? nil : HttpClient::Preconditions.assert_class('language', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ExperienceSummary.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :key => key,
              :name => name,
              :country => country,
              :currency => currency,
              :language => language
            }
          end

        end

        class ExperienceUpserted < Event

          attr_reader :event_id, :timestamp, :organization, :key, :name, :delivered_duty, :subcatalog_id, :region_id, :country, :currency, :language, :measurement_system, :position, :status

          def initialize(incoming={})
            super(:discriminator => Event::Types::EXPERIENCE_UPSERTED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :key, :name, :delivered_duty, :subcatalog_id, :region_id, :country, :currency, :language, :measurement_system, :position], 'ExperienceUpserted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @key = HttpClient::Preconditions.assert_class('key', opts.delete(:key), String)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
            @delivered_duty = HttpClient::Preconditions.assert_class('delivered_duty', opts.delete(:delivered_duty), String)
            @subcatalog_id = HttpClient::Preconditions.assert_class('subcatalog_id', opts.delete(:subcatalog_id), String)
            @region_id = HttpClient::Preconditions.assert_class('region_id', opts.delete(:region_id), String)
            @country = HttpClient::Preconditions.assert_class('country', opts.delete(:country), String)
            @currency = HttpClient::Preconditions.assert_class('currency', opts.delete(:currency), String)
            @language = HttpClient::Preconditions.assert_class('language', opts.delete(:language), String)
            @measurement_system = HttpClient::Preconditions.assert_class('measurement_system', opts.delete(:measurement_system), String)
            @position = HttpClient::Preconditions.assert_class('position', opts.delete(:position), Integer)
            @status = (x = opts.delete(:status); x.nil? ? nil : HttpClient::Preconditions.assert_class('status', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ExperienceUpserted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :key => key,
              :name => name,
              :delivered_duty => delivered_duty,
              :subcatalog_id => subcatalog_id,
              :region_id => region_id,
              :country => country,
              :currency => currency,
              :language => language,
              :measurement_system => measurement_system,
              :position => position,
              :status => status
            }
          end

        end

        class ExperienceUpsertedV2 < Event

          attr_reader :event_id, :timestamp, :organization, :experience

          def initialize(incoming={})
            super(:discriminator => Event::Types::EXPERIENCE_UPSERTED_V2)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :experience], 'ExperienceUpsertedV2')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @experience = (x = opts.delete(:experience); x.is_a?(::Io::Flow::V0::Models::Experience) ? x : ::Io::Flow::V0::Models::Experience.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ExperienceUpsertedV2.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :experience => experience.to_hash
            }
          end

        end

        class ExperienceVersion

          attr_reader :id, :timestamp, :type, :experience

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :timestamp, :type, :experience], 'ExperienceVersion')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::V0::Models::ChangeType) ? x : ::Io::Flow::V0::Models::ChangeType.apply(x))
            @experience = (x = opts.delete(:experience); x.is_a?(::Io::Flow::V0::Models::Experience) ? x : ::Io::Flow::V0::Models::Experience.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ExperienceVersion.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :timestamp => timestamp,
              :type => type.value,
              :experience => experience.to_hash
            }
          end

        end

        # Experiment variant. Control or variant
        class ExperimentVariant

          attr_reader :key

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:key], 'ExperimentVariant')
            @key = HttpClient::Preconditions.assert_class('key', opts.delete(:key), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ExperimentVariant.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :key => key
            }
          end

        end

        # The month and year at which a card expires
        class Expiration

          attr_reader :month, :year

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:month, :year], 'Expiration')
            @month = HttpClient::Preconditions.assert_class('month', opts.delete(:month), Integer)
            @year = HttpClient::Preconditions.assert_class('year', opts.delete(:year), Integer)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            Expiration.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :month => month,
              :year => year
            }
          end

        end

        # Exports represent data extraction requests (e.g. download my catalog items to
        # a CSV file)
        class Export

          attr_reader :id, :type, :status, :organization_q, :created_at, :started_at, :completed_at, :url, :deliveries

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :type, :status, :organization_q, :created_at, :deliveries], 'Export')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::V0::Models::ExportType) ? x : ::Io::Flow::V0::Models::ExportType.from_json(x))
            @status = (x = opts.delete(:status); x.is_a?(::Io::Flow::V0::Models::ExportStatus) ? x : ::Io::Flow::V0::Models::ExportStatus.apply(x))
            @organization_q = HttpClient::Preconditions.assert_class('organization_q', opts.delete(:organization_q), String)
            @created_at = HttpClient::Preconditions.assert_class('created_at', HttpClient::Helper.to_date_time_iso8601(opts.delete(:created_at)), DateTime)
            @started_at = (x = opts.delete(:started_at); x.nil? ? nil : HttpClient::Preconditions.assert_class('started_at', HttpClient::Helper.to_date_time_iso8601(x), DateTime))
            @completed_at = (x = opts.delete(:completed_at); x.nil? ? nil : HttpClient::Preconditions.assert_class('completed_at', HttpClient::Helper.to_date_time_iso8601(x), DateTime))
            @url = (x = opts.delete(:url); x.nil? ? nil : HttpClient::Preconditions.assert_class('url', x, String))
            @deliveries = HttpClient::Preconditions.assert_class('deliveries', opts.delete(:deliveries), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::ExportDelivery) ? x : ::Io::Flow::V0::Models::ExportDelivery.from_json(x)) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            Export.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :type => type.to_hash,
              :status => status.value,
              :organization_q => organization_q,
              :created_at => created_at,
              :started_at => started_at,
              :completed_at => completed_at,
              :url => url,
              :deliveries => deliveries.map { |o| o.to_hash }
            }
          end

        end

        # Triggers an email notification once the requested export is ready
        class ExportDeliveryEmail < ExportDelivery

          attr_reader :email

          def initialize(incoming={})
            super(:discriminator => ExportDelivery::Types::EXPORT_DELIVERY_EMAIL)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:email], 'ExportDeliveryEmail')
            @email = HttpClient::Preconditions.assert_class('email', opts.delete(:email), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ExportDeliveryEmail.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :email => email
            }
          end

        end

        # Export forms are used to create exports. The export type defines both the type
        # of the export (e.g. the CSV File format) and the available parameters for each
        # export (e.g. the filters to apply to select the desired data).
        class ExportForm

          attr_reader :type, :emails, :organization_q

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:type], 'ExportForm')
            @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::V0::Models::ExportType) ? x : ::Io::Flow::V0::Models::ExportType.from_json(x))
            @emails = (x = opts.delete(:emails); x.nil? ? nil : HttpClient::Preconditions.assert_class('emails', x, Array).map { |v| HttpClient::Preconditions.assert_class('emails', v, String) })
            @organization_q = (x = opts.delete(:organization_q); x.nil? ? nil : HttpClient::Preconditions.assert_class('organization_q', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ExportForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :type => type.to_hash,
              :emails => emails.nil? ? nil : emails,
              :organization_q => organization_q
            }
          end

        end

        class ExportLocalizedItemPrices

          attr_reader :organization, :experience, :item, :prices, :status, :rates

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:organization, :experience, :item, :prices], 'ExportLocalizedItemPrices')
            @organization = (x = opts.delete(:organization); x.is_a?(::Io::Flow::V0::Models::OrganizationReference) ? x : ::Io::Flow::V0::Models::OrganizationReference.new(x))
            @experience = (x = opts.delete(:experience); x.is_a?(::Io::Flow::V0::Models::ExperienceSummary) ? x : ::Io::Flow::V0::Models::ExperienceSummary.new(x))
            @item = (x = opts.delete(:item); x.is_a?(::Io::Flow::V0::Models::CatalogItemReference) ? x : ::Io::Flow::V0::Models::CatalogItemReference.new(x))
            @prices = (x = opts.delete(:prices); x.is_a?(::Io::Flow::V0::Models::ExportLocalizedItemPricesDetail) ? x : ::Io::Flow::V0::Models::ExportLocalizedItemPricesDetail.new(x))
            @status = (x = opts.delete(:status); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::SubcatalogItemStatus) ? x : ::Io::Flow::V0::Models::SubcatalogItemStatus.apply(x)))
            @rates = (x = opts.delete(:rates); x.nil? ? nil : HttpClient::Preconditions.assert_class('rates', x, Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::Rate) ? x : ::Io::Flow::V0::Models::Rate.new(x)) })
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ExportLocalizedItemPrices.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :organization => organization.to_hash,
              :experience => experience.to_hash,
              :item => item.to_hash,
              :prices => prices.to_hash,
              :status => status.nil? ? nil : status.value,
              :rates => rates.nil? ? nil : rates.map { |o| o.to_hash }
            }
          end

        end

        class ExportLocalizedItemPricesDetail

          attr_reader :item, :vat, :duty, :shipping_price, :price_attributes

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:item, :price_attributes], 'ExportLocalizedItemPricesDetail')
            @item = (x = opts.delete(:item); x.is_a?(::Io::Flow::V0::Models::LocalizedItemPrice) ? x : ::Io::Flow::V0::Models::LocalizedItemPrice.new(x))
            @vat = (x = opts.delete(:vat); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::LocalizedItemVat) ? x : ::Io::Flow::V0::Models::LocalizedItemVat.new(x)))
            @duty = (x = opts.delete(:duty); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::LocalizedItemDuty) ? x : ::Io::Flow::V0::Models::LocalizedItemDuty.new(x)))
            @shipping_price = (x = opts.delete(:shipping_price); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Price) ? x : ::Io::Flow::V0::Models::Price.new(x)))
            @price_attributes = HttpClient::Preconditions.assert_class('price_attributes', opts.delete(:price_attributes), Hash).inject({}) { |h, d| h[d[0]] = (x = d[1]; x.is_a?(::Io::Flow::V0::Models::PriceWithBase) ? x : ::Io::Flow::V0::Models::PriceWithBase.new(x)); h }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ExportLocalizedItemPricesDetail.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :item => item.to_hash,
              :vat => vat.nil? ? nil : vat.to_hash,
              :duty => duty.nil? ? nil : duty.to_hash,
              :shipping_price => shipping_price.nil? ? nil : shipping_price.to_hash,
              :price_attributes => price_attributes.inject({}) { |hash, o| hash[o[0]] = o[1].nil? ? nil : o[1].to_hash; hash }
            }
          end

        end

        class ExportVersion

          attr_reader :id, :timestamp, :type, :export

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :timestamp, :type, :export], 'ExportVersion')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::V0::Models::ChangeType) ? x : ::Io::Flow::V0::Models::ChangeType.apply(x))
            @export = (x = opts.delete(:export); x.is_a?(::Io::Flow::V0::Models::Export) ? x : ::Io::Flow::V0::Models::Export.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ExportVersion.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :timestamp => timestamp,
              :type => type.value,
              :export => export.to_hash
            }
          end

        end

        class ExternalApiTimeoutReservationError < ReservationError

          attr_reader :messages

          def initialize(incoming={})
            super(:code => ReservationError::Types::EXTERNAL_API_TIMEOUT_RESERVATION_ERROR)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:messages], 'ExternalApiTimeoutReservationError')
            @messages = HttpClient::Preconditions.assert_class('messages', opts.delete(:messages), Array).map { |v| HttpClient::Preconditions.assert_class('messages', v, String) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ExternalApiTimeoutReservationError.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :messages => messages
            }
          end

        end

        class FeeWeight

          attr_reader :weight, :unit

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:weight, :unit], 'FeeWeight')
            @weight = HttpClient::Preconditions.assert_class('weight', HttpClient::Helper.to_big_decimal(opts.delete(:weight)), BigDecimal)
            @unit = (x = opts.delete(:unit); x.is_a?(::Io::Flow::V0::Models::UnitOfMeasurement) ? x : ::Io::Flow::V0::Models::UnitOfMeasurement.apply(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            FeeWeight.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :weight => weight.to_f.to_s,
              :unit => unit.value
            }
          end

        end

        class FieldValidationMax < FieldValidationRule

          attr_reader :length

          def initialize(incoming={})
            super(:discriminator => FieldValidationRule::Types::FIELD_VALIDATION_MAX)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:length], 'FieldValidationMax')
            @length = HttpClient::Preconditions.assert_class('length', opts.delete(:length), Integer)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            FieldValidationMax.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :length => length
            }
          end

        end

        class FieldValidationMin < FieldValidationRule

          attr_reader :length

          def initialize(incoming={})
            super(:discriminator => FieldValidationRule::Types::FIELD_VALIDATION_MIN)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:length], 'FieldValidationMin')
            @length = HttpClient::Preconditions.assert_class('length', opts.delete(:length), Integer)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            FieldValidationMin.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :length => length
            }
          end

        end

        class FieldValidationPattern < FieldValidationRule

          attr_reader :pattern

          def initialize(incoming={})
            super(:discriminator => FieldValidationRule::Types::FIELD_VALIDATION_PATTERN)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:pattern], 'FieldValidationPattern')
            @pattern = HttpClient::Preconditions.assert_class('pattern', opts.delete(:pattern), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            FieldValidationPattern.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :pattern => pattern
            }
          end

        end

        # Indicates a field is required
        class FieldValidationRequired < FieldValidationRule

          attr_reader :placeholder

          def initialize(incoming={})
            super(:discriminator => FieldValidationRule::Types::FIELD_VALIDATION_REQUIRED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @placeholder = (x = opts.delete(:placeholder); x.nil? ? nil : HttpClient::Preconditions.assert_class('placeholder', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            FieldValidationRequired.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :placeholder => placeholder
            }
          end

        end

        # Indicates a field is required if it is presented in the user interface
        class FieldValidationRequiredIfPresent < FieldValidationRule

          attr_reader :placeholder

          def initialize(incoming={})
            super(:discriminator => FieldValidationRule::Types::FIELD_VALIDATION_REQUIRED_IF_PRESENT)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @placeholder = (x = opts.delete(:placeholder); x.nil? ? nil : HttpClient::Preconditions.assert_class('placeholder', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            FieldValidationRequiredIfPresent.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :placeholder => placeholder
            }
          end

        end

        # Rule outcome where shipping surfaced in quote is pre-defined flat rate
        class FlatRate < TierRuleOutcome

          attr_reader :price, :zero_amount_indicator

          def initialize(incoming={})
            super(:discriminator => TierRuleOutcome::Types::FLAT_RATE)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:price], 'FlatRate')
            @price = (x = opts.delete(:price); x.is_a?(::Io::Flow::V0::Models::Price) ? x : ::Io::Flow::V0::Models::Price.new(x))
            @zero_amount_indicator = (x = opts.delete(:zero_amount_indicator); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::ZeroAmountIndicator) ? x : ::Io::Flow::V0::Models::ZeroAmountIndicator.apply(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            FlatRate.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :price => price.to_hash,
              :zero_amount_indicator => zero_amount_indicator.nil? ? nil : zero_amount_indicator.value
            }
          end

        end

        class FlatRateForm < TierRuleOutcomeForm

          attr_reader :price, :zero_amount_indicator

          def initialize(incoming={})
            super(:discriminator => TierRuleOutcomeForm::Types::FLAT_RATE_FORM)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:price], 'FlatRateForm')
            @price = (x = opts.delete(:price); x.is_a?(::Io::Flow::V0::Models::Money) ? x : ::Io::Flow::V0::Models::Money.new(x))
            @zero_amount_indicator = (x = opts.delete(:zero_amount_indicator); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::ZeroAmountIndicator) ? x : ::Io::Flow::V0::Models::ZeroAmountIndicator.apply(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            FlatRateForm.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :price => price.to_hash,
              :zero_amount_indicator => zero_amount_indicator.nil? ? nil : zero_amount_indicator.value
            }
          end

        end

        class FlowCenterReference

          attr_reader :key

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:key], 'FlowCenterReference')
            @key = HttpClient::Preconditions.assert_class('key', opts.delete(:key), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            FlowCenterReference.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :key => key
            }
          end

        end

        class FlowItemIndexMetadata

          attr_reader :status

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:status], 'FlowItemIndexMetadata')
            @status = (x = opts.delete(:status); x.is_a?(::Io::Flow::V0::Models::SubcatalogItemStatus) ? x : ::Io::Flow::V0::Models::SubcatalogItemStatus.apply(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            FlowItemIndexMetadata.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :status => status.value
            }
          end

        end

        # Rule to apply to enable allow-listing and deny-listing for an email address.
        class FraudEmailRule

          attr_reader :id, :email, :decision

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:email, :decision], 'FraudEmailRule')
            @id = (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, String))
            @email = HttpClient::Preconditions.assert_class('email', opts.delete(:email), String)
            @decision = (x = opts.delete(:decision); x.is_a?(::Io::Flow::V0::Models::FraudEmailRuleDecision) ? x : ::Io::Flow::V0::Models::FraudEmailRuleDecision.apply(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            FraudEmailRule.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :email => email,
              :decision => decision.value
            }
          end

        end

        class FraudEmailRuleForm

          attr_reader :rule

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:rule], 'FraudEmailRuleForm')
            @rule = (x = opts.delete(:rule); x.is_a?(::Io::Flow::V0::Models::FraudEmailRule) ? x : ::Io::Flow::V0::Models::FraudEmailRule.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            FraudEmailRuleForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :rule => rule.to_hash
            }
          end

        end

        class FraudFlowOrderReference < FraudOrderReference

          attr_reader :reference

          def initialize(incoming={})
            super(:discriminator => FraudOrderReference::Types::FRAUD_FLOW_ORDER_REFERENCE)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:reference], 'FraudFlowOrderReference')
            @reference = (x = opts.delete(:reference); x.is_a?(::Io::Flow::V0::Models::OrderReference) ? x : ::Io::Flow::V0::Models::OrderReference.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            FraudFlowOrderReference.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :reference => reference.to_hash
            }
          end

        end

        class FraudPaymentRequestReference < FraudOrderReference

          attr_reader :reference

          def initialize(incoming={})
            super(:discriminator => FraudOrderReference::Types::FRAUD_PAYMENT_REQUEST_REFERENCE)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:reference], 'FraudPaymentRequestReference')
            @reference = (x = opts.delete(:reference); x.is_a?(::Io::Flow::V0::Models::PaymentRequestReference) ? x : ::Io::Flow::V0::Models::PaymentRequestReference.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            FraudPaymentRequestReference.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :reference => reference.to_hash
            }
          end

        end

        # Event emitted when the fraud status for an order changes.
        class FraudStatusChanged < Event

          attr_reader :event_id, :timestamp, :id, :organization, :order, :fraud_order_reference, :status

          def initialize(incoming={})
            super(:discriminator => Event::Types::FRAUD_STATUS_CHANGED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :id, :organization, :order, :status], 'FraudStatusChanged')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @order = (x = opts.delete(:order); x.is_a?(::Io::Flow::V0::Models::OrderReference) ? x : ::Io::Flow::V0::Models::OrderReference.new(x))
            @fraud_order_reference = (x = opts.delete(:fraud_order_reference); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::FraudOrderReference) ? x : ::Io::Flow::V0::Models::FraudOrderReference.from_json(x)))
            @status = (x = opts.delete(:status); x.is_a?(::Io::Flow::V0::Models::FraudStatus) ? x : ::Io::Flow::V0::Models::FraudStatus.apply(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            FraudStatusChanged.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :id => id,
              :organization => organization,
              :order => order.to_hash,
              :fraud_order_reference => fraud_order_reference.nil? ? nil : fraud_order_reference.to_hash,
              :status => status.value
            }
          end

        end

        class FreeShipping < Promotion

          attr_reader :trigger, :max

          def initialize(incoming={})
            super(:discriminator => Promotion::Types::FREE_SHIPPING)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:trigger], 'FreeShipping')
            @trigger = (x = opts.delete(:trigger); x.is_a?(::Io::Flow::V0::Models::PromotionTrigger) ? x : ::Io::Flow::V0::Models::PromotionTrigger.new(x))
            @max = (x = opts.delete(:max); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Price) ? x : ::Io::Flow::V0::Models::Price.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            FreeShipping.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :trigger => trigger.to_hash,
              :max => max.nil? ? nil : max.to_hash
            }
          end

        end

        class FreeShippingOrderPromotion < OrderPromotion

          attr_reader :id, :order, :key, :trigger, :max, :attributes

          def initialize(incoming={})
            super(:discriminator => OrderPromotion::Types::FREE_SHIPPING_ORDER_PROMOTION)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :order, :key, :trigger, :attributes], 'FreeShippingOrderPromotion')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @order = (x = opts.delete(:order); x.is_a?(::Io::Flow::V0::Models::ExpandableOrder) ? x : ::Io::Flow::V0::Models::ExpandableOrder.from_json(x))
            @key = HttpClient::Preconditions.assert_class('key', opts.delete(:key), String)
            @trigger = (x = opts.delete(:trigger); x.is_a?(::Io::Flow::V0::Models::OrderPromotionTrigger) ? x : ::Io::Flow::V0::Models::OrderPromotionTrigger.new(x))
            @max = (x = opts.delete(:max); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Price) ? x : ::Io::Flow::V0::Models::Price.new(x)))
            @attributes = HttpClient::Preconditions.assert_class('attributes', opts.delete(:attributes), Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            FreeShippingOrderPromotion.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :id => id,
              :order => order.to_hash,
              :key => key,
              :trigger => trigger.to_hash,
              :max => max.nil? ? nil : max.to_hash,
              :attributes => attributes
            }
          end

        end

        class FreeShippingOrderPromotionForm < OrderPromotionForm

          attr_reader :trigger, :max, :attributes

          def initialize(incoming={})
            super(:discriminator => OrderPromotionForm::Types::FREE_SHIPPING_ORDER_PROMOTION_FORM)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:trigger], 'FreeShippingOrderPromotionForm')
            @trigger = (x = opts.delete(:trigger); x.is_a?(::Io::Flow::V0::Models::PromotionTriggerForm) ? x : ::Io::Flow::V0::Models::PromotionTriggerForm.new(x))
            @max = (x = opts.delete(:max); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::PriceForm) ? x : ::Io::Flow::V0::Models::PriceForm.new(x)))
            @attributes = (x = opts.delete(:attributes); x.nil? ? nil : HttpClient::Preconditions.assert_class('attributes', x, Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h })
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            FreeShippingOrderPromotionForm.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :trigger => trigger.to_hash,
              :max => max.nil? ? nil : max.to_hash,
              :attributes => attributes.nil? ? nil : attributes
            }
          end

        end

        # The FTP Account is your username and password to access this FTP server.
        class FtpAccount

          attr_reader :server, :user

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:server, :user], 'FtpAccount')
            @server = (x = opts.delete(:server); x.is_a?(::Io::Flow::V0::Models::FtpServer) ? x : ::Io::Flow::V0::Models::FtpServer.new(x))
            @user = (x = opts.delete(:user); x.is_a?(::Io::Flow::V0::Models::FtpUser) ? x : ::Io::Flow::V0::Models::FtpUser.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            FtpAccount.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :server => server.to_hash,
              :user => user.to_hash
            }
          end

        end

        # The FTP File represents a file uploaded to the FTP Server
        class FtpFile

          attr_reader :id, :source, :name, :directory, :url, :created_at

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :source, :name, :directory, :url, :created_at], 'FtpFile')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @source = (x = opts.delete(:source); x.is_a?(::Io::Flow::V0::Models::FtpFileSource) ? x : ::Io::Flow::V0::Models::FtpFileSource.apply(x))
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
            @directory = HttpClient::Preconditions.assert_class('directory', opts.delete(:directory), String)
            @url = HttpClient::Preconditions.assert_class('url', opts.delete(:url), String)
            @created_at = HttpClient::Preconditions.assert_class('created_at', HttpClient::Helper.to_date_time_iso8601(opts.delete(:created_at)), DateTime)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            FtpFile.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :source => source.value,
              :name => name,
              :directory => directory,
              :url => url,
              :created_at => created_at
            }
          end

        end

        # Create a file that will be uploaded to this organization's FTP Server
        class FtpFileForm

          attr_reader :url, :directory, :name

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:url, :directory], 'FtpFileForm')
            @url = HttpClient::Preconditions.assert_class('url', opts.delete(:url), String)
            @directory = HttpClient::Preconditions.assert_class('directory', opts.delete(:directory), String)
            @name = (x = opts.delete(:name); x.nil? ? nil : HttpClient::Preconditions.assert_class('name', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            FtpFileForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :url => url,
              :directory => directory,
              :name => name
            }
          end

        end

        # The FTP Folder represents a single folder associated with an organization for
        # which we create an external FTP Directory
        class FtpFolder

          attr_reader :id, :path, :webhook, :description

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :path, :webhook], 'FtpFolder')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @path = HttpClient::Preconditions.assert_class('path', opts.delete(:path), String)
            @webhook = HttpClient::Preconditions.assert_boolean('webhook', opts.delete(:webhook))
            @description = (x = opts.delete(:description); x.nil? ? nil : HttpClient::Preconditions.assert_class('description', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            FtpFolder.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :path => path,
              :webhook => webhook,
              :description => description
            }
          end

        end

        class FtpFolderForm

          attr_reader :path, :webhook, :description

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:path], 'FtpFolderForm')
            @path = HttpClient::Preconditions.assert_class('path', opts.delete(:path), String)
            @webhook = HttpClient::Preconditions.assert_boolean('webhook', (x = opts.delete(:webhook); x.nil? ? false : x))
            @description = (x = opts.delete(:description); x.nil? ? nil : HttpClient::Preconditions.assert_class('description', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            FtpFolderForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :path => path,
              :webhook => webhook,
              :description => description
            }
          end

        end

        # The FTP Organization Settings allows you to enable an FTP Drop Point for an
        # organization, creating the standard set of FTP Folders, credentials, and
        # associated webhooks.
        class FtpOrganizationSettings

          attr_reader :enabled, :emails, :account

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:enabled, :emails], 'FtpOrganizationSettings')
            @enabled = HttpClient::Preconditions.assert_boolean('enabled', opts.delete(:enabled))
            @emails = HttpClient::Preconditions.assert_class('emails', opts.delete(:emails), Array).map { |v| HttpClient::Preconditions.assert_class('emails', v, String) }
            @account = (x = opts.delete(:account); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::FtpAccount) ? x : ::Io::Flow::V0::Models::FtpAccount.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            FtpOrganizationSettings.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :enabled => enabled,
              :emails => emails,
              :account => account.nil? ? nil : account.to_hash
            }
          end

        end

        class FtpOrganizationSettingsForm

          attr_reader :enabled, :emails

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @enabled = HttpClient::Preconditions.assert_boolean('enabled', (x = opts.delete(:enabled); x.nil? ? false : x))
            @emails = HttpClient::Preconditions.assert_class('emails', (x = opts.delete(:emails); x.nil? ? [] : x), Array).map { |v| HttpClient::Preconditions.assert_class('emails', v, String) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            FtpOrganizationSettingsForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :enabled => enabled,
              :emails => emails
            }
          end

        end

        class FtpServer

          attr_reader :hostname

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:hostname], 'FtpServer')
            @hostname = HttpClient::Preconditions.assert_class('hostname', opts.delete(:hostname), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            FtpServer.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :hostname => hostname
            }
          end

        end

        class FtpUser

          attr_reader :username, :password

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:username], 'FtpUser')
            @username = HttpClient::Preconditions.assert_class('username', opts.delete(:username), String)
            @password = (x = opts.delete(:password); x.nil? ? nil : HttpClient::Preconditions.assert_class('password', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            FtpUser.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :username => username,
              :password => password
            }
          end

        end

        class FuelSurchargeRatecardFee < RatecardFee

          attr_reader :amount

          def initialize(incoming={})
            super(:discriminator => RatecardFee::Types::FUEL_SURCHARGE_RATECARD_FEE)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:amount], 'FuelSurchargeRatecardFee')
            @amount = (x = opts.delete(:amount); x.is_a?(::Io::Flow::V0::Models::Money) ? x : ::Io::Flow::V0::Models::Money.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            FuelSurchargeRatecardFee.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :amount => amount.to_hash
            }
          end

        end

        class FuelSurchargeServiceFee < ServiceFee

          attr_reader :percent

          def initialize(incoming={})
            super(:discriminator => ServiceFee::Types::FUEL_SURCHARGE_SERVICE_FEE)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:percent], 'FuelSurchargeServiceFee')
            @percent = HttpClient::Preconditions.assert_class('percent', HttpClient::Helper.to_big_decimal(opts.delete(:percent)), BigDecimal)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            FuelSurchargeServiceFee.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :percent => percent.to_f.to_s
            }
          end

        end

        # Used to track and manage the fulfillment of an order.
        class Fulfillment

          attr_reader :organization, :key, :number, :items, :center

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:organization, :key, :number, :items], 'Fulfillment')
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @key = HttpClient::Preconditions.assert_class('key', opts.delete(:key), String)
            @number = HttpClient::Preconditions.assert_class('number', opts.delete(:number), String)
            @items = HttpClient::Preconditions.assert_class('items', opts.delete(:items), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::FulfillmentItem) ? x : ::Io::Flow::V0::Models::FulfillmentItem.new(x)) }
            @center = (x = opts.delete(:center); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::CenterSummary) ? x : ::Io::Flow::V0::Models::CenterSummary.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            Fulfillment.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :organization => organization,
              :key => key,
              :number => number,
              :items => items.map { |o| o.to_hash },
              :center => center.nil? ? nil : center.to_hash
            }
          end

        end

        # Changing an order for the purpose of cancelling specific line quantities
        class FulfillmentCancellationForm

          attr_reader :change_source, :reason, :lines

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:reason, :lines], 'FulfillmentCancellationForm')
            @change_source = (x = (x = opts.delete(:change_source); x.nil? ? "fulfillment" : x); x.is_a?(::Io::Flow::V0::Models::OrderChangeSource) ? x : ::Io::Flow::V0::Models::OrderChangeSource.apply(x))
            @reason = (x = opts.delete(:reason); x.is_a?(::Io::Flow::V0::Models::CancelReason) ? x : ::Io::Flow::V0::Models::CancelReason.apply(x))
            @lines = HttpClient::Preconditions.assert_class('lines', opts.delete(:lines), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::FulfillmentLineCancelForm) ? x : ::Io::Flow::V0::Models::FulfillmentLineCancelForm.new(x)) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            FulfillmentCancellationForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :change_source => change_source.value,
              :reason => reason.value,
              :lines => lines.map { |o| o.to_hash }
            }
          end

        end

        # Changing an order for the purpose of completely cancelling all remaining
        # uncancelled, unshipped lines of an order.
        class FulfillmentCompleteCancellationForm

          attr_reader :change_source, :reason

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:reason], 'FulfillmentCompleteCancellationForm')
            @change_source = (x = (x = opts.delete(:change_source); x.nil? ? "fulfillment" : x); x.is_a?(::Io::Flow::V0::Models::OrderChangeSource) ? x : ::Io::Flow::V0::Models::OrderChangeSource.apply(x))
            @reason = (x = opts.delete(:reason); x.is_a?(::Io::Flow::V0::Models::CancelReason) ? x : ::Io::Flow::V0::Models::CancelReason.apply(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            FulfillmentCompleteCancellationForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :change_source => change_source.value,
              :reason => reason.value
            }
          end

        end

        class FulfillmentExperienceReference

          attr_reader :id, :currency

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :currency], 'FulfillmentExperienceReference')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @currency = HttpClient::Preconditions.assert_class('currency', opts.delete(:currency), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            FulfillmentExperienceReference.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :currency => currency
            }
          end

        end

        # Used to track and manage the fulfillment of quantities of a sku
        class FulfillmentItem

          attr_reader :item_number, :line_number, :quantities

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:item_number, :line_number, :quantities], 'FulfillmentItem')
            @item_number = HttpClient::Preconditions.assert_class('item_number', opts.delete(:item_number), String)
            @line_number = HttpClient::Preconditions.assert_class('line_number', opts.delete(:line_number), Integer)
            @quantities = HttpClient::Preconditions.assert_class('quantities', opts.delete(:quantities), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::FulfillmentItemQuantity) ? x : ::Io::Flow::V0::Models::FulfillmentItemQuantity.new(x)) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            FulfillmentItem.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :item_number => item_number,
              :line_number => line_number,
              :quantities => quantities.map { |o| o.to_hash }
            }
          end

        end

        # Details about how prices were allocated to a fulfillment; use for reporting
        # the value or net value of a line
        class FulfillmentItemAllocationDetails

          attr_reader :item_number, :line_number, :levies, :total

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:item_number, :line_number, :levies, :total], 'FulfillmentItemAllocationDetails')
            @item_number = HttpClient::Preconditions.assert_class('item_number', opts.delete(:item_number), String)
            @line_number = HttpClient::Preconditions.assert_class('line_number', opts.delete(:line_number), Integer)
            @levies = (x = opts.delete(:levies); x.is_a?(::Io::Flow::V0::Models::PriceWithBase) ? x : ::Io::Flow::V0::Models::PriceWithBase.new(x))
            @total = (x = opts.delete(:total); x.is_a?(::Io::Flow::V0::Models::PriceWithBase) ? x : ::Io::Flow::V0::Models::PriceWithBase.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            FulfillmentItemAllocationDetails.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :item_number => item_number,
              :line_number => line_number,
              :levies => levies.to_hash,
              :total => total.to_hash
            }
          end

        end

        # Fulfillment status of item quantities
        class FulfillmentItemQuantity

          attr_reader :status, :quantity

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:status, :quantity], 'FulfillmentItemQuantity')
            @status = (x = opts.delete(:status); x.is_a?(::Io::Flow::V0::Models::FulfillmentItemQuantityStatus) ? x : ::Io::Flow::V0::Models::FulfillmentItemQuantityStatus.apply(x))
            @quantity = HttpClient::Preconditions.assert_class('quantity', opts.delete(:quantity), Integer)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            FulfillmentItemQuantity.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :status => status.value,
              :quantity => quantity
            }
          end

        end

        # At least one of item_number, line_number are required. If you can, send both.
        class FulfillmentLineCancelForm

          attr_reader :item_number, :line_number, :quantity

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:quantity], 'FulfillmentLineCancelForm')
            @item_number = (x = opts.delete(:item_number); x.nil? ? nil : HttpClient::Preconditions.assert_class('item_number', x, String))
            @line_number = (x = opts.delete(:line_number); x.nil? ? nil : HttpClient::Preconditions.assert_class('line_number', x, String))
            @quantity = HttpClient::Preconditions.assert_class('quantity', opts.delete(:quantity), Integer)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            FulfillmentLineCancelForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :item_number => item_number,
              :line_number => line_number,
              :quantity => quantity
            }
          end

        end

        # Event indicating insertion or changes to the details of a fully harmonized
        # item. Will be triggered upon any change to the item being harmonized, its
        # duties or taxes. If two changes occur within minutes of each other, it is
        # possible only one upserted event will be produced, aggregating both changes.
        class FullyHarmonizedItemUpserted < Event

          attr_reader :event_id, :timestamp, :organization, :item_number, :customs_description, :hs6_code, :landed_costs

          def initialize(incoming={})
            super(:discriminator => Event::Types::FULLY_HARMONIZED_ITEM_UPSERTED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :item_number, :customs_description, :hs6_code, :landed_costs], 'FullyHarmonizedItemUpserted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @item_number = HttpClient::Preconditions.assert_class('item_number', opts.delete(:item_number), String)
            @customs_description = HttpClient::Preconditions.assert_class('customs_description', opts.delete(:customs_description), String)
            @hs6_code = HttpClient::Preconditions.assert_class('hs6_code', opts.delete(:hs6_code), String)
            @landed_costs = HttpClient::Preconditions.assert_class('landed_costs', opts.delete(:landed_costs), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::LaneLandedCost) ? x : ::Io::Flow::V0::Models::LaneLandedCost.new(x)) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            FullyHarmonizedItemUpserted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :item_number => item_number,
              :customs_description => customs_description,
              :hs6_code => hs6_code,
              :landed_costs => landed_costs.map { |o| o.to_hash }
            }
          end

        end

        # An error of some type has occurred. The most common error will be validation
        # on input. See messages for details.
        class GenericError

          attr_reader :code, :messages

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:messages], 'GenericError')
            @code = (x = (x = opts.delete(:code); x.nil? ? "generic_error" : x); x.is_a?(::Io::Flow::V0::Models::GenericErrorCode) ? x : ::Io::Flow::V0::Models::GenericErrorCode.apply(x))
            @messages = HttpClient::Preconditions.assert_class('messages', opts.delete(:messages), Array).map { |v| HttpClient::Preconditions.assert_class('messages', v, String) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            GenericError.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :code => code.value,
              :messages => messages
            }
          end

        end

        class GenericReservationError < ReservationError

          attr_reader :messages

          def initialize(incoming={})
            super(:code => ReservationError::Types::GENERIC_RESERVATION_ERROR)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:messages], 'GenericReservationError')
            @messages = HttpClient::Preconditions.assert_class('messages', opts.delete(:messages), Array).map { |v| HttpClient::Preconditions.assert_class('messages', v, String) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            GenericReservationError.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :messages => messages
            }
          end

        end

        # Form used to update geographic preferences
        class GeoForm

          attr_reader :country, :currency, :language, :locale, :experience

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:country, :currency, :language, :locale, :experience], 'GeoForm')
            @country = HttpClient::Preconditions.assert_class('country', opts.delete(:country), String)
            @currency = HttpClient::Preconditions.assert_class('currency', opts.delete(:currency), String)
            @language = HttpClient::Preconditions.assert_class('language', opts.delete(:language), String)
            @locale = HttpClient::Preconditions.assert_class('locale', opts.delete(:locale), String)
            @experience = HttpClient::Preconditions.assert_class('experience', opts.delete(:experience), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            GeoForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :country => country,
              :currency => currency,
              :language => language,
              :locale => locale,
              :experience => experience
            }
          end

        end

        class GooglePayAuthorizationPayload < AuthorizationPayloadParameters

          attr_reader :payload

          def initialize(incoming={})
            super(:discriminator => AuthorizationPayloadParameters::Types::GOOGLE_PAY_AUTHORIZATION_PAYLOAD)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:payload], 'GooglePayAuthorizationPayload')
            @payload = HttpClient::Preconditions.assert_class('payload', HttpClient::Helper.to_object(opts.delete(:payload)), Hash)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            GooglePayAuthorizationPayload.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :payload => payload
            }
          end

        end

        class GraphqlRequest

          attr_reader :query, :operation_name, :variables

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:query], 'GraphqlRequest')
            @query = HttpClient::Preconditions.assert_class('query', opts.delete(:query), String)
            @operation_name = (x = opts.delete(:operation_name); x.nil? ? nil : HttpClient::Preconditions.assert_class('operation_name', x, String))
            @variables = (x = opts.delete(:variables); x.nil? ? nil : HttpClient::Preconditions.assert_class('variables', x, Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('variables', d[1], String); h })
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            GraphqlRequest.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :query => query,
              :operation_name => operation_name,
              :variables => variables.nil? ? nil : variables
            }
          end

        end

        class GraphqlResponse

          attr_reader :data, :errors

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @data = (x = opts.delete(:data); x.nil? ? nil : HttpClient::Preconditions.assert_class('data', HttpClient::Helper.to_object(x), Hash))
            @errors = (x = opts.delete(:errors); x.nil? ? nil : HttpClient::Preconditions.assert_class('errors', x, Array).map { |v| HttpClient::Preconditions.assert_class('errors', HttpClient::Helper.to_object(v), Hash) })
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            GraphqlResponse.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :data => data,
              :errors => errors.nil? ? nil : errors
            }
          end

        end

        class HarmonizationDocument < Document

          attr_reader :code, :categories, :origin

          def initialize(incoming={})
            super(:discriminator => Document::Types::HARMONIZATION_DOCUMENT)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:code, :categories], 'HarmonizationDocument')
            @code = HttpClient::Preconditions.assert_class('code', opts.delete(:code), String)
            @categories = HttpClient::Preconditions.assert_class('categories', opts.delete(:categories), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::CategorySummary) ? x : ::Io::Flow::V0::Models::CategorySummary.new(x)) }
            @origin = (x = opts.delete(:origin); x.nil? ? nil : HttpClient::Preconditions.assert_class('origin', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            HarmonizationDocument.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :code => code,
              :categories => categories.map { |o| o.to_hash },
              :origin => origin
            }
          end

        end

        # Exports harmonization HS10 codes
        class HarmonizationHs10ExportType < ExportType

          attr_reader :origin, :destination, :numbers, :has_codes, :has_origins, :sort

          def initialize(incoming={})
            super(:discriminator => ExportType::Types::HARMONIZATION_HS10_EXPORT_TYPE)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @origin = (x = opts.delete(:origin); x.nil? ? nil : HttpClient::Preconditions.assert_class('origin', x, String))
            @destination = (x = opts.delete(:destination); x.nil? ? nil : HttpClient::Preconditions.assert_class('destination', x, String))
            @numbers = (x = opts.delete(:numbers); x.nil? ? nil : HttpClient::Preconditions.assert_class('numbers', x, Array).map { |v| HttpClient::Preconditions.assert_class('numbers', v, String) })
            @has_codes = (x = opts.delete(:has_codes); x.nil? ? nil : HttpClient::Preconditions.assert_boolean('has_codes', x))
            @has_origins = (x = opts.delete(:has_origins); x.nil? ? nil : HttpClient::Preconditions.assert_boolean('has_origins', x))
            @sort = (x = opts.delete(:sort); x.nil? ? nil : HttpClient::Preconditions.assert_class('sort', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            HarmonizationHs10ExportType.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :origin => origin,
              :destination => destination,
              :numbers => numbers.nil? ? nil : numbers,
              :has_codes => has_codes,
              :has_origins => has_origins,
              :sort => sort
            }
          end

        end

        # Exports HS6 codes
        class HarmonizationHs6ExportType < ExportType

          attr_reader :numbers, :has_codes, :sort

          def initialize(incoming={})
            super(:discriminator => ExportType::Types::HARMONIZATION_HS6_EXPORT_TYPE)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @numbers = (x = opts.delete(:numbers); x.nil? ? nil : HttpClient::Preconditions.assert_class('numbers', x, Array).map { |v| HttpClient::Preconditions.assert_class('numbers', v, String) })
            @has_codes = (x = opts.delete(:has_codes); x.nil? ? nil : HttpClient::Preconditions.assert_boolean('has_codes', x))
            @sort = (x = opts.delete(:sort); x.nil? ? nil : HttpClient::Preconditions.assert_class('sort', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            HarmonizationHs6ExportType.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :numbers => numbers.nil? ? nil : numbers,
              :has_codes => has_codes,
              :sort => sort
            }
          end

        end

        # Exports HS10 code overview details
        class HarmonizationOverviewExportType < ExportType

          attr_reader :origin, :destination, :sort

          def initialize(incoming={})
            super(:discriminator => ExportType::Types::HARMONIZATION_OVERVIEW_EXPORT_TYPE)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @origin = (x = opts.delete(:origin); x.nil? ? nil : HttpClient::Preconditions.assert_class('origin', x, String))
            @destination = (x = opts.delete(:destination); x.nil? ? nil : HttpClient::Preconditions.assert_class('destination', x, String))
            @sort = (x = opts.delete(:sort); x.nil? ? nil : HttpClient::Preconditions.assert_class('sort', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            HarmonizationOverviewExportType.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :origin => origin,
              :destination => destination,
              :sort => sort
            }
          end

        end

        # Exports harmonization tariff codes for all destinations
        class HarmonizationTariffCodesExportType < ExportType

          attr_reader :sort

          def initialize(incoming={})
            super(:discriminator => ExportType::Types::HARMONIZATION_TARIFF_CODES_EXPORT_TYPE)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @sort = (x = opts.delete(:sort); x.nil? ? nil : HttpClient::Preconditions.assert_class('sort', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            HarmonizationTariffCodesExportType.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :sort => sort
            }
          end

        end

        class HarmonizedCategoryReference

          attr_reader :id

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id], 'HarmonizedCategoryReference')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            HarmonizedCategoryReference.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id
            }
          end

        end

        # A harmonized item stores explicit information about this item for the purposes
        # of harmonization / classification. The harmonization process begins by
        # creating a harmonized item; this kicks off the internal processes. Once
        # assigned, codes will be available via the hs6 and hs10 resources
        class HarmonizedItem

          attr_reader :id, :number, :name, :categories, :attributes, :description

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :number, :name], 'HarmonizedItem')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @number = HttpClient::Preconditions.assert_class('number', opts.delete(:number), String)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
            @categories = HttpClient::Preconditions.assert_class('categories', (x = opts.delete(:categories); x.nil? ? [] : x), Array).map { |v| HttpClient::Preconditions.assert_class('categories', v, String) }
            @attributes = HttpClient::Preconditions.assert_class('attributes', (x = opts.delete(:attributes); x.nil? ? {} : x), Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h }
            @description = (x = opts.delete(:description); x.nil? ? nil : HttpClient::Preconditions.assert_class('description', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            HarmonizedItem.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :number => number,
              :name => name,
              :categories => categories,
              :attributes => attributes,
              :description => description
            }
          end

        end

        class HarmonizedItemForm

          attr_reader :name, :number, :currency, :price, :categories, :description, :attributes

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:name, :number, :currency, :price], 'HarmonizedItemForm')
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
            @number = HttpClient::Preconditions.assert_class('number', opts.delete(:number), String)
            @currency = HttpClient::Preconditions.assert_class('currency', opts.delete(:currency), String)
            @price = HttpClient::Preconditions.assert_class('price', opts.delete(:price), Numeric)
            @categories = (x = opts.delete(:categories); x.nil? ? nil : HttpClient::Preconditions.assert_class('categories', x, Array).map { |v| HttpClient::Preconditions.assert_class('categories', v, String) })
            @description = (x = opts.delete(:description); x.nil? ? nil : HttpClient::Preconditions.assert_class('description', x, String))
            @attributes = (x = opts.delete(:attributes); x.nil? ? nil : HttpClient::Preconditions.assert_class('attributes', x, Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h })
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            HarmonizedItemForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :name => name,
              :number => number,
              :currency => currency,
              :price => price,
              :categories => categories.nil? ? nil : categories,
              :description => description,
              :attributes => attributes.nil? ? nil : attributes
            }
          end

        end

        class HarmonizedItemPutForm

          attr_reader :name, :currency, :price, :categories, :description, :attributes

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:name, :currency, :price], 'HarmonizedItemPutForm')
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
            @currency = HttpClient::Preconditions.assert_class('currency', opts.delete(:currency), String)
            @price = HttpClient::Preconditions.assert_class('price', opts.delete(:price), Numeric)
            @categories = (x = opts.delete(:categories); x.nil? ? nil : HttpClient::Preconditions.assert_class('categories', x, Array).map { |v| HttpClient::Preconditions.assert_class('categories', v, String) })
            @description = (x = opts.delete(:description); x.nil? ? nil : HttpClient::Preconditions.assert_class('description', x, String))
            @attributes = (x = opts.delete(:attributes); x.nil? ? nil : HttpClient::Preconditions.assert_class('attributes', x, Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h })
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            HarmonizedItemPutForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :name => name,
              :currency => currency,
              :price => price,
              :categories => categories.nil? ? nil : categories,
              :description => description,
              :attributes => attributes.nil? ? nil : attributes
            }
          end

        end

        class HarmonizedItemReference

          attr_reader :id, :number, :description

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :number], 'HarmonizedItemReference')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @number = HttpClient::Preconditions.assert_class('number', opts.delete(:number), String)
            @description = (x = opts.delete(:description); x.nil? ? nil : HttpClient::Preconditions.assert_class('description', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            HarmonizedItemReference.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :number => number,
              :description => description
            }
          end

        end

        # Summary of landed cost data (taxes and duties) for 1 or more items going to a
        # single destination country. Records are unique based on (item.number, country
        # of origin).
        class HarmonizedLandedCost

          attr_reader :address, :items, :tax_registration

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:address, :items], 'HarmonizedLandedCost')
            @address = (x = opts.delete(:address); x.is_a?(::Io::Flow::V0::Models::Address) ? x : ::Io::Flow::V0::Models::Address.new(x))
            @items = HttpClient::Preconditions.assert_class('items', opts.delete(:items), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::HarmonizedLandedCostItem) ? x : ::Io::Flow::V0::Models::HarmonizedLandedCostItem.new(x)) }
            @tax_registration = (x = opts.delete(:tax_registration); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::TaxRegistration) ? x : ::Io::Flow::V0::Models::TaxRegistration.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            HarmonizedLandedCost.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :address => address.to_hash,
              :items => items.map { |o| o.to_hash },
              :tax_registration => tax_registration.nil? ? nil : tax_registration.to_hash
            }
          end

        end

        # Allows calculation of duty and tax for multiple items in one API call for
        # items going to a specific destination country
        class HarmonizedLandedCostForm

          attr_reader :address, :item_numbers, :source_address, :order_number, :line_items, :tax_registration_id, :billing_address

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:address, :item_numbers], 'HarmonizedLandedCostForm')
            @address = (x = opts.delete(:address); x.is_a?(::Io::Flow::V0::Models::Address) ? x : ::Io::Flow::V0::Models::Address.new(x))
            @item_numbers = HttpClient::Preconditions.assert_class('item_numbers', opts.delete(:item_numbers), Array).map { |v| HttpClient::Preconditions.assert_class('item_numbers', v, String) }
            @source_address = (x = opts.delete(:source_address); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Address) ? x : ::Io::Flow::V0::Models::Address.new(x)))
            @order_number = (x = opts.delete(:order_number); x.nil? ? nil : HttpClient::Preconditions.assert_class('order_number', x, String))
            @line_items = (x = opts.delete(:line_items); x.nil? ? nil : HttpClient::Preconditions.assert_class('line_items', x, Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::LineItem) ? x : ::Io::Flow::V0::Models::LineItem.new(x)) })
            @tax_registration_id = (x = opts.delete(:tax_registration_id); x.nil? ? nil : HttpClient::Preconditions.assert_class('tax_registration_id', x, String))
            @billing_address = (x = opts.delete(:billing_address); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::BillingAddress) ? x : ::Io::Flow::V0::Models::BillingAddress.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            HarmonizedLandedCostForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :address => address.to_hash,
              :item_numbers => item_numbers,
              :source_address => source_address.nil? ? nil : source_address.to_hash,
              :order_number => order_number,
              :line_items => line_items.nil? ? nil : line_items.map { |o| o.to_hash },
              :tax_registration_id => tax_registration_id,
              :billing_address => billing_address.nil? ? nil : billing_address.to_hash
            }
          end

        end

        # Duty and tax information for a given item. Note that the internal
        # implementation supports multiple countries of origin.
        class HarmonizedLandedCostItem

          attr_reader :item, :duty, :tax, :tax_applicability, :origin, :hs_code, :tariff_code, :customs_description, :source_address

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:item, :duty, :tax], 'HarmonizedLandedCostItem')
            @item = (x = opts.delete(:item); x.is_a?(::Io::Flow::V0::Models::HarmonizedItemReference) ? x : ::Io::Flow::V0::Models::HarmonizedItemReference.new(x))
            @duty = (x = opts.delete(:duty); x.is_a?(::Io::Flow::V0::Models::Duty) ? x : ::Io::Flow::V0::Models::Duty.new(x))
            @tax = (x = opts.delete(:tax); x.is_a?(::Io::Flow::V0::Models::Tax) ? x : ::Io::Flow::V0::Models::Tax.new(x))
            @tax_applicability = (x = opts.delete(:tax_applicability); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::TaxApplicability) ? x : ::Io::Flow::V0::Models::TaxApplicability.apply(x)))
            @origin = (x = opts.delete(:origin); x.nil? ? nil : HttpClient::Preconditions.assert_class('origin', x, String))
            @hs_code = (x = opts.delete(:hs_code); x.nil? ? nil : HttpClient::Preconditions.assert_class('hs_code', x, String))
            @tariff_code = (x = opts.delete(:tariff_code); x.nil? ? nil : HttpClient::Preconditions.assert_class('tariff_code', x, String))
            @customs_description = (x = opts.delete(:customs_description); x.nil? ? nil : HttpClient::Preconditions.assert_class('customs_description', x, String))
            @source_address = (x = opts.delete(:source_address); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Address) ? x : ::Io::Flow::V0::Models::Address.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            HarmonizedLandedCostItem.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :item => item.to_hash,
              :duty => duty.to_hash,
              :tax => tax.to_hash,
              :tax_applicability => tax_applicability.nil? ? nil : tax_applicability.value,
              :origin => origin,
              :hs_code => hs_code,
              :tariff_code => tariff_code,
              :customs_description => customs_description,
              :source_address => source_address.nil? ? nil : source_address.to_hash
            }
          end

        end

        class HarmonizedLandedCostUpserted < Event

          attr_reader :event_id, :timestamp, :organization, :id, :landed_cost

          def initialize(incoming={})
            super(:discriminator => Event::Types::HARMONIZED_LANDED_COST_UPSERTED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :id, :landed_cost], 'HarmonizedLandedCostUpserted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @landed_cost = (x = opts.delete(:landed_cost); x.is_a?(::Io::Flow::V0::Models::HarmonizedLandedCost) ? x : ::Io::Flow::V0::Models::HarmonizedLandedCost.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            HarmonizedLandedCostUpserted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :id => id,
              :landed_cost => landed_cost.to_hash
            }
          end

        end

        class Header

          attr_reader :name, :value

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:name, :value], 'Header')
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
            @value = HttpClient::Preconditions.assert_class('value', opts.delete(:value), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            Header.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :name => name,
              :value => value
            }
          end

        end

        class Healthcheck

          attr_reader :status

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:status], 'Healthcheck')
            @status = HttpClient::Preconditions.assert_class('status', opts.delete(:status), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            Healthcheck.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :status => status
            }
          end

        end

        class Hop

          attr_reader :hop_number, :hop_estimate

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:hop_number, :hop_estimate], 'Hop')
            @hop_number = HttpClient::Preconditions.assert_class('hop_number', opts.delete(:hop_number), Integer)
            @hop_estimate = (x = opts.delete(:hop_estimate); x.is_a?(::Io::Flow::V0::Models::HopEstimate) ? x : ::Io::Flow::V0::Models::HopEstimate.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            Hop.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :hop_number => hop_number,
              :hop_estimate => hop_estimate.to_hash
            }
          end

        end

        class HopEstimate

          attr_reader :origin_address, :destination_address, :service, :shipment_window, :currency, :amount, :fees, :total

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:origin_address, :destination_address, :service, :shipment_window, :currency, :amount, :fees, :total], 'HopEstimate')
            @origin_address = (x = opts.delete(:origin_address); x.is_a?(::Io::Flow::V0::Models::ShippingAddress) ? x : ::Io::Flow::V0::Models::ShippingAddress.new(x))
            @destination_address = (x = opts.delete(:destination_address); x.is_a?(::Io::Flow::V0::Models::ShippingAddress) ? x : ::Io::Flow::V0::Models::ShippingAddress.new(x))
            @service = (x = opts.delete(:service); x.is_a?(::Io::Flow::V0::Models::RatecardServiceSummary) ? x : ::Io::Flow::V0::Models::RatecardServiceSummary.new(x))
            @shipment_window = (x = opts.delete(:shipment_window); x.is_a?(::Io::Flow::V0::Models::ShipmentWindow) ? x : ::Io::Flow::V0::Models::ShipmentWindow.new(x))
            @currency = HttpClient::Preconditions.assert_class('currency', opts.delete(:currency), String)
            @amount = HttpClient::Preconditions.assert_class('amount', opts.delete(:amount), Numeric)
            @fees = HttpClient::Preconditions.assert_class('fees', opts.delete(:fees), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::RatecardFee) ? x : ::Io::Flow::V0::Models::RatecardFee.from_json(x)) }
            @total = HttpClient::Preconditions.assert_class('total', opts.delete(:total), Numeric)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            HopEstimate.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :origin_address => origin_address.to_hash,
              :destination_address => destination_address.to_hash,
              :service => service.to_hash,
              :shipment_window => shipment_window.to_hash,
              :currency => currency,
              :amount => amount,
              :fees => fees.map { |o| o.to_hash },
              :total => total
            }
          end

        end

        class HopEstimateV2

          attr_reader :origin_address, :destination_address, :service, :shipment_window, :currency, :amount, :fees, :total, :lane

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:origin_address, :destination_address, :service, :shipment_window, :currency, :amount, :fees, :total, :lane], 'HopEstimateV2')
            @origin_address = (x = opts.delete(:origin_address); x.is_a?(::Io::Flow::V0::Models::ShippingAddress) ? x : ::Io::Flow::V0::Models::ShippingAddress.new(x))
            @destination_address = (x = opts.delete(:destination_address); x.is_a?(::Io::Flow::V0::Models::ShippingAddress) ? x : ::Io::Flow::V0::Models::ShippingAddress.new(x))
            @service = (x = opts.delete(:service); x.is_a?(::Io::Flow::V0::Models::RatecardServiceSummary) ? x : ::Io::Flow::V0::Models::RatecardServiceSummary.new(x))
            @shipment_window = (x = opts.delete(:shipment_window); x.is_a?(::Io::Flow::V0::Models::ShipmentWindow) ? x : ::Io::Flow::V0::Models::ShipmentWindow.new(x))
            @currency = HttpClient::Preconditions.assert_class('currency', opts.delete(:currency), String)
            @amount = HttpClient::Preconditions.assert_class('amount', opts.delete(:amount), Numeric)
            @fees = HttpClient::Preconditions.assert_class('fees', opts.delete(:fees), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::RatecardFee) ? x : ::Io::Flow::V0::Models::RatecardFee.from_json(x)) }
            @total = HttpClient::Preconditions.assert_class('total', opts.delete(:total), Numeric)
            @lane = (x = opts.delete(:lane); x.is_a?(::Io::Flow::V0::Models::LaneSummary) ? x : ::Io::Flow::V0::Models::LaneSummary.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            HopEstimateV2.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :origin_address => origin_address.to_hash,
              :destination_address => destination_address.to_hash,
              :service => service.to_hash,
              :shipment_window => shipment_window.to_hash,
              :currency => currency,
              :amount => amount,
              :fees => fees.map { |o| o.to_hash },
              :total => total,
              :lane => lane.to_hash
            }
          end

        end

        class HopV2

          attr_reader :hop_number, :hop_estimate

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:hop_number, :hop_estimate], 'HopV2')
            @hop_number = HttpClient::Preconditions.assert_class('hop_number', opts.delete(:hop_number), Integer)
            @hop_estimate = (x = opts.delete(:hop_estimate); x.is_a?(::Io::Flow::V0::Models::HopEstimateV2) ? x : ::Io::Flow::V0::Models::HopEstimateV2.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            HopV2.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :hop_number => hop_number,
              :hop_estimate => hop_estimate.to_hash
            }
          end

        end

        # The (Harmonized System) HS-10 code assigned to an item with a given
        # origin/destination pair.
        class Hs10

          attr_reader :id, :item, :origin, :destination, :code

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :item, :origin, :destination, :code], 'Hs10')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @item = (x = opts.delete(:item); x.is_a?(::Io::Flow::V0::Models::HarmonizedItemReference) ? x : ::Io::Flow::V0::Models::HarmonizedItemReference.new(x))
            @origin = HttpClient::Preconditions.assert_class('origin', opts.delete(:origin), String)
            @destination = HttpClient::Preconditions.assert_class('destination', opts.delete(:destination), String)
            @code = HttpClient::Preconditions.assert_class('code', opts.delete(:code), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            Hs10.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :item => item.to_hash,
              :origin => origin,
              :destination => destination,
              :code => code
            }
          end

        end

        # Event raised whenever an HS-10 code is unassigned from an item
        class Hs10CodeDeleted < Event

          attr_reader :event_id, :timestamp, :organization, :number, :origin, :destination

          def initialize(incoming={})
            super(:discriminator => Event::Types::HS10_CODE_DELETED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :number, :origin, :destination], 'Hs10CodeDeleted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @number = HttpClient::Preconditions.assert_class('number', opts.delete(:number), String)
            @origin = HttpClient::Preconditions.assert_class('origin', opts.delete(:origin), String)
            @destination = HttpClient::Preconditions.assert_class('destination', opts.delete(:destination), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            Hs10CodeDeleted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :number => number,
              :origin => origin,
              :destination => destination
            }
          end

        end

        # Event raised whenever an HS-10 code is assigned to an item
        class Hs10CodeUpserted < Event

          attr_reader :event_id, :timestamp, :organization, :number, :origin, :destination, :code

          def initialize(incoming={})
            super(:discriminator => Event::Types::HS10_CODE_UPSERTED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :number, :origin, :destination, :code], 'Hs10CodeUpserted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @number = HttpClient::Preconditions.assert_class('number', opts.delete(:number), String)
            @origin = HttpClient::Preconditions.assert_class('origin', opts.delete(:origin), String)
            @destination = HttpClient::Preconditions.assert_class('destination', opts.delete(:destination), String)
            @code = HttpClient::Preconditions.assert_class('code', opts.delete(:code), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            Hs10CodeUpserted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :number => number,
              :origin => origin,
              :destination => destination,
              :code => code
            }
          end

        end

        class Hs10Version

          attr_reader :id, :timestamp, :type, :hs10

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :timestamp, :type, :hs10], 'Hs10Version')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::V0::Models::ChangeType) ? x : ::Io::Flow::V0::Models::ChangeType.apply(x))
            @hs10 = (x = opts.delete(:hs10); x.is_a?(::Io::Flow::V0::Models::Hs10) ? x : ::Io::Flow::V0::Models::Hs10.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            Hs10Version.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :timestamp => timestamp,
              :type => type.value,
              :hs10 => hs10.to_hash
            }
          end

        end

        # The (Harmonized System) HS-6 code assigned to an item.
        class Hs6

          attr_reader :id, :item, :code

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :item, :code], 'Hs6')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @item = (x = opts.delete(:item); x.is_a?(::Io::Flow::V0::Models::HarmonizedItemReference) ? x : ::Io::Flow::V0::Models::HarmonizedItemReference.new(x))
            @code = HttpClient::Preconditions.assert_class('code', opts.delete(:code), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            Hs6.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :item => item.to_hash,
              :code => code
            }
          end

        end

        # Event raised whenever an HS-6 code is deleted
        class Hs6CodeDeleted < Event

          attr_reader :event_id, :timestamp, :organization, :number

          def initialize(incoming={})
            super(:discriminator => Event::Types::HS6_CODE_DELETED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :number], 'Hs6CodeDeleted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @number = HttpClient::Preconditions.assert_class('number', opts.delete(:number), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            Hs6CodeDeleted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :number => number
            }
          end

        end

        # Event raised whenever an HS-6 code is assigned to an item
        class Hs6CodeUpserted < Event

          attr_reader :event_id, :timestamp, :organization, :number, :code

          def initialize(incoming={})
            super(:discriminator => Event::Types::HS6_CODE_UPSERTED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :number, :code], 'Hs6CodeUpserted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @number = HttpClient::Preconditions.assert_class('number', opts.delete(:number), String)
            @code = HttpClient::Preconditions.assert_class('code', opts.delete(:code), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            Hs6CodeUpserted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :number => number,
              :code => code
            }
          end

        end

        class IdentifierForm

          attr_reader :primary, :name

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:name], 'IdentifierForm')
            @primary = (x = opts.delete(:primary); x.nil? ? nil : HttpClient::Preconditions.assert_boolean('primary', x))
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            IdentifierForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :primary => primary,
              :name => name
            }
          end

        end

        # The URL to an image, with optional tags. Flow Commerce primarily uses images
        # to enhance the administrative tools (e.g. showing an item image in console)
        class Image

          attr_reader :url, :tags, :attributes

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:url], 'Image')
            @url = HttpClient::Preconditions.assert_class('url', opts.delete(:url), String)
            @tags = HttpClient::Preconditions.assert_class('tags', (x = opts.delete(:tags); x.nil? ? [] : x), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::ImageTag) ? x : ::Io::Flow::V0::Models::ImageTag.apply(x)) }
            @attributes = (x = opts.delete(:attributes); x.nil? ? nil : HttpClient::Preconditions.assert_class('attributes', x, Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h })
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            Image.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :url => url,
              :tags => tags.map { |o| o.value },
              :attributes => attributes.nil? ? nil : attributes
            }
          end

        end

        # Image form defines the data needed to create an image
        class ImageForm

          attr_reader :url, :tags, :attributes

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:url], 'ImageForm')
            @url = HttpClient::Preconditions.assert_class('url', opts.delete(:url), String)
            @tags = (x = opts.delete(:tags); x.nil? ? nil : HttpClient::Preconditions.assert_class('tags', x, Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::ImageTag) ? x : ::Io::Flow::V0::Models::ImageTag.apply(x)) })
            @attributes = (x = opts.delete(:attributes); x.nil? ? nil : HttpClient::Preconditions.assert_class('attributes', x, Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h })
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ImageForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :url => url,
              :tags => tags.nil? ? nil : tags.map { |o| o.value },
              :attributes => attributes.nil? ? nil : attributes
            }
          end

        end

        # Imports allow you to upload data to Flow via files in batch. Each import
        # fetches data from a given URL. The type of the import determines which file
        # format to expect and what data to update
        class Import

          attr_reader :id, :type, :source_url, :filename, :status, :created_at, :started_at, :completed_at, :results, :deliveries

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :type, :source_url, :filename, :status, :created_at, :deliveries], 'Import')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::V0::Models::ImportType) ? x : ::Io::Flow::V0::Models::ImportType.apply(x))
            @source_url = HttpClient::Preconditions.assert_class('source_url', opts.delete(:source_url), String)
            @filename = HttpClient::Preconditions.assert_class('filename', opts.delete(:filename), String)
            @status = (x = opts.delete(:status); x.is_a?(::Io::Flow::V0::Models::ExportStatus) ? x : ::Io::Flow::V0::Models::ExportStatus.apply(x))
            @created_at = HttpClient::Preconditions.assert_class('created_at', HttpClient::Helper.to_date_time_iso8601(opts.delete(:created_at)), DateTime)
            @started_at = (x = opts.delete(:started_at); x.nil? ? nil : HttpClient::Preconditions.assert_class('started_at', HttpClient::Helper.to_date_time_iso8601(x), DateTime))
            @completed_at = (x = opts.delete(:completed_at); x.nil? ? nil : HttpClient::Preconditions.assert_class('completed_at', HttpClient::Helper.to_date_time_iso8601(x), DateTime))
            @results = (x = opts.delete(:results); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::ImportResults) ? x : ::Io::Flow::V0::Models::ImportResults.new(x)))
            @deliveries = HttpClient::Preconditions.assert_class('deliveries', opts.delete(:deliveries), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::ExportDelivery) ? x : ::Io::Flow::V0::Models::ExportDelivery.from_json(x)) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            Import.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :type => type.value,
              :source_url => source_url,
              :filename => filename,
              :status => status.value,
              :created_at => created_at,
              :started_at => started_at,
              :completed_at => completed_at,
              :results => results.nil? ? nil : results.to_hash,
              :deliveries => deliveries.map { |o| o.to_hash }
            }
          end

        end

        # Import forms create imports. The import type defines both the type of the
        # import (e.g. the CSV File format) and the URL at which the source data are
        # available. If you do not have a URL readily available, you can first upload a
        # file via the Flow API - see the resource named 'Upload'
        class ImportForm

          attr_reader :type, :source_url, :filename, :emails

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:type, :source_url], 'ImportForm')
            @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::V0::Models::ImportType) ? x : ::Io::Flow::V0::Models::ImportType.apply(x))
            @source_url = HttpClient::Preconditions.assert_class('source_url', opts.delete(:source_url), String)
            @filename = (x = opts.delete(:filename); x.nil? ? nil : HttpClient::Preconditions.assert_class('filename', x, String))
            @emails = (x = opts.delete(:emails); x.nil? ? nil : HttpClient::Preconditions.assert_class('emails', x, Array).map { |v| HttpClient::Preconditions.assert_class('emails', v, String) })
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ImportForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :type => type.value,
              :source_url => source_url,
              :filename => filename,
              :emails => emails.nil? ? nil : emails
            }
          end

        end

        class ImportResults

          attr_reader :number_successful, :number_errors, :url

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:number_successful, :number_errors], 'ImportResults')
            @number_successful = HttpClient::Preconditions.assert_class('number_successful', opts.delete(:number_successful), Integer)
            @number_errors = HttpClient::Preconditions.assert_class('number_errors', opts.delete(:number_errors), Integer)
            @url = (x = opts.delete(:url); x.nil? ? nil : HttpClient::Preconditions.assert_class('url', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ImportResults.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :number_successful => number_successful,
              :number_errors => number_errors,
              :url => url
            }
          end

        end

        # An import template provides an organization specific example CSV file of a
        # particular import type.
        class ImportTemplate

          attr_reader :type, :documentation_url

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:type, :documentation_url], 'ImportTemplate')
            @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::V0::Models::ImportType) ? x : ::Io::Flow::V0::Models::ImportType.apply(x))
            @documentation_url = HttpClient::Preconditions.assert_class('documentation_url', opts.delete(:documentation_url), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ImportTemplate.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :type => type.value,
              :documentation_url => documentation_url
            }
          end

        end

        # An import template example provides a link to a real, organization specific
        # example CSV import file.
        class ImportTemplateExample

          attr_reader :url

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:url], 'ImportTemplateExample')
            @url = HttpClient::Preconditions.assert_class('url', opts.delete(:url), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ImportTemplateExample.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :url => url
            }
          end

        end

        class ImportTemplateForm

          attr_reader :type

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:type], 'ImportTemplateForm')
            @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::V0::Models::ImportType) ? x : ::Io::Flow::V0::Models::ImportType.apply(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ImportTemplateForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :type => type.value
            }
          end

        end

        class ImportVersion

          attr_reader :id, :timestamp, :type, :import

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :timestamp, :type, :import], 'ImportVersion')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::V0::Models::ChangeType) ? x : ::Io::Flow::V0::Models::ChangeType.apply(x))
            @import = (x = opts.delete(:import); x.is_a?(::Io::Flow::V0::Models::Import) ? x : ::Io::Flow::V0::Models::Import.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ImportVersion.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :timestamp => timestamp,
              :type => type.value,
              :import => import.to_hash
            }
          end

        end

        class InboundCartonFee < PartnerCenterFee

          attr_reader :amount

          def initialize(incoming={})
            super(:discriminator => PartnerCenterFee::Types::INBOUND_CARTON_FEE)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:amount], 'InboundCartonFee')
            @amount = (x = opts.delete(:amount); x.is_a?(::Io::Flow::V0::Models::Money) ? x : ::Io::Flow::V0::Models::Money.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            InboundCartonFee.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :amount => amount.to_hash
            }
          end

        end

        class IncludedLevies

          attr_reader :key, :label

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:key, :label], 'IncludedLevies')
            @key = (x = opts.delete(:key); x.is_a?(::Io::Flow::V0::Models::IncludedLevyKey) ? x : ::Io::Flow::V0::Models::IncludedLevyKey.apply(x))
            @label = HttpClient::Preconditions.assert_class('label', opts.delete(:label), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            IncludedLevies.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :key => key.value,
              :label => label
            }
          end

        end

        # Represents an online payment that requires the client token from underlying
        # payment processor before entering their payment information.
        class InlineAuthorizationDetails < OnlineAuthorizationDetails

          attr_reader :id, :client_token, :parameters

          def initialize(incoming={})
            super(:discriminator => OnlineAuthorizationDetails::Types::INLINE_AUTHORIZATION_DETAILS)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id], 'InlineAuthorizationDetails')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @client_token = (x = opts.delete(:client_token); x.nil? ? nil : HttpClient::Preconditions.assert_class('client_token', x, String))
            @parameters = (x = opts.delete(:parameters); x.nil? ? nil : HttpClient::Preconditions.assert_class('parameters', HttpClient::Helper.to_object(x), Hash))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            InlineAuthorizationDetails.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :id => id,
              :client_token => client_token,
              :parameters => parameters
            }
          end

        end

        # Executes a widget-based payment based on the provided payment method.
        class InlineAuthorizationForm < AuthorizationForm

          attr_reader :method, :issuer, :order_number, :amount, :currency, :billing_address, :key, :attributes, :ip, :payload

          def initialize(incoming={})
            super(:discriminator => AuthorizationForm::Types::INLINE_AUTHORIZATION_FORM)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:method, :order_number, :amount, :currency], 'InlineAuthorizationForm')
            @method = HttpClient::Preconditions.assert_class('method', opts.delete(:method), String)
            @issuer = (x = opts.delete(:issuer); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::IssuerReference) ? x : ::Io::Flow::V0::Models::IssuerReference.new(x)))
            @order_number = HttpClient::Preconditions.assert_class('order_number', opts.delete(:order_number), String)
            @amount = HttpClient::Preconditions.assert_class('amount', HttpClient::Helper.to_big_decimal(opts.delete(:amount)), BigDecimal)
            @currency = HttpClient::Preconditions.assert_class('currency', opts.delete(:currency), String)
            @billing_address = (x = opts.delete(:billing_address); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::BillingAddress) ? x : ::Io::Flow::V0::Models::BillingAddress.new(x)))
            @key = (x = opts.delete(:key); x.nil? ? nil : HttpClient::Preconditions.assert_class('key', x, String))
            @attributes = (x = opts.delete(:attributes); x.nil? ? nil : HttpClient::Preconditions.assert_class('attributes', x, Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h })
            @ip = (x = opts.delete(:ip); x.nil? ? nil : HttpClient::Preconditions.assert_class('ip', x, String))
            @payload = (x = opts.delete(:payload); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::AuthorizationPayload) ? x : ::Io::Flow::V0::Models::AuthorizationPayload.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            InlineAuthorizationForm.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :method => method,
              :issuer => issuer.nil? ? nil : issuer.to_hash,
              :order_number => order_number,
              :amount => amount.to_f.to_s,
              :currency => currency,
              :billing_address => billing_address.nil? ? nil : billing_address.to_hash,
              :key => key,
              :attributes => attributes.nil? ? nil : attributes,
              :ip => ip,
              :payload => payload.nil? ? nil : payload.to_hash
            }
          end

        end

        class InputForm

          attr_reader :values

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @values = (x = opts.delete(:values); x.nil? ? nil : HttpClient::Preconditions.assert_class('values', x, Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('values', d[1], String); h })
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            InputForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :values => values.nil? ? nil : values
            }
          end

        end

        class InputFormSpecification

          attr_reader :inputs, :limitations

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @inputs = (x = opts.delete(:inputs); x.nil? ? nil : HttpClient::Preconditions.assert_class('inputs', x, Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::InputSpecification) ? x : ::Io::Flow::V0::Models::InputSpecification.new(x)) })
            @limitations = (x = opts.delete(:limitations); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::InputSpecificationLimitations) ? x : ::Io::Flow::V0::Models::InputSpecificationLimitations.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            InputFormSpecification.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :inputs => inputs.nil? ? nil : inputs.map { |o| o.to_hash },
              :limitations => limitations.nil? ? nil : limitations.to_hash
            }
          end

        end

        class InputSpecification

          attr_reader :type, :name, :display_text

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:type, :name], 'InputSpecification')
            @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::V0::Models::InputSpecificationType) ? x : ::Io::Flow::V0::Models::InputSpecificationType.apply(x))
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
            @display_text = (x = opts.delete(:display_text); x.nil? ? nil : HttpClient::Preconditions.assert_class('display_text', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            InputSpecification.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :type => type.value,
              :name => name,
              :display_text => display_text
            }
          end

        end

        # Represents the maximum number of accepted inputs
        class InputSpecificationLimitationMax < InputSpecificationLimitation

          attr_reader :max

          def initialize(incoming={})
            super(:discriminator => InputSpecificationLimitation::Types::INPUT_SPECIFICATION_LIMITATION_MAX)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:max], 'InputSpecificationLimitationMax')
            @max = HttpClient::Preconditions.assert_class('max', opts.delete(:max), Integer)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            InputSpecificationLimitationMax.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :max => max
            }
          end

        end

        class InputSpecificationLimitations

          attr_reader :limitations

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @limitations = (x = opts.delete(:limitations); x.nil? ? nil : HttpClient::Preconditions.assert_class('limitations', x, Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::InputSpecificationLimitation) ? x : ::Io::Flow::V0::Models::InputSpecificationLimitation.from_json(x)) })
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            InputSpecificationLimitations.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :limitations => limitations.nil? ? nil : limitations.map { |o| o.to_hash }
            }
          end

        end

        # Enables backorders, setting an optional number of units that we allow for
        # backorder. For example, a backorder w/ quantity 10 will enable selling until
        # the actual inventory quantity is -10.
        class InventoryBackorder < InventoryStrategy

          attr_reader :quantity

          def initialize(incoming={})
            super(:discriminator => InventoryStrategy::Types::INVENTORY_BACKORDER)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:quantity], 'InventoryBackorder')
            @quantity = HttpClient::Preconditions.assert_class('quantity', opts.delete(:quantity), Integer)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            InventoryBackorder.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :quantity => quantity
            }
          end

        end

        class InventoryCenterReference

          attr_reader :key

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:key], 'InventoryCenterReference')
            @key = HttpClient::Preconditions.assert_class('key', opts.delete(:key), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            InventoryCenterReference.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :key => key
            }
          end

        end

        class InventoryCheckResponse

          attr_reader :items

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:items], 'InventoryCheckResponse')
            @items = HttpClient::Preconditions.assert_class('items', opts.delete(:items), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::InventoryCheckResponseItem) ? x : ::Io::Flow::V0::Models::InventoryCheckResponseItem.new(x)) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            InventoryCheckResponse.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :items => items.map { |o| o.to_hash }
            }
          end

        end

        class InventoryCheckResponseItem

          attr_reader :number, :quantity, :inventory_status

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:number, :quantity, :inventory_status], 'InventoryCheckResponseItem')
            @number = HttpClient::Preconditions.assert_class('number', opts.delete(:number), String)
            @quantity = HttpClient::Preconditions.assert_class('quantity', opts.delete(:quantity), Integer)
            @inventory_status = (x = opts.delete(:inventory_status); x.is_a?(::Io::Flow::V0::Models::InventoryStatus) ? x : ::Io::Flow::V0::Models::InventoryStatus.apply(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            InventoryCheckResponseItem.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :number => number,
              :quantity => quantity,
              :inventory_status => inventory_status.value
            }
          end

        end

        class InventoryExperienceReference

          attr_reader :key

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:key], 'InventoryExperienceReference')
            @key = HttpClient::Preconditions.assert_class('key', opts.delete(:key), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            InventoryExperienceReference.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :key => key
            }
          end

        end

        # Items affected with rules pursuing an ecommerce platform strategy will always
        # follow the ecommerce platform inventory
        class InventoryFollowEcommercePlatform < InventoryStrategy

          attr_reader :quantity

          def initialize(incoming={})
            super(:discriminator => InventoryStrategy::Types::INVENTORY_FOLLOW_ECOMMERCE_PLATFORM)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:quantity], 'InventoryFollowEcommercePlatform')
            @quantity = HttpClient::Preconditions.assert_class('quantity', opts.delete(:quantity), Integer)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            InventoryFollowEcommercePlatform.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :quantity => quantity
            }
          end

        end

        class InventoryItemReference

          attr_reader :number

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:number], 'InventoryItemReference')
            @number = HttpClient::Preconditions.assert_class('number', opts.delete(:number), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            InventoryItemReference.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :number => number
            }
          end

        end

        class InventoryRequest

          attr_reader :items

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:items], 'InventoryRequest')
            @items = HttpClient::Preconditions.assert_class('items', opts.delete(:items), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::InventoryRequestItem) ? x : ::Io::Flow::V0::Models::InventoryRequestItem.new(x)) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            InventoryRequest.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :items => items.map { |o| o.to_hash }
            }
          end

        end

        class InventoryRequestItem

          attr_reader :number, :quantity

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:number, :quantity], 'InventoryRequestItem')
            @number = HttpClient::Preconditions.assert_class('number', opts.delete(:number), String)
            @quantity = HttpClient::Preconditions.assert_class('quantity', opts.delete(:quantity), Integer)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            InventoryRequestItem.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :number => number,
              :quantity => quantity
            }
          end

        end

        # Ordered list of rules to apply, from first to last, to get available quantity.
        # This is unique per organization
        class InventoryRule

          attr_reader :id, :position, :query, :strategy

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :position, :query, :strategy], 'InventoryRule')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @position = HttpClient::Preconditions.assert_class('position', opts.delete(:position), Integer)
            @query = HttpClient::Preconditions.assert_class('query', opts.delete(:query), String)
            @strategy = (x = opts.delete(:strategy); x.is_a?(::Io::Flow::V0::Models::InventoryStrategy) ? x : ::Io::Flow::V0::Models::InventoryStrategy.from_json(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            InventoryRule.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :position => position,
              :query => query,
              :strategy => strategy.to_hash
            }
          end

        end

        class InventoryRuleForm

          attr_reader :position, :query, :strategy

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:position, :query, :strategy], 'InventoryRuleForm')
            @position = HttpClient::Preconditions.assert_class('position', opts.delete(:position), Integer)
            @query = HttpClient::Preconditions.assert_class('query', opts.delete(:query), String)
            @strategy = (x = opts.delete(:strategy); x.is_a?(::Io::Flow::V0::Models::InventoryStrategy) ? x : ::Io::Flow::V0::Models::InventoryStrategy.from_json(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            InventoryRuleForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :position => position,
              :query => query,
              :strategy => strategy.to_hash
            }
          end

        end

        class InventoryRuleVersion

          attr_reader :id, :timestamp, :type, :inventory_rule

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :timestamp, :type, :inventory_rule], 'InventoryRuleVersion')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::V0::Models::ChangeType) ? x : ::Io::Flow::V0::Models::ChangeType.apply(x))
            @inventory_rule = (x = opts.delete(:inventory_rule); x.is_a?(::Io::Flow::V0::Models::InventoryRule) ? x : ::Io::Flow::V0::Models::InventoryRule.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            InventoryRuleVersion.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :timestamp => timestamp,
              :type => type.value,
              :inventory_rule => inventory_rule.to_hash
            }
          end

        end

        # Inventory snapshot reflects the current quantity and available number of units
        # for a given center / item
        class InventorySnapshot

          attr_reader :id, :available, :center, :item, :quantity

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :available, :center, :item, :quantity], 'InventorySnapshot')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @available = HttpClient::Preconditions.assert_class('available', opts.delete(:available), Integer)
            @center = (x = opts.delete(:center); x.is_a?(::Io::Flow::V0::Models::InventoryCenterReference) ? x : ::Io::Flow::V0::Models::InventoryCenterReference.new(x))
            @item = (x = opts.delete(:item); x.is_a?(::Io::Flow::V0::Models::InventoryItemReference) ? x : ::Io::Flow::V0::Models::InventoryItemReference.new(x))
            @quantity = HttpClient::Preconditions.assert_class('quantity', opts.delete(:quantity), Integer)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            InventorySnapshot.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :available => available,
              :center => center.to_hash,
              :item => item.to_hash,
              :quantity => quantity
            }
          end

        end

        class InventorySnapshotVersion

          attr_reader :id, :timestamp, :type, :inventory_snapshot

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :timestamp, :type, :inventory_snapshot], 'InventorySnapshotVersion')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::V0::Models::ChangeType) ? x : ::Io::Flow::V0::Models::ChangeType.apply(x))
            @inventory_snapshot = (x = opts.delete(:inventory_snapshot); x.is_a?(::Io::Flow::V0::Models::InventorySnapshot) ? x : ::Io::Flow::V0::Models::InventorySnapshot.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            InventorySnapshotVersion.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :timestamp => timestamp,
              :type => type.value,
              :inventory_snapshot => inventory_snapshot.to_hash
            }
          end

        end

        # Treats inventory as available as long as the actual inventory quantity is >
        # the specified quantity. A common use case is to set quantity to zero to
        # indicate availability as long as there is at least 1 unit available.
        class InventoryStock < InventoryStrategy

          attr_reader :quantity

          def initialize(incoming={})
            super(:discriminator => InventoryStrategy::Types::INVENTORY_STOCK)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:quantity], 'InventoryStock')
            @quantity = HttpClient::Preconditions.assert_class('quantity', opts.delete(:quantity), Integer)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            InventoryStock.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :quantity => quantity
            }
          end

        end

        # Items affected with rules pursuing an unlimited strategy will always be
        # available
        class InventoryUnlimited < InventoryStrategy

          attr_reader :placeholder

          def initialize(incoming={})
            super(:discriminator => InventoryStrategy::Types::INVENTORY_UNLIMITED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @placeholder = HttpClient::Preconditions.assert_class('placeholder', (x = opts.delete(:placeholder); x.nil? ? "unlimited" : x), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            InventoryUnlimited.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :placeholder => placeholder
            }
          end

        end

        # Represents a single update on inventory quantity
        class InventoryUpdate

          attr_reader :id, :idempotency_key, :center, :item, :notes, :quantity, :type

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :idempotency_key, :center, :item, :notes, :quantity, :type], 'InventoryUpdate')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @idempotency_key = HttpClient::Preconditions.assert_class('idempotency_key', opts.delete(:idempotency_key), String)
            @center = (x = opts.delete(:center); x.is_a?(::Io::Flow::V0::Models::InventoryCenterReference) ? x : ::Io::Flow::V0::Models::InventoryCenterReference.new(x))
            @item = (x = opts.delete(:item); x.is_a?(::Io::Flow::V0::Models::InventoryItemReference) ? x : ::Io::Flow::V0::Models::InventoryItemReference.new(x))
            @notes = HttpClient::Preconditions.assert_class('notes', HttpClient::Helper.to_object(opts.delete(:notes)), Hash)
            @quantity = HttpClient::Preconditions.assert_class('quantity', opts.delete(:quantity), Integer)
            @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::V0::Models::UpdateType) ? x : ::Io::Flow::V0::Models::UpdateType.apply(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            InventoryUpdate.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :idempotency_key => idempotency_key,
              :center => center.to_hash,
              :item => item.to_hash,
              :notes => notes,
              :quantity => quantity,
              :type => type.value
            }
          end

        end

        # Form used to create an update on inventory. If inventory for center/item has
        # not been previously created, a new row is created for the center/item tuple.
        class InventoryUpdateForm

          attr_reader :center, :idempotency_key, :item_number, :quantity, :type, :notes

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:center, :idempotency_key, :item_number, :quantity, :type], 'InventoryUpdateForm')
            @center = HttpClient::Preconditions.assert_class('center', opts.delete(:center), String)
            @idempotency_key = HttpClient::Preconditions.assert_class('idempotency_key', opts.delete(:idempotency_key), String)
            @item_number = HttpClient::Preconditions.assert_class('item_number', opts.delete(:item_number), String)
            @quantity = HttpClient::Preconditions.assert_class('quantity', opts.delete(:quantity), Integer)
            @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::V0::Models::UpdateType) ? x : ::Io::Flow::V0::Models::UpdateType.apply(x))
            @notes = (x = opts.delete(:notes); x.nil? ? nil : HttpClient::Preconditions.assert_class('notes', HttpClient::Helper.to_object(x), Hash))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            InventoryUpdateForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :center => center,
              :idempotency_key => idempotency_key,
              :item_number => item_number,
              :quantity => quantity,
              :type => type.value,
              :notes => notes
            }
          end

        end

        class InventoryUpdateVersion

          attr_reader :id, :timestamp, :type, :inventory_update

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :timestamp, :type, :inventory_update], 'InventoryUpdateVersion')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::V0::Models::ChangeType) ? x : ::Io::Flow::V0::Models::ChangeType.apply(x))
            @inventory_update = (x = opts.delete(:inventory_update); x.is_a?(::Io::Flow::V0::Models::InventoryUpdate) ? x : ::Io::Flow::V0::Models::InventoryUpdate.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            InventoryUpdateVersion.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :timestamp => timestamp,
              :type => type.value,
              :inventory_update => inventory_update.to_hash
            }
          end

        end

        # An invitation via email to a user to join this organization. The user will
        # then walk through a user login/registration process and will immediately
        # become a member of the organization.
        class Invitation

          attr_reader :id, :organization, :email, :name, :role, :roles, :expiration

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :organization, :email, :name, :expiration], 'Invitation')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @organization = (x = opts.delete(:organization); x.is_a?(::Io::Flow::V0::Models::ExpandableOrganization) ? x : ::Io::Flow::V0::Models::ExpandableOrganization.from_json(x))
            @email = HttpClient::Preconditions.assert_class('email', opts.delete(:email), String)
            @name = (x = opts.delete(:name); x.is_a?(::Io::Flow::V0::Models::Name) ? x : ::Io::Flow::V0::Models::Name.new(x))
            @role = (x = opts.delete(:role); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Role) ? x : ::Io::Flow::V0::Models::Role.apply(x)))
            @roles = (x = opts.delete(:roles); x.nil? ? nil : HttpClient::Preconditions.assert_class('roles', x, Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::FlowRole) ? x : ::Io::Flow::V0::Models::FlowRole.apply(x)) })
            @expiration = HttpClient::Preconditions.assert_class('expiration', HttpClient::Helper.to_date_time_iso8601(opts.delete(:expiration)), DateTime)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            Invitation.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :organization => organization.to_hash,
              :email => email,
              :name => name.to_hash,
              :role => role.nil? ? nil : role.value,
              :roles => roles.nil? ? nil : roles.map { |o| o.value },
              :expiration => expiration
            }
          end

        end

        # Returns information as to why a particular invitation could not be accepted.
        class InvitationError

          attr_reader :code, :messages

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:code, :messages], 'InvitationError')
            @code = (x = opts.delete(:code); x.is_a?(::Io::Flow::V0::Models::InvitationErrorCode) ? x : ::Io::Flow::V0::Models::InvitationErrorCode.apply(x))
            @messages = HttpClient::Preconditions.assert_class('messages', opts.delete(:messages), Array).map { |v| HttpClient::Preconditions.assert_class('messages', v, String) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            InvitationError.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :code => code.value,
              :messages => messages
            }
          end

        end

        class InvitationForm

          attr_reader :organization, :email, :name, :role, :roles

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:organization, :email], 'InvitationForm')
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @email = HttpClient::Preconditions.assert_class('email', opts.delete(:email), String)
            @name = (x = opts.delete(:name); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Name) ? x : ::Io::Flow::V0::Models::Name.new(x)))
            @role = (x = (x = opts.delete(:role); x.nil? ? "member" : x); x.is_a?(::Io::Flow::V0::Models::Role) ? x : ::Io::Flow::V0::Models::Role.apply(x))
            @roles = (x = opts.delete(:roles); x.nil? ? nil : HttpClient::Preconditions.assert_class('roles', x, Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::FlowRole) ? x : ::Io::Flow::V0::Models::FlowRole.apply(x)) })
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            InvitationForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :organization => organization,
              :email => email,
              :name => name.nil? ? nil : name.to_hash,
              :role => role.value,
              :roles => roles.nil? ? nil : roles.map { |o| o.value }
            }
          end

        end

        class InvitationVersion

          attr_reader :id, :timestamp, :type, :invitation

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :timestamp, :type, :invitation], 'InvitationVersion')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::V0::Models::ChangeType) ? x : ::Io::Flow::V0::Models::ChangeType.apply(x))
            @invitation = (x = opts.delete(:invitation); x.is_a?(::Io::Flow::V0::Models::Invitation) ? x : ::Io::Flow::V0::Models::Invitation.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            InvitationVersion.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :timestamp => timestamp,
              :type => type.value,
              :invitation => invitation.to_hash
            }
          end

        end

        class InvoiceExport

          attr_reader :id

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id], 'InvoiceExport')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            InvoiceExport.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id
            }
          end

        end

        class InvoiceExportForm

          attr_reader :date_from, :date_to

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @date_from = (x = opts.delete(:date_from); x.nil? ? nil : HttpClient::Preconditions.assert_class('date_from', HttpClient::Helper.to_date_iso8601(x), Date))
            @date_to = (x = opts.delete(:date_to); x.nil? ? nil : HttpClient::Preconditions.assert_class('date_to', HttpClient::Helper.to_date_iso8601(x), Date))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            InvoiceExportForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :date_from => date_from,
              :date_to => date_to
            }
          end

        end

        class IssuerReference

          attr_reader :id

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id], 'IssuerReference')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            IssuerReference.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id
            }
          end

        end

        class IssuerSummary

          attr_reader :iin, :name, :country

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:iin], 'IssuerSummary')
            @iin = HttpClient::Preconditions.assert_class('iin', opts.delete(:iin), String)
            @name = (x = opts.delete(:name); x.nil? ? nil : HttpClient::Preconditions.assert_class('name', x, String))
            @country = (x = opts.delete(:country); x.nil? ? nil : HttpClient::Preconditions.assert_class('country', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            IssuerSummary.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :iin => iin,
              :name => name,
              :country => country
            }
          end

        end

        class IssuerV1

          attr_reader :iin, :card_brand, :card_type, :name, :country

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:iin, :card_brand], 'IssuerV1')
            @iin = HttpClient::Preconditions.assert_class('iin', opts.delete(:iin), String)
            @card_brand = HttpClient::Preconditions.assert_class('card_brand', opts.delete(:card_brand), String)
            @card_type = (x = opts.delete(:card_type); x.nil? ? nil : HttpClient::Preconditions.assert_class('card_type', x, String))
            @name = (x = opts.delete(:name); x.nil? ? nil : HttpClient::Preconditions.assert_class('name', x, String))
            @country = (x = opts.delete(:country); x.nil? ? nil : HttpClient::Preconditions.assert_class('country', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            IssuerV1.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :iin => iin,
              :card_brand => card_brand,
              :card_type => card_type,
              :name => name,
              :country => country
            }
          end

        end

        # The Flow item defines a specific item that can be purchased by a consumer. For
        # many clients, this will map to a Sku.
        class Item

          attr_reader :id, :number, :locale, :name, :price, :categories, :description, :attributes, :dimensions, :images, :local, :created_at, :updated_at

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :number, :locale, :name, :price, :dimensions], 'Item')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @number = HttpClient::Preconditions.assert_class('number', opts.delete(:number), String)
            @locale = HttpClient::Preconditions.assert_class('locale', opts.delete(:locale), String)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
            @price = (x = opts.delete(:price); x.is_a?(::Io::Flow::V0::Models::Price) ? x : ::Io::Flow::V0::Models::Price.new(x))
            @categories = HttpClient::Preconditions.assert_class('categories', (x = opts.delete(:categories); x.nil? ? [] : x), Array).map { |v| HttpClient::Preconditions.assert_class('categories', v, String) }
            @description = (x = opts.delete(:description); x.nil? ? nil : HttpClient::Preconditions.assert_class('description', x, String))
            @attributes = HttpClient::Preconditions.assert_class('attributes', (x = opts.delete(:attributes); x.nil? ? {} : x), Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h }
            @dimensions = (x = opts.delete(:dimensions); x.is_a?(::Io::Flow::V0::Models::Dimensions) ? x : ::Io::Flow::V0::Models::Dimensions.new(x))
            @images = HttpClient::Preconditions.assert_class('images', (x = opts.delete(:images); x.nil? ? [] : x), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::Image) ? x : ::Io::Flow::V0::Models::Image.new(x)) }
            @local = (x = opts.delete(:local); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Local) ? x : ::Io::Flow::V0::Models::Local.new(x)))
            @created_at = (x = opts.delete(:created_at); x.nil? ? nil : HttpClient::Preconditions.assert_class('created_at', HttpClient::Helper.to_date_time_iso8601(x), DateTime))
            @updated_at = (x = opts.delete(:updated_at); x.nil? ? nil : HttpClient::Preconditions.assert_class('updated_at', HttpClient::Helper.to_date_time_iso8601(x), DateTime))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            Item.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :number => number,
              :locale => locale,
              :name => name,
              :price => price.to_hash,
              :categories => categories,
              :description => description,
              :attributes => attributes,
              :dimensions => dimensions.to_hash,
              :images => images.map { |o| o.to_hash },
              :local => local.nil? ? nil : local.to_hash,
              :created_at => created_at,
              :updated_at => updated_at
            }
          end

        end

        class ItemAttributesPatchForm

          attr_reader :attributes

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @attributes = HttpClient::Preconditions.assert_class('attributes', (x = opts.delete(:attributes); x.nil? ? {} : x), Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ItemAttributesPatchForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :attributes => attributes
            }
          end

        end

        # The item form defines the data required to create an item.
        class ItemForm

          attr_reader :number, :locale, :name, :currency, :price, :categories, :description, :attributes, :dimensions, :images

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:number, :locale, :name, :currency, :price], 'ItemForm')
            @number = HttpClient::Preconditions.assert_class('number', opts.delete(:number), String)
            @locale = HttpClient::Preconditions.assert_class('locale', opts.delete(:locale), String)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
            @currency = HttpClient::Preconditions.assert_class('currency', opts.delete(:currency), String)
            @price = HttpClient::Preconditions.assert_class('price', opts.delete(:price), Numeric)
            @categories = (x = opts.delete(:categories); x.nil? ? nil : HttpClient::Preconditions.assert_class('categories', x, Array).map { |v| HttpClient::Preconditions.assert_class('categories', v, String) })
            @description = (x = opts.delete(:description); x.nil? ? nil : HttpClient::Preconditions.assert_class('description', x, String))
            @attributes = (x = opts.delete(:attributes); x.nil? ? nil : HttpClient::Preconditions.assert_class('attributes', x, Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h })
            @dimensions = (x = opts.delete(:dimensions); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Dimensions) ? x : ::Io::Flow::V0::Models::Dimensions.new(x)))
            @images = (x = opts.delete(:images); x.nil? ? nil : HttpClient::Preconditions.assert_class('images', x, Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::ImageForm) ? x : ::Io::Flow::V0::Models::ImageForm.new(x)) })
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ItemForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :number => number,
              :locale => locale,
              :name => name,
              :currency => currency,
              :price => price,
              :categories => categories.nil? ? nil : categories,
              :description => description,
              :attributes => attributes.nil? ? nil : attributes,
              :dimensions => dimensions.nil? ? nil : dimensions.to_hash,
              :images => images.nil? ? nil : images.map { |o| o.to_hash }
            }
          end

        end

        # The item form overlay defines data to merge into an item form.
        class ItemFormOverlay

          attr_reader :id, :number, :key, :position, :price, :categories, :description, :attributes, :dimensions, :images

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :number, :key, :position], 'ItemFormOverlay')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @number = HttpClient::Preconditions.assert_class('number', opts.delete(:number), String)
            @key = HttpClient::Preconditions.assert_class('key', opts.delete(:key), String)
            @position = HttpClient::Preconditions.assert_class('position', opts.delete(:position), Integer)
            @price = (x = opts.delete(:price); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Price) ? x : ::Io::Flow::V0::Models::Price.new(x)))
            @categories = (x = opts.delete(:categories); x.nil? ? nil : HttpClient::Preconditions.assert_class('categories', x, Array).map { |v| HttpClient::Preconditions.assert_class('categories', v, String) })
            @description = (x = opts.delete(:description); x.nil? ? nil : HttpClient::Preconditions.assert_class('description', x, String))
            @attributes = (x = opts.delete(:attributes); x.nil? ? nil : HttpClient::Preconditions.assert_class('attributes', x, Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h })
            @dimensions = (x = opts.delete(:dimensions); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Dimensions) ? x : ::Io::Flow::V0::Models::Dimensions.new(x)))
            @images = (x = opts.delete(:images); x.nil? ? nil : HttpClient::Preconditions.assert_class('images', x, Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::ImageForm) ? x : ::Io::Flow::V0::Models::ImageForm.new(x)) })
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ItemFormOverlay.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :number => number,
              :key => key,
              :position => position,
              :price => price.nil? ? nil : price.to_hash,
              :categories => categories.nil? ? nil : categories,
              :description => description,
              :attributes => attributes.nil? ? nil : attributes,
              :dimensions => dimensions.nil? ? nil : dimensions.to_hash,
              :images => images.nil? ? nil : images.map { |o| o.to_hash }
            }
          end

        end

        class ItemFormOverlayForm

          attr_reader :number, :price, :currency, :position, :categories, :description, :attributes, :dimensions, :images

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:number], 'ItemFormOverlayForm')
            @number = HttpClient::Preconditions.assert_class('number', opts.delete(:number), String)
            @price = (x = opts.delete(:price); x.nil? ? nil : HttpClient::Preconditions.assert_class('price', x, Numeric))
            @currency = (x = opts.delete(:currency); x.nil? ? nil : HttpClient::Preconditions.assert_class('currency', x, String))
            @position = (x = opts.delete(:position); x.nil? ? nil : HttpClient::Preconditions.assert_class('position', x, Integer))
            @categories = (x = opts.delete(:categories); x.nil? ? nil : HttpClient::Preconditions.assert_class('categories', x, Array).map { |v| HttpClient::Preconditions.assert_class('categories', v, String) })
            @description = (x = opts.delete(:description); x.nil? ? nil : HttpClient::Preconditions.assert_class('description', x, String))
            @attributes = (x = opts.delete(:attributes); x.nil? ? nil : HttpClient::Preconditions.assert_class('attributes', x, Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h })
            @dimensions = (x = opts.delete(:dimensions); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Dimensions) ? x : ::Io::Flow::V0::Models::Dimensions.new(x)))
            @images = (x = opts.delete(:images); x.nil? ? nil : HttpClient::Preconditions.assert_class('images', x, Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::ImageForm) ? x : ::Io::Flow::V0::Models::ImageForm.new(x)) })
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ItemFormOverlayForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :number => number,
              :price => price,
              :currency => currency,
              :position => position,
              :categories => categories.nil? ? nil : categories,
              :description => description,
              :attributes => attributes.nil? ? nil : attributes,
              :dimensions => dimensions.nil? ? nil : dimensions.to_hash,
              :images => images.nil? ? nil : images.map { |o| o.to_hash }
            }
          end

        end

        # Defines a fixed and percent margin to apply to items matching a query.
        class ItemMargin

          attr_reader :id, :key, :name, :q, :fixed, :percent, :position, :experience

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :key, :name, :q, :fixed, :percent, :position], 'ItemMargin')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @key = HttpClient::Preconditions.assert_class('key', opts.delete(:key), String)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
            @q = HttpClient::Preconditions.assert_class('q', opts.delete(:q), String)
            @fixed = HttpClient::Preconditions.assert_class('fixed', HttpClient::Helper.to_big_decimal(opts.delete(:fixed)), BigDecimal)
            @percent = HttpClient::Preconditions.assert_class('percent', HttpClient::Helper.to_big_decimal(opts.delete(:percent)), BigDecimal)
            @position = HttpClient::Preconditions.assert_class('position', opts.delete(:position), Integer)
            @experience = (x = opts.delete(:experience); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::ExperienceReference) ? x : ::Io::Flow::V0::Models::ExperienceReference.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ItemMargin.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :key => key,
              :name => name,
              :q => q,
              :fixed => fixed.to_f.to_s,
              :percent => percent.to_f.to_s,
              :position => position,
              :experience => experience.nil? ? nil : experience.to_hash
            }
          end

        end

        class ItemMarginDeletedV2 < Event

          attr_reader :event_id, :timestamp, :organization, :item_margin

          def initialize(incoming={})
            super(:discriminator => Event::Types::ITEM_MARGIN_DELETED_V2)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :item_margin], 'ItemMarginDeletedV2')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @item_margin = (x = opts.delete(:item_margin); x.is_a?(::Io::Flow::V0::Models::ItemMargin) ? x : ::Io::Flow::V0::Models::ItemMargin.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ItemMarginDeletedV2.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :item_margin => item_margin.to_hash
            }
          end

        end

        # A percent and/or fixed margin to apply to items based on query.
        class ItemMarginPostForm

          attr_reader :name, :q, :key, :fixed, :percent, :position

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:name, :q], 'ItemMarginPostForm')
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
            @q = HttpClient::Preconditions.assert_class('q', opts.delete(:q), String)
            @key = (x = opts.delete(:key); x.nil? ? nil : HttpClient::Preconditions.assert_class('key', x, String))
            @fixed = (x = opts.delete(:fixed); x.nil? ? nil : HttpClient::Preconditions.assert_class('fixed', HttpClient::Helper.to_big_decimal(x), BigDecimal))
            @percent = (x = opts.delete(:percent); x.nil? ? nil : HttpClient::Preconditions.assert_class('percent', HttpClient::Helper.to_big_decimal(x), BigDecimal))
            @position = (x = opts.delete(:position); x.nil? ? nil : HttpClient::Preconditions.assert_class('position', x, Integer))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ItemMarginPostForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :name => name,
              :q => q,
              :key => key,
              :fixed => fixed.to_f.to_s,
              :percent => percent.to_f.to_s,
              :position => position
            }
          end

        end

        # A percent and/or fixed margin to apply to items based on query.
        class ItemMarginPutForm

          attr_reader :name, :q, :fixed, :percent, :position

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:name, :q], 'ItemMarginPutForm')
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
            @q = HttpClient::Preconditions.assert_class('q', opts.delete(:q), String)
            @fixed = (x = opts.delete(:fixed); x.nil? ? nil : HttpClient::Preconditions.assert_class('fixed', HttpClient::Helper.to_big_decimal(x), BigDecimal))
            @percent = (x = opts.delete(:percent); x.nil? ? nil : HttpClient::Preconditions.assert_class('percent', HttpClient::Helper.to_big_decimal(x), BigDecimal))
            @position = (x = opts.delete(:position); x.nil? ? nil : HttpClient::Preconditions.assert_class('position', x, Integer))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ItemMarginPutForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :name => name,
              :q => q,
              :fixed => fixed.to_f.to_s,
              :percent => percent.to_f.to_s,
              :position => position
            }
          end

        end

        class ItemMarginUpsertedV2 < Event

          attr_reader :event_id, :timestamp, :organization, :item_margin

          def initialize(incoming={})
            super(:discriminator => Event::Types::ITEM_MARGIN_UPSERTED_V2)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :item_margin], 'ItemMarginUpsertedV2')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @item_margin = (x = opts.delete(:item_margin); x.is_a?(::Io::Flow::V0::Models::ItemMargin) ? x : ::Io::Flow::V0::Models::ItemMargin.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ItemMarginUpsertedV2.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :item_margin => item_margin.to_hash
            }
          end

        end

        class ItemMarginVersion

          attr_reader :id, :timestamp, :type, :item_margin

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :timestamp, :type, :item_margin], 'ItemMarginVersion')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::V0::Models::ChangeType) ? x : ::Io::Flow::V0::Models::ChangeType.apply(x))
            @item_margin = (x = opts.delete(:item_margin); x.is_a?(::Io::Flow::V0::Models::ItemMargin) ? x : ::Io::Flow::V0::Models::ItemMargin.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ItemMarginVersion.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :timestamp => timestamp,
              :type => type.value,
              :item_margin => item_margin.to_hash
            }
          end

        end

        class ItemOriginDeleted < Event

          attr_reader :event_id, :timestamp, :organization, :number, :origin

          def initialize(incoming={})
            super(:discriminator => Event::Types::ITEM_ORIGIN_DELETED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :number, :origin], 'ItemOriginDeleted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @number = HttpClient::Preconditions.assert_class('number', opts.delete(:number), String)
            @origin = HttpClient::Preconditions.assert_class('origin', opts.delete(:origin), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ItemOriginDeleted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :number => number,
              :origin => origin
            }
          end

        end

        # Event raised whenever an item is assigned a country of origin. Note that one
        # item may have multiple countries of origin.
        class ItemOriginUpserted < Event

          attr_reader :event_id, :timestamp, :organization, :number, :origin

          def initialize(incoming={})
            super(:discriminator => Event::Types::ITEM_ORIGIN_UPSERTED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :number, :origin], 'ItemOriginUpserted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @number = HttpClient::Preconditions.assert_class('number', opts.delete(:number), String)
            @origin = HttpClient::Preconditions.assert_class('origin', opts.delete(:origin), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ItemOriginUpserted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :number => number,
              :origin => origin
            }
          end

        end

        # The item price update form is used to update only the price (and attributes,
        # eg. msrp) of given item. This form defines the format of the CSV import.
        class ItemPriceUpdateForm

          attr_reader :number, :currency, :price, :attributes

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:number, :price], 'ItemPriceUpdateForm')
            @number = HttpClient::Preconditions.assert_class('number', opts.delete(:number), String)
            @currency = (x = opts.delete(:currency); x.nil? ? nil : HttpClient::Preconditions.assert_class('currency', x, String))
            @price = HttpClient::Preconditions.assert_class('price', HttpClient::Helper.to_big_decimal(opts.delete(:price)), BigDecimal)
            @attributes = HttpClient::Preconditions.assert_class('attributes', (x = opts.delete(:attributes); x.nil? ? {} : x), Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ItemPriceUpdateForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :number => number,
              :currency => currency,
              :price => price.to_f.to_s,
              :attributes => attributes
            }
          end

        end

        class ItemPriceUpdatePutForm

          attr_reader :currency, :price, :attributes

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:price], 'ItemPriceUpdatePutForm')
            @currency = (x = opts.delete(:currency); x.nil? ? nil : HttpClient::Preconditions.assert_class('currency', x, String))
            @price = HttpClient::Preconditions.assert_class('price', HttpClient::Helper.to_big_decimal(opts.delete(:price)), BigDecimal)
            @attributes = HttpClient::Preconditions.assert_class('attributes', (x = opts.delete(:attributes); x.nil? ? {} : x), Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ItemPriceUpdatePutForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :currency => currency,
              :price => price.to_f.to_s,
              :attributes => attributes
            }
          end

        end

        class ItemQuerySuggestion

          attr_reader :q, :count

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:q], 'ItemQuerySuggestion')
            @q = HttpClient::Preconditions.assert_class('q', opts.delete(:q), String)
            @count = (x = opts.delete(:count); x.nil? ? nil : HttpClient::Preconditions.assert_class('count', x, Integer))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ItemQuerySuggestion.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :q => q,
              :count => count
            }
          end

        end

        class ItemReference

          attr_reader :number

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:number], 'ItemReference')
            @number = HttpClient::Preconditions.assert_class('number', opts.delete(:number), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ItemReference.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :number => number
            }
          end

        end

        class ItemSalesMarginDeleted < Event

          attr_reader :event_id, :timestamp, :item_sales_margin_id, :organization_id, :experience_key

          def initialize(incoming={})
            super(:discriminator => Event::Types::ITEM_SALES_MARGIN_DELETED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :item_sales_margin_id, :organization_id, :experience_key], 'ItemSalesMarginDeleted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @item_sales_margin_id = HttpClient::Preconditions.assert_class('item_sales_margin_id', opts.delete(:item_sales_margin_id), String)
            @organization_id = HttpClient::Preconditions.assert_class('organization_id', opts.delete(:organization_id), String)
            @experience_key = HttpClient::Preconditions.assert_class('experience_key', opts.delete(:experience_key), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ItemSalesMarginDeleted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :item_sales_margin_id => item_sales_margin_id,
              :organization_id => organization_id,
              :experience_key => experience_key
            }
          end

        end

        class ItemSalesMarginUpserted < Event

          attr_reader :event_id, :timestamp, :item_sales_margin_id, :organization_id, :experience_key, :name, :q, :fixed, :percent, :position

          def initialize(incoming={})
            super(:discriminator => Event::Types::ITEM_SALES_MARGIN_UPSERTED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :item_sales_margin_id, :organization_id, :experience_key, :name, :q, :fixed, :percent, :position], 'ItemSalesMarginUpserted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @item_sales_margin_id = HttpClient::Preconditions.assert_class('item_sales_margin_id', opts.delete(:item_sales_margin_id), String)
            @organization_id = HttpClient::Preconditions.assert_class('organization_id', opts.delete(:organization_id), String)
            @experience_key = HttpClient::Preconditions.assert_class('experience_key', opts.delete(:experience_key), String)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
            @q = HttpClient::Preconditions.assert_class('q', opts.delete(:q), String)
            @fixed = HttpClient::Preconditions.assert_class('fixed', HttpClient::Helper.to_big_decimal(opts.delete(:fixed)), BigDecimal)
            @percent = HttpClient::Preconditions.assert_class('percent', HttpClient::Helper.to_big_decimal(opts.delete(:percent)), BigDecimal)
            @position = HttpClient::Preconditions.assert_class('position', opts.delete(:position), Integer)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ItemSalesMarginUpserted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :item_sales_margin_id => item_sales_margin_id,
              :organization_id => organization_id,
              :experience_key => experience_key,
              :name => name,
              :q => q,
              :fixed => fixed.to_f.to_s,
              :percent => percent.to_f.to_s,
              :position => position
            }
          end

        end

        # Available shipping price(s) a customer sees. This can be used for targetted
        # ads on Google or to display shipping price(s) on a PDP.
        class ItemShippingPricing

          attr_reader :min, :max

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:min], 'ItemShippingPricing')
            @min = (x = opts.delete(:min); x.is_a?(::Io::Flow::V0::Models::Price) ? x : ::Io::Flow::V0::Models::Price.new(x))
            @max = (x = opts.delete(:max); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Price) ? x : ::Io::Flow::V0::Models::Price.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ItemShippingPricing.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :min => min.to_hash,
              :max => max.nil? ? nil : max.to_hash
            }
          end

        end

        # Statistics covering product catalog item information, including total catalog
        # item count, number of distinct categories, etc.
        class ItemStatistics

          attr_reader :items, :categories

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:items, :categories], 'ItemStatistics')
            @items = HttpClient::Preconditions.assert_class('items', opts.delete(:items), Integer)
            @categories = HttpClient::Preconditions.assert_class('categories', opts.delete(:categories), Integer)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ItemStatistics.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :items => items,
              :categories => categories
            }
          end

        end

        class ItemVersion

          attr_reader :id, :timestamp, :type, :item

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :timestamp, :type, :item], 'ItemVersion')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::V0::Models::ChangeType) ? x : ::Io::Flow::V0::Models::ChangeType.apply(x))
            @item = (x = opts.delete(:item); x.is_a?(::Io::Flow::V0::Models::Item) ? x : ::Io::Flow::V0::Models::Item.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ItemVersion.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :timestamp => timestamp,
              :type => type.value,
              :item => item.to_hash
            }
          end

        end

        # The jsonp_response defines the schema for all Flow APIs calls made over JSONP,
        # providing access to the specific response status, headers, and body from the
        # underlying service.  See https://docs.flow.io/#jsonp for details
        class JsonpResponse

          attr_reader :status, :headers, :body

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:status, :headers, :body], 'JsonpResponse')
            @status = HttpClient::Preconditions.assert_class('status', opts.delete(:status), Integer)
            @headers = HttpClient::Preconditions.assert_class('headers', opts.delete(:headers), Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('headers', d[1], Array).map { |v| HttpClient::Preconditions.assert_class('headers', v, String) }; h }
            @body = HttpClient::Preconditions.assert_class('body', HttpClient::Helper.to_object(opts.delete(:body)), Hash)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            JsonpResponse.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :status => status,
              :headers => headers.inject({}) { |hash, o| hash[o[0]] = o[1].nil? ? nil : o[1]; hash },
              :body => body
            }
          end

        end

        # Options that allow the user to pay with, example Pay over time
        class KlarnaPaymentCategory

          attr_reader :id, :name, :standard_asset_url, :descriptive_asset_url

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :name], 'KlarnaPaymentCategory')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
            @standard_asset_url = (x = opts.delete(:standard_asset_url); x.nil? ? nil : HttpClient::Preconditions.assert_class('standard_asset_url', x, String))
            @descriptive_asset_url = (x = opts.delete(:descriptive_asset_url); x.nil? ? nil : HttpClient::Preconditions.assert_class('descriptive_asset_url', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            KlarnaPaymentCategory.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :name => name,
              :standard_asset_url => standard_asset_url,
              :descriptive_asset_url => descriptive_asset_url
            }
          end

        end

        class KlarnaPaymentMethodCategory

          attr_reader :id, :name, :standard_asset_url, :descriptive_asset_url

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id], 'KlarnaPaymentMethodCategory')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @name = (x = opts.delete(:name); x.nil? ? nil : HttpClient::Preconditions.assert_class('name', x, String))
            @standard_asset_url = (x = opts.delete(:standard_asset_url); x.nil? ? nil : HttpClient::Preconditions.assert_class('standard_asset_url', x, String))
            @descriptive_asset_url = (x = opts.delete(:descriptive_asset_url); x.nil? ? nil : HttpClient::Preconditions.assert_class('descriptive_asset_url', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            KlarnaPaymentMethodCategory.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :name => name,
              :standard_asset_url => standard_asset_url,
              :descriptive_asset_url => descriptive_asset_url
            }
          end

        end

        # Provides details for Klarna authorizations (e.g. client secret to be used in
        # the Klarna SDK).
        class KlarnaSdkAuthorizationResultActionDetails < AuthorizationResultActionDetails

          attr_reader :client_token, :payment_method_categories

          def initialize(incoming={})
            super(:discriminator => AuthorizationResultActionDetails::Types::KLARNA_SDK_AUTHORIZATION_RESULT_ACTION_DETAILS)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:client_token, :payment_method_categories], 'KlarnaSdkAuthorizationResultActionDetails')
            @client_token = HttpClient::Preconditions.assert_class('client_token', opts.delete(:client_token), String)
            @payment_method_categories = HttpClient::Preconditions.assert_class('payment_method_categories', opts.delete(:payment_method_categories), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::KlarnaPaymentMethodCategory) ? x : ::Io::Flow::V0::Models::KlarnaPaymentMethodCategory.new(x)) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            KlarnaSdkAuthorizationResultActionDetails.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :client_token => client_token,
              :payment_method_categories => payment_method_categories.map { |o| o.to_hash }
            }
          end

        end

        class KlaviyoLineItem

          attr_reader :content, :quantity, :price, :line_price

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:content, :quantity, :price, :line_price], 'KlaviyoLineItem')
            @content = (x = opts.delete(:content); x.is_a?(::Io::Flow::V0::Models::CheckoutItemContent) ? x : ::Io::Flow::V0::Models::CheckoutItemContent.new(x))
            @quantity = HttpClient::Preconditions.assert_class('quantity', opts.delete(:quantity), Integer)
            @price = (x = opts.delete(:price); x.is_a?(::Io::Flow::V0::Models::PriceWithBase) ? x : ::Io::Flow::V0::Models::PriceWithBase.new(x))
            @line_price = (x = opts.delete(:line_price); x.is_a?(::Io::Flow::V0::Models::PriceWithBase) ? x : ::Io::Flow::V0::Models::PriceWithBase.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            KlaviyoLineItem.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :content => content.to_hash,
              :quantity => quantity,
              :price => price.to_hash,
              :line_price => line_price.to_hash
            }
          end

        end

        class KlaviyoOrderContent

          attr_reader :line_items, :prices, :checkout_url

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:line_items, :prices, :checkout_url], 'KlaviyoOrderContent')
            @line_items = HttpClient::Preconditions.assert_class('line_items', opts.delete(:line_items), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::KlaviyoLineItem) ? x : ::Io::Flow::V0::Models::KlaviyoLineItem.new(x)) }
            @prices = (x = opts.delete(:prices); x.is_a?(::Io::Flow::V0::Models::KlaviyoOrderPrices) ? x : ::Io::Flow::V0::Models::KlaviyoOrderPrices.new(x))
            @checkout_url = HttpClient::Preconditions.assert_class('checkout_url', opts.delete(:checkout_url), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            KlaviyoOrderContent.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :line_items => line_items.map { |o| o.to_hash },
              :prices => prices.to_hash,
              :checkout_url => checkout_url
            }
          end

        end

        # Contains cart related data.
        class KlaviyoOrderPrices

          attr_reader :subtotal, :vat, :duty, :discount, :shipping, :insurance, :total

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:subtotal, :total], 'KlaviyoOrderPrices')
            @subtotal = (x = opts.delete(:subtotal); x.is_a?(::Io::Flow::V0::Models::PriceWithBase) ? x : ::Io::Flow::V0::Models::PriceWithBase.new(x))
            @vat = (x = opts.delete(:vat); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::PriceWithBase) ? x : ::Io::Flow::V0::Models::PriceWithBase.new(x)))
            @duty = (x = opts.delete(:duty); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::PriceWithBase) ? x : ::Io::Flow::V0::Models::PriceWithBase.new(x)))
            @discount = (x = opts.delete(:discount); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::PriceWithBase) ? x : ::Io::Flow::V0::Models::PriceWithBase.new(x)))
            @shipping = (x = opts.delete(:shipping); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::PriceWithBase) ? x : ::Io::Flow::V0::Models::PriceWithBase.new(x)))
            @insurance = (x = opts.delete(:insurance); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::PriceWithBase) ? x : ::Io::Flow::V0::Models::PriceWithBase.new(x)))
            @total = (x = opts.delete(:total); x.is_a?(::Io::Flow::V0::Models::PriceWithBase) ? x : ::Io::Flow::V0::Models::PriceWithBase.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            KlaviyoOrderPrices.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :subtotal => subtotal.to_hash,
              :vat => vat.nil? ? nil : vat.to_hash,
              :duty => duty.nil? ? nil : duty.to_hash,
              :discount => discount.nil? ? nil : discount.to_hash,
              :shipping => shipping.nil? ? nil : shipping.to_hash,
              :insurance => insurance.nil? ? nil : insurance.to_hash,
              :total => total.to_hash
            }
          end

        end

        class LabelDeletedV2 < Event

          attr_reader :event_id, :timestamp, :organization, :label

          def initialize(incoming={})
            super(:discriminator => Event::Types::LABEL_DELETED_V2)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :label], 'LabelDeletedV2')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @label = (x = opts.delete(:label); x.is_a?(::Io::Flow::V0::Models::ShippingLabel) ? x : ::Io::Flow::V0::Models::ShippingLabel.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            LabelDeletedV2.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :label => label.to_hash
            }
          end

        end

        class LabelFormatDeleted < Event

          attr_reader :event_id, :timestamp, :organization, :experience_key

          def initialize(incoming={})
            super(:discriminator => Event::Types::LABEL_FORMAT_DELETED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :experience_key], 'LabelFormatDeleted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @experience_key = HttpClient::Preconditions.assert_class('experience_key', opts.delete(:experience_key), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            LabelFormatDeleted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :experience_key => experience_key
            }
          end

        end

        class LabelFormatUpserted < Event

          attr_reader :event_id, :timestamp, :organization, :experience_key, :format

          def initialize(incoming={})
            super(:discriminator => Event::Types::LABEL_FORMAT_UPSERTED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :experience_key, :format], 'LabelFormatUpserted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @experience_key = HttpClient::Preconditions.assert_class('experience_key', opts.delete(:experience_key), String)
            @format = HttpClient::Preconditions.assert_class('format', opts.delete(:format), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            LabelFormatUpserted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :experience_key => experience_key,
              :format => format
            }
          end

        end

        class LabelOrderSummary

          attr_reader :id, :number

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :number], 'LabelOrderSummary')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @number = HttpClient::Preconditions.assert_class('number', opts.delete(:number), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            LabelOrderSummary.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :number => number
            }
          end

        end

        class LabelUpserted < Event

          attr_reader :event_id, :timestamp, :organization, :label_id, :carrier_tracking_number, :commercial_invoice, :flow_tracking_number, :destination, :origin, :carrier, :service, :zpl, :pdf, :png, :order, :carrier_tracking_number_url, :flow_tracking_number_url, :center_key, :recipient, :package, :order_identifier, :fulfillment_key

          def initialize(incoming={})
            super(:discriminator => Event::Types::LABEL_UPSERTED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :label_id, :carrier_tracking_number, :commercial_invoice, :flow_tracking_number, :destination, :origin, :carrier, :service], 'LabelUpserted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @label_id = HttpClient::Preconditions.assert_class('label_id', opts.delete(:label_id), String)
            @carrier_tracking_number = HttpClient::Preconditions.assert_class('carrier_tracking_number', opts.delete(:carrier_tracking_number), String)
            @commercial_invoice = HttpClient::Preconditions.assert_class('commercial_invoice', opts.delete(:commercial_invoice), String)
            @flow_tracking_number = HttpClient::Preconditions.assert_class('flow_tracking_number', opts.delete(:flow_tracking_number), String)
            @destination = (x = opts.delete(:destination); x.is_a?(::Io::Flow::V0::Models::ShippingAddress) ? x : ::Io::Flow::V0::Models::ShippingAddress.new(x))
            @origin = (x = opts.delete(:origin); x.is_a?(::Io::Flow::V0::Models::ShippingAddress) ? x : ::Io::Flow::V0::Models::ShippingAddress.new(x))
            @carrier = HttpClient::Preconditions.assert_class('carrier', opts.delete(:carrier), String)
            @service = HttpClient::Preconditions.assert_class('service', opts.delete(:service), String)
            @zpl = (x = opts.delete(:zpl); x.nil? ? nil : HttpClient::Preconditions.assert_class('zpl', x, String))
            @pdf = (x = opts.delete(:pdf); x.nil? ? nil : HttpClient::Preconditions.assert_class('pdf', x, String))
            @png = (x = opts.delete(:png); x.nil? ? nil : HttpClient::Preconditions.assert_class('png', x, String))
            @order = (x = opts.delete(:order); x.nil? ? nil : HttpClient::Preconditions.assert_class('order', x, String))
            @carrier_tracking_number_url = (x = opts.delete(:carrier_tracking_number_url); x.nil? ? nil : HttpClient::Preconditions.assert_class('carrier_tracking_number_url', x, String))
            @flow_tracking_number_url = (x = opts.delete(:flow_tracking_number_url); x.nil? ? nil : HttpClient::Preconditions.assert_class('flow_tracking_number_url', x, String))
            @center_key = (x = opts.delete(:center_key); x.nil? ? nil : HttpClient::Preconditions.assert_class('center_key', x, String))
            @recipient = (x = opts.delete(:recipient); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::ShipmentRecipient) ? x : ::Io::Flow::V0::Models::ShipmentRecipient.apply(x)))
            @package = (x = opts.delete(:package); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::ShippingLabelPackage) ? x : ::Io::Flow::V0::Models::ShippingLabelPackage.new(x)))
            @order_identifier = (x = opts.delete(:order_identifier); x.nil? ? nil : HttpClient::Preconditions.assert_class('order_identifier', x, String))
            @fulfillment_key = (x = opts.delete(:fulfillment_key); x.nil? ? nil : HttpClient::Preconditions.assert_class('fulfillment_key', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            LabelUpserted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :label_id => label_id,
              :carrier_tracking_number => carrier_tracking_number,
              :commercial_invoice => commercial_invoice,
              :flow_tracking_number => flow_tracking_number,
              :destination => destination.to_hash,
              :origin => origin.to_hash,
              :carrier => carrier,
              :service => service,
              :zpl => zpl,
              :pdf => pdf,
              :png => png,
              :order => order,
              :carrier_tracking_number_url => carrier_tracking_number_url,
              :flow_tracking_number_url => flow_tracking_number_url,
              :center_key => center_key,
              :recipient => recipient.nil? ? nil : recipient.value,
              :package => package.nil? ? nil : package.to_hash,
              :order_identifier => order_identifier,
              :fulfillment_key => fulfillment_key
            }
          end

        end

        class LabelUpsertedV2 < Event

          attr_reader :event_id, :timestamp, :organization, :label

          def initialize(incoming={})
            super(:discriminator => Event::Types::LABEL_UPSERTED_V2)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :label], 'LabelUpsertedV2')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @label = (x = opts.delete(:label); x.is_a?(::Io::Flow::V0::Models::ShippingLabel) ? x : ::Io::Flow::V0::Models::ShippingLabel.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            LabelUpsertedV2.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :label => label.to_hash
            }
          end

        end

        # Tuple of item number, origin (from) country and destination (to) country
        class LandedCostItem

          attr_reader :number, :origin, :destination

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:number, :origin, :destination], 'LandedCostItem')
            @number = HttpClient::Preconditions.assert_class('number', opts.delete(:number), String)
            @origin = HttpClient::Preconditions.assert_class('origin', opts.delete(:origin), String)
            @destination = HttpClient::Preconditions.assert_class('destination', opts.delete(:destination), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            LandedCostItem.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :number => number,
              :origin => origin,
              :destination => destination
            }
          end

        end

        # The tariff codes, duty rates and tax rates associated with an
        # origin/destination pair. Does not take into account sales province
        class LaneLandedCost

          attr_reader :origin, :destination, :tariff_code, :effective_duty, :tax

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:origin, :destination, :tariff_code, :effective_duty, :tax], 'LaneLandedCost')
            @origin = HttpClient::Preconditions.assert_class('origin', opts.delete(:origin), String)
            @destination = HttpClient::Preconditions.assert_class('destination', opts.delete(:destination), String)
            @tariff_code = HttpClient::Preconditions.assert_class('tariff_code', opts.delete(:tariff_code), String)
            @effective_duty = (x = opts.delete(:effective_duty); x.is_a?(::Io::Flow::V0::Models::Duty) ? x : ::Io::Flow::V0::Models::Duty.new(x))
            @tax = (x = opts.delete(:tax); x.is_a?(::Io::Flow::V0::Models::Tax) ? x : ::Io::Flow::V0::Models::Tax.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            LaneLandedCost.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :origin => origin,
              :destination => destination,
              :tariff_code => tariff_code,
              :effective_duty => effective_duty.to_hash,
              :tax => tax.to_hash
            }
          end

        end

        class LaneSummary

          attr_reader :id, :ratecard

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :ratecard], 'LaneSummary')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @ratecard = (x = opts.delete(:ratecard); x.is_a?(::Io::Flow::V0::Models::RatecardSummary) ? x : ::Io::Flow::V0::Models::RatecardSummary.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            LaneSummary.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :ratecard => ratecard.to_hash
            }
          end

        end

        # ISO 639 2-character language code. See https://api.flow.io/reference/languages
        class Language

          attr_reader :name, :iso_639_2

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:name, :iso_639_2], 'Language')
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
            @iso_639_2 = HttpClient::Preconditions.assert_class('iso_639_2', opts.delete(:iso_639_2), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            Language.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :name => name,
              :iso_639_2 => iso_639_2
            }
          end

        end

        # Provides display data for a line item.
        class Line

          attr_reader :id, :item_number, :quantity, :price, :total, :attributes

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:item_number, :quantity, :price, :total], 'Line')
            @id = (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, String))
            @item_number = HttpClient::Preconditions.assert_class('item_number', opts.delete(:item_number), String)
            @quantity = HttpClient::Preconditions.assert_class('quantity', opts.delete(:quantity), Integer)
            @price = (x = opts.delete(:price); x.is_a?(::Io::Flow::V0::Models::PriceWithBase) ? x : ::Io::Flow::V0::Models::PriceWithBase.new(x))
            @total = (x = opts.delete(:total); x.is_a?(::Io::Flow::V0::Models::PriceWithBase) ? x : ::Io::Flow::V0::Models::PriceWithBase.new(x))
            @attributes = (x = opts.delete(:attributes); x.nil? ? nil : HttpClient::Preconditions.assert_class('attributes', x, Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h })
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            Line.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :item_number => item_number,
              :quantity => quantity,
              :price => price.to_hash,
              :total => total.to_hash,
              :attributes => attributes.nil? ? nil : attributes
            }
          end

        end

        # Line items represent the items a consumer is purchasing, including additional
        # information to complete the transaction. Note that you may pass in as many
        # line items as you like - including repeating item numbers across line items.
        class LineItem

          attr_reader :number, :quantity, :price, :attributes, :center, :discount

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:number, :quantity, :price, :attributes], 'LineItem')
            @number = HttpClient::Preconditions.assert_class('number', opts.delete(:number), String)
            @quantity = HttpClient::Preconditions.assert_class('quantity', opts.delete(:quantity), Integer)
            @price = (x = opts.delete(:price); x.is_a?(::Io::Flow::V0::Models::Money) ? x : ::Io::Flow::V0::Models::Money.new(x))
            @attributes = HttpClient::Preconditions.assert_class('attributes', opts.delete(:attributes), Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h }
            @center = (x = opts.delete(:center); x.nil? ? nil : HttpClient::Preconditions.assert_class('center', x, String))
            @discount = (x = opts.delete(:discount); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Money) ? x : ::Io::Flow::V0::Models::Money.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            LineItem.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :number => number,
              :quantity => quantity,
              :price => price.to_hash,
              :attributes => attributes,
              :center => center,
              :discount => discount.nil? ? nil : discount.to_hash
            }
          end

        end

        class LineItemAttributesForm

          attr_reader :attributes

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:attributes], 'LineItemAttributesForm')
            @attributes = HttpClient::Preconditions.assert_class('attributes', opts.delete(:attributes), Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            LineItemAttributesForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :attributes => attributes
            }
          end

        end

        # Line items represent the items a consumer is purchasing, including additional
        # information to complete the transaction. Note that you may pass in as many
        # line items as you like - including repeating item numbers across line items.
        class LineItemForm

          attr_reader :number, :quantity, :shipment_estimate, :price, :attributes, :center, :discount, :discounts

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:number, :quantity], 'LineItemForm')
            @number = HttpClient::Preconditions.assert_class('number', opts.delete(:number), String)
            @quantity = HttpClient::Preconditions.assert_class('quantity', opts.delete(:quantity), Integer)
            @shipment_estimate = (x = opts.delete(:shipment_estimate); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::DatetimeRange) ? x : ::Io::Flow::V0::Models::DatetimeRange.new(x)))
            @price = (x = opts.delete(:price); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Money) ? x : ::Io::Flow::V0::Models::Money.new(x)))
            @attributes = (x = opts.delete(:attributes); x.nil? ? nil : HttpClient::Preconditions.assert_class('attributes', x, Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h })
            @center = (x = opts.delete(:center); x.nil? ? nil : HttpClient::Preconditions.assert_class('center', x, String))
            @discount = (x = opts.delete(:discount); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Money) ? x : ::Io::Flow::V0::Models::Money.new(x)))
            @discounts = (x = opts.delete(:discounts); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::DiscountsForm) ? x : ::Io::Flow::V0::Models::DiscountsForm.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            LineItemForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :number => number,
              :quantity => quantity,
              :shipment_estimate => shipment_estimate.nil? ? nil : shipment_estimate.to_hash,
              :price => price.nil? ? nil : price.to_hash,
              :attributes => attributes.nil? ? nil : attributes,
              :center => center,
              :discount => discount.nil? ? nil : discount.to_hash,
              :discounts => discounts.nil? ? nil : discounts.to_hash
            }
          end

        end

        class LineItemQuantityForm

          attr_reader :quantity

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:quantity], 'LineItemQuantityForm')
            @quantity = HttpClient::Preconditions.assert_class('quantity', opts.delete(:quantity), Integer)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            LineItemQuantityForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :quantity => quantity
            }
          end

        end

        class Link

          attr_reader :url

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:url], 'Link')
            @url = HttpClient::Preconditions.assert_class('url', opts.delete(:url), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            Link.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :url => url
            }
          end

        end

        class Local

          attr_reader :experience, :prices, :rates, :spot_rates, :status, :attributes, :price_attributes

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:experience, :prices, :rates, :spot_rates], 'Local')
            @experience = (x = opts.delete(:experience); x.is_a?(::Io::Flow::V0::Models::ExperienceSummary) ? x : ::Io::Flow::V0::Models::ExperienceSummary.new(x))
            @prices = HttpClient::Preconditions.assert_class('prices', opts.delete(:prices), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::LocalizedPrice) ? x : ::Io::Flow::V0::Models::LocalizedPrice.from_json(x)) }
            @rates = HttpClient::Preconditions.assert_class('rates', opts.delete(:rates), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::Rate) ? x : ::Io::Flow::V0::Models::Rate.new(x)) }
            @spot_rates = HttpClient::Preconditions.assert_class('spot_rates', opts.delete(:spot_rates), Array).map { |v| HttpClient::Preconditions.assert_class('spot_rates', HttpClient::Helper.to_object(v), Hash) }
            @status = (x = (x = opts.delete(:status); x.nil? ? "included" : x); x.is_a?(::Io::Flow::V0::Models::SubcatalogItemStatus) ? x : ::Io::Flow::V0::Models::SubcatalogItemStatus.apply(x))
            @attributes = (x = opts.delete(:attributes); x.nil? ? nil : HttpClient::Preconditions.assert_class('attributes', x, Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h })
            @price_attributes = (x = opts.delete(:price_attributes); x.nil? ? nil : HttpClient::Preconditions.assert_class('price_attributes', x, Hash).inject({}) { |h, d| h[d[0]] = (x = d[1]; x.is_a?(::Io::Flow::V0::Models::PriceWithBase) ? x : ::Io::Flow::V0::Models::PriceWithBase.new(x)); h })
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            Local.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :experience => experience.to_hash,
              :prices => prices.map { |o| o.to_hash },
              :rates => rates.map { |o| o.to_hash },
              :spot_rates => spot_rates,
              :status => status.value,
              :attributes => attributes.nil? ? nil : attributes,
              :price_attributes => price_attributes.nil? ? nil : price_attributes.inject({}) { |hash, o| hash[o[0]] = o[1].nil? ? nil : o[1].to_hash; hash }
            }
          end

        end

        # The Local Item represents all of the data for a given item that is localized
        # to a given experience.
        class LocalItem

          attr_reader :id, :experience, :center, :item, :pricing, :status, :attributes

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :experience, :item, :pricing, :status], 'LocalItem')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @experience = (x = opts.delete(:experience); x.is_a?(::Io::Flow::V0::Models::ExperienceSummary) ? x : ::Io::Flow::V0::Models::ExperienceSummary.new(x))
            @center = (x = opts.delete(:center); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::CenterSummary) ? x : ::Io::Flow::V0::Models::CenterSummary.new(x)))
            @item = (x = opts.delete(:item); x.is_a?(::Io::Flow::V0::Models::CatalogItemReference) ? x : ::Io::Flow::V0::Models::CatalogItemReference.new(x))
            @pricing = (x = opts.delete(:pricing); x.is_a?(::Io::Flow::V0::Models::LocalItemPricing) ? x : ::Io::Flow::V0::Models::LocalItemPricing.new(x))
            @status = (x = opts.delete(:status); x.is_a?(::Io::Flow::V0::Models::SubcatalogItemStatus) ? x : ::Io::Flow::V0::Models::SubcatalogItemStatus.apply(x))
            @attributes = (x = opts.delete(:attributes); x.nil? ? nil : HttpClient::Preconditions.assert_class('attributes', x, Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h })
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            LocalItem.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :experience => experience.to_hash,
              :center => center.nil? ? nil : center.to_hash,
              :item => item.to_hash,
              :pricing => pricing.to_hash,
              :status => status.value,
              :attributes => attributes.nil? ? nil : attributes
            }
          end

        end

        # Localized item attribute pricing information
        class LocalItemAttributePricing

          attr_reader :pretax_price, :vat, :duty, :price

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:pretax_price, :price], 'LocalItemAttributePricing')
            @pretax_price = (x = opts.delete(:pretax_price); x.is_a?(::Io::Flow::V0::Models::PriceWithBase) ? x : ::Io::Flow::V0::Models::PriceWithBase.new(x))
            @vat = (x = opts.delete(:vat); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::LocalizedItemVat) ? x : ::Io::Flow::V0::Models::LocalizedItemVat.new(x)))
            @duty = (x = opts.delete(:duty); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::LocalizedItemDuty) ? x : ::Io::Flow::V0::Models::LocalizedItemDuty.new(x)))
            @price = (x = opts.delete(:price); x.is_a?(::Io::Flow::V0::Models::LocalizedItemPrice) ? x : ::Io::Flow::V0::Models::LocalizedItemPrice.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            LocalItemAttributePricing.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :pretax_price => pretax_price.to_hash,
              :vat => vat.nil? ? nil : vat.to_hash,
              :duty => duty.nil? ? nil : duty.to_hash,
              :price => price.to_hash
            }
          end

        end

        class LocalItemDeleted < Event

          attr_reader :event_id, :timestamp, :organization, :local_item

          def initialize(incoming={})
            super(:discriminator => Event::Types::LOCAL_ITEM_DELETED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :local_item], 'LocalItemDeleted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @local_item = (x = opts.delete(:local_item); x.is_a?(::Io::Flow::V0::Models::LocalItem) ? x : ::Io::Flow::V0::Models::LocalItem.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            LocalItemDeleted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :local_item => local_item.to_hash
            }
          end

        end

        # Localized item pricing information
        class LocalItemPricing

          attr_reader :price, :vat, :duty, :shipping, :attributes, :price_attributes

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:price, :attributes], 'LocalItemPricing')
            @price = (x = opts.delete(:price); x.is_a?(::Io::Flow::V0::Models::LocalizedItemPrice) ? x : ::Io::Flow::V0::Models::LocalizedItemPrice.new(x))
            @vat = (x = opts.delete(:vat); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::LocalizedItemVat) ? x : ::Io::Flow::V0::Models::LocalizedItemVat.new(x)))
            @duty = (x = opts.delete(:duty); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::LocalizedItemDuty) ? x : ::Io::Flow::V0::Models::LocalizedItemDuty.new(x)))
            @shipping = (x = opts.delete(:shipping); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Price) ? x : ::Io::Flow::V0::Models::Price.new(x)))
            @attributes = HttpClient::Preconditions.assert_class('attributes', opts.delete(:attributes), Hash).inject({}) { |h, d| h[d[0]] = (x = d[1]; x.is_a?(::Io::Flow::V0::Models::PriceWithBase) ? x : ::Io::Flow::V0::Models::PriceWithBase.new(x)); h }
            @price_attributes = (x = opts.delete(:price_attributes); x.nil? ? nil : HttpClient::Preconditions.assert_class('price_attributes', x, Hash).inject({}) { |h, d| h[d[0]] = (x = d[1]; x.is_a?(::Io::Flow::V0::Models::LocalItemAttributePricing) ? x : ::Io::Flow::V0::Models::LocalItemAttributePricing.new(x)); h })
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            LocalItemPricing.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :price => price.to_hash,
              :vat => vat.nil? ? nil : vat.to_hash,
              :duty => duty.nil? ? nil : duty.to_hash,
              :shipping => shipping.nil? ? nil : shipping.to_hash,
              :attributes => attributes.inject({}) { |hash, o| hash[o[0]] = o[1].nil? ? nil : o[1].to_hash; hash },
              :price_attributes => price_attributes.nil? ? nil : price_attributes.inject({}) { |hash, o| hash[o[0]] = o[1].nil? ? nil : o[1].to_hash; hash }
            }
          end

        end

        class LocalItemUpserted < Event

          attr_reader :event_id, :timestamp, :organization, :local_item

          def initialize(incoming={})
            super(:discriminator => Event::Types::LOCAL_ITEM_UPSERTED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :local_item], 'LocalItemUpserted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @local_item = (x = opts.delete(:local_item); x.is_a?(::Io::Flow::V0::Models::LocalItem) ? x : ::Io::Flow::V0::Models::LocalItem.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            LocalItemUpserted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :local_item => local_item.to_hash
            }
          end

        end

        class LocalPriceDetails

          attr_reader :base, :local, :discount, :local_before_discount

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:base, :local], 'LocalPriceDetails')
            @base = (x = opts.delete(:base); x.is_a?(::Io::Flow::V0::Models::PriceDetails) ? x : ::Io::Flow::V0::Models::PriceDetails.new(x))
            @local = (x = opts.delete(:local); x.is_a?(::Io::Flow::V0::Models::PriceDetails) ? x : ::Io::Flow::V0::Models::PriceDetails.new(x))
            @discount = (x = opts.delete(:discount); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::PriceDetail) ? x : ::Io::Flow::V0::Models::PriceDetail.new(x)))
            @local_before_discount = (x = opts.delete(:local_before_discount); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::PriceDetail) ? x : ::Io::Flow::V0::Models::PriceDetail.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            LocalPriceDetails.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :base => base.to_hash,
              :local => local.to_hash,
              :discount => discount.nil? ? nil : discount.to_hash,
              :local_before_discount => local_before_discount.nil? ? nil : local_before_discount.to_hash
            }
          end

        end

        # If we found an experience for the given session, the localized information
        # will be presented here
        class LocalSession

          attr_reader :country, :currency, :language, :locale, :experience, :experiment

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:country, :currency, :language, :locale, :experience], 'LocalSession')
            @country = (x = opts.delete(:country); x.is_a?(::Io::Flow::V0::Models::Country) ? x : ::Io::Flow::V0::Models::Country.new(x))
            @currency = (x = opts.delete(:currency); x.is_a?(::Io::Flow::V0::Models::Currency) ? x : ::Io::Flow::V0::Models::Currency.new(x))
            @language = (x = opts.delete(:language); x.is_a?(::Io::Flow::V0::Models::Language) ? x : ::Io::Flow::V0::Models::Language.new(x))
            @locale = (x = opts.delete(:locale); x.is_a?(::Io::Flow::V0::Models::Locale) ? x : ::Io::Flow::V0::Models::Locale.new(x))
            @experience = (x = opts.delete(:experience); x.is_a?(::Io::Flow::V0::Models::ExperienceGeo) ? x : ::Io::Flow::V0::Models::ExperienceGeo.new(x))
            @experiment = (x = opts.delete(:experiment); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::SessionExperiment) ? x : ::Io::Flow::V0::Models::SessionExperiment.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            LocalSession.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :country => country.to_hash,
              :currency => currency.to_hash,
              :language => language.to_hash,
              :locale => locale.to_hash,
              :experience => experience.to_hash,
              :experiment => experiment.nil? ? nil : experiment.to_hash
            }
          end

        end

        # Locales defines standard conventions for presentation of content. See
        # https://api.flow.io/reference/locales
        class Locale

          attr_reader :id, :name, :country, :language, :numbers

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :name, :country, :language, :numbers], 'Locale')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
            @country = HttpClient::Preconditions.assert_class('country', opts.delete(:country), String)
            @language = HttpClient::Preconditions.assert_class('language', opts.delete(:language), String)
            @numbers = (x = opts.delete(:numbers); x.is_a?(::Io::Flow::V0::Models::LocaleNumbers) ? x : ::Io::Flow::V0::Models::LocaleNumbers.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            Locale.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :name => name,
              :country => country,
              :language => language,
              :numbers => numbers.to_hash
            }
          end

        end

        # Number formats defined for a given locale
        class LocaleNumbers

          attr_reader :decimal, :group

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:decimal, :group], 'LocaleNumbers')
            @decimal = HttpClient::Preconditions.assert_class('decimal', opts.delete(:decimal), String)
            @group = HttpClient::Preconditions.assert_class('group', opts.delete(:group), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            LocaleNumbers.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :decimal => decimal,
              :group => group
            }
          end

        end

        class LocalizedAdjustment

          attr_reader :currency, :amount, :label, :base, :reason

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:currency, :amount, :label, :base, :reason], 'LocalizedAdjustment')
            @currency = HttpClient::Preconditions.assert_class('currency', opts.delete(:currency), String)
            @amount = HttpClient::Preconditions.assert_class('amount', opts.delete(:amount), Numeric)
            @label = HttpClient::Preconditions.assert_class('label', opts.delete(:label), String)
            @base = (x = opts.delete(:base); x.is_a?(::Io::Flow::V0::Models::Price) ? x : ::Io::Flow::V0::Models::Price.new(x))
            @reason = (x = opts.delete(:reason); x.is_a?(::Io::Flow::V0::Models::AdjustmentReason) ? x : ::Io::Flow::V0::Models::AdjustmentReason.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            LocalizedAdjustment.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :currency => currency,
              :amount => amount,
              :label => label,
              :base => base.to_hash,
              :reason => reason.to_hash
            }
          end

        end

        class LocalizedItemDuty < LocalizedPrice

          attr_reader :currency, :amount, :label, :base, :adjustment, :basis

          def initialize(incoming={})
            super(:key => LocalizedPrice::Types::LOCALIZED_ITEM_DUTY)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:currency, :amount, :label, :base], 'LocalizedItemDuty')
            @currency = HttpClient::Preconditions.assert_class('currency', opts.delete(:currency), String)
            @amount = HttpClient::Preconditions.assert_class('amount', opts.delete(:amount), Numeric)
            @label = HttpClient::Preconditions.assert_class('label', opts.delete(:label), String)
            @base = (x = opts.delete(:base); x.is_a?(::Io::Flow::V0::Models::Price) ? x : ::Io::Flow::V0::Models::Price.new(x))
            @adjustment = (x = opts.delete(:adjustment); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::LocalizedAdjustment) ? x : ::Io::Flow::V0::Models::LocalizedAdjustment.new(x)))
            @basis = (x = opts.delete(:basis); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::MoneyWithBase) ? x : ::Io::Flow::V0::Models::MoneyWithBase.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            LocalizedItemDuty.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :currency => currency,
              :amount => amount,
              :label => label,
              :base => base.to_hash,
              :adjustment => adjustment.nil? ? nil : adjustment.to_hash,
              :basis => basis.nil? ? nil : basis.to_hash
            }
          end

        end

        class LocalizedItemPrice < LocalizedPrice

          attr_reader :currency, :amount, :label, :base, :includes

          def initialize(incoming={})
            super(:key => LocalizedPrice::Types::LOCALIZED_ITEM_PRICE)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:currency, :amount, :label, :base], 'LocalizedItemPrice')
            @currency = HttpClient::Preconditions.assert_class('currency', opts.delete(:currency), String)
            @amount = HttpClient::Preconditions.assert_class('amount', opts.delete(:amount), Numeric)
            @label = HttpClient::Preconditions.assert_class('label', opts.delete(:label), String)
            @base = (x = opts.delete(:base); x.is_a?(::Io::Flow::V0::Models::Price) ? x : ::Io::Flow::V0::Models::Price.new(x))
            @includes = (x = opts.delete(:includes); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::IncludedLevies) ? x : ::Io::Flow::V0::Models::IncludedLevies.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            LocalizedItemPrice.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :currency => currency,
              :amount => amount,
              :label => label,
              :base => base.to_hash,
              :includes => includes.nil? ? nil : includes.to_hash
            }
          end

        end

        # Exports localized item prices data
        class LocalizedItemPricesExportType < ExportType

          attr_reader :since

          def initialize(incoming={})
            super(:discriminator => ExportType::Types::LOCALIZED_ITEM_PRICES_EXPORT_TYPE)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @since = (x = opts.delete(:since); x.nil? ? nil : HttpClient::Preconditions.assert_class('since', HttpClient::Helper.to_date_time_iso8601(x), DateTime))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            LocalizedItemPricesExportType.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :since => since
            }
          end

        end

        class LocalizedItemVat < LocalizedPrice

          attr_reader :currency, :amount, :label, :base, :name, :adjustment, :accuracy, :basis

          def initialize(incoming={})
            super(:key => LocalizedPrice::Types::LOCALIZED_ITEM_VAT)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:currency, :amount, :label, :base, :name], 'LocalizedItemVat')
            @currency = HttpClient::Preconditions.assert_class('currency', opts.delete(:currency), String)
            @amount = HttpClient::Preconditions.assert_class('amount', opts.delete(:amount), Numeric)
            @label = HttpClient::Preconditions.assert_class('label', opts.delete(:label), String)
            @base = (x = opts.delete(:base); x.is_a?(::Io::Flow::V0::Models::Price) ? x : ::Io::Flow::V0::Models::Price.new(x))
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
            @adjustment = (x = opts.delete(:adjustment); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::LocalizedAdjustment) ? x : ::Io::Flow::V0::Models::LocalizedAdjustment.new(x)))
            @accuracy = (x = (x = opts.delete(:accuracy); x.nil? ? "calculated" : x); x.is_a?(::Io::Flow::V0::Models::PriceAccuracy) ? x : ::Io::Flow::V0::Models::PriceAccuracy.apply(x))
            @basis = (x = opts.delete(:basis); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::MoneyWithBase) ? x : ::Io::Flow::V0::Models::MoneyWithBase.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            LocalizedItemVat.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :currency => currency,
              :amount => amount,
              :label => label,
              :base => base.to_hash,
              :name => name,
              :adjustment => adjustment.nil? ? nil : adjustment.to_hash,
              :accuracy => accuracy.value,
              :basis => basis.nil? ? nil : basis.to_hash
            }
          end

        end

        # Line items on the order, with localized pricing information
        class LocalizedLineItem

          attr_reader :id, :number, :name, :quantity, :center, :price, :discount, :discounts, :attributes, :local, :shipment_estimate, :price_source

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:number, :name, :quantity, :local], 'LocalizedLineItem')
            @id = (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, String))
            @number = HttpClient::Preconditions.assert_class('number', opts.delete(:number), String)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
            @quantity = HttpClient::Preconditions.assert_class('quantity', opts.delete(:quantity), Integer)
            @center = (x = opts.delete(:center); x.nil? ? nil : HttpClient::Preconditions.assert_class('center', x, String))
            @price = (x = opts.delete(:price); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Money) ? x : ::Io::Flow::V0::Models::Money.new(x)))
            @discount = (x = opts.delete(:discount); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::LocalizedLineItemDiscount) ? x : ::Io::Flow::V0::Models::LocalizedLineItemDiscount.new(x)))
            @discounts = (x = opts.delete(:discounts); x.nil? ? nil : HttpClient::Preconditions.assert_class('discounts', x, Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::LocalizedLineItemDiscount) ? x : ::Io::Flow::V0::Models::LocalizedLineItemDiscount.new(x)) })
            @attributes = (x = opts.delete(:attributes); x.nil? ? nil : HttpClient::Preconditions.assert_class('attributes', x, Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h })
            @local = (x = opts.delete(:local); x.is_a?(::Io::Flow::V0::Models::Local) ? x : ::Io::Flow::V0::Models::Local.new(x))
            @shipment_estimate = (x = opts.delete(:shipment_estimate); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::DatetimeRange) ? x : ::Io::Flow::V0::Models::DatetimeRange.new(x)))
            @price_source = (x = opts.delete(:price_source); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::PriceSource) ? x : ::Io::Flow::V0::Models::PriceSource.from_json(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            LocalizedLineItem.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :number => number,
              :name => name,
              :quantity => quantity,
              :center => center,
              :price => price.nil? ? nil : price.to_hash,
              :discount => discount.nil? ? nil : discount.to_hash,
              :discounts => discounts.nil? ? nil : discounts.map { |o| o.to_hash },
              :attributes => attributes.nil? ? nil : attributes,
              :local => local.to_hash,
              :shipment_estimate => shipment_estimate.nil? ? nil : shipment_estimate.to_hash,
              :price_source => price_source.nil? ? nil : price_source.to_hash
            }
          end

        end

        # Represents the requested, base, and localized amounts for a discount on a
        # given line item. It applies to the entire line regardless of quantity.
        class LocalizedLineItemDiscount

          attr_reader :amount, :currency, :label, :base, :requested, :discount_label

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:amount, :currency], 'LocalizedLineItemDiscount')
            @amount = HttpClient::Preconditions.assert_class('amount', opts.delete(:amount), Numeric)
            @currency = HttpClient::Preconditions.assert_class('currency', opts.delete(:currency), String)
            @label = (x = opts.delete(:label); x.nil? ? nil : HttpClient::Preconditions.assert_class('label', x, String))
            @base = (x = opts.delete(:base); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Price) ? x : ::Io::Flow::V0::Models::Price.new(x)))
            @requested = (x = opts.delete(:requested); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Money) ? x : ::Io::Flow::V0::Models::Money.new(x)))
            @discount_label = (x = opts.delete(:discount_label); x.nil? ? nil : HttpClient::Preconditions.assert_class('discount_label', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            LocalizedLineItemDiscount.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :amount => amount,
              :currency => currency,
              :label => label,
              :base => base.nil? ? nil : base.to_hash,
              :requested => requested.nil? ? nil : requested.to_hash,
              :discount_label => discount_label
            }
          end

        end

        class LocalizedTotal < LocalizedPrice

          attr_reader :currency, :amount, :label, :base

          def initialize(incoming={})
            super(:key => LocalizedPrice::Types::LOCALIZED_TOTAL)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:currency, :amount, :label, :base], 'LocalizedTotal')
            @currency = HttpClient::Preconditions.assert_class('currency', opts.delete(:currency), String)
            @amount = HttpClient::Preconditions.assert_class('amount', opts.delete(:amount), Numeric)
            @label = HttpClient::Preconditions.assert_class('label', opts.delete(:label), String)
            @base = (x = opts.delete(:base); x.is_a?(::Io::Flow::V0::Models::Price) ? x : ::Io::Flow::V0::Models::Price.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            LocalizedTotal.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :currency => currency,
              :amount => amount,
              :label => label,
              :base => base.to_hash
            }
          end

        end

        # Localized translation of a given province/region/country
        class LocalizedTranslation

          attr_reader :locale, :name

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:locale, :name], 'LocalizedTranslation')
            @locale = (x = opts.delete(:locale); x.is_a?(::Io::Flow::V0::Models::Locale) ? x : ::Io::Flow::V0::Models::Locale.new(x))
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            LocalizedTranslation.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :locale => locale.to_hash,
              :name => name
            }
          end

        end

        class LocationError

          attr_reader :code, :messages

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:code, :messages], 'LocationError')
            @code = (x = opts.delete(:code); x.is_a?(::Io::Flow::V0::Models::LocationErrorCode) ? x : ::Io::Flow::V0::Models::LocationErrorCode.apply(x))
            @messages = HttpClient::Preconditions.assert_class('messages', opts.delete(:messages), Array).map { |v| HttpClient::Preconditions.assert_class('messages', v, String) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            LocationError.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :code => code.value,
              :messages => messages
            }
          end

        end

        class LogisticsSettings

          attr_reader :shipping_configuration

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:shipping_configuration], 'LogisticsSettings')
            @shipping_configuration = (x = opts.delete(:shipping_configuration); x.is_a?(::Io::Flow::V0::Models::ShippingConfigurationReference) ? x : ::Io::Flow::V0::Models::ShippingConfigurationReference.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            LogisticsSettings.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :shipping_configuration => shipping_configuration.to_hash
            }
          end

        end

        # Represents closeout of a group of labels that have been transferred to the
        # carrier for shipping
        class Manifest

          attr_reader :id, :timestamp, :shipping_labels, :pdf, :service

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :timestamp, :shipping_labels], 'Manifest')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @shipping_labels = HttpClient::Preconditions.assert_class('shipping_labels', opts.delete(:shipping_labels), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::ShippingLabelSummary) ? x : ::Io::Flow::V0::Models::ShippingLabelSummary.new(x)) }
            @pdf = (x = opts.delete(:pdf); x.nil? ? nil : HttpClient::Preconditions.assert_class('pdf', x, String))
            @service = (x = opts.delete(:service); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::ServiceSummary) ? x : ::Io::Flow::V0::Models::ServiceSummary.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            Manifest.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :timestamp => timestamp,
              :shipping_labels => shipping_labels.map { |o| o.to_hash },
              :pdf => pdf,
              :service => service.nil? ? nil : service.to_hash
            }
          end

        end

        class ManifestForm

          attr_reader :tracking_numbers, :service

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:tracking_numbers], 'ManifestForm')
            @tracking_numbers = HttpClient::Preconditions.assert_class('tracking_numbers', opts.delete(:tracking_numbers), Array).map { |v| HttpClient::Preconditions.assert_class('tracking_numbers', v, String) }
            @service = (x = opts.delete(:service); x.nil? ? nil : HttpClient::Preconditions.assert_class('service', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ManifestForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :tracking_numbers => tracking_numbers,
              :service => service
            }
          end

        end

        class ManifestedLabelDeleted < Event

          attr_reader :event_id, :timestamp, :id

          def initialize(incoming={})
            super(:discriminator => Event::Types::MANIFESTED_LABEL_DELETED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :id], 'ManifestedLabelDeleted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ManifestedLabelDeleted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :id => id
            }
          end

        end

        class ManifestedLabelUpserted < Event

          attr_reader :event_id, :timestamp, :organization, :id, :manifest_id, :label_id, :flow_tracking_number, :carrier_tracking_number, :order_identifier, :fulfillment_key

          def initialize(incoming={})
            super(:discriminator => Event::Types::MANIFESTED_LABEL_UPSERTED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :id, :manifest_id, :label_id, :flow_tracking_number, :carrier_tracking_number], 'ManifestedLabelUpserted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @manifest_id = HttpClient::Preconditions.assert_class('manifest_id', opts.delete(:manifest_id), String)
            @label_id = HttpClient::Preconditions.assert_class('label_id', opts.delete(:label_id), String)
            @flow_tracking_number = HttpClient::Preconditions.assert_class('flow_tracking_number', opts.delete(:flow_tracking_number), String)
            @carrier_tracking_number = HttpClient::Preconditions.assert_class('carrier_tracking_number', opts.delete(:carrier_tracking_number), String)
            @order_identifier = (x = opts.delete(:order_identifier); x.nil? ? nil : HttpClient::Preconditions.assert_class('order_identifier', x, String))
            @fulfillment_key = (x = opts.delete(:fulfillment_key); x.nil? ? nil : HttpClient::Preconditions.assert_class('fulfillment_key', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ManifestedLabelUpserted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :id => id,
              :manifest_id => manifest_id,
              :label_id => label_id,
              :flow_tracking_number => flow_tracking_number,
              :carrier_tracking_number => carrier_tracking_number,
              :order_identifier => order_identifier,
              :fulfillment_key => fulfillment_key
            }
          end

        end

        class Margin

          attr_reader :type, :value

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:type, :value], 'Margin')
            @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::V0::Models::MarginType) ? x : ::Io::Flow::V0::Models::MarginType.apply(x))
            @value = HttpClient::Preconditions.assert_class('value', HttpClient::Helper.to_big_decimal(opts.delete(:value)), BigDecimal)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            Margin.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :type => type.value,
              :value => value.to_f.to_s
            }
          end

        end

        # Export of marketing feeds
        class MarketingFeedsExportType < ExportType

          attr_reader :organization, :feed_ids

          def initialize(incoming={})
            super(:discriminator => ExportType::Types::MARKETING_FEEDS_EXPORT_TYPE)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:organization, :feed_ids], 'MarketingFeedsExportType')
            @organization = (x = opts.delete(:organization); x.is_a?(::Io::Flow::V0::Models::OrganizationReference) ? x : ::Io::Flow::V0::Models::OrganizationReference.new(x))
            @feed_ids = HttpClient::Preconditions.assert_class('feed_ids', opts.delete(:feed_ids), Array).map { |v| HttpClient::Preconditions.assert_class('feed_ids', v, String) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            MarketingFeedsExportType.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :organization => organization.to_hash,
              :feed_ids => feed_ids
            }
          end

        end

        class Measurement

          attr_reader :value, :units

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:value, :units], 'Measurement')
            @value = HttpClient::Preconditions.assert_class('value', opts.delete(:value), String)
            @units = (x = opts.delete(:units); x.is_a?(::Io::Flow::V0::Models::UnitOfMeasurement) ? x : ::Io::Flow::V0::Models::UnitOfMeasurement.apply(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            Measurement.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :value => value,
              :units => units.value
            }
          end

        end

        # Represents the users that are part of this organization. Primary purpose is to
        # manage which users have access to the organization's data and to provide a
        # simple user interface to assign roles and permissions to each member of the
        # organization
        class Membership

          attr_reader :id, :organization, :user, :role, :roles

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :organization, :user, :roles], 'Membership')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @organization = (x = opts.delete(:organization); x.is_a?(::Io::Flow::V0::Models::ExpandableOrganization) ? x : ::Io::Flow::V0::Models::ExpandableOrganization.from_json(x))
            @user = (x = opts.delete(:user); x.is_a?(::Io::Flow::V0::Models::ExpandableUser) ? x : ::Io::Flow::V0::Models::ExpandableUser.from_json(x))
            @role = (x = opts.delete(:role); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Role) ? x : ::Io::Flow::V0::Models::Role.apply(x)))
            @roles = HttpClient::Preconditions.assert_class('roles', opts.delete(:roles), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::FlowRole) ? x : ::Io::Flow::V0::Models::FlowRole.apply(x)) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            Membership.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :organization => organization.to_hash,
              :user => user.to_hash,
              :role => role.nil? ? nil : role.value,
              :roles => roles.map { |o| o.value }
            }
          end

        end

        class MembershipDeletedV2 < Event

          attr_reader :event_id, :timestamp, :membership

          def initialize(incoming={})
            super(:discriminator => Event::Types::MEMBERSHIP_DELETED_V2)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :membership], 'MembershipDeletedV2')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @membership = (x = opts.delete(:membership); x.is_a?(::Io::Flow::V0::Models::Membership) ? x : ::Io::Flow::V0::Models::Membership.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            MembershipDeletedV2.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :membership => membership.to_hash
            }
          end

        end

        # Top level resource to create a membership.
        class MembershipForm

          attr_reader :organization, :user, :role, :roles

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:organization, :user], 'MembershipForm')
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @user = HttpClient::Preconditions.assert_class('user', opts.delete(:user), String)
            @role = (x = (x = opts.delete(:role); x.nil? ? "member" : x); x.is_a?(::Io::Flow::V0::Models::Role) ? x : ::Io::Flow::V0::Models::Role.apply(x))
            @roles = HttpClient::Preconditions.assert_class('roles', (x = opts.delete(:roles); x.nil? ? [] : x), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::FlowRole) ? x : ::Io::Flow::V0::Models::FlowRole.apply(x)) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            MembershipForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :organization => organization,
              :user => user,
              :role => role.value,
              :roles => roles.map { |o| o.value }
            }
          end

        end

        # Top level resource to update a membership.
        class MembershipPutForm

          attr_reader :role, :roles

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @role = (x = (x = opts.delete(:role); x.nil? ? "member" : x); x.is_a?(::Io::Flow::V0::Models::Role) ? x : ::Io::Flow::V0::Models::Role.apply(x))
            @roles = HttpClient::Preconditions.assert_class('roles', (x = opts.delete(:roles); x.nil? ? [] : x), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::FlowRole) ? x : ::Io::Flow::V0::Models::FlowRole.apply(x)) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            MembershipPutForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :role => role.value,
              :roles => roles.map { |o| o.value }
            }
          end

        end

        class MembershipUpsertedV2 < Event

          attr_reader :event_id, :timestamp, :membership

          def initialize(incoming={})
            super(:discriminator => Event::Types::MEMBERSHIP_UPSERTED_V2)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :membership], 'MembershipUpsertedV2')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @membership = (x = opts.delete(:membership); x.is_a?(::Io::Flow::V0::Models::Membership) ? x : ::Io::Flow::V0::Models::Membership.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            MembershipUpsertedV2.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :membership => membership.to_hash
            }
          end

        end

        class MembershipVersion

          attr_reader :id, :timestamp, :type, :membership

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :timestamp, :type, :membership], 'MembershipVersion')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::V0::Models::ChangeType) ? x : ::Io::Flow::V0::Models::ChangeType.apply(x))
            @membership = (x = opts.delete(:membership); x.is_a?(::Io::Flow::V0::Models::Membership) ? x : ::Io::Flow::V0::Models::Membership.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            MembershipVersion.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :timestamp => timestamp,
              :type => type.value,
              :membership => membership.to_hash
            }
          end

        end

        class MerchantGiftCardBalance

          attr_reader :amount, :currency

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:amount, :currency], 'MerchantGiftCardBalance')
            @amount = HttpClient::Preconditions.assert_class('amount', HttpClient::Helper.to_big_decimal(opts.delete(:amount)), BigDecimal)
            @currency = HttpClient::Preconditions.assert_class('currency', opts.delete(:currency), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            MerchantGiftCardBalance.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :amount => amount.to_f.to_s,
              :currency => currency
            }
          end

        end

        class MerchantGiftCardBalanceForm

          attr_reader :number

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:number], 'MerchantGiftCardBalanceForm')
            @number = HttpClient::Preconditions.assert_class('number', opts.delete(:number), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            MerchantGiftCardBalanceForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :number => number
            }
          end

        end

        class MerchantGiftCardError

          attr_reader :code, :messages

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:code], 'MerchantGiftCardError')
            @code = (x = opts.delete(:code); x.is_a?(::Io::Flow::V0::Models::MerchantGiftCardErrorCode) ? x : ::Io::Flow::V0::Models::MerchantGiftCardErrorCode.apply(x))
            @messages = (x = opts.delete(:messages); x.nil? ? nil : HttpClient::Preconditions.assert_class('messages', x, Array).map { |v| HttpClient::Preconditions.assert_class('messages', v, String) })
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            MerchantGiftCardError.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :code => code.value,
              :messages => messages.nil? ? nil : messages
            }
          end

        end

        class MerchantGiftCardRedemption

          attr_reader :id

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id], 'MerchantGiftCardRedemption')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            MerchantGiftCardRedemption.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id
            }
          end

        end

        class MerchantGiftCardRedemptionForm

          attr_reader :number, :amount, :currency

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:number, :amount, :currency], 'MerchantGiftCardRedemptionForm')
            @number = HttpClient::Preconditions.assert_class('number', opts.delete(:number), String)
            @amount = HttpClient::Preconditions.assert_class('amount', HttpClient::Helper.to_big_decimal(opts.delete(:amount)), BigDecimal)
            @currency = HttpClient::Preconditions.assert_class('currency', opts.delete(:currency), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            MerchantGiftCardRedemptionForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :number => number,
              :amount => amount.to_f.to_s,
              :currency => currency
            }
          end

        end

        class MerchantGiftCardReversal

          attr_reader :id

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id], 'MerchantGiftCardReversal')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            MerchantGiftCardReversal.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id
            }
          end

        end

        class MerchantGiftCardReversalForm

          attr_reader :number, :amount, :currency

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:number, :amount, :currency], 'MerchantGiftCardReversalForm')
            @number = HttpClient::Preconditions.assert_class('number', opts.delete(:number), String)
            @amount = HttpClient::Preconditions.assert_class('amount', HttpClient::Helper.to_big_decimal(opts.delete(:amount)), BigDecimal)
            @currency = HttpClient::Preconditions.assert_class('currency', opts.delete(:currency), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            MerchantGiftCardReversalForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :number => number,
              :amount => amount.to_f.to_s,
              :currency => currency
            }
          end

        end

        # Creates an authorization for a transaction for which Flow is the merchant of
        # record. In this case, you must provide your order number for a valid Flow
        # order. An authorization is used to check and reserve funds w/ a given payment
        # method. No funds are actually transferred; once you have you an authorization,
        # you can capture up to the amount of the authorization
        class MerchantOfRecordAuthorizationForm < AuthorizationForm

          attr_reader :token, :order_number, :amount, :currency, :key, :cvv, :attributes, :ip, :options, :redirect_urls, :browser_info, :inline_action_configuration

          def initialize(incoming={})
            super(:discriminator => AuthorizationForm::Types::MERCHANT_OF_RECORD_AUTHORIZATION_FORM)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:token, :order_number], 'MerchantOfRecordAuthorizationForm')
            @token = HttpClient::Preconditions.assert_class('token', opts.delete(:token), String)
            @order_number = HttpClient::Preconditions.assert_class('order_number', opts.delete(:order_number), String)
            @amount = (x = opts.delete(:amount); x.nil? ? nil : HttpClient::Preconditions.assert_class('amount', HttpClient::Helper.to_big_decimal(x), BigDecimal))
            @currency = (x = opts.delete(:currency); x.nil? ? nil : HttpClient::Preconditions.assert_class('currency', x, String))
            @key = (x = opts.delete(:key); x.nil? ? nil : HttpClient::Preconditions.assert_class('key', x, String))
            @cvv = (x = opts.delete(:cvv); x.nil? ? nil : HttpClient::Preconditions.assert_class('cvv', x, String))
            @attributes = (x = opts.delete(:attributes); x.nil? ? nil : HttpClient::Preconditions.assert_class('attributes', x, Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h })
            @ip = (x = opts.delete(:ip); x.nil? ? nil : HttpClient::Preconditions.assert_class('ip', x, String))
            @options = (x = opts.delete(:options); x.nil? ? nil : HttpClient::Preconditions.assert_class('options', x, Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::AuthorizationOption) ? x : ::Io::Flow::V0::Models::AuthorizationOption.apply(x)) })
            @redirect_urls = (x = opts.delete(:redirect_urls); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::PostPaymentRedirectUrls) ? x : ::Io::Flow::V0::Models::PostPaymentRedirectUrls.new(x)))
            @browser_info = (x = opts.delete(:browser_info); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::BrowserInfo) ? x : ::Io::Flow::V0::Models::BrowserInfo.new(x)))
            @inline_action_configuration = (x = opts.delete(:inline_action_configuration); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::InlineActionConfiguration) ? x : ::Io::Flow::V0::Models::InlineActionConfiguration.from_json(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            MerchantOfRecordAuthorizationForm.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :token => token,
              :order_number => order_number,
              :amount => amount.to_f.to_s,
              :currency => currency,
              :key => key,
              :cvv => cvv,
              :attributes => attributes.nil? ? nil : attributes,
              :ip => ip,
              :options => options.nil? ? nil : options.map { |o| o.value },
              :redirect_urls => redirect_urls.nil? ? nil : redirect_urls.to_hash,
              :browser_info => browser_info.nil? ? nil : browser_info.to_hash,
              :inline_action_configuration => inline_action_configuration.nil? ? nil : inline_action_configuration.to_hash
            }
          end

        end

        # The merchant of record entity provides the legal name and address of the
        # specific Flow entity serving as merchant of record.
        class MerchantOfRecordEntity

          attr_reader :organization, :name, :vat, :identifiers, :streets, :city, :province, :postal, :country, :phone, :email

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:organization, :name, :streets, :city, :country], 'MerchantOfRecordEntity')
            @organization = (x = opts.delete(:organization); x.is_a?(::Io::Flow::V0::Models::OrganizationReference) ? x : ::Io::Flow::V0::Models::OrganizationReference.new(x))
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
            @vat = (x = opts.delete(:vat); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::MerchantOfRecordEntityRegistration) ? x : ::Io::Flow::V0::Models::MerchantOfRecordEntityRegistration.new(x)))
            @identifiers = (x = opts.delete(:identifiers); x.nil? ? nil : HttpClient::Preconditions.assert_class('identifiers', x, Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::EntityIdentifier) ? x : ::Io::Flow::V0::Models::EntityIdentifier.new(x)) })
            @streets = HttpClient::Preconditions.assert_class('streets', opts.delete(:streets), Array).map { |v| HttpClient::Preconditions.assert_class('streets', v, String) }
            @city = HttpClient::Preconditions.assert_class('city', opts.delete(:city), String)
            @province = (x = opts.delete(:province); x.nil? ? nil : HttpClient::Preconditions.assert_class('province', x, String))
            @postal = (x = opts.delete(:postal); x.nil? ? nil : HttpClient::Preconditions.assert_class('postal', x, String))
            @country = HttpClient::Preconditions.assert_class('country', opts.delete(:country), String)
            @phone = (x = opts.delete(:phone); x.nil? ? nil : HttpClient::Preconditions.assert_class('phone', x, String))
            @email = (x = opts.delete(:email); x.nil? ? nil : HttpClient::Preconditions.assert_class('email', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            MerchantOfRecordEntity.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :organization => organization.to_hash,
              :name => name,
              :vat => vat.nil? ? nil : vat.to_hash,
              :identifiers => identifiers.nil? ? nil : identifiers.map { |o| o.to_hash },
              :streets => streets,
              :city => city,
              :province => province,
              :postal => postal,
              :country => country,
              :phone => phone,
              :email => email
            }
          end

        end

        class MerchantOfRecordEntityRegistration

          attr_reader :number, :country

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:number, :country], 'MerchantOfRecordEntityRegistration')
            @number = HttpClient::Preconditions.assert_class('number', opts.delete(:number), String)
            @country = HttpClient::Preconditions.assert_class('country', opts.delete(:country), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            MerchantOfRecordEntityRegistration.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :number => number,
              :country => country
            }
          end

        end

        # Creates an online payment
        class MerchantOfRecordPaymentForm < PaymentForm

          attr_reader :method, :order_number, :amount, :currency

          def initialize(incoming={})
            super(:discriminator => PaymentForm::Types::MERCHANT_OF_RECORD_PAYMENT_FORM)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:method, :order_number, :amount, :currency], 'MerchantOfRecordPaymentForm')
            @method = HttpClient::Preconditions.assert_class('method', opts.delete(:method), String)
            @order_number = HttpClient::Preconditions.assert_class('order_number', opts.delete(:order_number), String)
            @amount = HttpClient::Preconditions.assert_class('amount', HttpClient::Helper.to_big_decimal(opts.delete(:amount)), BigDecimal)
            @currency = HttpClient::Preconditions.assert_class('currency', opts.delete(:currency), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            MerchantOfRecordPaymentForm.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :method => method,
              :order_number => order_number,
              :amount => amount.to_f.to_s,
              :currency => currency
            }
          end

        end

        # Money represents an amount in a given currency
        class Money

          attr_reader :amount, :currency

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:amount, :currency], 'Money')
            @amount = HttpClient::Preconditions.assert_class('amount', opts.delete(:amount), Numeric)
            @currency = HttpClient::Preconditions.assert_class('currency', opts.delete(:currency), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            Money.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :amount => amount,
              :currency => currency
            }
          end

        end

        class MoneyWithBase

          attr_reader :currency, :amount, :base

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:currency, :amount, :base], 'MoneyWithBase')
            @currency = HttpClient::Preconditions.assert_class('currency', opts.delete(:currency), String)
            @amount = HttpClient::Preconditions.assert_class('amount', opts.delete(:amount), Numeric)
            @base = (x = opts.delete(:base); x.is_a?(::Io::Flow::V0::Models::Money) ? x : ::Io::Flow::V0::Models::Money.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            MoneyWithBase.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :currency => currency,
              :amount => amount,
              :base => base.to_hash
            }
          end

        end

        # Used to migrate older models to have a base value, without breaking
        # compatibility
        class MoneyWithOptionalBase

          attr_reader :currency, :amount, :base

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:currency, :amount], 'MoneyWithOptionalBase')
            @currency = HttpClient::Preconditions.assert_class('currency', opts.delete(:currency), String)
            @amount = HttpClient::Preconditions.assert_class('amount', opts.delete(:amount), Numeric)
            @base = (x = opts.delete(:base); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Money) ? x : ::Io::Flow::V0::Models::Money.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            MoneyWithOptionalBase.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :currency => currency,
              :amount => amount,
              :base => base.nil? ? nil : base.to_hash
            }
          end

        end

        class Name

          attr_reader :first, :last

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @first = (x = opts.delete(:first); x.nil? ? nil : HttpClient::Preconditions.assert_class('first', x, String))
            @last = (x = opts.delete(:last); x.nil? ? nil : HttpClient::Preconditions.assert_class('last', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            Name.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :first => first,
              :last => last
            }
          end

        end

        class NameForm

          attr_reader :first, :last

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @first = (x = opts.delete(:first); x.nil? ? nil : HttpClient::Preconditions.assert_class('first', x, String))
            @last = (x = opts.delete(:last); x.nil? ? nil : HttpClient::Preconditions.assert_class('last', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            NameForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :first => first,
              :last => last
            }
          end

        end

        class NoInventoryReservationError < ReservationError

          attr_reader :messages, :items

          def initialize(incoming={})
            super(:code => ReservationError::Types::NO_INVENTORY_RESERVATION_ERROR)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:messages, :items], 'NoInventoryReservationError')
            @messages = HttpClient::Preconditions.assert_class('messages', opts.delete(:messages), Array).map { |v| HttpClient::Preconditions.assert_class('messages', v, String) }
            @items = HttpClient::Preconditions.assert_class('items', opts.delete(:items), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::NoInventoryReservationErrorItem) ? x : ::Io::Flow::V0::Models::NoInventoryReservationErrorItem.new(x)) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            NoInventoryReservationError.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :messages => messages,
              :items => items.map { |o| o.to_hash }
            }
          end

        end

        class NoInventoryReservationErrorItem

          attr_reader :number, :requested_quantity, :available_quantity

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:number, :requested_quantity, :available_quantity], 'NoInventoryReservationErrorItem')
            @number = HttpClient::Preconditions.assert_class('number', opts.delete(:number), String)
            @requested_quantity = HttpClient::Preconditions.assert_class('requested_quantity', opts.delete(:requested_quantity), Integer)
            @available_quantity = HttpClient::Preconditions.assert_class('available_quantity', opts.delete(:available_quantity), Integer)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            NoInventoryReservationErrorItem.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :number => number,
              :requested_quantity => requested_quantity,
              :available_quantity => available_quantity
            }
          end

        end

        class NotificationDeletedV2 < Event

          attr_reader :event_id, :timestamp, :organization, :notification

          def initialize(incoming={})
            super(:discriminator => Event::Types::NOTIFICATION_DELETED_V2)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :notification], 'NotificationDeletedV2')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @notification = (x = opts.delete(:notification); x.is_a?(::Io::Flow::V0::Models::ShippingNotification) ? x : ::Io::Flow::V0::Models::ShippingNotification.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            NotificationDeletedV2.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :notification => notification.to_hash
            }
          end

        end

        class NotificationUpsertedV2 < Event

          attr_reader :event_id, :timestamp, :organization, :notification

          def initialize(incoming={})
            super(:discriminator => Event::Types::NOTIFICATION_UPSERTED_V2)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :notification], 'NotificationUpsertedV2')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @notification = (x = opts.delete(:notification); x.is_a?(::Io::Flow::V0::Models::ShippingNotification) ? x : ::Io::Flow::V0::Models::ShippingNotification.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            NotificationUpsertedV2.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :notification => notification.to_hash
            }
          end

        end

        class NumberRange

          attr_reader :min, :max

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:min, :max], 'NumberRange')
            @min = HttpClient::Preconditions.assert_class('min', opts.delete(:min), Integer)
            @max = HttpClient::Preconditions.assert_class('max', opts.delete(:max), Integer)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            NumberRange.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :min => min,
              :max => max
            }
          end

        end

        class OnlineAuthorization < Authorization

          attr_reader :id, :key, :method, :merchant_of_record, :details, :payment, :amount, :currency, :requested, :customer, :attributes, :destination, :billing_address, :order, :payment_order_reference, :ip, :result, :created_at, :expires_at, :base, :processor

          def initialize(incoming={})
            super(:discriminator => Authorization::Types::ONLINE_AUTHORIZATION)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :key, :amount, :currency, :customer, :attributes, :result, :created_at], 'OnlineAuthorization')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @key = HttpClient::Preconditions.assert_class('key', opts.delete(:key), String)
            @method = (x = opts.delete(:method); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::PaymentMethod) ? x : ::Io::Flow::V0::Models::PaymentMethod.new(x)))
            @merchant_of_record = (x = (x = opts.delete(:merchant_of_record); x.nil? ? "flow" : x); x.is_a?(::Io::Flow::V0::Models::MerchantOfRecord) ? x : ::Io::Flow::V0::Models::MerchantOfRecord.apply(x))
            @details = (x = opts.delete(:details); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::OnlineAuthorizationDetails) ? x : ::Io::Flow::V0::Models::OnlineAuthorizationDetails.from_json(x)))
            @payment = (x = opts.delete(:payment); x.nil? ? nil : HttpClient::Preconditions.assert_class('payment', HttpClient::Helper.to_object(x), Hash))
            @amount = HttpClient::Preconditions.assert_class('amount', HttpClient::Helper.to_big_decimal(opts.delete(:amount)), BigDecimal)
            @currency = HttpClient::Preconditions.assert_class('currency', opts.delete(:currency), String)
            @requested = (x = opts.delete(:requested); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Money) ? x : ::Io::Flow::V0::Models::Money.new(x)))
            @customer = (x = opts.delete(:customer); x.is_a?(::Io::Flow::V0::Models::OrderCustomer) ? x : ::Io::Flow::V0::Models::OrderCustomer.new(x))
            @attributes = HttpClient::Preconditions.assert_class('attributes', opts.delete(:attributes), Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h }
            @destination = (x = opts.delete(:destination); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Address) ? x : ::Io::Flow::V0::Models::Address.new(x)))
            @billing_address = (x = opts.delete(:billing_address); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::BillingAddress) ? x : ::Io::Flow::V0::Models::BillingAddress.new(x)))
            @order = (x = opts.delete(:order); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::AuthorizationOrderReference) ? x : ::Io::Flow::V0::Models::AuthorizationOrderReference.new(x)))
            @payment_order_reference = (x = opts.delete(:payment_order_reference); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::PaymentOrderReference) ? x : ::Io::Flow::V0::Models::PaymentOrderReference.from_json(x)))
            @ip = (x = opts.delete(:ip); x.nil? ? nil : HttpClient::Preconditions.assert_class('ip', x, String))
            @result = (x = opts.delete(:result); x.is_a?(::Io::Flow::V0::Models::AuthorizationResult) ? x : ::Io::Flow::V0::Models::AuthorizationResult.new(x))
            @created_at = HttpClient::Preconditions.assert_class('created_at', HttpClient::Helper.to_date_time_iso8601(opts.delete(:created_at)), DateTime)
            @expires_at = (x = opts.delete(:expires_at); x.nil? ? nil : HttpClient::Preconditions.assert_class('expires_at', HttpClient::Helper.to_date_time_iso8601(x), DateTime))
            @base = (x = opts.delete(:base); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Money) ? x : ::Io::Flow::V0::Models::Money.new(x)))
            @processor = (x = opts.delete(:processor); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::ExpandablePaymentProcessor) ? x : ::Io::Flow::V0::Models::ExpandablePaymentProcessor.from_json(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OnlineAuthorization.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :id => id,
              :key => key,
              :method => method.nil? ? nil : method.to_hash,
              :merchant_of_record => merchant_of_record.value,
              :details => details.nil? ? nil : details.to_hash,
              :payment => payment,
              :amount => amount.to_f.to_s,
              :currency => currency,
              :requested => requested.nil? ? nil : requested.to_hash,
              :customer => customer.to_hash,
              :attributes => attributes,
              :destination => destination.nil? ? nil : destination.to_hash,
              :billing_address => billing_address.nil? ? nil : billing_address.to_hash,
              :order => order.nil? ? nil : order.to_hash,
              :payment_order_reference => payment_order_reference.nil? ? nil : payment_order_reference.to_hash,
              :ip => ip,
              :result => result.to_hash,
              :created_at => created_at,
              :expires_at => expires_at,
              :base => base.nil? ? nil : base.to_hash,
              :processor => processor.nil? ? nil : processor.to_hash
            }
          end

        end

        class OnlineAuthorizationDeletedV2 < Event

          attr_reader :event_id, :timestamp, :organization, :authorization

          def initialize(incoming={})
            super(:discriminator => Event::Types::ONLINE_AUTHORIZATION_DELETED_V2)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :authorization], 'OnlineAuthorizationDeletedV2')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @authorization = (x = opts.delete(:authorization); x.is_a?(::Io::Flow::V0::Models::OnlineAuthorization) ? x : ::Io::Flow::V0::Models::OnlineAuthorization.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OnlineAuthorizationDeletedV2.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :authorization => authorization.to_hash
            }
          end

        end

        # Represents an authorization for a card payment method
        class OnlineAuthorizationUpsertedV2 < Event

          attr_reader :event_id, :timestamp, :organization, :id, :authorization

          def initialize(incoming={})
            super(:discriminator => Event::Types::ONLINE_AUTHORIZATION_UPSERTED_V2)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :id, :authorization], 'OnlineAuthorizationUpsertedV2')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @authorization = (x = opts.delete(:authorization); x.is_a?(::Io::Flow::V0::Models::OnlineAuthorization) ? x : ::Io::Flow::V0::Models::OnlineAuthorization.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OnlineAuthorizationUpsertedV2.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :id => id,
              :authorization => authorization.to_hash
            }
          end

        end

        class OnlinePaymentAuthorizationForm < AuthorizationForm

          attr_reader :payment_id, :key

          def initialize(incoming={})
            super(:discriminator => AuthorizationForm::Types::ONLINE_PAYMENT_AUTHORIZATION_FORM)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:payment_id], 'OnlinePaymentAuthorizationForm')
            @payment_id = HttpClient::Preconditions.assert_class('payment_id', opts.delete(:payment_id), String)
            @key = (x = opts.delete(:key); x.nil? ? nil : HttpClient::Preconditions.assert_class('key', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OnlinePaymentAuthorizationForm.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :payment_id => payment_id,
              :key => key
            }
          end

        end

        class OptinResponse

          attr_reader :key, :value

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:key, :value], 'OptinResponse')
            @key = HttpClient::Preconditions.assert_class('key', opts.delete(:key), String)
            @value = (x = opts.delete(:value); x.is_a?(::Io::Flow::V0::Models::OptinResponseType) ? x : ::Io::Flow::V0::Models::OptinResponseType.apply(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OptinResponse.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :key => key,
              :value => value.value
            }
          end

        end

        class OptionWeightEstimates

          attr_reader :gravitational, :dimensional

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:gravitational, :dimensional], 'OptionWeightEstimates')
            @gravitational = (x = opts.delete(:gravitational); x.is_a?(::Io::Flow::V0::Models::Measurement) ? x : ::Io::Flow::V0::Models::Measurement.new(x))
            @dimensional = (x = opts.delete(:dimensional); x.is_a?(::Io::Flow::V0::Models::Measurement) ? x : ::Io::Flow::V0::Models::Measurement.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OptionWeightEstimates.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :gravitational => gravitational.to_hash,
              :dimensional => dimensional.to_hash
            }
          end

        end

        # Flags to indicate whether a feature is enabled/disabled on a particular model
        # (e.g. show/do not show attribute as a column in harmonization table view of
        # items)
        class Options

          attr_reader :required, :show_in_catalog, :show_in_harmonization

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @required = HttpClient::Preconditions.assert_boolean('required', (x = opts.delete(:required); x.nil? ? false : x))
            @show_in_catalog = HttpClient::Preconditions.assert_boolean('show_in_catalog', (x = opts.delete(:show_in_catalog); x.nil? ? false : x))
            @show_in_harmonization = HttpClient::Preconditions.assert_boolean('show_in_harmonization', (x = opts.delete(:show_in_harmonization); x.nil? ? false : x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            Options.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :required => required,
              :show_in_catalog => show_in_catalog,
              :show_in_harmonization => show_in_harmonization
            }
          end

        end

        # An order represents all of the information about a particular set of line
        # items, including pricing, currency rates, delivery options, etc. All
        # information in an order is guaranteed by Flow - if an order is submitted
        # before its expiration. The intended use case is to create an order as a
        # consumer enters checkout, then to submit that order as part of the user
        # submitting their order. Note that Flow will automatically mark an order
        # submitted if we see payment authorization(s) covering the full balance of an
        # order.
        class Order < ExpandableOrder

          attr_reader :id, :number, :order_type, :merchant_of_record, :experience, :customer, :delivered_duty, :destination, :expires_at, :items, :deliveries, :selections, :prices, :total, :attributes, :submitted_at, :lines, :identifiers, :promotions, :payments, :balance, :rules, :tax_registration, :geo

          def initialize(incoming={})
            super(:discriminator => ExpandableOrder::Types::ORDER)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :number, :customer, :delivered_duty, :destination, :expires_at, :items, :deliveries, :selections, :prices, :total, :attributes], 'Order')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @number = HttpClient::Preconditions.assert_class('number', opts.delete(:number), String)
            @order_type = (x = (x = opts.delete(:order_type); x.nil? ? "standard" : x); x.is_a?(::Io::Flow::V0::Models::OrderType) ? x : ::Io::Flow::V0::Models::OrderType.apply(x))
            @merchant_of_record = (x = opts.delete(:merchant_of_record); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::OrderMerchantOfRecord) ? x : ::Io::Flow::V0::Models::OrderMerchantOfRecord.apply(x)))
            @experience = (x = opts.delete(:experience); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::ExpandableExperience) ? x : ::Io::Flow::V0::Models::ExpandableExperience.from_json(x)))
            @customer = (x = opts.delete(:customer); x.is_a?(::Io::Flow::V0::Models::OrderCustomer) ? x : ::Io::Flow::V0::Models::OrderCustomer.new(x))
            @delivered_duty = (x = opts.delete(:delivered_duty); x.is_a?(::Io::Flow::V0::Models::DeliveredDuty) ? x : ::Io::Flow::V0::Models::DeliveredDuty.apply(x))
            @destination = (x = opts.delete(:destination); x.is_a?(::Io::Flow::V0::Models::OrderAddress) ? x : ::Io::Flow::V0::Models::OrderAddress.new(x))
            @expires_at = HttpClient::Preconditions.assert_class('expires_at', HttpClient::Helper.to_date_time_iso8601(opts.delete(:expires_at)), DateTime)
            @items = HttpClient::Preconditions.assert_class('items', opts.delete(:items), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::LocalizedLineItem) ? x : ::Io::Flow::V0::Models::LocalizedLineItem.new(x)) }
            @deliveries = HttpClient::Preconditions.assert_class('deliveries', opts.delete(:deliveries), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::Delivery) ? x : ::Io::Flow::V0::Models::Delivery.from_json(x)) }
            @selections = HttpClient::Preconditions.assert_class('selections', opts.delete(:selections), Array).map { |v| HttpClient::Preconditions.assert_class('selections', v, String) }
            @prices = HttpClient::Preconditions.assert_class('prices', opts.delete(:prices), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::OrderPriceDetail) ? x : ::Io::Flow::V0::Models::OrderPriceDetail.new(x)) }
            @total = (x = opts.delete(:total); x.is_a?(::Io::Flow::V0::Models::LocalizedTotal) ? x : ::Io::Flow::V0::Models::LocalizedTotal.new(x))
            @attributes = HttpClient::Preconditions.assert_class('attributes', opts.delete(:attributes), Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h }
            @submitted_at = (x = opts.delete(:submitted_at); x.nil? ? nil : HttpClient::Preconditions.assert_class('submitted_at', HttpClient::Helper.to_date_time_iso8601(x), DateTime))
            @lines = (x = opts.delete(:lines); x.nil? ? nil : HttpClient::Preconditions.assert_class('lines', x, Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::Line) ? x : ::Io::Flow::V0::Models::Line.new(x)) })
            @identifiers = (x = opts.delete(:identifiers); x.nil? ? nil : HttpClient::Preconditions.assert_class('identifiers', x, Array).map { |v| HttpClient::Preconditions.assert_class('identifiers', v, String) })
            @promotions = (x = opts.delete(:promotions); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Promotions) ? x : ::Io::Flow::V0::Models::Promotions.new(x)))
            @payments = (x = opts.delete(:payments); x.nil? ? nil : HttpClient::Preconditions.assert_class('payments', x, Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::OrderPayment) ? x : ::Io::Flow::V0::Models::OrderPayment.new(x)) })
            @balance = (x = opts.delete(:balance); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::LocalizedTotal) ? x : ::Io::Flow::V0::Models::LocalizedTotal.new(x)))
            @rules = (x = opts.delete(:rules); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::OrderRulesSummary) ? x : ::Io::Flow::V0::Models::OrderRulesSummary.new(x)))
            @tax_registration = (x = opts.delete(:tax_registration); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::TaxRegistration) ? x : ::Io::Flow::V0::Models::TaxRegistration.new(x)))
            @geo = (x = opts.delete(:geo); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::OrderGeo) ? x : ::Io::Flow::V0::Models::OrderGeo.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            Order.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :id => id,
              :number => number,
              :order_type => order_type.value,
              :merchant_of_record => merchant_of_record.nil? ? nil : merchant_of_record.value,
              :experience => experience.nil? ? nil : experience.to_hash,
              :customer => customer.to_hash,
              :delivered_duty => delivered_duty.value,
              :destination => destination.to_hash,
              :expires_at => expires_at,
              :items => items.map { |o| o.to_hash },
              :deliveries => deliveries.map { |o| o.to_hash },
              :selections => selections,
              :prices => prices.map { |o| o.to_hash },
              :total => total.to_hash,
              :attributes => attributes,
              :submitted_at => submitted_at,
              :lines => lines.nil? ? nil : lines.map { |o| o.to_hash },
              :identifiers => identifiers.nil? ? nil : identifiers,
              :promotions => promotions.nil? ? nil : promotions.to_hash,
              :payments => payments.nil? ? nil : payments.map { |o| o.to_hash },
              :balance => balance.nil? ? nil : balance.to_hash,
              :rules => rules.nil? ? nil : rules.to_hash,
              :tax_registration => tax_registration.nil? ? nil : tax_registration.to_hash,
              :geo => geo.nil? ? nil : geo.to_hash
            }
          end

        end

        class OrderAddress

          attr_reader :text, :streets, :city, :province, :postal, :country, :latitude, :longitude, :contact

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @text = (x = opts.delete(:text); x.nil? ? nil : HttpClient::Preconditions.assert_class('text', x, String))
            @streets = (x = opts.delete(:streets); x.nil? ? nil : HttpClient::Preconditions.assert_class('streets', x, Array).map { |v| HttpClient::Preconditions.assert_class('streets', v, String) })
            @city = (x = opts.delete(:city); x.nil? ? nil : HttpClient::Preconditions.assert_class('city', x, String))
            @province = (x = opts.delete(:province); x.nil? ? nil : HttpClient::Preconditions.assert_class('province', x, String))
            @postal = (x = opts.delete(:postal); x.nil? ? nil : HttpClient::Preconditions.assert_class('postal', x, String))
            @country = (x = opts.delete(:country); x.nil? ? nil : HttpClient::Preconditions.assert_class('country', x, String))
            @latitude = (x = opts.delete(:latitude); x.nil? ? nil : HttpClient::Preconditions.assert_class('latitude', x, String))
            @longitude = (x = opts.delete(:longitude); x.nil? ? nil : HttpClient::Preconditions.assert_class('longitude', x, String))
            @contact = (x = opts.delete(:contact); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Contact) ? x : ::Io::Flow::V0::Models::Contact.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderAddress.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :text => text,
              :streets => streets.nil? ? nil : streets,
              :city => city,
              :province => province,
              :postal => postal,
              :country => country,
              :latitude => latitude,
              :longitude => longitude,
              :contact => contact.nil? ? nil : contact.to_hash
            }
          end

        end

        # The Order Builder model is used to incrementally build up an order until it is
        # complete and can be submitted.
        class OrderBuilder

          attr_reader :order, :errors

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @order = (x = opts.delete(:order); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Order) ? x : ::Io::Flow::V0::Models::Order.new(x)))
            @errors = (x = opts.delete(:errors); x.nil? ? nil : HttpClient::Preconditions.assert_class('errors', x, Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::OrderError) ? x : ::Io::Flow::V0::Models::OrderError.new(x)) })
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderBuilder.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :order => order.nil? ? nil : order.to_hash,
              :errors => errors.nil? ? nil : errors.map { |o| o.to_hash }
            }
          end

        end

        class OrderBuilderAttributesForm

          attr_reader :attributes

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:attributes], 'OrderBuilderAttributesForm')
            @attributes = HttpClient::Preconditions.assert_class('attributes', opts.delete(:attributes), Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderBuilderAttributesForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :attributes => attributes
            }
          end

        end

        class OrderBuilderCustomerForm

          attr_reader :customer

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:customer], 'OrderBuilderCustomerForm')
            @customer = (x = opts.delete(:customer); x.is_a?(::Io::Flow::V0::Models::OrderCustomerForm) ? x : ::Io::Flow::V0::Models::OrderCustomerForm.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderBuilderCustomerForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :customer => customer.to_hash
            }
          end

        end

        class OrderBuilderCustomerInvoiceAddressForm

          attr_reader :address

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:address], 'OrderBuilderCustomerInvoiceAddressForm')
            @address = (x = opts.delete(:address); x.is_a?(::Io::Flow::V0::Models::BillingAddress) ? x : ::Io::Flow::V0::Models::BillingAddress.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderBuilderCustomerInvoiceAddressForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :address => address.to_hash
            }
          end

        end

        class OrderBuilderDeliveredDutyForm

          attr_reader :delivered_duty

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:delivered_duty], 'OrderBuilderDeliveredDutyForm')
            @delivered_duty = (x = opts.delete(:delivered_duty); x.is_a?(::Io::Flow::V0::Models::DeliveredDuty) ? x : ::Io::Flow::V0::Models::DeliveredDuty.apply(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderBuilderDeliveredDutyForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :delivered_duty => delivered_duty.value
            }
          end

        end

        class OrderBuilderDestinationCountryForm

          attr_reader :country

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:country], 'OrderBuilderDestinationCountryForm')
            @country = HttpClient::Preconditions.assert_class('country', opts.delete(:country), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderBuilderDestinationCountryForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :country => country
            }
          end

        end

        class OrderBuilderDestinationForm

          attr_reader :destination

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:destination], 'OrderBuilderDestinationForm')
            @destination = (x = opts.delete(:destination); x.is_a?(::Io::Flow::V0::Models::OrderAddress) ? x : ::Io::Flow::V0::Models::OrderAddress.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderBuilderDestinationForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :destination => destination.to_hash
            }
          end

        end

        class OrderBuilderSelectionsForm

          attr_reader :selections

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:selections], 'OrderBuilderSelectionsForm')
            @selections = HttpClient::Preconditions.assert_class('selections', opts.delete(:selections), Array).map { |v| HttpClient::Preconditions.assert_class('selections', v, String) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderBuilderSelectionsForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :selections => selections
            }
          end

        end

        # A customer represents the actual person purchasing from you. This information
        # is needed primarily to support logistics (delivery to this person), fraud
        # management (verification of who the person is), and reporting. We also
        # recommend including your customer number whenever possible as doing so will
        # allow Flow to link up transactions for this customer making customer service
        # easier.
        class OrderCustomer

          attr_reader :name, :number, :phone, :email, :address, :invoice

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:name], 'OrderCustomer')
            @name = (x = opts.delete(:name); x.is_a?(::Io::Flow::V0::Models::Name) ? x : ::Io::Flow::V0::Models::Name.new(x))
            @number = (x = opts.delete(:number); x.nil? ? nil : HttpClient::Preconditions.assert_class('number', x, String))
            @phone = (x = opts.delete(:phone); x.nil? ? nil : HttpClient::Preconditions.assert_class('phone', x, String))
            @email = (x = opts.delete(:email); x.nil? ? nil : HttpClient::Preconditions.assert_class('email', x, String))
            @address = (x = opts.delete(:address); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::BillingAddress) ? x : ::Io::Flow::V0::Models::BillingAddress.new(x)))
            @invoice = (x = opts.delete(:invoice); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::CustomerInvoice) ? x : ::Io::Flow::V0::Models::CustomerInvoice.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderCustomer.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :name => name.to_hash,
              :number => number,
              :phone => phone,
              :email => email,
              :address => address.nil? ? nil : address.to_hash,
              :invoice => invoice.nil? ? nil : invoice.to_hash
            }
          end

        end

        class OrderCustomerForm

          attr_reader :name, :number, :phone, :email, :address, :invoice

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = (x = opts.delete(:name); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Name) ? x : ::Io::Flow::V0::Models::Name.new(x)))
            @number = (x = opts.delete(:number); x.nil? ? nil : HttpClient::Preconditions.assert_class('number', x, String))
            @phone = (x = opts.delete(:phone); x.nil? ? nil : HttpClient::Preconditions.assert_class('phone', x, String))
            @email = (x = opts.delete(:email); x.nil? ? nil : HttpClient::Preconditions.assert_class('email', x, String))
            @address = (x = opts.delete(:address); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::BillingAddress) ? x : ::Io::Flow::V0::Models::BillingAddress.new(x)))
            @invoice = (x = opts.delete(:invoice); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::CustomerInvoice) ? x : ::Io::Flow::V0::Models::CustomerInvoice.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderCustomerForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :name => name.nil? ? nil : name.to_hash,
              :number => number,
              :phone => phone,
              :email => email,
              :address => address.nil? ? nil : address.to_hash,
              :invoice => invoice.nil? ? nil : invoice.to_hash
            }
          end

        end

        class OrderDeleted < Event

          attr_reader :event_id, :timestamp, :organization, :number

          def initialize(incoming={})
            super(:discriminator => Event::Types::ORDER_DELETED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :number], 'OrderDeleted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @number = HttpClient::Preconditions.assert_class('number', opts.delete(:number), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderDeleted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :number => number
            }
          end

        end

        class OrderDeletedV2 < Event

          attr_reader :event_id, :timestamp, :organization, :order

          def initialize(incoming={})
            super(:discriminator => Event::Types::ORDER_DELETED_V2)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :order], 'OrderDeletedV2')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @order = (x = opts.delete(:order); x.is_a?(::Io::Flow::V0::Models::Order) ? x : ::Io::Flow::V0::Models::Order.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderDeletedV2.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :order => order.to_hash
            }
          end

        end

        # Purpose-built form specifically for only address-related changes to
        # destination on an order
        class OrderDestinationPutForm

          attr_reader :destination

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:destination], 'OrderDestinationPutForm')
            @destination = (x = opts.delete(:destination); x.is_a?(::Io::Flow::V0::Models::OrderAddress) ? x : ::Io::Flow::V0::Models::OrderAddress.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderDestinationPutForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :destination => destination.to_hash
            }
          end

        end

        class OrderDetails

          attr_reader :line_items, :shipping, :discounts, :tax, :duty, :reference

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:line_items], 'OrderDetails')
            @line_items = HttpClient::Preconditions.assert_class('line_items', opts.delete(:line_items), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::PaymentOrderDetailsLineItem) ? x : ::Io::Flow::V0::Models::PaymentOrderDetailsLineItem.new(x)) }
            @shipping = (x = opts.delete(:shipping); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Shipping) ? x : ::Io::Flow::V0::Models::Shipping.new(x)))
            @discounts = (x = opts.delete(:discounts); x.nil? ? nil : HttpClient::Preconditions.assert_class('discounts', x, Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::PaymentDiscount) ? x : ::Io::Flow::V0::Models::PaymentDiscount.new(x)) })
            @tax = (x = opts.delete(:tax); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::PaymentTax) ? x : ::Io::Flow::V0::Models::PaymentTax.new(x)))
            @duty = (x = opts.delete(:duty); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::PaymentDuty) ? x : ::Io::Flow::V0::Models::PaymentDuty.new(x)))
            @reference = (x = opts.delete(:reference); x.nil? ? nil : HttpClient::Preconditions.assert_class('reference', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderDetails.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :line_items => line_items.map { |o| o.to_hash },
              :shipping => shipping.nil? ? nil : shipping.to_hash,
              :discounts => discounts.nil? ? nil : discounts.map { |o| o.to_hash },
              :tax => tax.nil? ? nil : tax.to_hash,
              :duty => duty.nil? ? nil : duty.to_hash,
              :reference => reference
            }
          end

        end

        class OrderError

          attr_reader :code, :messages, :numbers, :destination_country, :threshold

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:code, :messages], 'OrderError')
            @code = (x = opts.delete(:code); x.is_a?(::Io::Flow::V0::Models::OrderErrorCode) ? x : ::Io::Flow::V0::Models::OrderErrorCode.apply(x))
            @messages = HttpClient::Preconditions.assert_class('messages', opts.delete(:messages), Array).map { |v| HttpClient::Preconditions.assert_class('messages', v, String) }
            @numbers = (x = opts.delete(:numbers); x.nil? ? nil : HttpClient::Preconditions.assert_class('numbers', x, Array).map { |v| HttpClient::Preconditions.assert_class('numbers', v, String) })
            @destination_country = (x = opts.delete(:destination_country); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Country) ? x : ::Io::Flow::V0::Models::Country.new(x)))
            @threshold = (x = opts.delete(:threshold); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::ValueThresholdExceededDetails) ? x : ::Io::Flow::V0::Models::ValueThresholdExceededDetails.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderError.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :code => code.value,
              :messages => messages,
              :numbers => numbers.nil? ? nil : numbers,
              :destination_country => destination_country.nil? ? nil : destination_country.to_hash,
              :threshold => threshold.nil? ? nil : threshold.to_hash
            }
          end

        end

        # Lightweight estimate for a group of items without any customer-related
        # information. This will contain available estimates on shipping, taxes, and
        # duties.
        class OrderEstimate

          attr_reader :id, :items, :destination, :deliveries, :prices, :selections, :total, :lines, :promotions

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :items, :destination, :deliveries, :prices, :selections, :total], 'OrderEstimate')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @items = HttpClient::Preconditions.assert_class('items', opts.delete(:items), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::LocalizedLineItem) ? x : ::Io::Flow::V0::Models::LocalizedLineItem.new(x)) }
            @destination = (x = opts.delete(:destination); x.is_a?(::Io::Flow::V0::Models::OrderAddress) ? x : ::Io::Flow::V0::Models::OrderAddress.new(x))
            @deliveries = HttpClient::Preconditions.assert_class('deliveries', opts.delete(:deliveries), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::Delivery) ? x : ::Io::Flow::V0::Models::Delivery.from_json(x)) }
            @prices = HttpClient::Preconditions.assert_class('prices', opts.delete(:prices), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::OrderPriceDetail) ? x : ::Io::Flow::V0::Models::OrderPriceDetail.new(x)) }
            @selections = HttpClient::Preconditions.assert_class('selections', opts.delete(:selections), Array).map { |v| HttpClient::Preconditions.assert_class('selections', v, String) }
            @total = (x = opts.delete(:total); x.is_a?(::Io::Flow::V0::Models::LocalizedTotal) ? x : ::Io::Flow::V0::Models::LocalizedTotal.new(x))
            @lines = (x = opts.delete(:lines); x.nil? ? nil : HttpClient::Preconditions.assert_class('lines', x, Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::Line) ? x : ::Io::Flow::V0::Models::Line.new(x)) })
            @promotions = (x = opts.delete(:promotions); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Promotions) ? x : ::Io::Flow::V0::Models::Promotions.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderEstimate.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :items => items.map { |o| o.to_hash },
              :destination => destination.to_hash,
              :deliveries => deliveries.map { |o| o.to_hash },
              :prices => prices.map { |o| o.to_hash },
              :selections => selections,
              :total => total.to_hash,
              :lines => lines.nil? ? nil : lines.map { |o| o.to_hash },
              :promotions => promotions.nil? ? nil : promotions.to_hash
            }
          end

        end

        # Form to get a lightweight estimate of an order.
        class OrderEstimateForm

          attr_reader :items, :destination, :selections

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:items], 'OrderEstimateForm')
            @items = HttpClient::Preconditions.assert_class('items', opts.delete(:items), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::LineItemForm) ? x : ::Io::Flow::V0::Models::LineItemForm.new(x)) }
            @destination = (x = opts.delete(:destination); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::OrderAddress) ? x : ::Io::Flow::V0::Models::OrderAddress.new(x)))
            @selections = (x = opts.delete(:selections); x.nil? ? nil : HttpClient::Preconditions.assert_class('selections', x, Array).map { |v| HttpClient::Preconditions.assert_class('selections', v, String) })
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderEstimateForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :items => items.map { |o| o.to_hash },
              :destination => destination.nil? ? nil : destination.to_hash,
              :selections => selections.nil? ? nil : selections
            }
          end

        end

        # Exports orders
        class OrderExportType < ExportType

          attr_reader :numbers, :min_hours_since_submitted_at, :submitted_on_or_before, :submitted_on_or_after, :status, :has_tracking_label, :sort

          def initialize(incoming={})
            super(:discriminator => ExportType::Types::ORDER_EXPORT_TYPE)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @numbers = (x = opts.delete(:numbers); x.nil? ? nil : HttpClient::Preconditions.assert_class('numbers', x, Array).map { |v| HttpClient::Preconditions.assert_class('numbers', v, String) })
            @min_hours_since_submitted_at = (x = opts.delete(:min_hours_since_submitted_at); x.nil? ? nil : HttpClient::Preconditions.assert_class('min_hours_since_submitted_at', x, Integer))
            @submitted_on_or_before = (x = opts.delete(:submitted_on_or_before); x.nil? ? nil : HttpClient::Preconditions.assert_class('submitted_on_or_before', HttpClient::Helper.to_date_time_iso8601(x), DateTime))
            @submitted_on_or_after = (x = opts.delete(:submitted_on_or_after); x.nil? ? nil : HttpClient::Preconditions.assert_class('submitted_on_or_after', HttpClient::Helper.to_date_time_iso8601(x), DateTime))
            @status = (x = opts.delete(:status); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::OrderStatus) ? x : ::Io::Flow::V0::Models::OrderStatus.apply(x)))
            @has_tracking_label = (x = opts.delete(:has_tracking_label); x.nil? ? nil : HttpClient::Preconditions.assert_boolean('has_tracking_label', x))
            @sort = (x = opts.delete(:sort); x.nil? ? nil : HttpClient::Preconditions.assert_class('sort', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderExportType.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :numbers => numbers.nil? ? nil : numbers,
              :min_hours_since_submitted_at => min_hours_since_submitted_at,
              :submitted_on_or_before => submitted_on_or_before,
              :submitted_on_or_after => submitted_on_or_after,
              :status => status.nil? ? nil : status.value,
              :has_tracking_label => has_tracking_label,
              :sort => sort
            }
          end

        end

        # The order form is used to create an open order, providing the details on
        # pricing and delivery options for destination and items/quantities specified
        class OrderForm

          attr_reader :customer, :items, :delivered_duty, :number, :destination, :discount, :discounts, :attributes, :authorization_keys, :options

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:items], 'OrderForm')
            @customer = (x = opts.delete(:customer); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::OrderCustomerForm) ? x : ::Io::Flow::V0::Models::OrderCustomerForm.new(x)))
            @items = HttpClient::Preconditions.assert_class('items', opts.delete(:items), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::LineItemForm) ? x : ::Io::Flow::V0::Models::LineItemForm.new(x)) }
            @delivered_duty = (x = opts.delete(:delivered_duty); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::DeliveredDuty) ? x : ::Io::Flow::V0::Models::DeliveredDuty.apply(x)))
            @number = (x = opts.delete(:number); x.nil? ? nil : HttpClient::Preconditions.assert_class('number', x, String))
            @destination = (x = opts.delete(:destination); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::OrderAddress) ? x : ::Io::Flow::V0::Models::OrderAddress.new(x)))
            @discount = (x = opts.delete(:discount); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Money) ? x : ::Io::Flow::V0::Models::Money.new(x)))
            @discounts = (x = opts.delete(:discounts); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::DiscountsForm) ? x : ::Io::Flow::V0::Models::DiscountsForm.new(x)))
            @attributes = (x = opts.delete(:attributes); x.nil? ? nil : HttpClient::Preconditions.assert_class('attributes', x, Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h })
            @authorization_keys = (x = opts.delete(:authorization_keys); x.nil? ? nil : HttpClient::Preconditions.assert_class('authorization_keys', x, Array).map { |v| HttpClient::Preconditions.assert_class('authorization_keys', v, String) })
            @options = (x = opts.delete(:options); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::OrderOptions) ? x : ::Io::Flow::V0::Models::OrderOptions.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :customer => customer.nil? ? nil : customer.to_hash,
              :items => items.map { |o| o.to_hash },
              :delivered_duty => delivered_duty.nil? ? nil : delivered_duty.value,
              :number => number,
              :destination => destination.nil? ? nil : destination.to_hash,
              :discount => discount.nil? ? nil : discount.to_hash,
              :discounts => discounts.nil? ? nil : discounts.to_hash,
              :attributes => attributes.nil? ? nil : attributes,
              :authorization_keys => authorization_keys.nil? ? nil : authorization_keys,
              :options => options.nil? ? nil : options.to_hash
            }
          end

        end

        # The fraud status for an order.
        class OrderFraudStatus

          attr_reader :order, :status

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:order, :status], 'OrderFraudStatus')
            @order = (x = opts.delete(:order); x.is_a?(::Io::Flow::V0::Models::OrderReference) ? x : ::Io::Flow::V0::Models::OrderReference.new(x))
            @status = (x = opts.delete(:status); x.is_a?(::Io::Flow::V0::Models::FraudStatus) ? x : ::Io::Flow::V0::Models::FraudStatus.apply(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderFraudStatus.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :order => order.to_hash,
              :status => status.value
            }
          end

        end

        # The geolocated information for an order
        class OrderGeo

          attr_reader :ip, :country, :currency, :language

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:country], 'OrderGeo')
            @ip = (x = opts.delete(:ip); x.nil? ? nil : HttpClient::Preconditions.assert_class('ip', x, String))
            @country = HttpClient::Preconditions.assert_class('country', opts.delete(:country), String)
            @currency = (x = opts.delete(:currency); x.nil? ? nil : HttpClient::Preconditions.assert_class('currency', x, String))
            @language = (x = opts.delete(:language); x.nil? ? nil : HttpClient::Preconditions.assert_class('language', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderGeo.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :ip => ip,
              :country => country,
              :currency => currency,
              :language => language
            }
          end

        end

        # Represents alternate identifiers that can be used to lookup an order. Common
        # use cases are to support attaching a primary identifier (e.g. a nice order
        # number) post order submission or attaching IDs that are used by the warehouse
        # to ship the orders.
        class OrderIdentifier

          attr_reader :id, :order, :name, :identifier, :primary, :number

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :order, :identifier, :primary], 'OrderIdentifier')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @order = (x = opts.delete(:order); x.is_a?(::Io::Flow::V0::Models::OrderReference) ? x : ::Io::Flow::V0::Models::OrderReference.new(x))
            @name = HttpClient::Preconditions.assert_class('name', (x = opts.delete(:name); x.nil? ? "external" : x), String)
            @identifier = HttpClient::Preconditions.assert_class('identifier', opts.delete(:identifier), String)
            @primary = HttpClient::Preconditions.assert_boolean('primary', opts.delete(:primary))
            @number = (x = opts.delete(:number); x.nil? ? nil : HttpClient::Preconditions.assert_class('number', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderIdentifier.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :order => order.to_hash,
              :name => name,
              :identifier => identifier,
              :primary => primary,
              :number => number
            }
          end

        end

        class OrderIdentifierDeleted < Event

          attr_reader :event_id, :timestamp, :id

          def initialize(incoming={})
            super(:discriminator => Event::Types::ORDER_IDENTIFIER_DELETED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :id], 'OrderIdentifierDeleted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderIdentifierDeleted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :id => id
            }
          end

        end

        class OrderIdentifierDeletedV2 < Event

          attr_reader :event_id, :timestamp, :organization, :id

          def initialize(incoming={})
            super(:discriminator => Event::Types::ORDER_IDENTIFIER_DELETED_V2)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :id], 'OrderIdentifierDeletedV2')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderIdentifierDeletedV2.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :id => id
            }
          end

        end

        class OrderIdentifierForm

          attr_reader :order, :name, :identifier, :number, :primary

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:order], 'OrderIdentifierForm')
            @order = HttpClient::Preconditions.assert_class('order', opts.delete(:order), String)
            @name = (x = opts.delete(:name); x.nil? ? nil : HttpClient::Preconditions.assert_class('name', x, String))
            @identifier = (x = opts.delete(:identifier); x.nil? ? nil : HttpClient::Preconditions.assert_class('identifier', x, String))
            @number = (x = opts.delete(:number); x.nil? ? nil : HttpClient::Preconditions.assert_class('number', x, String))
            @primary = (x = opts.delete(:primary); x.nil? ? nil : HttpClient::Preconditions.assert_boolean('primary', x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderIdentifierForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :order => order,
              :name => name,
              :identifier => identifier,
              :number => number,
              :primary => primary
            }
          end

        end

        class OrderIdentifierPutForm

          attr_reader :order, :name, :primary

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:order], 'OrderIdentifierPutForm')
            @order = HttpClient::Preconditions.assert_class('order', opts.delete(:order), String)
            @name = (x = opts.delete(:name); x.nil? ? nil : HttpClient::Preconditions.assert_class('name', x, String))
            @primary = (x = opts.delete(:primary); x.nil? ? nil : HttpClient::Preconditions.assert_boolean('primary', x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderIdentifierPutForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :order => order,
              :name => name,
              :primary => primary
            }
          end

        end

        class OrderIdentifierUpserted < Event

          attr_reader :event_id, :timestamp, :id, :organization, :number, :order_number

          def initialize(incoming={})
            super(:discriminator => Event::Types::ORDER_IDENTIFIER_UPSERTED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :id, :organization, :number, :order_number], 'OrderIdentifierUpserted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @number = HttpClient::Preconditions.assert_class('number', opts.delete(:number), String)
            @order_number = HttpClient::Preconditions.assert_class('order_number', opts.delete(:order_number), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderIdentifierUpserted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :id => id,
              :organization => organization,
              :number => number,
              :order_number => order_number
            }
          end

        end

        class OrderIdentifierUpsertedV2 < Event

          attr_reader :event_id, :timestamp, :organization, :id, :order_number, :identifier, :primary

          def initialize(incoming={})
            super(:discriminator => Event::Types::ORDER_IDENTIFIER_UPSERTED_V2)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :id, :order_number, :identifier, :primary], 'OrderIdentifierUpsertedV2')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @order_number = HttpClient::Preconditions.assert_class('order_number', opts.delete(:order_number), String)
            @identifier = HttpClient::Preconditions.assert_class('identifier', opts.delete(:identifier), String)
            @primary = HttpClient::Preconditions.assert_boolean('primary', opts.delete(:primary))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderIdentifierUpsertedV2.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :id => id,
              :order_number => order_number,
              :identifier => identifier,
              :primary => primary
            }
          end

        end

        class OrderIdentifierUpsertedV3 < Event

          attr_reader :event_id, :timestamp, :organization, :identifier

          def initialize(incoming={})
            super(:discriminator => Event::Types::ORDER_IDENTIFIER_UPSERTED_V3)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :identifier], 'OrderIdentifierUpsertedV3')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @identifier = (x = opts.delete(:identifier); x.is_a?(::Io::Flow::V0::Models::OrderIdentifier) ? x : ::Io::Flow::V0::Models::OrderIdentifier.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderIdentifierUpsertedV3.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :identifier => identifier.to_hash
            }
          end

        end

        class OrderIdentifierVersion

          attr_reader :id, :timestamp, :type, :order_identifier

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :timestamp, :type, :order_identifier], 'OrderIdentifierVersion')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::V0::Models::ChangeType) ? x : ::Io::Flow::V0::Models::ChangeType.apply(x))
            @order_identifier = (x = opts.delete(:order_identifier); x.is_a?(::Io::Flow::V0::Models::OrderIdentifier) ? x : ::Io::Flow::V0::Models::OrderIdentifier.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderIdentifierVersion.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :timestamp => timestamp,
              :type => type.value,
              :order_identifier => order_identifier.to_hash
            }
          end

        end

        class OrderInformationDetails < OrderInformation

          attr_reader :order_details, :billing_address, :shipping_address

          def initialize(incoming={})
            super(:type => OrderInformation::Types::ORDER_INFORMATION_DETAILS)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:order_details], 'OrderInformationDetails')
            @order_details = (x = opts.delete(:order_details); x.is_a?(::Io::Flow::V0::Models::OrderDetails) ? x : ::Io::Flow::V0::Models::OrderDetails.new(x))
            @billing_address = (x = opts.delete(:billing_address); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::PaymentAddressBilling) ? x : ::Io::Flow::V0::Models::PaymentAddressBilling.new(x)))
            @shipping_address = (x = opts.delete(:shipping_address); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::PaymentAddressShipping) ? x : ::Io::Flow::V0::Models::PaymentAddressShipping.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderInformationDetails.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :order_details => order_details.to_hash,
              :billing_address => billing_address.nil? ? nil : billing_address.to_hash,
              :shipping_address => shipping_address.nil? ? nil : shipping_address.to_hash
            }
          end

        end

        class OrderInformationFlow < OrderInformation

          attr_reader :order_number, :billing_address

          def initialize(incoming={})
            super(:type => OrderInformation::Types::ORDER_INFORMATION_FLOW)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:order_number], 'OrderInformationFlow')
            @order_number = HttpClient::Preconditions.assert_class('order_number', opts.delete(:order_number), String)
            @billing_address = (x = opts.delete(:billing_address); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::PaymentAddressBilling) ? x : ::Io::Flow::V0::Models::PaymentAddressBilling.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderInformationFlow.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :order_number => order_number,
              :billing_address => billing_address.nil? ? nil : billing_address.to_hash
            }
          end

        end

        class OrderNumberGeneratorDefaults

          attr_reader :starts_with, :min_hex_length, :min_starts_with

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @starts_with = HttpClient::Preconditions.assert_class('starts_with', (x = opts.delete(:starts_with); x.nil? ? 1001 : x), Integer)
            @min_hex_length = HttpClient::Preconditions.assert_class('min_hex_length', (x = opts.delete(:min_hex_length); x.nil? ? 6 : x), Integer)
            @min_starts_with = HttpClient::Preconditions.assert_class('min_starts_with', (x = opts.delete(:min_starts_with); x.nil? ? 1 : x), Integer)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderNumberGeneratorDefaults.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :starts_with => starts_with,
              :min_hex_length => min_hex_length,
              :min_starts_with => min_starts_with
            }
          end

        end

        class OrderNumberGeneratorFixedLength

          attr_reader :length, :padding

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:length, :padding], 'OrderNumberGeneratorFixedLength')
            @length = HttpClient::Preconditions.assert_class('length', opts.delete(:length), Integer)
            @padding = HttpClient::Preconditions.assert_class('padding', opts.delete(:padding), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderNumberGeneratorFixedLength.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :length => length,
              :padding => padding
            }
          end

        end

        class OrderNumberGeneratorGeneratedNumber

          attr_reader :number

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:number], 'OrderNumberGeneratorGeneratedNumber')
            @number = HttpClient::Preconditions.assert_class('number', opts.delete(:number), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderNumberGeneratorGeneratedNumber.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :number => number
            }
          end

        end

        # Hexadecimal generator generates a random string, starting with a letter, of a
        # given length
        class OrderNumberGeneratorHexadecimal < OrderNumberGenerator

          attr_reader :length

          def initialize(incoming={})
            super(:discriminator => OrderNumberGenerator::Types::ORDER_NUMBER_GENERATOR_HEXADECIMAL)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:length], 'OrderNumberGeneratorHexadecimal')
            @length = HttpClient::Preconditions.assert_class('length', opts.delete(:length), Integer)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderNumberGeneratorHexadecimal.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :length => length
            }
          end

        end

        # Generator with an optional prefix, followed by an integer and an optional
        # suffix
        class OrderNumberGeneratorPrefixSuffix < OrderNumberGenerator

          attr_reader :prefix, :starts_with, :suffix, :fixed_length

          def initialize(incoming={})
            super(:discriminator => OrderNumberGenerator::Types::ORDER_NUMBER_GENERATOR_PREFIX_SUFFIX)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @prefix = (x = opts.delete(:prefix); x.nil? ? nil : HttpClient::Preconditions.assert_class('prefix', x, String))
            @starts_with = (x = opts.delete(:starts_with); x.nil? ? nil : HttpClient::Preconditions.assert_class('starts_with', x, Integer))
            @suffix = (x = opts.delete(:suffix); x.nil? ? nil : HttpClient::Preconditions.assert_class('suffix', x, String))
            @fixed_length = (x = opts.delete(:fixed_length); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::OrderNumberGeneratorFixedLength) ? x : ::Io::Flow::V0::Models::OrderNumberGeneratorFixedLength.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderNumberGeneratorPrefixSuffix.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :prefix => prefix,
              :starts_with => starts_with,
              :suffix => suffix,
              :fixed_length => fixed_length.nil? ? nil : fixed_length.to_hash
            }
          end

        end

        # Generates an order number based on a UUID (no dashes or other formatting).
        # This is the default for Flow orders (with order number prefixed by ord-)
        class OrderNumberGeneratorUuid < OrderNumberGenerator

          attr_reader :prefix

          def initialize(incoming={})
            super(:discriminator => OrderNumberGenerator::Types::ORDER_NUMBER_GENERATOR_UUID)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @prefix = HttpClient::Preconditions.assert_class('prefix', (x = opts.delete(:prefix); x.nil? ? "ord-" : x), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderNumberGeneratorUuid.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :prefix => prefix
            }
          end

        end

        class OrderNumberReference

          attr_reader :number

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:number], 'OrderNumberReference')
            @number = HttpClient::Preconditions.assert_class('number', opts.delete(:number), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderNumberReference.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :number => number
            }
          end

        end

        # Optional behaviors to enable for this order
        class OrderOptions

          attr_reader :storage

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @storage = (x = (x = opts.delete(:storage); x.nil? ? "persist" : x); x.is_a?(::Io::Flow::V0::Models::OrderStorage) ? x : ::Io::Flow::V0::Models::OrderStorage.apply(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderOptions.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :storage => storage.value
            }
          end

        end

        # An Order Payment represents an individual payment applied to an order. The
        # type of the payment can be used to further lookup transaction level detail
        class OrderPayment

          attr_reader :id, :type, :merchant_of_record, :reference, :description, :total, :address, :date, :attributes, :method

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :type, :reference, :description, :total], 'OrderPayment')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::V0::Models::OrderPaymentType) ? x : ::Io::Flow::V0::Models::OrderPaymentType.apply(x))
            @merchant_of_record = (x = (x = opts.delete(:merchant_of_record); x.nil? ? "flow" : x); x.is_a?(::Io::Flow::V0::Models::MerchantOfRecord) ? x : ::Io::Flow::V0::Models::MerchantOfRecord.apply(x))
            @reference = HttpClient::Preconditions.assert_class('reference', opts.delete(:reference), String)
            @description = HttpClient::Preconditions.assert_class('description', opts.delete(:description), String)
            @total = (x = opts.delete(:total); x.is_a?(::Io::Flow::V0::Models::PriceWithBase) ? x : ::Io::Flow::V0::Models::PriceWithBase.new(x))
            @address = (x = opts.delete(:address); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::BillingAddress) ? x : ::Io::Flow::V0::Models::BillingAddress.new(x)))
            @date = (x = opts.delete(:date); x.nil? ? nil : HttpClient::Preconditions.assert_class('date', HttpClient::Helper.to_date_time_iso8601(x), DateTime))
            @attributes = HttpClient::Preconditions.assert_class('attributes', (x = opts.delete(:attributes); x.nil? ? {} : x), Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h }
            @method = (x = opts.delete(:method); x.nil? ? nil : HttpClient::Preconditions.assert_class('method', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderPayment.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :type => type.value,
              :merchant_of_record => merchant_of_record.value,
              :reference => reference,
              :description => description,
              :total => total.to_hash,
              :address => address.nil? ? nil : address.to_hash,
              :date => date,
              :attributes => attributes,
              :method => method
            }
          end

        end

        # Sent when an order is submitted, allocations are generated and the total value
        # of the order is accounted for by discounts, subsidies, credits and authorized
        # payments -- but may not ready to fulfill (e.g. pending assignment of a DC or
        # fraud review). Intended to fuel customer feedback and alert merchants that an
        # order is coming.
        class OrderPlaced < Event

          attr_reader :event_id, :timestamp, :organization, :order_number, :order, :allocation

          def initialize(incoming={})
            super(:discriminator => Event::Types::ORDER_PLACED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :order_number, :order, :allocation], 'OrderPlaced')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @order_number = HttpClient::Preconditions.assert_class('order_number', opts.delete(:order_number), String)
            @order = (x = opts.delete(:order); x.is_a?(::Io::Flow::V0::Models::Order) ? x : ::Io::Flow::V0::Models::Order.new(x))
            @allocation = (x = opts.delete(:allocation); x.is_a?(::Io::Flow::V0::Models::AllocationV2) ? x : ::Io::Flow::V0::Models::AllocationV2.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderPlaced.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :order_number => order_number,
              :order => order.to_hash,
              :allocation => allocation.to_hash
            }
          end

        end

        # Order is submitted, allocations are generated and the total value of the order
        # is accounted for by discounts, subsidies, credits and authorized payments --
        # but may not ready to fulfill (e.g. pending assignment of a DC or fraud
        # review).
        class OrderPlacedDetails

          attr_reader :id, :order, :allocation

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :order, :allocation], 'OrderPlacedDetails')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @order = (x = opts.delete(:order); x.is_a?(::Io::Flow::V0::Models::Order) ? x : ::Io::Flow::V0::Models::Order.new(x))
            @allocation = (x = opts.delete(:allocation); x.is_a?(::Io::Flow::V0::Models::AllocationV2) ? x : ::Io::Flow::V0::Models::AllocationV2.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderPlacedDetails.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :order => order.to_hash,
              :allocation => allocation.to_hash
            }
          end

        end

        # Sent when an order is submitted, allocations are generated and the total value
        # of the order is accounted for by discounts, subsidies, credits and authorized
        # payments -- but may not ready to fulfill (e.g. pending assignment of a DC or
        # fraud review). Intended to fuel customer feedback and alert merchants that an
        # order is coming.
        class OrderPlacedV2 < Event

          attr_reader :event_id, :timestamp, :organization, :order_placed

          def initialize(incoming={})
            super(:discriminator => Event::Types::ORDER_PLACED_V2)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :order_placed], 'OrderPlacedV2')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @order_placed = (x = opts.delete(:order_placed); x.is_a?(::Io::Flow::V0::Models::OrderPlacedDetails) ? x : ::Io::Flow::V0::Models::OrderPlacedDetails.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderPlacedV2.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :order_placed => order_placed.to_hash
            }
          end

        end

        # Represents a top-level order price detail, e.g. 'Subtotal' or 'VAT'.
        class OrderPriceDetail

          attr_reader :key, :currency, :amount, :label, :base, :components, :name, :rate, :accuracy, :rate_label

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:key, :currency, :amount, :label, :base, :components], 'OrderPriceDetail')
            @key = (x = opts.delete(:key); x.is_a?(::Io::Flow::V0::Models::OrderPriceDetailKey) ? x : ::Io::Flow::V0::Models::OrderPriceDetailKey.apply(x))
            @currency = HttpClient::Preconditions.assert_class('currency', opts.delete(:currency), String)
            @amount = HttpClient::Preconditions.assert_class('amount', HttpClient::Helper.to_big_decimal(opts.delete(:amount)), BigDecimal)
            @label = HttpClient::Preconditions.assert_class('label', opts.delete(:label), String)
            @base = (x = opts.delete(:base); x.is_a?(::Io::Flow::V0::Models::Price) ? x : ::Io::Flow::V0::Models::Price.new(x))
            @components = HttpClient::Preconditions.assert_class('components', opts.delete(:components), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::OrderPriceDetailComponent) ? x : ::Io::Flow::V0::Models::OrderPriceDetailComponent.new(x)) }
            @name = (x = opts.delete(:name); x.nil? ? nil : HttpClient::Preconditions.assert_class('name', x, String))
            @rate = (x = opts.delete(:rate); x.nil? ? nil : HttpClient::Preconditions.assert_class('rate', HttpClient::Helper.to_big_decimal(x), BigDecimal))
            @accuracy = (x = (x = opts.delete(:accuracy); x.nil? ? "calculated" : x); x.is_a?(::Io::Flow::V0::Models::PriceAccuracy) ? x : ::Io::Flow::V0::Models::PriceAccuracy.apply(x))
            @rate_label = (x = opts.delete(:rate_label); x.nil? ? nil : HttpClient::Preconditions.assert_class('rate_label', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderPriceDetail.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :key => key.value,
              :currency => currency,
              :amount => amount.to_f.to_s,
              :label => label,
              :base => base.to_hash,
              :components => components.map { |o| o.to_hash },
              :name => name,
              :rate => rate.to_f.to_s,
              :accuracy => accuracy.value,
              :rate_label => rate_label
            }
          end

        end

        class OrderPriceDetailComponent

          attr_reader :key, :currency, :amount, :label, :base, :name

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:key, :currency, :amount, :label, :base], 'OrderPriceDetailComponent')
            @key = (x = opts.delete(:key); x.is_a?(::Io::Flow::V0::Models::OrderPriceDetailComponentKey) ? x : ::Io::Flow::V0::Models::OrderPriceDetailComponentKey.apply(x))
            @currency = HttpClient::Preconditions.assert_class('currency', opts.delete(:currency), String)
            @amount = HttpClient::Preconditions.assert_class('amount', HttpClient::Helper.to_big_decimal(opts.delete(:amount)), BigDecimal)
            @label = HttpClient::Preconditions.assert_class('label', opts.delete(:label), String)
            @base = (x = opts.delete(:base); x.is_a?(::Io::Flow::V0::Models::Price) ? x : ::Io::Flow::V0::Models::Price.new(x))
            @name = (x = opts.delete(:name); x.nil? ? nil : HttpClient::Preconditions.assert_class('name', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderPriceDetailComponent.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :key => key.value,
              :currency => currency,
              :amount => amount.to_f.to_s,
              :label => label,
              :base => base.to_hash,
              :name => name
            }
          end

        end

        class OrderPromotionTrigger

          attr_reader :type, :min

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:type], 'OrderPromotionTrigger')
            @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::V0::Models::PromotionTriggerType) ? x : ::Io::Flow::V0::Models::PromotionTriggerType.apply(x))
            @min = (x = opts.delete(:min); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Price) ? x : ::Io::Flow::V0::Models::Price.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderPromotionTrigger.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :type => type.value,
              :min => min.nil? ? nil : min.to_hash
            }
          end

        end

        # The order put form is used to upsert an order, providing the details on
        # pricing and delivery options for destination and items/quantities specified.
        class OrderPutForm

          attr_reader :order_type, :items, :customer, :delivered_duty, :selections, :destination, :discount, :discounts, :attributes, :authorization_keys, :options

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:items], 'OrderPutForm')
            @order_type = (x = (x = opts.delete(:order_type); x.nil? ? "standard" : x); x.is_a?(::Io::Flow::V0::Models::OrderType) ? x : ::Io::Flow::V0::Models::OrderType.apply(x))
            @items = HttpClient::Preconditions.assert_class('items', opts.delete(:items), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::LineItemForm) ? x : ::Io::Flow::V0::Models::LineItemForm.new(x)) }
            @customer = (x = opts.delete(:customer); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::OrderCustomerForm) ? x : ::Io::Flow::V0::Models::OrderCustomerForm.new(x)))
            @delivered_duty = (x = opts.delete(:delivered_duty); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::DeliveredDuty) ? x : ::Io::Flow::V0::Models::DeliveredDuty.apply(x)))
            @selections = (x = opts.delete(:selections); x.nil? ? nil : HttpClient::Preconditions.assert_class('selections', x, Array).map { |v| HttpClient::Preconditions.assert_class('selections', v, String) })
            @destination = (x = opts.delete(:destination); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::OrderAddress) ? x : ::Io::Flow::V0::Models::OrderAddress.new(x)))
            @discount = (x = opts.delete(:discount); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Money) ? x : ::Io::Flow::V0::Models::Money.new(x)))
            @discounts = (x = opts.delete(:discounts); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::DiscountsForm) ? x : ::Io::Flow::V0::Models::DiscountsForm.new(x)))
            @attributes = (x = opts.delete(:attributes); x.nil? ? nil : HttpClient::Preconditions.assert_class('attributes', x, Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h })
            @authorization_keys = (x = opts.delete(:authorization_keys); x.nil? ? nil : HttpClient::Preconditions.assert_class('authorization_keys', x, Array).map { |v| HttpClient::Preconditions.assert_class('authorization_keys', v, String) })
            @options = (x = opts.delete(:options); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::OrderOptions) ? x : ::Io::Flow::V0::Models::OrderOptions.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderPutForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :order_type => order_type.value,
              :items => items.map { |o| o.to_hash },
              :customer => customer.nil? ? nil : customer.to_hash,
              :delivered_duty => delivered_duty.nil? ? nil : delivered_duty.value,
              :selections => selections.nil? ? nil : selections,
              :destination => destination.nil? ? nil : destination.to_hash,
              :discount => discount.nil? ? nil : discount.to_hash,
              :discounts => discounts.nil? ? nil : discounts.to_hash,
              :attributes => attributes.nil? ? nil : attributes,
              :authorization_keys => authorization_keys.nil? ? nil : authorization_keys,
              :options => options.nil? ? nil : options.to_hash
            }
          end

        end

        class OrderQuote

          attr_reader :id, :form, :summary

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :form], 'OrderQuote')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @form = (x = opts.delete(:form); x.is_a?(::Io::Flow::V0::Models::OrderQuotePutForm) ? x : ::Io::Flow::V0::Models::OrderQuotePutForm.new(x))
            @summary = (x = opts.delete(:summary); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::OrderQuoteSummary) ? x : ::Io::Flow::V0::Models::OrderQuoteSummary.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderQuote.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :form => form.to_hash,
              :summary => summary.nil? ? nil : summary.to_hash
            }
          end

        end

        class OrderQuoteAddress

          attr_reader :name, :first_name, :last_name, :country, :streets, :city, :province, :postal, :company

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = (x = opts.delete(:name); x.nil? ? nil : HttpClient::Preconditions.assert_class('name', x, String))
            @first_name = (x = opts.delete(:first_name); x.nil? ? nil : HttpClient::Preconditions.assert_class('first_name', x, String))
            @last_name = (x = opts.delete(:last_name); x.nil? ? nil : HttpClient::Preconditions.assert_class('last_name', x, String))
            @country = (x = opts.delete(:country); x.nil? ? nil : HttpClient::Preconditions.assert_class('country', x, String))
            @streets = (x = opts.delete(:streets); x.nil? ? nil : HttpClient::Preconditions.assert_class('streets', x, Array).map { |v| HttpClient::Preconditions.assert_class('streets', v, String) })
            @city = (x = opts.delete(:city); x.nil? ? nil : HttpClient::Preconditions.assert_class('city', x, String))
            @province = (x = opts.delete(:province); x.nil? ? nil : HttpClient::Preconditions.assert_class('province', x, String))
            @postal = (x = opts.delete(:postal); x.nil? ? nil : HttpClient::Preconditions.assert_class('postal', x, String))
            @company = (x = opts.delete(:company); x.nil? ? nil : HttpClient::Preconditions.assert_class('company', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderQuoteAddress.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :name => name,
              :first_name => first_name,
              :last_name => last_name,
              :country => country,
              :streets => streets.nil? ? nil : streets,
              :city => city,
              :province => province,
              :postal => postal,
              :company => company
            }
          end

        end

        class OrderQuoteContact

          attr_reader :email, :phone

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @email = (x = opts.delete(:email); x.nil? ? nil : HttpClient::Preconditions.assert_class('email', x, String))
            @phone = (x = opts.delete(:phone); x.nil? ? nil : HttpClient::Preconditions.assert_class('phone', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderQuoteContact.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :email => email,
              :phone => phone
            }
          end

        end

        class OrderQuoteError

          attr_reader :errors

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:errors], 'OrderQuoteError')
            @errors = HttpClient::Preconditions.assert_class('errors', opts.delete(:errors), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::OrderQuoteErrorDetails) ? x : ::Io::Flow::V0::Models::OrderQuoteErrorDetails.new(x)) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderQuoteError.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :errors => errors.map { |o| o.to_hash }
            }
          end

        end

        class OrderQuoteErrorDetails

          attr_reader :code, :message

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:code, :message], 'OrderQuoteErrorDetails')
            @code = (x = opts.delete(:code); x.is_a?(::Io::Flow::V0::Models::OrderQuoteErrorCode) ? x : ::Io::Flow::V0::Models::OrderQuoteErrorCode.apply(x))
            @message = HttpClient::Preconditions.assert_class('message', opts.delete(:message), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderQuoteErrorDetails.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :code => code.value,
              :message => message
            }
          end

        end

        # Provides options that may be used to configure how a order_quote is rendered
        # for a customer, such as currency and language.
        class OrderQuoteGeoPutForm

          attr_reader :country, :ip, :currency, :language

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @country = (x = opts.delete(:country); x.nil? ? nil : HttpClient::Preconditions.assert_class('country', x, String))
            @ip = (x = opts.delete(:ip); x.nil? ? nil : HttpClient::Preconditions.assert_class('ip', x, String))
            @currency = (x = opts.delete(:currency); x.nil? ? nil : HttpClient::Preconditions.assert_class('currency', x, String))
            @language = (x = opts.delete(:language); x.nil? ? nil : HttpClient::Preconditions.assert_class('language', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderQuoteGeoPutForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :country => country,
              :ip => ip,
              :currency => currency,
              :language => language
            }
          end

        end

        # Same interface as experience order_summary_line_item with additional
        # attributes needed by order_quote
        class OrderQuoteLine

          attr_reader :id, :item, :errors, :quantity, :discount, :tax, :duty, :unit_price, :total, :price_attributes, :attributes

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :item, :quantity, :unit_price, :total, :price_attributes, :attributes], 'OrderQuoteLine')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @item = (x = opts.delete(:item); x.is_a?(::Io::Flow::V0::Models::OrderSummaryItem) ? x : ::Io::Flow::V0::Models::OrderSummaryItem.new(x))
            @errors = (x = opts.delete(:errors); x.nil? ? nil : HttpClient::Preconditions.assert_class('errors', x, Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::OrderQuoteLineError) ? x : ::Io::Flow::V0::Models::OrderQuoteLineError.new(x)) })
            @quantity = HttpClient::Preconditions.assert_class('quantity', opts.delete(:quantity), Integer)
            @discount = (x = opts.delete(:discount); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::OrderQuoteLineDiscount) ? x : ::Io::Flow::V0::Models::OrderQuoteLineDiscount.new(x)))
            @tax = (x = opts.delete(:tax); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::OrderQuoteSummaryTax) ? x : ::Io::Flow::V0::Models::OrderQuoteSummaryTax.new(x)))
            @duty = (x = opts.delete(:duty); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::OrderQuoteSummaryDuty) ? x : ::Io::Flow::V0::Models::OrderQuoteSummaryDuty.new(x)))
            @unit_price = (x = opts.delete(:unit_price); x.is_a?(::Io::Flow::V0::Models::OrderQuotePrice) ? x : ::Io::Flow::V0::Models::OrderQuotePrice.from_json(x))
            @total = (x = opts.delete(:total); x.is_a?(::Io::Flow::V0::Models::OrderQuotePrice) ? x : ::Io::Flow::V0::Models::OrderQuotePrice.from_json(x))
            @price_attributes = HttpClient::Preconditions.assert_class('price_attributes', opts.delete(:price_attributes), Hash).inject({}) { |h, d| h[d[0]] = (x = d[1]; x.is_a?(::Io::Flow::V0::Models::OrderQuotePriceStandard) ? x : ::Io::Flow::V0::Models::OrderQuotePriceStandard.new(x)); h }
            @attributes = HttpClient::Preconditions.assert_class('attributes', opts.delete(:attributes), Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderQuoteLine.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :item => item.to_hash,
              :errors => errors.nil? ? nil : errors.map { |o| o.to_hash },
              :quantity => quantity,
              :discount => discount.nil? ? nil : discount.to_hash,
              :tax => tax.nil? ? nil : tax.to_hash,
              :duty => duty.nil? ? nil : duty.to_hash,
              :unit_price => unit_price.to_hash,
              :total => total.to_hash,
              :price_attributes => price_attributes.inject({}) { |hash, o| hash[o[0]] = o[1].nil? ? nil : o[1].to_hash; hash },
              :attributes => attributes
            }
          end

        end

        # Represents the discount on a given line item. It applies to the entire line
        # regardless of quantity.
        class OrderQuoteLineDiscount

          attr_reader :applied, :label

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:applied], 'OrderQuoteLineDiscount')
            @applied = (x = opts.delete(:applied); x.is_a?(::Io::Flow::V0::Models::OrderQuotePriceStandard) ? x : ::Io::Flow::V0::Models::OrderQuotePriceStandard.new(x))
            @label = (x = opts.delete(:label); x.nil? ? nil : HttpClient::Preconditions.assert_class('label', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderQuoteLineDiscount.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :applied => applied.to_hash,
              :label => label
            }
          end

        end

        class OrderQuoteLineError

          attr_reader :code, :message

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:code, :message], 'OrderQuoteLineError')
            @code = (x = opts.delete(:code); x.is_a?(::Io::Flow::V0::Models::OrderQuoteLineErrorCode) ? x : ::Io::Flow::V0::Models::OrderQuoteLineErrorCode.apply(x))
            @message = HttpClient::Preconditions.assert_class('message', opts.delete(:message), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderQuoteLineError.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :code => code.value,
              :message => message
            }
          end

        end

        class OrderQuotePriceEstimated < OrderQuotePrice

          attr_reader :amount, :currency, :label

          def initialize(incoming={})
            super(:discriminator => OrderQuotePrice::Types::ORDER_QUOTE_PRICE_ESTIMATED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:amount, :currency, :label], 'OrderQuotePriceEstimated')
            @amount = HttpClient::Preconditions.assert_class('amount', opts.delete(:amount), Numeric)
            @currency = HttpClient::Preconditions.assert_class('currency', opts.delete(:currency), String)
            @label = HttpClient::Preconditions.assert_class('label', opts.delete(:label), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderQuotePriceEstimated.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :amount => amount,
              :currency => currency,
              :label => label
            }
          end

        end

        class OrderQuotePriceFree < OrderQuotePrice

          attr_reader :placeholder

          def initialize(incoming={})
            super(:discriminator => OrderQuotePrice::Types::ORDER_QUOTE_PRICE_FREE)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @placeholder = (x = opts.delete(:placeholder); x.nil? ? nil : HttpClient::Preconditions.assert_class('placeholder', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderQuotePriceFree.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :placeholder => placeholder
            }
          end

        end

        class OrderQuotePriceIncluded < OrderQuotePrice

          attr_reader :placeholder

          def initialize(incoming={})
            super(:discriminator => OrderQuotePrice::Types::ORDER_QUOTE_PRICE_INCLUDED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @placeholder = (x = opts.delete(:placeholder); x.nil? ? nil : HttpClient::Preconditions.assert_class('placeholder', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderQuotePriceIncluded.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :placeholder => placeholder
            }
          end

        end

        class OrderQuotePriceNotYetKnown < OrderQuotePrice

          attr_reader :placeholder

          def initialize(incoming={})
            super(:discriminator => OrderQuotePrice::Types::ORDER_QUOTE_PRICE_NOT_YET_KNOWN)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @placeholder = (x = opts.delete(:placeholder); x.nil? ? nil : HttpClient::Preconditions.assert_class('placeholder', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderQuotePriceNotYetKnown.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :placeholder => placeholder
            }
          end

        end

        class OrderQuotePriceStandard < OrderQuotePrice

          attr_reader :amount, :currency, :label

          def initialize(incoming={})
            super(:discriminator => OrderQuotePrice::Types::ORDER_QUOTE_PRICE_STANDARD)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:amount, :currency, :label], 'OrderQuotePriceStandard')
            @amount = HttpClient::Preconditions.assert_class('amount', opts.delete(:amount), Numeric)
            @currency = HttpClient::Preconditions.assert_class('currency', opts.delete(:currency), String)
            @label = HttpClient::Preconditions.assert_class('label', opts.delete(:label), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderQuotePriceStandard.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :amount => amount,
              :currency => currency,
              :label => label
            }
          end

        end

        class OrderQuotePutForm

          attr_reader :line_items, :session, :geo

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @line_items = (x = opts.delete(:line_items); x.nil? ? nil : HttpClient::Preconditions.assert_class('line_items', x, Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::LineItemForm) ? x : ::Io::Flow::V0::Models::LineItemForm.new(x)) })
            @session = (x = opts.delete(:session); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::SessionReference) ? x : ::Io::Flow::V0::Models::SessionReference.new(x)))
            @geo = (x = opts.delete(:geo); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::OrderQuoteGeoPutForm) ? x : ::Io::Flow::V0::Models::OrderQuoteGeoPutForm.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderQuotePutForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :line_items => line_items.nil? ? nil : line_items.map { |o| o.to_hash },
              :session => session.nil? ? nil : session.to_hash,
              :geo => geo.nil? ? nil : geo.to_hash
            }
          end

        end

        class OrderQuoteReference

          attr_reader :id

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id], 'OrderQuoteReference')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderQuoteReference.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id
            }
          end

        end

        class OrderQuoteSummary

          attr_reader :items, :shipping, :tax, :duty, :total, :balance

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:items, :total, :balance], 'OrderQuoteSummary')
            @items = (x = opts.delete(:items); x.is_a?(::Io::Flow::V0::Models::OrderQuoteSummaryItems) ? x : ::Io::Flow::V0::Models::OrderQuoteSummaryItems.new(x))
            @shipping = (x = opts.delete(:shipping); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::OrderQuoteSummaryShipping) ? x : ::Io::Flow::V0::Models::OrderQuoteSummaryShipping.new(x)))
            @tax = (x = opts.delete(:tax); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::OrderQuoteSummaryTax) ? x : ::Io::Flow::V0::Models::OrderQuoteSummaryTax.new(x)))
            @duty = (x = opts.delete(:duty); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::OrderQuoteSummaryDuty) ? x : ::Io::Flow::V0::Models::OrderQuoteSummaryDuty.new(x)))
            @total = (x = opts.delete(:total); x.is_a?(::Io::Flow::V0::Models::OrderQuoteSummaryTotal) ? x : ::Io::Flow::V0::Models::OrderQuoteSummaryTotal.new(x))
            @balance = (x = opts.delete(:balance); x.is_a?(::Io::Flow::V0::Models::OrderQuotePrice) ? x : ::Io::Flow::V0::Models::OrderQuotePrice.from_json(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderQuoteSummary.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :items => items.to_hash,
              :shipping => shipping.nil? ? nil : shipping.to_hash,
              :tax => tax.nil? ? nil : tax.to_hash,
              :duty => duty.nil? ? nil : duty.to_hash,
              :total => total.to_hash,
              :balance => balance.to_hash
            }
          end

        end

        class OrderQuoteSummaryDuty

          attr_reader :name, :total

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:name, :total], 'OrderQuoteSummaryDuty')
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
            @total = (x = opts.delete(:total); x.is_a?(::Io::Flow::V0::Models::OrderQuotePrice) ? x : ::Io::Flow::V0::Models::OrderQuotePrice.from_json(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderQuoteSummaryDuty.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :name => name,
              :total => total.to_hash
            }
          end

        end

        class OrderQuoteSummaryItems

          attr_reader :lines, :total

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:lines, :total], 'OrderQuoteSummaryItems')
            @lines = HttpClient::Preconditions.assert_class('lines', opts.delete(:lines), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::OrderQuoteLine) ? x : ::Io::Flow::V0::Models::OrderQuoteLine.new(x)) }
            @total = (x = opts.delete(:total); x.is_a?(::Io::Flow::V0::Models::OrderQuotePrice) ? x : ::Io::Flow::V0::Models::OrderQuotePrice.from_json(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderQuoteSummaryItems.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :lines => lines.map { |o| o.to_hash },
              :total => total.to_hash
            }
          end

        end

        class OrderQuoteSummaryShipping

          attr_reader :total, :freight, :surcharges

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:total], 'OrderQuoteSummaryShipping')
            @total = (x = opts.delete(:total); x.is_a?(::Io::Flow::V0::Models::OrderQuotePrice) ? x : ::Io::Flow::V0::Models::OrderQuotePrice.from_json(x))
            @freight = (x = opts.delete(:freight); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::OrderQuoteSummaryShippingFreight) ? x : ::Io::Flow::V0::Models::OrderQuoteSummaryShippingFreight.new(x)))
            @surcharges = (x = opts.delete(:surcharges); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::OrderQuoteSummaryShippingSurcharges) ? x : ::Io::Flow::V0::Models::OrderQuoteSummaryShippingSurcharges.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderQuoteSummaryShipping.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :total => total.to_hash,
              :freight => freight.nil? ? nil : freight.to_hash,
              :surcharges => surcharges.nil? ? nil : surcharges.to_hash
            }
          end

        end

        class OrderQuoteSummaryShippingFreight

          attr_reader :total

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:total], 'OrderQuoteSummaryShippingFreight')
            @total = (x = opts.delete(:total); x.is_a?(::Io::Flow::V0::Models::OrderQuotePrice) ? x : ::Io::Flow::V0::Models::OrderQuotePrice.from_json(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderQuoteSummaryShippingFreight.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :total => total.to_hash
            }
          end

        end

        class OrderQuoteSummaryShippingSurcharges

          attr_reader :total

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:total], 'OrderQuoteSummaryShippingSurcharges')
            @total = (x = opts.delete(:total); x.is_a?(::Io::Flow::V0::Models::OrderQuotePrice) ? x : ::Io::Flow::V0::Models::OrderQuotePrice.from_json(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderQuoteSummaryShippingSurcharges.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :total => total.to_hash
            }
          end

        end

        class OrderQuoteSummaryTax

          attr_reader :name, :total

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:name, :total], 'OrderQuoteSummaryTax')
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
            @total = (x = opts.delete(:total); x.is_a?(::Io::Flow::V0::Models::OrderQuotePrice) ? x : ::Io::Flow::V0::Models::OrderQuotePrice.from_json(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderQuoteSummaryTax.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :name => name,
              :total => total.to_hash
            }
          end

        end

        class OrderQuoteSummaryTotal

          attr_reader :total

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:total], 'OrderQuoteSummaryTotal')
            @total = (x = opts.delete(:total); x.is_a?(::Io::Flow::V0::Models::OrderQuotePrice) ? x : ::Io::Flow::V0::Models::OrderQuotePrice.from_json(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderQuoteSummaryTotal.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :total => total.to_hash
            }
          end

        end

        class OrderReference < ExpandableOrder

          attr_reader :id, :number

          def initialize(incoming={})
            super(:discriminator => ExpandableOrder::Types::ORDER_REFERENCE)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :number], 'OrderReference')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @number = HttpClient::Preconditions.assert_class('number', opts.delete(:number), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderReference.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :id => id,
              :number => number
            }
          end

        end

        # For merchant of record authorizations, we provide a summary of refund
        # information primarily to support customer service workflow.
        class OrderRefundSummary

          attr_reader :currency, :amounts

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:currency, :amounts], 'OrderRefundSummary')
            @currency = HttpClient::Preconditions.assert_class('currency', opts.delete(:currency), String)
            @amounts = (x = opts.delete(:amounts); x.is_a?(::Io::Flow::V0::Models::OrderRefundSummaryAmounts) ? x : ::Io::Flow::V0::Models::OrderRefundSummaryAmounts.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderRefundSummary.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :currency => currency,
              :amounts => amounts.to_hash
            }
          end

        end

        # Detailed examples of amount to refund following common e-commerce use cases.
        class OrderRefundSummaryAmounts

          attr_reader :balance, :item_subtotal, :discount, :refund_total, :shipping, :vat, :duty

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:balance, :item_subtotal, :refund_total, :shipping, :vat, :duty], 'OrderRefundSummaryAmounts')
            @balance = HttpClient::Preconditions.assert_class('balance', HttpClient::Helper.to_big_decimal(opts.delete(:balance)), BigDecimal)
            @item_subtotal = HttpClient::Preconditions.assert_class('item_subtotal', HttpClient::Helper.to_big_decimal(opts.delete(:item_subtotal)), BigDecimal)
            @discount = (x = opts.delete(:discount); x.nil? ? nil : HttpClient::Preconditions.assert_class('discount', HttpClient::Helper.to_big_decimal(x), BigDecimal))
            @refund_total = HttpClient::Preconditions.assert_class('refund_total', HttpClient::Helper.to_big_decimal(opts.delete(:refund_total)), BigDecimal)
            @shipping = HttpClient::Preconditions.assert_class('shipping', HttpClient::Helper.to_big_decimal(opts.delete(:shipping)), BigDecimal)
            @vat = HttpClient::Preconditions.assert_class('vat', HttpClient::Helper.to_big_decimal(opts.delete(:vat)), BigDecimal)
            @duty = HttpClient::Preconditions.assert_class('duty', HttpClient::Helper.to_big_decimal(opts.delete(:duty)), BigDecimal)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderRefundSummaryAmounts.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :balance => balance.to_f.to_s,
              :item_subtotal => item_subtotal.to_f.to_s,
              :discount => discount.to_f.to_s,
              :refund_total => refund_total.to_f.to_s,
              :shipping => shipping.to_f.to_s,
              :vat => vat.to_f.to_s,
              :duty => duty.to_f.to_s
            }
          end

        end

        class OrderRefundSummaryFullForm < OrderRefundSummaryForm

          attr_reader :includes

          def initialize(incoming={})
            super(:discriminator => OrderRefundSummaryForm::Types::ORDER_REFUND_SUMMARY_FULL_FORM)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:includes], 'OrderRefundSummaryFullForm')
            @includes = HttpClient::Preconditions.assert_class('includes', opts.delete(:includes), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::OrderRefundSummaryIncludes) ? x : ::Io::Flow::V0::Models::OrderRefundSummaryIncludes.apply(x)) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderRefundSummaryFullForm.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :includes => includes.map { |o| o.value }
            }
          end

        end

        class OrderRefundSummaryItem

          attr_reader :number, :quantity_to_refund

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:number, :quantity_to_refund], 'OrderRefundSummaryItem')
            @number = HttpClient::Preconditions.assert_class('number', opts.delete(:number), String)
            @quantity_to_refund = HttpClient::Preconditions.assert_class('quantity_to_refund', opts.delete(:quantity_to_refund), Integer)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderRefundSummaryItem.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :number => number,
              :quantity_to_refund => quantity_to_refund
            }
          end

        end

        class OrderRefundSummaryPartialForm < OrderRefundSummaryForm

          attr_reader :includes, :items

          def initialize(incoming={})
            super(:discriminator => OrderRefundSummaryForm::Types::ORDER_REFUND_SUMMARY_PARTIAL_FORM)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:includes, :items], 'OrderRefundSummaryPartialForm')
            @includes = HttpClient::Preconditions.assert_class('includes', opts.delete(:includes), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::OrderRefundSummaryPartialIncludes) ? x : ::Io::Flow::V0::Models::OrderRefundSummaryPartialIncludes.new(x)) }
            @items = HttpClient::Preconditions.assert_class('items', opts.delete(:items), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::OrderRefundSummaryItem) ? x : ::Io::Flow::V0::Models::OrderRefundSummaryItem.new(x)) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderRefundSummaryPartialForm.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :includes => includes.map { |o| o.to_hash },
              :items => items.map { |o| o.to_hash }
            }
          end

        end

        class OrderRefundSummaryPartialIncludes

          attr_reader :key, :charged

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:key, :charged], 'OrderRefundSummaryPartialIncludes')
            @key = (x = opts.delete(:key); x.is_a?(::Io::Flow::V0::Models::OrderRefundSummaryIncludes) ? x : ::Io::Flow::V0::Models::OrderRefundSummaryIncludes.apply(x))
            @charged = (x = opts.delete(:charged); x.is_a?(::Io::Flow::V0::Models::OrderRefundSummaryPartialCharged) ? x : ::Io::Flow::V0::Models::OrderRefundSummaryPartialCharged.apply(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderRefundSummaryPartialIncludes.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :key => key.value,
              :charged => charged.value
            }
          end

        end

        # The order replacement details.
        class OrderReplacement

          attr_reader :id, :parent_order, :replacement_order

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :parent_order, :replacement_order], 'OrderReplacement')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @parent_order = (x = opts.delete(:parent_order); x.is_a?(::Io::Flow::V0::Models::Order) ? x : ::Io::Flow::V0::Models::Order.new(x))
            @replacement_order = (x = opts.delete(:replacement_order); x.is_a?(::Io::Flow::V0::Models::Order) ? x : ::Io::Flow::V0::Models::Order.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderReplacement.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :parent_order => parent_order.to_hash,
              :replacement_order => replacement_order.to_hash
            }
          end

        end

        class OrderReplacementDeleted < Event

          attr_reader :event_id, :timestamp, :organization, :order_replacement

          def initialize(incoming={})
            super(:discriminator => Event::Types::ORDER_REPLACEMENT_DELETED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :order_replacement], 'OrderReplacementDeleted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @order_replacement = (x = opts.delete(:order_replacement); x.is_a?(::Io::Flow::V0::Models::OrderReplacement) ? x : ::Io::Flow::V0::Models::OrderReplacement.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderReplacementDeleted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :order_replacement => order_replacement.to_hash
            }
          end

        end

        # The order replacement form is used to create a replacement order.
        class OrderReplacementForm

          attr_reader :items

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @items = (x = opts.delete(:items); x.nil? ? nil : HttpClient::Preconditions.assert_class('items', x, Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::LineItemForm) ? x : ::Io::Flow::V0::Models::LineItemForm.new(x)) })
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderReplacementForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :items => items.nil? ? nil : items.map { |o| o.to_hash }
            }
          end

        end

        class OrderReplacementUpserted < Event

          attr_reader :event_id, :timestamp, :organization, :order_replacement

          def initialize(incoming={})
            super(:discriminator => Event::Types::ORDER_REPLACEMENT_UPSERTED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :order_replacement], 'OrderReplacementUpserted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @order_replacement = (x = opts.delete(:order_replacement); x.is_a?(::Io::Flow::V0::Models::OrderReplacement) ? x : ::Io::Flow::V0::Models::OrderReplacement.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderReplacementUpserted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :order_replacement => order_replacement.to_hash
            }
          end

        end

        class OrderRuleReference

          attr_reader :id, :key

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :key], 'OrderRuleReference')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @key = HttpClient::Preconditions.assert_class('key', opts.delete(:key), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderRuleReference.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :key => key
            }
          end

        end

        class OrderRulesSummary

          attr_reader :applied

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:applied], 'OrderRulesSummary')
            @applied = HttpClient::Preconditions.assert_class('applied', opts.delete(:applied), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::OrderRuleReference) ? x : ::Io::Flow::V0::Models::OrderRuleReference.new(x)) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderRulesSummary.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :applied => applied.map { |o| o.to_hash }
            }
          end

        end

        # Manual change for a shipping method used for an order. Currently only
        # available to orders with a single calculated delivery.
        class OrderServiceChange

          attr_reader :id, :from, :to

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :from, :to], 'OrderServiceChange')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @from = (x = opts.delete(:from); x.is_a?(::Io::Flow::V0::Models::CarrierService) ? x : ::Io::Flow::V0::Models::CarrierService.new(x))
            @to = (x = opts.delete(:to); x.is_a?(::Io::Flow::V0::Models::CarrierService) ? x : ::Io::Flow::V0::Models::CarrierService.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderServiceChange.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :from => from.to_hash,
              :to => to.to_hash
            }
          end

        end

        # Manual change for a shipping method used for an order. Currently only
        # available to orders with a single calculated delivery. To help with orders
        # with multiple deliveries, we will require verification of both the current
        # service level (from) and the new service level (to).
        class OrderServiceChangeForm

          attr_reader :from_service_id, :to_service_id

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:from_service_id, :to_service_id], 'OrderServiceChangeForm')
            @from_service_id = HttpClient::Preconditions.assert_class('from_service_id', opts.delete(:from_service_id), String)
            @to_service_id = HttpClient::Preconditions.assert_class('to_service_id', opts.delete(:to_service_id), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderServiceChangeForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :from_service_id => from_service_id,
              :to_service_id => to_service_id
            }
          end

        end

        class OrderServiceChangeRequest < Event

          attr_reader :event_id, :timestamp, :organization, :request

          def initialize(incoming={})
            super(:discriminator => Event::Types::ORDER_SERVICE_CHANGE_REQUEST)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :request], 'OrderServiceChangeRequest')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @request = (x = opts.delete(:request); x.is_a?(::Io::Flow::V0::Models::OrderServiceChangeRequestData) ? x : ::Io::Flow::V0::Models::OrderServiceChangeRequestData.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderServiceChangeRequest.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :request => request.to_hash
            }
          end

        end

        class OrderServiceChangeRequestData

          attr_reader :id, :source_url, :filename

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :source_url], 'OrderServiceChangeRequestData')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @source_url = HttpClient::Preconditions.assert_class('source_url', opts.delete(:source_url), String)
            @filename = (x = opts.delete(:filename); x.nil? ? nil : HttpClient::Preconditions.assert_class('filename', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderServiceChangeRequestData.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :source_url => source_url,
              :filename => filename
            }
          end

        end

        # Optional data to be processed during order submission
        class OrderSubmissionForm

          attr_reader :identifiers

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @identifiers = HttpClient::Preconditions.assert_class('identifiers', (x = opts.delete(:identifiers); x.nil? ? [] : x), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::OrderSubmissionIdentifierForm) ? x : ::Io::Flow::V0::Models::OrderSubmissionIdentifierForm.new(x)) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderSubmissionForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :identifiers => identifiers.map { |o| o.to_hash }
            }
          end

        end

        # Defines the data needed to attach an identifier to each order created by a
        # checkout.
        class OrderSubmissionIdentifierForm

          attr_reader :identifier, :name, :primary

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:identifier], 'OrderSubmissionIdentifierForm')
            @identifier = HttpClient::Preconditions.assert_class('identifier', opts.delete(:identifier), String)
            @name = (x = opts.delete(:name); x.nil? ? nil : HttpClient::Preconditions.assert_class('name', x, String))
            @primary = (x = opts.delete(:primary); x.nil? ? nil : HttpClient::Preconditions.assert_boolean('primary', x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderSubmissionIdentifierForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :identifier => identifier,
              :name => name,
              :primary => primary
            }
          end

        end

        # The order summary is a view of the order summary object with the order prices
        # flattened to keys.
        class OrderSummary

          attr_reader :number, :subtotal, :shipping, :tax, :duty, :insurance, :discount, :surcharges, :adjustment, :total, :lines, :identifiers, :attributes

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:number, :subtotal, :total, :lines], 'OrderSummary')
            @number = HttpClient::Preconditions.assert_class('number', opts.delete(:number), String)
            @subtotal = (x = opts.delete(:subtotal); x.is_a?(::Io::Flow::V0::Models::OrderSummaryPriceDetail) ? x : ::Io::Flow::V0::Models::OrderSummaryPriceDetail.new(x))
            @shipping = (x = opts.delete(:shipping); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::OrderSummaryPriceDetail) ? x : ::Io::Flow::V0::Models::OrderSummaryPriceDetail.new(x)))
            @tax = (x = opts.delete(:tax); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::OrderSummaryPriceDetail) ? x : ::Io::Flow::V0::Models::OrderSummaryPriceDetail.new(x)))
            @duty = (x = opts.delete(:duty); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::OrderSummaryPriceDetail) ? x : ::Io::Flow::V0::Models::OrderSummaryPriceDetail.new(x)))
            @insurance = (x = opts.delete(:insurance); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::OrderSummaryPriceDetail) ? x : ::Io::Flow::V0::Models::OrderSummaryPriceDetail.new(x)))
            @discount = (x = opts.delete(:discount); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::OrderSummaryPriceDetail) ? x : ::Io::Flow::V0::Models::OrderSummaryPriceDetail.new(x)))
            @surcharges = (x = opts.delete(:surcharges); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::OrderSummaryPriceDetail) ? x : ::Io::Flow::V0::Models::OrderSummaryPriceDetail.new(x)))
            @adjustment = (x = opts.delete(:adjustment); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::OrderSummaryPriceDetail) ? x : ::Io::Flow::V0::Models::OrderSummaryPriceDetail.new(x)))
            @total = (x = opts.delete(:total); x.is_a?(::Io::Flow::V0::Models::OrderSummaryPriceDetail) ? x : ::Io::Flow::V0::Models::OrderSummaryPriceDetail.new(x))
            @lines = HttpClient::Preconditions.assert_class('lines', opts.delete(:lines), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::OrderSummaryLineItem) ? x : ::Io::Flow::V0::Models::OrderSummaryLineItem.new(x)) }
            @identifiers = (x = opts.delete(:identifiers); x.nil? ? nil : HttpClient::Preconditions.assert_class('identifiers', x, Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('identifiers', d[1], String); h })
            @attributes = (x = opts.delete(:attributes); x.nil? ? nil : HttpClient::Preconditions.assert_class('attributes', x, Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h })
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderSummary.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :number => number,
              :subtotal => subtotal.to_hash,
              :shipping => shipping.nil? ? nil : shipping.to_hash,
              :tax => tax.nil? ? nil : tax.to_hash,
              :duty => duty.nil? ? nil : duty.to_hash,
              :insurance => insurance.nil? ? nil : insurance.to_hash,
              :discount => discount.nil? ? nil : discount.to_hash,
              :surcharges => surcharges.nil? ? nil : surcharges.to_hash,
              :adjustment => adjustment.nil? ? nil : adjustment.to_hash,
              :total => total.to_hash,
              :lines => lines.map { |o| o.to_hash },
              :identifiers => identifiers.nil? ? nil : identifiers,
              :attributes => attributes.nil? ? nil : attributes
            }
          end

        end

        class OrderSummaryImage

          attr_reader :url

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:url], 'OrderSummaryImage')
            @url = HttpClient::Preconditions.assert_class('url', opts.delete(:url), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderSummaryImage.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :url => url
            }
          end

        end

        class OrderSummaryItem

          attr_reader :number, :name, :description, :attributes, :image, :price, :discount, :tax, :duty, :price_attributes

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:number, :name, :attributes, :price, :price_attributes], 'OrderSummaryItem')
            @number = HttpClient::Preconditions.assert_class('number', opts.delete(:number), String)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
            @description = (x = opts.delete(:description); x.nil? ? nil : HttpClient::Preconditions.assert_class('description', x, String))
            @attributes = HttpClient::Preconditions.assert_class('attributes', opts.delete(:attributes), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::CheckoutItemContentAttribute) ? x : ::Io::Flow::V0::Models::CheckoutItemContentAttribute.new(x)) }
            @image = (x = opts.delete(:image); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::OrderSummaryImage) ? x : ::Io::Flow::V0::Models::OrderSummaryImage.new(x)))
            @price = (x = opts.delete(:price); x.is_a?(::Io::Flow::V0::Models::Price) ? x : ::Io::Flow::V0::Models::Price.new(x))
            @discount = (x = opts.delete(:discount); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Price) ? x : ::Io::Flow::V0::Models::Price.new(x)))
            @tax = (x = opts.delete(:tax); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::OrderSummaryLevy) ? x : ::Io::Flow::V0::Models::OrderSummaryLevy.new(x)))
            @duty = (x = opts.delete(:duty); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::OrderSummaryLevy) ? x : ::Io::Flow::V0::Models::OrderSummaryLevy.new(x)))
            @price_attributes = HttpClient::Preconditions.assert_class('price_attributes', opts.delete(:price_attributes), Hash).inject({}) { |h, d| h[d[0]] = (x = d[1]; x.is_a?(::Io::Flow::V0::Models::Price) ? x : ::Io::Flow::V0::Models::Price.new(x)); h }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderSummaryItem.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :number => number,
              :name => name,
              :description => description,
              :attributes => attributes.map { |o| o.to_hash },
              :image => image.nil? ? nil : image.to_hash,
              :price => price.to_hash,
              :discount => discount.nil? ? nil : discount.to_hash,
              :tax => tax.nil? ? nil : tax.to_hash,
              :duty => duty.nil? ? nil : duty.to_hash,
              :price_attributes => price_attributes.inject({}) { |hash, o| hash[o[0]] = o[1].nil? ? nil : o[1].to_hash; hash }
            }
          end

        end

        class OrderSummaryLevy

          attr_reader :rate, :rate_label, :value

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:rate, :value], 'OrderSummaryLevy')
            @rate = HttpClient::Preconditions.assert_class('rate', HttpClient::Helper.to_big_decimal(opts.delete(:rate)), BigDecimal)
            @rate_label = (x = opts.delete(:rate_label); x.nil? ? nil : HttpClient::Preconditions.assert_class('rate_label', x, String))
            @value = (x = opts.delete(:value); x.is_a?(::Io::Flow::V0::Models::Price) ? x : ::Io::Flow::V0::Models::Price.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderSummaryLevy.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :rate => rate.to_f.to_s,
              :rate_label => rate_label,
              :value => value.to_hash
            }
          end

        end

        class OrderSummaryLineItem

          attr_reader :id, :item, :quantity, :discount, :tax, :duty, :total, :price_attributes, :attributes

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:item, :quantity, :total, :price_attributes], 'OrderSummaryLineItem')
            @id = (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, String))
            @item = (x = opts.delete(:item); x.is_a?(::Io::Flow::V0::Models::OrderSummaryItem) ? x : ::Io::Flow::V0::Models::OrderSummaryItem.new(x))
            @quantity = HttpClient::Preconditions.assert_class('quantity', opts.delete(:quantity), Integer)
            @discount = (x = opts.delete(:discount); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Price) ? x : ::Io::Flow::V0::Models::Price.new(x)))
            @tax = (x = opts.delete(:tax); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::OrderSummaryLevy) ? x : ::Io::Flow::V0::Models::OrderSummaryLevy.new(x)))
            @duty = (x = opts.delete(:duty); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::OrderSummaryLevy) ? x : ::Io::Flow::V0::Models::OrderSummaryLevy.new(x)))
            @total = (x = opts.delete(:total); x.is_a?(::Io::Flow::V0::Models::Price) ? x : ::Io::Flow::V0::Models::Price.new(x))
            @price_attributes = HttpClient::Preconditions.assert_class('price_attributes', opts.delete(:price_attributes), Hash).inject({}) { |h, d| h[d[0]] = (x = d[1]; x.is_a?(::Io::Flow::V0::Models::Price) ? x : ::Io::Flow::V0::Models::Price.new(x)); h }
            @attributes = (x = opts.delete(:attributes); x.nil? ? nil : HttpClient::Preconditions.assert_class('attributes', x, Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h })
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderSummaryLineItem.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :item => item.to_hash,
              :quantity => quantity,
              :discount => discount.nil? ? nil : discount.to_hash,
              :tax => tax.nil? ? nil : tax.to_hash,
              :duty => duty.nil? ? nil : duty.to_hash,
              :total => total.to_hash,
              :price_attributes => price_attributes.inject({}) { |hash, o| hash[o[0]] = o[1].nil? ? nil : o[1].to_hash; hash },
              :attributes => attributes.nil? ? nil : attributes
            }
          end

        end

        # Summaries the io.flow.order.price.v0.models.order_price_detail, removing
        # components and accuracy which are not needed for summary views
        class OrderSummaryPriceDetail

          attr_reader :price, :name, :rate, :rate_label

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:price], 'OrderSummaryPriceDetail')
            @price = (x = opts.delete(:price); x.is_a?(::Io::Flow::V0::Models::Price) ? x : ::Io::Flow::V0::Models::Price.new(x))
            @name = (x = opts.delete(:name); x.nil? ? nil : HttpClient::Preconditions.assert_class('name', x, String))
            @rate = (x = opts.delete(:rate); x.nil? ? nil : HttpClient::Preconditions.assert_class('rate', HttpClient::Helper.to_big_decimal(x), BigDecimal))
            @rate_label = (x = opts.delete(:rate_label); x.nil? ? nil : HttpClient::Preconditions.assert_class('rate_label', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderSummaryPriceDetail.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :price => price.to_hash,
              :name => name,
              :rate => rate.to_f.to_s,
              :rate_label => rate_label
            }
          end

        end

        class OrderUpserted < Event

          attr_reader :event_id, :timestamp, :organization, :number, :environment, :experience_id, :expires_at, :customer, :selections, :items, :destination, :deliveries, :prices, :order_id, :payments, :discount, :delivered_duty, :total, :created_at, :updated_at, :submitted_at, :lines, :attributes, :geo, :merchant_of_record, :tax_registration

          def initialize(incoming={})
            super(:discriminator => Event::Types::ORDER_UPSERTED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :number, :environment, :experience_id, :expires_at, :customer, :selections, :items, :destination, :deliveries, :prices, :total], 'OrderUpserted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @number = HttpClient::Preconditions.assert_class('number', opts.delete(:number), String)
            @environment = HttpClient::Preconditions.assert_class('environment', opts.delete(:environment), String)
            @experience_id = HttpClient::Preconditions.assert_class('experience_id', opts.delete(:experience_id), String)
            @expires_at = HttpClient::Preconditions.assert_class('expires_at', HttpClient::Helper.to_date_time_iso8601(opts.delete(:expires_at)), DateTime)
            @customer = (x = opts.delete(:customer); x.is_a?(::Io::Flow::V0::Models::OrderCustomer) ? x : ::Io::Flow::V0::Models::OrderCustomer.new(x))
            @selections = HttpClient::Preconditions.assert_class('selections', opts.delete(:selections), Array).map { |v| HttpClient::Preconditions.assert_class('selections', v, String) }
            @items = HttpClient::Preconditions.assert_class('items', opts.delete(:items), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::LocalizedLineItem) ? x : ::Io::Flow::V0::Models::LocalizedLineItem.new(x)) }
            @destination = (x = opts.delete(:destination); x.is_a?(::Io::Flow::V0::Models::OrderAddress) ? x : ::Io::Flow::V0::Models::OrderAddress.new(x))
            @deliveries = HttpClient::Preconditions.assert_class('deliveries', opts.delete(:deliveries), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::Delivery) ? x : ::Io::Flow::V0::Models::Delivery.from_json(x)) }
            @prices = HttpClient::Preconditions.assert_class('prices', opts.delete(:prices), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::OrderPriceDetail) ? x : ::Io::Flow::V0::Models::OrderPriceDetail.new(x)) }
            @order_id = (x = opts.delete(:order_id); x.nil? ? nil : HttpClient::Preconditions.assert_class('order_id', x, String))
            @payments = (x = opts.delete(:payments); x.nil? ? nil : HttpClient::Preconditions.assert_class('payments', x, Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::OrderPayment) ? x : ::Io::Flow::V0::Models::OrderPayment.new(x)) })
            @discount = (x = opts.delete(:discount); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Money) ? x : ::Io::Flow::V0::Models::Money.new(x)))
            @delivered_duty = (x = opts.delete(:delivered_duty); x.nil? ? nil : HttpClient::Preconditions.assert_class('delivered_duty', x, String))
            @total = (x = opts.delete(:total); x.is_a?(::Io::Flow::V0::Models::LocalizedTotal) ? x : ::Io::Flow::V0::Models::LocalizedTotal.new(x))
            @created_at = (x = opts.delete(:created_at); x.nil? ? nil : HttpClient::Preconditions.assert_class('created_at', HttpClient::Helper.to_date_time_iso8601(x), DateTime))
            @updated_at = (x = opts.delete(:updated_at); x.nil? ? nil : HttpClient::Preconditions.assert_class('updated_at', HttpClient::Helper.to_date_time_iso8601(x), DateTime))
            @submitted_at = (x = opts.delete(:submitted_at); x.nil? ? nil : HttpClient::Preconditions.assert_class('submitted_at', HttpClient::Helper.to_date_time_iso8601(x), DateTime))
            @lines = (x = opts.delete(:lines); x.nil? ? nil : HttpClient::Preconditions.assert_class('lines', x, Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::Line) ? x : ::Io::Flow::V0::Models::Line.new(x)) })
            @attributes = (x = opts.delete(:attributes); x.nil? ? nil : HttpClient::Preconditions.assert_class('attributes', x, Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h })
            @geo = (x = opts.delete(:geo); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::OrderGeo) ? x : ::Io::Flow::V0::Models::OrderGeo.new(x)))
            @merchant_of_record = (x = opts.delete(:merchant_of_record); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::OrderMerchantOfRecord) ? x : ::Io::Flow::V0::Models::OrderMerchantOfRecord.apply(x)))
            @tax_registration = (x = opts.delete(:tax_registration); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::TaxRegistration) ? x : ::Io::Flow::V0::Models::TaxRegistration.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderUpserted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :number => number,
              :environment => environment,
              :experience_id => experience_id,
              :expires_at => expires_at,
              :customer => customer.to_hash,
              :selections => selections,
              :items => items.map { |o| o.to_hash },
              :destination => destination.to_hash,
              :deliveries => deliveries.map { |o| o.to_hash },
              :prices => prices.map { |o| o.to_hash },
              :order_id => order_id,
              :payments => payments.nil? ? nil : payments.map { |o| o.to_hash },
              :discount => discount.nil? ? nil : discount.to_hash,
              :delivered_duty => delivered_duty,
              :total => total.to_hash,
              :created_at => created_at,
              :updated_at => updated_at,
              :submitted_at => submitted_at,
              :lines => lines.nil? ? nil : lines.map { |o| o.to_hash },
              :attributes => attributes.nil? ? nil : attributes,
              :geo => geo.nil? ? nil : geo.to_hash,
              :merchant_of_record => merchant_of_record.nil? ? nil : merchant_of_record.value,
              :tax_registration => tax_registration.nil? ? nil : tax_registration.to_hash
            }
          end

        end

        class OrderUpsertedV2 < Event

          attr_reader :event_id, :timestamp, :organization, :order

          def initialize(incoming={})
            super(:discriminator => Event::Types::ORDER_UPSERTED_V2)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :order], 'OrderUpsertedV2')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @order = (x = opts.delete(:order); x.is_a?(::Io::Flow::V0::Models::Order) ? x : ::Io::Flow::V0::Models::Order.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderUpsertedV2.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :order => order.to_hash
            }
          end

        end

        class OrderVersion

          attr_reader :id, :timestamp, :type, :order

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :timestamp, :type, :order], 'OrderVersion')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::V0::Models::ChangeType) ? x : ::Io::Flow::V0::Models::ChangeType.apply(x))
            @order = (x = opts.delete(:order); x.is_a?(::Io::Flow::V0::Models::Order) ? x : ::Io::Flow::V0::Models::Order.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderVersion.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :timestamp => timestamp,
              :type => type.value,
              :order => order.to_hash
            }
          end

        end

        class OrderWithDiscountsForm

          attr_reader :order, :discounts

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:order], 'OrderWithDiscountsForm')
            @order = (x = opts.delete(:order); x.is_a?(::Io::Flow::V0::Models::OrderForm) ? x : ::Io::Flow::V0::Models::OrderForm.new(x))
            @discounts = HttpClient::Preconditions.assert_class('discounts', (x = opts.delete(:discounts); x.nil? ? [] : x), Array).map { |v| HttpClient::Preconditions.assert_class('discounts', v, String) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrderWithDiscountsForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :order => order.to_hash,
              :discounts => discounts
            }
          end

        end

        # Represents a single organization in the system, and what environment it is
        # currently operating in.
        class Organization < ExpandableOrganization

          attr_reader :id, :name, :environment, :parent, :defaults, :created_at, :status

          def initialize(incoming={})
            super(:discriminator => ExpandableOrganization::Types::ORGANIZATION)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :name, :environment], 'Organization')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
            @environment = (x = opts.delete(:environment); x.is_a?(::Io::Flow::V0::Models::Environment) ? x : ::Io::Flow::V0::Models::Environment.apply(x))
            @parent = (x = opts.delete(:parent); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::OrganizationReference) ? x : ::Io::Flow::V0::Models::OrganizationReference.new(x)))
            @defaults = (x = opts.delete(:defaults); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::OrganizationDefaults) ? x : ::Io::Flow::V0::Models::OrganizationDefaults.new(x)))
            @created_at = (x = opts.delete(:created_at); x.nil? ? nil : HttpClient::Preconditions.assert_class('created_at', HttpClient::Helper.to_date_time_iso8601(x), DateTime))
            @status = (x = (x = opts.delete(:status); x.nil? ? "active" : x); x.is_a?(::Io::Flow::V0::Models::OrganizationStatus) ? x : ::Io::Flow::V0::Models::OrganizationStatus.apply(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            Organization.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :id => id,
              :name => name,
              :environment => environment.value,
              :parent => parent.nil? ? nil : parent.to_hash,
              :defaults => defaults.nil? ? nil : defaults.to_hash,
              :created_at => created_at,
              :status => status.value
            }
          end

        end

        # Defines the data used for broad authorization of user access to org level data
        class OrganizationAuthorization

          attr_reader :role, :environment

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:environment], 'OrganizationAuthorization')
            @role = (x = opts.delete(:role); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Role) ? x : ::Io::Flow::V0::Models::Role.apply(x)))
            @environment = (x = opts.delete(:environment); x.is_a?(::Io::Flow::V0::Models::Environment) ? x : ::Io::Flow::V0::Models::Environment.apply(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrganizationAuthorization.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :role => role.nil? ? nil : role.value,
              :environment => environment.value
            }
          end

        end

        class OrganizationAuthorizationForm

          attr_reader :organization, :environment

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:organization, :environment], 'OrganizationAuthorizationForm')
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @environment = (x = opts.delete(:environment); x.is_a?(::Io::Flow::V0::Models::Environment) ? x : ::Io::Flow::V0::Models::Environment.apply(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrganizationAuthorizationForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :organization => organization,
              :environment => environment.value
            }
          end

        end

        class OrganizationConfigurationReference

          attr_reader :id

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id], 'OrganizationConfigurationReference')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrganizationConfigurationReference.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id
            }
          end

        end

        class OrganizationDefaultConfigurations

          attr_reader :id, :checkout_configuration

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :checkout_configuration], 'OrganizationDefaultConfigurations')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @checkout_configuration = (x = opts.delete(:checkout_configuration); x.is_a?(::Io::Flow::V0::Models::OrganizationConfigurationReference) ? x : ::Io::Flow::V0::Models::OrganizationConfigurationReference.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrganizationDefaultConfigurations.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :checkout_configuration => checkout_configuration.to_hash
            }
          end

        end

        class OrganizationDefaultConfigurationsDeleted < Event

          attr_reader :event_id, :timestamp, :organization, :default_configurations

          def initialize(incoming={})
            super(:discriminator => Event::Types::ORGANIZATION_DEFAULT_CONFIGURATIONS_DELETED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :default_configurations], 'OrganizationDefaultConfigurationsDeleted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @default_configurations = (x = opts.delete(:default_configurations); x.is_a?(::Io::Flow::V0::Models::OrganizationDefaultConfigurations) ? x : ::Io::Flow::V0::Models::OrganizationDefaultConfigurations.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrganizationDefaultConfigurationsDeleted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :default_configurations => default_configurations.to_hash
            }
          end

        end

        class OrganizationDefaultConfigurationsForm

          attr_reader :id

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id], 'OrganizationDefaultConfigurationsForm')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrganizationDefaultConfigurationsForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id
            }
          end

        end

        class OrganizationDefaultConfigurationsUpserted < Event

          attr_reader :event_id, :timestamp, :organization, :default_configurations

          def initialize(incoming={})
            super(:discriminator => Event::Types::ORGANIZATION_DEFAULT_CONFIGURATIONS_UPSERTED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :default_configurations], 'OrganizationDefaultConfigurationsUpserted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @default_configurations = (x = opts.delete(:default_configurations); x.is_a?(::Io::Flow::V0::Models::OrganizationDefaultConfigurations) ? x : ::Io::Flow::V0::Models::OrganizationDefaultConfigurations.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrganizationDefaultConfigurationsUpserted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :default_configurations => default_configurations.to_hash
            }
          end

        end

        class OrganizationDefaults

          attr_reader :country, :base_currency, :language, :locale, :timezone

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:country, :base_currency, :language, :locale, :timezone], 'OrganizationDefaults')
            @country = HttpClient::Preconditions.assert_class('country', opts.delete(:country), String)
            @base_currency = HttpClient::Preconditions.assert_class('base_currency', opts.delete(:base_currency), String)
            @language = HttpClient::Preconditions.assert_class('language', opts.delete(:language), String)
            @locale = HttpClient::Preconditions.assert_class('locale', opts.delete(:locale), String)
            @timezone = HttpClient::Preconditions.assert_class('timezone', opts.delete(:timezone), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrganizationDefaults.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :country => country,
              :base_currency => base_currency,
              :language => language,
              :locale => locale,
              :timezone => timezone
            }
          end

        end

        class OrganizationDeleted < Event

          attr_reader :event_id, :timestamp, :id

          def initialize(incoming={})
            super(:discriminator => Event::Types::ORGANIZATION_DELETED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :id], 'OrganizationDeleted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrganizationDeleted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :id => id
            }
          end

        end

        class OrganizationDeletedV2 < Event

          attr_reader :event_id, :timestamp, :organization

          def initialize(incoming={})
            super(:discriminator => Event::Types::ORGANIZATION_DELETED_V2)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization], 'OrganizationDeletedV2')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = (x = opts.delete(:organization); x.is_a?(::Io::Flow::V0::Models::Organization) ? x : ::Io::Flow::V0::Models::Organization.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrganizationDeletedV2.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization.to_hash
            }
          end

        end

        # Either id or name is required.
        class OrganizationForm

          attr_reader :id, :name, :environment, :parent_id, :defaults, :status

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @id = (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, String))
            @name = (x = opts.delete(:name); x.nil? ? nil : HttpClient::Preconditions.assert_class('name', x, String))
            @environment = (x = (x = opts.delete(:environment); x.nil? ? "production" : x); x.is_a?(::Io::Flow::V0::Models::Environment) ? x : ::Io::Flow::V0::Models::Environment.apply(x))
            @parent_id = (x = opts.delete(:parent_id); x.nil? ? nil : HttpClient::Preconditions.assert_class('parent_id', x, String))
            @defaults = (x = opts.delete(:defaults); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::OrganizationDefaults) ? x : ::Io::Flow::V0::Models::OrganizationDefaults.new(x)))
            @status = (x = (x = opts.delete(:status); x.nil? ? "active" : x); x.is_a?(::Io::Flow::V0::Models::OrganizationStatus) ? x : ::Io::Flow::V0::Models::OrganizationStatus.apply(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrganizationForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :name => name,
              :environment => environment.value,
              :parent_id => parent_id,
              :defaults => defaults.nil? ? nil : defaults.to_hash,
              :status => status.value
            }
          end

        end

        # Data required to upsert an organization.
        class OrganizationPutForm

          attr_reader :name, :environment, :parent_id, :defaults, :status

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = (x = opts.delete(:name); x.nil? ? nil : HttpClient::Preconditions.assert_class('name', x, String))
            @environment = (x = opts.delete(:environment); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Environment) ? x : ::Io::Flow::V0::Models::Environment.apply(x)))
            @parent_id = (x = opts.delete(:parent_id); x.nil? ? nil : HttpClient::Preconditions.assert_class('parent_id', x, String))
            @defaults = (x = opts.delete(:defaults); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::OrganizationDefaults) ? x : ::Io::Flow::V0::Models::OrganizationDefaults.new(x)))
            @status = (x = (x = opts.delete(:status); x.nil? ? "active" : x); x.is_a?(::Io::Flow::V0::Models::OrganizationStatus) ? x : ::Io::Flow::V0::Models::OrganizationStatus.apply(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrganizationPutForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :name => name,
              :environment => environment.nil? ? nil : environment.value,
              :parent_id => parent_id,
              :defaults => defaults.nil? ? nil : defaults.to_hash,
              :status => status.value
            }
          end

        end

        class OrganizationRatesData

          attr_reader :rates

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:rates], 'OrganizationRatesData')
            @rates = HttpClient::Preconditions.assert_class('rates', opts.delete(:rates), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::Rate) ? x : ::Io::Flow::V0::Models::Rate.new(x)) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrganizationRatesData.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :rates => rates.map { |o| o.to_hash }
            }
          end

        end

        # Represents the full list of exchange rates in effect for an organization. This
        # is a bulk event - meaning any time an individual rate changes, we publish the
        # new complete list of exchange rates. Note this event is published a few
        # minutes after a rate is published, allowing us to aggregate multiple changes
        # in a short period of time to reduce the number of organization_rates_published
        # we publish.
        class OrganizationRatesPublished < Event

          attr_reader :event_id, :timestamp, :organization, :data

          def initialize(incoming={})
            super(:discriminator => Event::Types::ORGANIZATION_RATES_PUBLISHED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :data], 'OrganizationRatesPublished')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @data = (x = opts.delete(:data); x.is_a?(::Io::Flow::V0::Models::OrganizationRatesData) ? x : ::Io::Flow::V0::Models::OrganizationRatesData.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrganizationRatesPublished.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :data => data.to_hash
            }
          end

        end

        class OrganizationReference < ExpandableOrganization

          attr_reader :id

          def initialize(incoming={})
            super(:discriminator => ExpandableOrganization::Types::ORGANIZATION_REFERENCE)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id], 'OrganizationReference')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrganizationReference.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :id => id
            }
          end

        end

        # Represents a session created for an organization. Primary method to select an
        # experience for a given user session and ensure that experience does not change
        # throughout the user's activity. Provides authentication to objects created
        # during this session (e.g. order).
        class OrganizationSession < Session

          attr_reader :id, :organization, :visitor, :visit, :environment, :attributes, :ip, :local, :geo, :experience, :format, :experiment, :context

          def initialize(incoming={})
            super(:discriminator => Session::Types::ORGANIZATION_SESSION)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :organization, :visitor, :visit, :environment, :attributes], 'OrganizationSession')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @visitor = (x = opts.delete(:visitor); x.is_a?(::Io::Flow::V0::Models::SessionVisitor) ? x : ::Io::Flow::V0::Models::SessionVisitor.new(x))
            @visit = (x = opts.delete(:visit); x.is_a?(::Io::Flow::V0::Models::SessionVisit) ? x : ::Io::Flow::V0::Models::SessionVisit.new(x))
            @environment = (x = opts.delete(:environment); x.is_a?(::Io::Flow::V0::Models::Environment) ? x : ::Io::Flow::V0::Models::Environment.apply(x))
            @attributes = HttpClient::Preconditions.assert_class('attributes', opts.delete(:attributes), Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h }
            @ip = (x = opts.delete(:ip); x.nil? ? nil : HttpClient::Preconditions.assert_class('ip', x, String))
            @local = (x = opts.delete(:local); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::LocalSession) ? x : ::Io::Flow::V0::Models::LocalSession.new(x)))
            @geo = (x = opts.delete(:geo); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::SessionGeo) ? x : ::Io::Flow::V0::Models::SessionGeo.new(x)))
            @experience = (x = opts.delete(:experience); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::ExperienceGeo) ? x : ::Io::Flow::V0::Models::ExperienceGeo.new(x)))
            @format = (x = opts.delete(:format); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::SessionFormat) ? x : ::Io::Flow::V0::Models::SessionFormat.new(x)))
            @experiment = (x = opts.delete(:experiment); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::SessionExperiment) ? x : ::Io::Flow::V0::Models::SessionExperiment.new(x)))
            @context = (x = opts.delete(:context); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::ContextReference) ? x : ::Io::Flow::V0::Models::ContextReference.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrganizationSession.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :id => id,
              :organization => organization,
              :visitor => visitor.to_hash,
              :visit => visit.to_hash,
              :environment => environment.value,
              :attributes => attributes,
              :ip => ip,
              :local => local.nil? ? nil : local.to_hash,
              :geo => geo.nil? ? nil : geo.to_hash,
              :experience => experience.nil? ? nil : experience.to_hash,
              :format => format.nil? ? nil : format.to_hash,
              :experiment => experiment.nil? ? nil : experiment.to_hash,
              :context => context.nil? ? nil : context.to_hash
            }
          end

        end

        # Represents a session authorized access to the specified organization's data
        class OrganizationSessionAuthorization < SessionAuthorization

          attr_reader :organization, :environment

          def initialize(incoming={})
            super(:discriminator => SessionAuthorization::Types::ORGANIZATION_SESSION_AUTHORIZATION)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:organization, :environment], 'OrganizationSessionAuthorization')
            @organization = (x = opts.delete(:organization); x.is_a?(::Io::Flow::V0::Models::OrganizationReference) ? x : ::Io::Flow::V0::Models::OrganizationReference.new(x))
            @environment = (x = opts.delete(:environment); x.is_a?(::Io::Flow::V0::Models::Environment) ? x : ::Io::Flow::V0::Models::Environment.apply(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrganizationSessionAuthorization.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :organization => organization.to_hash,
              :environment => environment.value
            }
          end

        end

        # A short identifier for an organization that is used to setup account IDs,
        # invoice Prefixes, etc. This has been replaced by the 'short_id' model but is
        # being kept for backwards compatibility.
        class OrganizationShortId

          attr_reader :id, :organization, :short_id

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :organization, :short_id], 'OrganizationShortId')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @organization = (x = opts.delete(:organization); x.is_a?(::Io::Flow::V0::Models::OrganizationReference) ? x : ::Io::Flow::V0::Models::OrganizationReference.new(x))
            @short_id = HttpClient::Preconditions.assert_class('short_id', opts.delete(:short_id), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrganizationShortId.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :organization => organization.to_hash,
              :short_id => short_id
            }
          end

        end

        class OrganizationShortIdDeleted < Event

          attr_reader :event_id, :timestamp, :organization_short_id

          def initialize(incoming={})
            super(:discriminator => Event::Types::ORGANIZATION_SHORT_ID_DELETED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization_short_id], 'OrganizationShortIdDeleted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization_short_id = (x = opts.delete(:organization_short_id); x.is_a?(::Io::Flow::V0::Models::OrganizationShortId) ? x : ::Io::Flow::V0::Models::OrganizationShortId.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrganizationShortIdDeleted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization_short_id => organization_short_id.to_hash
            }
          end

        end

        class OrganizationShortIdUpserted < Event

          attr_reader :event_id, :timestamp, :organization_short_id

          def initialize(incoming={})
            super(:discriminator => Event::Types::ORGANIZATION_SHORT_ID_UPSERTED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization_short_id], 'OrganizationShortIdUpserted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization_short_id = (x = opts.delete(:organization_short_id); x.is_a?(::Io::Flow::V0::Models::OrganizationShortId) ? x : ::Io::Flow::V0::Models::OrganizationShortId.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrganizationShortIdUpserted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization_short_id => organization_short_id.to_hash
            }
          end

        end

        class OrganizationSummary

          attr_reader :id, :name, :environment

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :name, :environment], 'OrganizationSummary')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
            @environment = (x = opts.delete(:environment); x.is_a?(::Io::Flow::V0::Models::Environment) ? x : ::Io::Flow::V0::Models::Environment.apply(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrganizationSummary.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :name => name,
              :environment => environment.value
            }
          end

        end

        # All of the metadata associated with a given token.
        class OrganizationToken < Token

          attr_reader :id, :organization, :user, :environment, :partial, :created_at, :description

          def initialize(incoming={})
            super(:discriminator => Token::Types::ORGANIZATION_TOKEN)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :organization, :user, :environment, :partial, :created_at], 'OrganizationToken')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @organization = (x = opts.delete(:organization); x.is_a?(::Io::Flow::V0::Models::OrganizationReference) ? x : ::Io::Flow::V0::Models::OrganizationReference.new(x))
            @user = (x = opts.delete(:user); x.is_a?(::Io::Flow::V0::Models::UserReference) ? x : ::Io::Flow::V0::Models::UserReference.new(x))
            @environment = (x = opts.delete(:environment); x.is_a?(::Io::Flow::V0::Models::Environment) ? x : ::Io::Flow::V0::Models::Environment.apply(x))
            @partial = HttpClient::Preconditions.assert_class('partial', opts.delete(:partial), String)
            @created_at = HttpClient::Preconditions.assert_class('created_at', HttpClient::Helper.to_date_time_iso8601(opts.delete(:created_at)), DateTime)
            @description = (x = opts.delete(:description); x.nil? ? nil : HttpClient::Preconditions.assert_class('description', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrganizationToken.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :id => id,
              :organization => organization.to_hash,
              :user => user.to_hash,
              :environment => environment.value,
              :partial => partial,
              :created_at => created_at,
              :description => description
            }
          end

        end

        # Used to create a new token. User making the request must be authorized to
        # create a token for this organization.
        class OrganizationTokenForm

          attr_reader :environment, :description

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:environment], 'OrganizationTokenForm')
            @environment = (x = opts.delete(:environment); x.is_a?(::Io::Flow::V0::Models::Environment) ? x : ::Io::Flow::V0::Models::Environment.apply(x))
            @description = (x = opts.delete(:description); x.nil? ? nil : HttpClient::Preconditions.assert_class('description', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrganizationTokenForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :environment => environment.value,
              :description => description
            }
          end

        end

        class OrganizationTokenFormV2

          attr_reader :organization_id, :description

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:organization_id], 'OrganizationTokenFormV2')
            @organization_id = HttpClient::Preconditions.assert_class('organization_id', opts.delete(:organization_id), String)
            @description = (x = opts.delete(:description); x.nil? ? nil : HttpClient::Preconditions.assert_class('description', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrganizationTokenFormV2.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :organization_id => organization_id,
              :description => description
            }
          end

        end

        # Summary data for a given token
        class OrganizationTokenReference < TokenReference

          attr_reader :id, :organization, :environment, :user

          def initialize(incoming={})
            super(:discriminator => TokenReference::Types::ORGANIZATION_TOKEN_REFERENCE)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :organization, :environment, :user], 'OrganizationTokenReference')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @organization = (x = opts.delete(:organization); x.is_a?(::Io::Flow::V0::Models::OrganizationReference) ? x : ::Io::Flow::V0::Models::OrganizationReference.new(x))
            @environment = (x = opts.delete(:environment); x.is_a?(::Io::Flow::V0::Models::Environment) ? x : ::Io::Flow::V0::Models::Environment.apply(x))
            @user = (x = opts.delete(:user); x.is_a?(::Io::Flow::V0::Models::UserReference) ? x : ::Io::Flow::V0::Models::UserReference.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrganizationTokenReference.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :id => id,
              :organization => organization.to_hash,
              :environment => environment.value,
              :user => user.to_hash
            }
          end

        end

        class OrganizationTokenV2 < Token

          attr_reader :id, :organization, :user, :partial, :cleartext, :created_at, :description

          def initialize(incoming={})
            super(:discriminator => Token::Types::ORGANIZATION_TOKEN_V2)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :organization, :user, :partial, :created_at], 'OrganizationTokenV2')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @organization = (x = opts.delete(:organization); x.is_a?(::Io::Flow::V0::Models::OrganizationReference) ? x : ::Io::Flow::V0::Models::OrganizationReference.new(x))
            @user = (x = opts.delete(:user); x.is_a?(::Io::Flow::V0::Models::UserReference) ? x : ::Io::Flow::V0::Models::UserReference.new(x))
            @partial = HttpClient::Preconditions.assert_class('partial', opts.delete(:partial), String)
            @cleartext = (x = opts.delete(:cleartext); x.nil? ? nil : HttpClient::Preconditions.assert_class('cleartext', x, String))
            @created_at = HttpClient::Preconditions.assert_class('created_at', HttpClient::Helper.to_date_time_iso8601(opts.delete(:created_at)), DateTime)
            @description = (x = opts.delete(:description); x.nil? ? nil : HttpClient::Preconditions.assert_class('description', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrganizationTokenV2.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :id => id,
              :organization => organization.to_hash,
              :user => user.to_hash,
              :partial => partial,
              :cleartext => cleartext,
              :created_at => created_at,
              :description => description
            }
          end

        end

        class OrganizationTokenV2Reference < TokenReference

          attr_reader :id, :organization

          def initialize(incoming={})
            super(:discriminator => TokenReference::Types::ORGANIZATION_TOKEN_V2_REFERENCE)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :organization], 'OrganizationTokenV2Reference')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @organization = (x = opts.delete(:organization); x.is_a?(::Io::Flow::V0::Models::OrganizationReference) ? x : ::Io::Flow::V0::Models::OrganizationReference.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrganizationTokenV2Reference.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :id => id,
              :organization => organization.to_hash
            }
          end

        end

        class OrganizationUpserted < Event

          attr_reader :event_id, :timestamp, :id, :name, :environment, :currencies, :parent_id, :default_base_currency, :default_country, :default_language, :default_locale, :default_timezone

          def initialize(incoming={})
            super(:discriminator => Event::Types::ORGANIZATION_UPSERTED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :id, :name, :environment, :currencies], 'OrganizationUpserted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
            @environment = HttpClient::Preconditions.assert_class('environment', opts.delete(:environment), String)
            @currencies = HttpClient::Preconditions.assert_class('currencies', opts.delete(:currencies), Array).map { |v| HttpClient::Preconditions.assert_class('currencies', v, String) }
            @parent_id = (x = opts.delete(:parent_id); x.nil? ? nil : HttpClient::Preconditions.assert_class('parent_id', x, String))
            @default_base_currency = (x = opts.delete(:default_base_currency); x.nil? ? nil : HttpClient::Preconditions.assert_class('default_base_currency', x, String))
            @default_country = (x = opts.delete(:default_country); x.nil? ? nil : HttpClient::Preconditions.assert_class('default_country', x, String))
            @default_language = (x = opts.delete(:default_language); x.nil? ? nil : HttpClient::Preconditions.assert_class('default_language', x, String))
            @default_locale = (x = opts.delete(:default_locale); x.nil? ? nil : HttpClient::Preconditions.assert_class('default_locale', x, String))
            @default_timezone = (x = opts.delete(:default_timezone); x.nil? ? nil : HttpClient::Preconditions.assert_class('default_timezone', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrganizationUpserted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :id => id,
              :name => name,
              :environment => environment,
              :currencies => currencies,
              :parent_id => parent_id,
              :default_base_currency => default_base_currency,
              :default_country => default_country,
              :default_language => default_language,
              :default_locale => default_locale,
              :default_timezone => default_timezone
            }
          end

        end

        class OrganizationUpsertedV2 < Event

          attr_reader :event_id, :timestamp, :organization

          def initialize(incoming={})
            super(:discriminator => Event::Types::ORGANIZATION_UPSERTED_V2)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization], 'OrganizationUpsertedV2')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = (x = opts.delete(:organization); x.is_a?(::Io::Flow::V0::Models::Organization) ? x : ::Io::Flow::V0::Models::Organization.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrganizationUpsertedV2.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization.to_hash
            }
          end

        end

        class OrganizationVersion

          attr_reader :id, :timestamp, :type, :organization

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :timestamp, :type, :organization], 'OrganizationVersion')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::V0::Models::ChangeType) ? x : ::Io::Flow::V0::Models::ChangeType.apply(x))
            @organization = (x = opts.delete(:organization); x.is_a?(::Io::Flow::V0::Models::Organization) ? x : ::Io::Flow::V0::Models::Organization.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OrganizationVersion.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :timestamp => timestamp,
              :type => type.value,
              :organization => organization.to_hash
            }
          end

        end

        # Model representing original and max values and currencies.
        class OriginalPrices

          attr_reader :value, :max

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:value, :max], 'OriginalPrices')
            @value = (x = opts.delete(:value); x.is_a?(::Io::Flow::V0::Models::Price) ? x : ::Io::Flow::V0::Models::Price.new(x))
            @max = (x = opts.delete(:max); x.is_a?(::Io::Flow::V0::Models::Price) ? x : ::Io::Flow::V0::Models::Price.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OriginalPrices.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :value => value.to_hash,
              :max => max.to_hash
            }
          end

        end

        class OutboundCartonFee < PartnerCenterFee

          attr_reader :amount

          def initialize(incoming={})
            super(:discriminator => PartnerCenterFee::Types::OUTBOUND_CARTON_FEE)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:amount], 'OutboundCartonFee')
            @amount = (x = opts.delete(:amount); x.is_a?(::Io::Flow::V0::Models::Money) ? x : ::Io::Flow::V0::Models::Money.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OutboundCartonFee.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :amount => amount.to_hash
            }
          end

        end

        class OversizedShipmentRatecardFee < RatecardFee

          attr_reader :weight_threshold, :weight_unit, :margin, :amount

          def initialize(incoming={})
            super(:discriminator => RatecardFee::Types::OVERSIZED_SHIPMENT_RATECARD_FEE)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:weight_threshold, :weight_unit], 'OversizedShipmentRatecardFee')
            @weight_threshold = HttpClient::Preconditions.assert_class('weight_threshold', HttpClient::Helper.to_big_decimal(opts.delete(:weight_threshold)), BigDecimal)
            @weight_unit = (x = opts.delete(:weight_unit); x.is_a?(::Io::Flow::V0::Models::UnitOfMeasurement) ? x : ::Io::Flow::V0::Models::UnitOfMeasurement.apply(x))
            @margin = (x = opts.delete(:margin); x.nil? ? nil : HttpClient::Preconditions.assert_class('margin', x, Numeric))
            @amount = (x = opts.delete(:amount); x.nil? ? nil : HttpClient::Preconditions.assert_class('amount', x, Numeric))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            OversizedShipmentRatecardFee.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :weight_threshold => weight_threshold.to_f.to_s,
              :weight_unit => weight_unit.value,
              :margin => margin,
              :amount => amount
            }
          end

        end

        # Represents packaging available to ship items
        class Packaging

          attr_reader :dimensions, :name, :number

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:dimensions], 'Packaging')
            @dimensions = (x = opts.delete(:dimensions); x.is_a?(::Io::Flow::V0::Models::Dimensions) ? x : ::Io::Flow::V0::Models::Dimensions.new(x))
            @name = (x = opts.delete(:name); x.nil? ? nil : HttpClient::Preconditions.assert_class('name', x, String))
            @number = (x = opts.delete(:number); x.nil? ? nil : HttpClient::Preconditions.assert_class('number', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            Packaging.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :dimensions => dimensions.to_hash,
              :name => name,
              :number => number
            }
          end

        end

        # Represents information about a partner (e.g. external 3PL) running the
        # fulfillment center
        class PartnerCenter

          attr_reader :partner_reference, :number, :fees

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:partner_reference], 'PartnerCenter')
            @partner_reference = (x = opts.delete(:partner_reference); x.is_a?(::Io::Flow::V0::Models::PartnerReference) ? x : ::Io::Flow::V0::Models::PartnerReference.new(x))
            @number = (x = opts.delete(:number); x.nil? ? nil : HttpClient::Preconditions.assert_class('number', x, String))
            @fees = (x = opts.delete(:fees); x.nil? ? nil : HttpClient::Preconditions.assert_class('fees', x, Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::PartnerCenterFee) ? x : ::Io::Flow::V0::Models::PartnerCenterFee.from_json(x)) })
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PartnerCenter.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :partner_reference => partner_reference.to_hash,
              :number => number,
              :fees => fees.nil? ? nil : fees.map { |o| o.to_hash }
            }
          end

        end

        class PartnerCenterForm

          attr_reader :partner_id, :number, :fees

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:partner_id], 'PartnerCenterForm')
            @partner_id = HttpClient::Preconditions.assert_class('partner_id', opts.delete(:partner_id), String)
            @number = (x = opts.delete(:number); x.nil? ? nil : HttpClient::Preconditions.assert_class('number', x, String))
            @fees = (x = opts.delete(:fees); x.nil? ? nil : HttpClient::Preconditions.assert_class('fees', x, Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::PartnerCenterFee) ? x : ::Io::Flow::V0::Models::PartnerCenterFee.from_json(x)) })
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PartnerCenterForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :partner_id => partner_id,
              :number => number,
              :fees => fees.nil? ? nil : fees.map { |o| o.to_hash }
            }
          end

        end

        class PartnerReference

          attr_reader :id

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id], 'PartnerReference')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PartnerReference.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id
            }
          end

        end

        # All of the metadata associated with a given token.
        class PartnerToken < Token

          attr_reader :id, :partner, :user, :environment, :partial, :created_at, :description

          def initialize(incoming={})
            super(:discriminator => Token::Types::PARTNER_TOKEN)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :partner, :user, :environment, :partial, :created_at], 'PartnerToken')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @partner = (x = opts.delete(:partner); x.is_a?(::Io::Flow::V0::Models::TokenPartnerReference) ? x : ::Io::Flow::V0::Models::TokenPartnerReference.new(x))
            @user = (x = opts.delete(:user); x.is_a?(::Io::Flow::V0::Models::UserReference) ? x : ::Io::Flow::V0::Models::UserReference.new(x))
            @environment = (x = opts.delete(:environment); x.is_a?(::Io::Flow::V0::Models::Environment) ? x : ::Io::Flow::V0::Models::Environment.apply(x))
            @partial = HttpClient::Preconditions.assert_class('partial', opts.delete(:partial), String)
            @created_at = HttpClient::Preconditions.assert_class('created_at', HttpClient::Helper.to_date_time_iso8601(opts.delete(:created_at)), DateTime)
            @description = (x = opts.delete(:description); x.nil? ? nil : HttpClient::Preconditions.assert_class('description', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PartnerToken.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :id => id,
              :partner => partner.to_hash,
              :user => user.to_hash,
              :environment => environment.value,
              :partial => partial,
              :created_at => created_at,
              :description => description
            }
          end

        end

        # Used to create a new token. User making the request must be authorized to
        # create a token for this partner.
        class PartnerTokenForm

          attr_reader :environment, :description

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:environment], 'PartnerTokenForm')
            @environment = (x = opts.delete(:environment); x.is_a?(::Io::Flow::V0::Models::Environment) ? x : ::Io::Flow::V0::Models::Environment.apply(x))
            @description = (x = opts.delete(:description); x.nil? ? nil : HttpClient::Preconditions.assert_class('description', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PartnerTokenForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :environment => environment.value,
              :description => description
            }
          end

        end

        # Summary data for a given token
        class PartnerTokenReference < TokenReference

          attr_reader :id, :partner, :environment, :user

          def initialize(incoming={})
            super(:discriminator => TokenReference::Types::PARTNER_TOKEN_REFERENCE)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :partner, :environment, :user], 'PartnerTokenReference')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @partner = (x = opts.delete(:partner); x.is_a?(::Io::Flow::V0::Models::TokenPartnerReference) ? x : ::Io::Flow::V0::Models::TokenPartnerReference.new(x))
            @environment = (x = opts.delete(:environment); x.is_a?(::Io::Flow::V0::Models::Environment) ? x : ::Io::Flow::V0::Models::Environment.apply(x))
            @user = (x = opts.delete(:user); x.is_a?(::Io::Flow::V0::Models::UserReference) ? x : ::Io::Flow::V0::Models::UserReference.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PartnerTokenReference.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :id => id,
              :partner => partner.to_hash,
              :environment => environment.value,
              :user => user.to_hash
            }
          end

        end

        class PasswordChangeForm

          attr_reader :current, :new

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:current, :new], 'PasswordChangeForm')
            @current = HttpClient::Preconditions.assert_class('current', opts.delete(:current), String)
            @new = HttpClient::Preconditions.assert_class('new', opts.delete(:new), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PasswordChangeForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :current => current,
              :new => new
            }
          end

        end

        class PasswordResetForm

          attr_reader :token, :password

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:token, :password], 'PasswordResetForm')
            @token = HttpClient::Preconditions.assert_class('token', opts.delete(:token), String)
            @password = HttpClient::Preconditions.assert_class('password', opts.delete(:password), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PasswordResetForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :token => token,
              :password => password
            }
          end

        end

        class PasswordResetRequestForm

          attr_reader :email

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:email], 'PasswordResetRequestForm')
            @email = HttpClient::Preconditions.assert_class('email', opts.delete(:email), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PasswordResetRequestForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :email => email
            }
          end

        end

        class PaymentAddress

          attr_reader :streets, :city, :province, :postal, :country

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:streets, :city, :country], 'PaymentAddress')
            @streets = HttpClient::Preconditions.assert_class('streets', opts.delete(:streets), Array).map { |v| HttpClient::Preconditions.assert_class('streets', v, String) }
            @city = HttpClient::Preconditions.assert_class('city', opts.delete(:city), String)
            @province = (x = opts.delete(:province); x.nil? ? nil : HttpClient::Preconditions.assert_class('province', x, String))
            @postal = (x = opts.delete(:postal); x.nil? ? nil : HttpClient::Preconditions.assert_class('postal', x, String))
            @country = HttpClient::Preconditions.assert_class('country', opts.delete(:country), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PaymentAddress.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :streets => streets,
              :city => city,
              :province => province,
              :postal => postal,
              :country => country
            }
          end

        end

        class PaymentAddressBilling

          attr_reader :contact, :location

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:contact, :location], 'PaymentAddressBilling')
            @contact = (x = opts.delete(:contact); x.is_a?(::Io::Flow::V0::Models::PaymentContactBilling) ? x : ::Io::Flow::V0::Models::PaymentContactBilling.new(x))
            @location = (x = opts.delete(:location); x.is_a?(::Io::Flow::V0::Models::PaymentAddress) ? x : ::Io::Flow::V0::Models::PaymentAddress.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PaymentAddressBilling.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :contact => contact.to_hash,
              :location => location.to_hash
            }
          end

        end

        class PaymentAddressShipping

          attr_reader :contact, :location

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:contact, :location], 'PaymentAddressShipping')
            @contact = (x = opts.delete(:contact); x.is_a?(::Io::Flow::V0::Models::PaymentContactShipping) ? x : ::Io::Flow::V0::Models::PaymentContactShipping.new(x))
            @location = (x = opts.delete(:location); x.is_a?(::Io::Flow::V0::Models::PaymentAddress) ? x : ::Io::Flow::V0::Models::PaymentAddress.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PaymentAddressShipping.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :contact => contact.to_hash,
              :location => location.to_hash
            }
          end

        end

        # All charges to a customer begin with an authorization, which represents the
        # payment provider's approval for the transaction. When it is authorized, an
        # authorization hold has been placed on the customer's account - this often
        # appears as a pending charge. This authorization hold will expire unless
        # captured or reversed.
        class PaymentAuthorization

          attr_reader :id, :payment_method_summary, :captures, :refunds, :reversals, :created_at, :updated_at, :status, :amount, :currency

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :payment_method_summary, :captures, :refunds, :reversals, :created_at, :updated_at, :status, :amount, :currency], 'PaymentAuthorization')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @payment_method_summary = (x = opts.delete(:payment_method_summary); x.is_a?(::Io::Flow::V0::Models::PaymentMethodSummary) ? x : ::Io::Flow::V0::Models::PaymentMethodSummary.from_json(x))
            @captures = HttpClient::Preconditions.assert_class('captures', opts.delete(:captures), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::PaymentCapture) ? x : ::Io::Flow::V0::Models::PaymentCapture.new(x)) }
            @refunds = HttpClient::Preconditions.assert_class('refunds', opts.delete(:refunds), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::PaymentRefund) ? x : ::Io::Flow::V0::Models::PaymentRefund.new(x)) }
            @reversals = HttpClient::Preconditions.assert_class('reversals', opts.delete(:reversals), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::PaymentReversal) ? x : ::Io::Flow::V0::Models::PaymentReversal.new(x)) }
            @created_at = HttpClient::Preconditions.assert_class('created_at', HttpClient::Helper.to_date_time_iso8601(opts.delete(:created_at)), DateTime)
            @updated_at = HttpClient::Preconditions.assert_class('updated_at', HttpClient::Helper.to_date_time_iso8601(opts.delete(:updated_at)), DateTime)
            @status = (x = opts.delete(:status); x.is_a?(::Io::Flow::V0::Models::PaymentAuthorizationStatus) ? x : ::Io::Flow::V0::Models::PaymentAuthorizationStatus.new(x))
            @amount = HttpClient::Preconditions.assert_class('amount', HttpClient::Helper.to_big_decimal(opts.delete(:amount)), BigDecimal)
            @currency = HttpClient::Preconditions.assert_class('currency', opts.delete(:currency), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PaymentAuthorization.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :payment_method_summary => payment_method_summary.to_hash,
              :captures => captures.map { |o| o.to_hash },
              :refunds => refunds.map { |o| o.to_hash },
              :reversals => reversals.map { |o| o.to_hash },
              :created_at => created_at,
              :updated_at => updated_at,
              :status => status.to_hash,
              :amount => amount.to_f.to_s,
              :currency => currency
            }
          end

        end

        class PaymentAuthorizationStatus

          attr_reader :status, :reason

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:status], 'PaymentAuthorizationStatus')
            @status = (x = opts.delete(:status); x.is_a?(::Io::Flow::V0::Models::AuthorizationStatus) ? x : ::Io::Flow::V0::Models::AuthorizationStatus.apply(x))
            @reason = (x = opts.delete(:reason); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::AuthorizationDeclineCode) ? x : ::Io::Flow::V0::Models::AuthorizationDeclineCode.apply(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PaymentAuthorizationStatus.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :status => status.value,
              :reason => reason.nil? ? nil : reason.value
            }
          end

        end

        # Capture actually transfers funds from the customer. Once a capture has
        # succeeded, the final charge shows up on the customer's statement. You can
        # capture as many times as you'd like up until the total amount of the
        # authorization has been captured or the authorization otherwise becomes
        # unavailable (e.g. expires).
        class PaymentCapture

          attr_reader :id, :amount, :currency, :created_at, :updated_at, :status

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :amount, :currency, :created_at, :updated_at, :status], 'PaymentCapture')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @amount = HttpClient::Preconditions.assert_class('amount', HttpClient::Helper.to_big_decimal(opts.delete(:amount)), BigDecimal)
            @currency = HttpClient::Preconditions.assert_class('currency', opts.delete(:currency), String)
            @created_at = HttpClient::Preconditions.assert_class('created_at', HttpClient::Helper.to_date_time_iso8601(opts.delete(:created_at)), DateTime)
            @updated_at = HttpClient::Preconditions.assert_class('updated_at', HttpClient::Helper.to_date_time_iso8601(opts.delete(:updated_at)), DateTime)
            @status = (x = opts.delete(:status); x.is_a?(::Io::Flow::V0::Models::PaymentCaptureStatus) ? x : ::Io::Flow::V0::Models::PaymentCaptureStatus.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PaymentCapture.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :amount => amount.to_f.to_s,
              :currency => currency,
              :created_at => created_at,
              :updated_at => updated_at,
              :status => status.to_hash
            }
          end

        end

        class PaymentCaptureForm

          attr_reader :amount, :currency

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @amount = (x = opts.delete(:amount); x.nil? ? nil : HttpClient::Preconditions.assert_class('amount', HttpClient::Helper.to_big_decimal(x), BigDecimal))
            @currency = (x = opts.delete(:currency); x.nil? ? nil : HttpClient::Preconditions.assert_class('currency', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PaymentCaptureForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :amount => amount.to_f.to_s,
              :currency => currency
            }
          end

        end

        class PaymentCaptureOptionAutomaticImmediate < PaymentCaptureOption

          attr_reader :placeholder

          def initialize(incoming={})
            super(:type => PaymentCaptureOption::Types::PAYMENT_CAPTURE_OPTION_AUTOMATIC_IMMEDIATE)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @placeholder = (x = opts.delete(:placeholder); x.nil? ? nil : HttpClient::Preconditions.assert_class('placeholder', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PaymentCaptureOptionAutomaticImmediate.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :placeholder => placeholder
            }
          end

        end

        class PaymentCaptureOptionManual < PaymentCaptureOption

          attr_reader :placeholder

          def initialize(incoming={})
            super(:type => PaymentCaptureOption::Types::PAYMENT_CAPTURE_OPTION_MANUAL)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @placeholder = (x = opts.delete(:placeholder); x.nil? ? nil : HttpClient::Preconditions.assert_class('placeholder', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PaymentCaptureOptionManual.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :placeholder => placeholder
            }
          end

        end

        class PaymentCaptureStatus

          attr_reader :status, :reason

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:status], 'PaymentCaptureStatus')
            @status = (x = opts.delete(:status); x.is_a?(::Io::Flow::V0::Models::CaptureStatus) ? x : ::Io::Flow::V0::Models::CaptureStatus.apply(x))
            @reason = (x = opts.delete(:reason); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::CaptureDeclineCode) ? x : ::Io::Flow::V0::Models::CaptureDeclineCode.apply(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PaymentCaptureStatus.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :status => status.value,
              :reason => reason.nil? ? nil : reason.value
            }
          end

        end

        class PaymentContactBilling

          attr_reader :first_name, :last_name, :company, :email, :phone

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:last_name], 'PaymentContactBilling')
            @first_name = (x = opts.delete(:first_name); x.nil? ? nil : HttpClient::Preconditions.assert_class('first_name', x, String))
            @last_name = HttpClient::Preconditions.assert_class('last_name', opts.delete(:last_name), String)
            @company = (x = opts.delete(:company); x.nil? ? nil : HttpClient::Preconditions.assert_class('company', x, String))
            @email = (x = opts.delete(:email); x.nil? ? nil : HttpClient::Preconditions.assert_class('email', x, String))
            @phone = (x = opts.delete(:phone); x.nil? ? nil : HttpClient::Preconditions.assert_class('phone', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PaymentContactBilling.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :first_name => first_name,
              :last_name => last_name,
              :company => company,
              :email => email,
              :phone => phone
            }
          end

        end

        class PaymentContactShipping

          attr_reader :first_name, :last_name, :email, :phone

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:last_name, :email, :phone], 'PaymentContactShipping')
            @first_name = (x = opts.delete(:first_name); x.nil? ? nil : HttpClient::Preconditions.assert_class('first_name', x, String))
            @last_name = HttpClient::Preconditions.assert_class('last_name', opts.delete(:last_name), String)
            @email = HttpClient::Preconditions.assert_class('email', opts.delete(:email), String)
            @phone = HttpClient::Preconditions.assert_class('phone', opts.delete(:phone), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PaymentContactShipping.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :first_name => first_name,
              :last_name => last_name,
              :email => email,
              :phone => phone
            }
          end

        end

        # Represents an online payment processed through CryptoPay.
        class PaymentCryptopay < Payment

          attr_reader :id, :order, :amount, :currency, :cryptopay

          def initialize(incoming={})
            super(:discriminator => Payment::Types::PAYMENT_CRYPTOPAY)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :amount, :currency, :cryptopay], 'PaymentCryptopay')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @order = (x = opts.delete(:order); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::AuthorizationOrderReference) ? x : ::Io::Flow::V0::Models::AuthorizationOrderReference.new(x)))
            @amount = HttpClient::Preconditions.assert_class('amount', HttpClient::Helper.to_big_decimal(opts.delete(:amount)), BigDecimal)
            @currency = HttpClient::Preconditions.assert_class('currency', opts.delete(:currency), String)
            @cryptopay = (x = opts.delete(:cryptopay); x.is_a?(::Io::Flow::V0::Models::OnlineAuthorizationDetails) ? x : ::Io::Flow::V0::Models::OnlineAuthorizationDetails.from_json(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PaymentCryptopay.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :id => id,
              :order => order.nil? ? nil : order.to_hash,
              :amount => amount.to_f.to_s,
              :currency => currency,
              :cryptopay => cryptopay.to_hash
            }
          end

        end

        class PaymentDeleted < Event

          attr_reader :event_id, :timestamp, :organization, :id

          def initialize(incoming={})
            super(:discriminator => Event::Types::PAYMENT_DELETED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :id], 'PaymentDeleted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PaymentDeleted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :id => id
            }
          end

        end

        class PaymentDiscount

          attr_reader :amount, :name, :code

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:amount], 'PaymentDiscount')
            @amount = HttpClient::Preconditions.assert_class('amount', HttpClient::Helper.to_big_decimal(opts.delete(:amount)), BigDecimal)
            @name = HttpClient::Preconditions.assert_class('name', (x = opts.delete(:name); x.nil? ? "Discount" : x), String)
            @code = (x = opts.delete(:code); x.nil? ? nil : HttpClient::Preconditions.assert_class('code', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PaymentDiscount.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :amount => amount.to_f.to_s,
              :name => name,
              :code => code
            }
          end

        end

        class PaymentDuty

          attr_reader :amount, :name

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:amount], 'PaymentDuty')
            @amount = HttpClient::Preconditions.assert_class('amount', HttpClient::Helper.to_big_decimal(opts.delete(:amount)), BigDecimal)
            @name = HttpClient::Preconditions.assert_class('name', (x = opts.delete(:name); x.nil? ? "Duty" : x), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PaymentDuty.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :amount => amount.to_f.to_s,
              :name => name
            }
          end

        end

        # Details for why a payment failed
        class PaymentError

          attr_reader :code, :messages, :codes

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:messages, :codes], 'PaymentError')
            @code = HttpClient::Preconditions.assert_class('code', (x = opts.delete(:code); x.nil? ? "payment_error" : x), String)
            @messages = HttpClient::Preconditions.assert_class('messages', opts.delete(:messages), Array).map { |v| HttpClient::Preconditions.assert_class('messages', v, String) }
            @codes = HttpClient::Preconditions.assert_class('codes', opts.delete(:codes), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::PaymentErrorCode) ? x : ::Io::Flow::V0::Models::PaymentErrorCode.apply(x)) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PaymentError.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :code => code,
              :messages => messages,
              :codes => codes.map { |o| o.value }
            }
          end

        end

        class PaymentFailure

          attr_reader :authorization_id, :failure_code, :failure_message

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:failure_code, :failure_message], 'PaymentFailure')
            @authorization_id = (x = opts.delete(:authorization_id); x.nil? ? nil : HttpClient::Preconditions.assert_class('authorization_id', x, String))
            @failure_code = (x = opts.delete(:failure_code); x.is_a?(::Io::Flow::V0::Models::PaymentFailureCode) ? x : ::Io::Flow::V0::Models::PaymentFailureCode.apply(x))
            @failure_message = HttpClient::Preconditions.assert_class('failure_message', opts.delete(:failure_message), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PaymentFailure.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :authorization_id => authorization_id,
              :failure_code => failure_code.value,
              :failure_message => failure_message
            }
          end

        end

        class PaymentInformation

          attr_reader :amount_refundable, :amount_refunded, :refundable_before, :amount_capturable, :amount_captured, :capturable_before, :authorizations

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:authorizations], 'PaymentInformation')
            @amount_refundable = (x = opts.delete(:amount_refundable); x.nil? ? nil : HttpClient::Preconditions.assert_class('amount_refundable', HttpClient::Helper.to_big_decimal(x), BigDecimal))
            @amount_refunded = (x = opts.delete(:amount_refunded); x.nil? ? nil : HttpClient::Preconditions.assert_class('amount_refunded', HttpClient::Helper.to_big_decimal(x), BigDecimal))
            @refundable_before = (x = opts.delete(:refundable_before); x.nil? ? nil : HttpClient::Preconditions.assert_class('refundable_before', HttpClient::Helper.to_date_time_iso8601(x), DateTime))
            @amount_capturable = (x = opts.delete(:amount_capturable); x.nil? ? nil : HttpClient::Preconditions.assert_class('amount_capturable', HttpClient::Helper.to_big_decimal(x), BigDecimal))
            @amount_captured = (x = opts.delete(:amount_captured); x.nil? ? nil : HttpClient::Preconditions.assert_class('amount_captured', HttpClient::Helper.to_big_decimal(x), BigDecimal))
            @capturable_before = (x = opts.delete(:capturable_before); x.nil? ? nil : HttpClient::Preconditions.assert_class('capturable_before', HttpClient::Helper.to_date_time_iso8601(x), DateTime))
            @authorizations = HttpClient::Preconditions.assert_class('authorizations', opts.delete(:authorizations), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::PaymentAuthorization) ? x : ::Io::Flow::V0::Models::PaymentAuthorization.new(x)) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PaymentInformation.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :amount_refundable => amount_refundable.to_f.to_s,
              :amount_refunded => amount_refunded.to_f.to_s,
              :refundable_before => refundable_before,
              :amount_capturable => amount_capturable.to_f.to_s,
              :amount_captured => amount_captured.to_f.to_s,
              :capturable_before => capturable_before,
              :authorizations => authorizations.map { |o| o.to_hash }
            }
          end

        end

        # Represents a single payment method - e.g VISA or Paypal - and any associated
        # metadata required for processing
        class PaymentMethod

          attr_reader :id, :type, :name, :images, :regions, :capabilities

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :type, :name, :images, :regions], 'PaymentMethod')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::V0::Models::PaymentMethodType) ? x : ::Io::Flow::V0::Models::PaymentMethodType.apply(x))
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
            @images = (x = opts.delete(:images); x.is_a?(::Io::Flow::V0::Models::PaymentMethodImages) ? x : ::Io::Flow::V0::Models::PaymentMethodImages.new(x))
            @regions = HttpClient::Preconditions.assert_class('regions', opts.delete(:regions), Array).map { |v| HttpClient::Preconditions.assert_class('regions', v, String) }
            @capabilities = (x = opts.delete(:capabilities); x.nil? ? nil : HttpClient::Preconditions.assert_class('capabilities', x, Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::PaymentMethodCapability) ? x : ::Io::Flow::V0::Models::PaymentMethodCapability.apply(x)) })
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PaymentMethod.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :type => type.value,
              :name => name,
              :images => images.to_hash,
              :regions => regions,
              :capabilities => capabilities.nil? ? nil : capabilities.map { |o| o.value }
            }
          end

        end

        class PaymentMethodBrand

          attr_reader :id, :name, :images

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :name, :images], 'PaymentMethodBrand')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
            @images = (x = opts.delete(:images); x.is_a?(::Io::Flow::V0::Models::PaymentMethodImages) ? x : ::Io::Flow::V0::Models::PaymentMethodImages.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PaymentMethodBrand.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :name => name,
              :images => images.to_hash
            }
          end

        end

        class PaymentMethodCardNumberCipher < CardNumber

          attr_reader :cipher

          def initialize(incoming={})
            super(:type => CardNumber::Types::PAYMENT_METHOD_CARD_NUMBER_CIPHER)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:cipher], 'PaymentMethodCardNumberCipher')
            @cipher = HttpClient::Preconditions.assert_class('cipher', opts.delete(:cipher), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PaymentMethodCardNumberCipher.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :cipher => cipher
            }
          end

        end

        class PaymentMethodCardNumberCleartext < CardNumber

          attr_reader :number

          def initialize(incoming={})
            super(:type => CardNumber::Types::PAYMENT_METHOD_CARD_NUMBER_CLEARTEXT)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:number], 'PaymentMethodCardNumberCleartext')
            @number = HttpClient::Preconditions.assert_class('number', opts.delete(:number), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PaymentMethodCardNumberCleartext.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :number => number
            }
          end

        end

        class PaymentMethodCardPciDetails < PaymentMethodCard

          attr_reader :card_number, :expiration_month, :expiration_year, :name

          def initialize(incoming={})
            super(:type => PaymentMethodCard::Types::PAYMENT_METHOD_CARD_PCI_DETAILS)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:card_number, :expiration_month, :expiration_year, :name], 'PaymentMethodCardPciDetails')
            @card_number = (x = opts.delete(:card_number); x.is_a?(::Io::Flow::V0::Models::CardNumber) ? x : ::Io::Flow::V0::Models::CardNumber.from_json(x))
            @expiration_month = HttpClient::Preconditions.assert_class('expiration_month', opts.delete(:expiration_month), Integer)
            @expiration_year = HttpClient::Preconditions.assert_class('expiration_year', opts.delete(:expiration_year), Integer)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PaymentMethodCardPciDetails.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :card_number => card_number.to_hash,
              :expiration_month => expiration_month,
              :expiration_year => expiration_year,
              :name => name
            }
          end

        end

        class PaymentMethodCardToken < PaymentMethodCard

          attr_reader :token

          def initialize(incoming={})
            super(:type => PaymentMethodCard::Types::PAYMENT_METHOD_CARD_TOKEN)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:token], 'PaymentMethodCardToken')
            @token = HttpClient::Preconditions.assert_class('token', opts.delete(:token), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PaymentMethodCardToken.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :token => token
            }
          end

        end

        class PaymentMethodDataAuthorizeApplepay < PaymentMethodData

          attr_reader :token

          def initialize(incoming={})
            super(:type => PaymentMethodData::Types::PAYMENT_METHOD_DATA_AUTHORIZE_APPLEPAY)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:token], 'PaymentMethodDataAuthorizeApplepay')
            @token = HttpClient::Preconditions.assert_class('token', opts.delete(:token), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PaymentMethodDataAuthorizeApplepay.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :token => token
            }
          end

        end

        class PaymentMethodDataAuthorizeCard < PaymentMethodData

          attr_reader :card_data, :device_fingerprint_details, :cvv

          def initialize(incoming={})
            super(:type => PaymentMethodData::Types::PAYMENT_METHOD_DATA_AUTHORIZE_CARD)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:card_data, :device_fingerprint_details], 'PaymentMethodDataAuthorizeCard')
            @card_data = (x = opts.delete(:card_data); x.is_a?(::Io::Flow::V0::Models::PaymentMethodCard) ? x : ::Io::Flow::V0::Models::PaymentMethodCard.from_json(x))
            @device_fingerprint_details = (x = opts.delete(:device_fingerprint_details); x.is_a?(::Io::Flow::V0::Models::DeviceFingerprintDetails) ? x : ::Io::Flow::V0::Models::DeviceFingerprintDetails.from_json(x))
            @cvv = (x = opts.delete(:cvv); x.nil? ? nil : HttpClient::Preconditions.assert_class('cvv', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PaymentMethodDataAuthorizeCard.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :card_data => card_data.to_hash,
              :device_fingerprint_details => device_fingerprint_details.to_hash,
              :cvv => cvv
            }
          end

        end

        class PaymentMethodDataAuthorizeGooglepay < PaymentMethodData

          attr_reader :payment_data

          def initialize(incoming={})
            super(:type => PaymentMethodData::Types::PAYMENT_METHOD_DATA_AUTHORIZE_GOOGLEPAY)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:payment_data], 'PaymentMethodDataAuthorizeGooglepay')
            @payment_data = HttpClient::Preconditions.assert_class('payment_data', HttpClient::Helper.to_object(opts.delete(:payment_data)), Hash)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PaymentMethodDataAuthorizeGooglepay.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :payment_data => payment_data
            }
          end

        end

        class PaymentMethodDataAuthorizeKlarna < PaymentMethodData

          attr_reader :result

          def initialize(incoming={})
            super(:type => PaymentMethodData::Types::PAYMENT_METHOD_DATA_AUTHORIZE_KLARNA)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:result], 'PaymentMethodDataAuthorizeKlarna')
            @result = (x = opts.delete(:result); x.is_a?(::Io::Flow::V0::Models::PaymentMethodDataAuthorizeKlarnaResult) ? x : ::Io::Flow::V0::Models::PaymentMethodDataAuthorizeKlarnaResult.from_json(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PaymentMethodDataAuthorizeKlarna.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :result => result.to_hash
            }
          end

        end

        class PaymentMethodDataAuthorizeKlarnaResultFailure < PaymentMethodDataAuthorizeKlarnaResult

          attr_reader :placeholder

          def initialize(incoming={})
            super(:type => PaymentMethodDataAuthorizeKlarnaResult::Types::PAYMENT_METHOD_DATA_AUTHORIZE_KLARNA_RESULT_FAILURE)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @placeholder = (x = opts.delete(:placeholder); x.nil? ? nil : HttpClient::Preconditions.assert_class('placeholder', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PaymentMethodDataAuthorizeKlarnaResultFailure.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :placeholder => placeholder
            }
          end

        end

        class PaymentMethodDataAuthorizeKlarnaResultSuccess < PaymentMethodDataAuthorizeKlarnaResult

          attr_reader :authorization_token

          def initialize(incoming={})
            super(:type => PaymentMethodDataAuthorizeKlarnaResult::Types::PAYMENT_METHOD_DATA_AUTHORIZE_KLARNA_RESULT_SUCCESS)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:authorization_token], 'PaymentMethodDataAuthorizeKlarnaResultSuccess')
            @authorization_token = HttpClient::Preconditions.assert_class('authorization_token', opts.delete(:authorization_token), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PaymentMethodDataAuthorizeKlarnaResultSuccess.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :authorization_token => authorization_token
            }
          end

        end

        class PaymentMethodDataAuthorizePaypal < PaymentMethodData

          attr_reader :payment_id, :payer_id

          def initialize(incoming={})
            super(:type => PaymentMethodData::Types::PAYMENT_METHOD_DATA_AUTHORIZE_PAYPAL)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:payment_id, :payer_id], 'PaymentMethodDataAuthorizePaypal')
            @payment_id = HttpClient::Preconditions.assert_class('payment_id', opts.delete(:payment_id), String)
            @payer_id = HttpClient::Preconditions.assert_class('payer_id', opts.delete(:payer_id), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PaymentMethodDataAuthorizePaypal.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :payment_id => payment_id,
              :payer_id => payer_id
            }
          end

        end

        class PaymentMethodDataCompleteAuthorizationCard < PaymentMethodData

          attr_reader :action_result

          def initialize(incoming={})
            super(:type => PaymentMethodData::Types::PAYMENT_METHOD_DATA_COMPLETE_AUTHORIZATION_CARD)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:action_result], 'PaymentMethodDataCompleteAuthorizationCard')
            @action_result = (x = opts.delete(:action_result); x.is_a?(::Io::Flow::V0::Models::CardAuthorizationActionResult) ? x : ::Io::Flow::V0::Models::CardAuthorizationActionResult.from_json(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PaymentMethodDataCompleteAuthorizationCard.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :action_result => action_result.to_hash
            }
          end

        end

        class PaymentMethodDataInitAfterpay < PaymentMethodData

          attr_reader :placeholder

          def initialize(incoming={})
            super(:type => PaymentMethodData::Types::PAYMENT_METHOD_DATA_INIT_AFTERPAY)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @placeholder = (x = opts.delete(:placeholder); x.nil? ? nil : HttpClient::Preconditions.assert_class('placeholder', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PaymentMethodDataInitAfterpay.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :placeholder => placeholder
            }
          end

        end

        class PaymentMethodDataInitApplepay < PaymentMethodData

          attr_reader :placeholder

          def initialize(incoming={})
            super(:type => PaymentMethodData::Types::PAYMENT_METHOD_DATA_INIT_APPLEPAY)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @placeholder = (x = opts.delete(:placeholder); x.nil? ? nil : HttpClient::Preconditions.assert_class('placeholder', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PaymentMethodDataInitApplepay.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :placeholder => placeholder
            }
          end

        end

        class PaymentMethodDataInitGooglepay < PaymentMethodData

          attr_reader :placeholder

          def initialize(incoming={})
            super(:type => PaymentMethodData::Types::PAYMENT_METHOD_DATA_INIT_GOOGLEPAY)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @placeholder = (x = opts.delete(:placeholder); x.nil? ? nil : HttpClient::Preconditions.assert_class('placeholder', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PaymentMethodDataInitGooglepay.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :placeholder => placeholder
            }
          end

        end

        class PaymentMethodDataInitIdeal < PaymentMethodData

          attr_reader :issuer

          def initialize(incoming={})
            super(:type => PaymentMethodData::Types::PAYMENT_METHOD_DATA_INIT_IDEAL)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @issuer = (x = opts.delete(:issuer); x.nil? ? nil : HttpClient::Preconditions.assert_class('issuer', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PaymentMethodDataInitIdeal.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :issuer => issuer
            }
          end

        end

        class PaymentMethodDataInitKlarna < PaymentMethodData

          attr_reader :placeholder

          def initialize(incoming={})
            super(:type => PaymentMethodData::Types::PAYMENT_METHOD_DATA_INIT_KLARNA)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @placeholder = (x = opts.delete(:placeholder); x.nil? ? nil : HttpClient::Preconditions.assert_class('placeholder', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PaymentMethodDataInitKlarna.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :placeholder => placeholder
            }
          end

        end

        class PaymentMethodDataInitPaypal < PaymentMethodData

          attr_reader :placeholder

          def initialize(incoming={})
            super(:type => PaymentMethodData::Types::PAYMENT_METHOD_DATA_INIT_PAYPAL)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @placeholder = (x = opts.delete(:placeholder); x.nil? ? nil : HttpClient::Preconditions.assert_class('placeholder', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PaymentMethodDataInitPaypal.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :placeholder => placeholder
            }
          end

        end

        class PaymentMethodDataValidateApplepay < PaymentMethodData

          attr_reader :validation_url

          def initialize(incoming={})
            super(:type => PaymentMethodData::Types::PAYMENT_METHOD_DATA_VALIDATE_APPLEPAY)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:validation_url], 'PaymentMethodDataValidateApplepay')
            @validation_url = HttpClient::Preconditions.assert_class('validation_url', opts.delete(:validation_url), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PaymentMethodDataValidateApplepay.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :validation_url => validation_url
            }
          end

        end

        class PaymentMethodImage

          attr_reader :url, :width, :height

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:url, :width, :height], 'PaymentMethodImage')
            @url = HttpClient::Preconditions.assert_class('url', opts.delete(:url), String)
            @width = HttpClient::Preconditions.assert_class('width', opts.delete(:width), Integer)
            @height = HttpClient::Preconditions.assert_class('height', opts.delete(:height), Integer)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PaymentMethodImage.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :url => url,
              :width => width,
              :height => height
            }
          end

        end

        class PaymentMethodImages

          attr_reader :small, :medium, :large

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:small, :medium, :large], 'PaymentMethodImages')
            @small = (x = opts.delete(:small); x.is_a?(::Io::Flow::V0::Models::PaymentMethodImage) ? x : ::Io::Flow::V0::Models::PaymentMethodImage.new(x))
            @medium = (x = opts.delete(:medium); x.is_a?(::Io::Flow::V0::Models::PaymentMethodImage) ? x : ::Io::Flow::V0::Models::PaymentMethodImage.new(x))
            @large = (x = opts.delete(:large); x.is_a?(::Io::Flow::V0::Models::PaymentMethodImage) ? x : ::Io::Flow::V0::Models::PaymentMethodImage.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PaymentMethodImages.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :small => small.to_hash,
              :medium => medium.to_hash,
              :large => large.to_hash
            }
          end

        end

        class PaymentMethodIssuer

          attr_reader :id, :name

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :name], 'PaymentMethodIssuer')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PaymentMethodIssuer.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :name => name
            }
          end

        end

        class PaymentMethodRule

          attr_reader :tags, :payment_method, :display_position, :content, :issuers, :programs, :q

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:tags, :payment_method, :display_position], 'PaymentMethodRule')
            @tags = HttpClient::Preconditions.assert_class('tags', opts.delete(:tags), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::PaymentMethodTag) ? x : ::Io::Flow::V0::Models::PaymentMethodTag.from_json(x)) }
            @payment_method = (x = opts.delete(:payment_method); x.is_a?(::Io::Flow::V0::Models::PaymentMethod) ? x : ::Io::Flow::V0::Models::PaymentMethod.new(x))
            @display_position = HttpClient::Preconditions.assert_class('display_position', opts.delete(:display_position), Integer)
            @content = (x = opts.delete(:content); x.nil? ? nil : HttpClient::Preconditions.assert_class('content', x, Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::PaymentMethodRuleContent) ? x : ::Io::Flow::V0::Models::PaymentMethodRuleContent.new(x)) })
            @issuers = (x = opts.delete(:issuers); x.nil? ? nil : HttpClient::Preconditions.assert_class('issuers', x, Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::PaymentMethodIssuer) ? x : ::Io::Flow::V0::Models::PaymentMethodIssuer.new(x)) })
            @programs = (x = opts.delete(:programs); x.nil? ? nil : HttpClient::Preconditions.assert_class('programs', x, Array).map { |v| HttpClient::Preconditions.assert_class('programs', HttpClient::Helper.to_object(v), Hash) })
            @q = (x = opts.delete(:q); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Query) ? x : ::Io::Flow::V0::Models::Query.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PaymentMethodRule.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :tags => tags.map { |o| o.to_hash },
              :payment_method => payment_method.to_hash,
              :display_position => display_position,
              :content => content.nil? ? nil : content.map { |o| o.to_hash },
              :issuers => issuers.nil? ? nil : issuers.map { |o| o.to_hash },
              :programs => programs.nil? ? nil : programs,
              :q => q.nil? ? nil : q.to_hash
            }
          end

        end

        class PaymentMethodRuleContent

          attr_reader :key, :value

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:key, :value], 'PaymentMethodRuleContent')
            @key = (x = opts.delete(:key); x.is_a?(::Io::Flow::V0::Models::PaymentMethodRuleContentKey) ? x : ::Io::Flow::V0::Models::PaymentMethodRuleContentKey.apply(x))
            @value = HttpClient::Preconditions.assert_class('value', opts.delete(:value), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PaymentMethodRuleContent.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :key => key.value,
              :value => value
            }
          end

        end

        class PaymentMethodSummaryAfterpay < PaymentMethodSummary

          attr_reader :merchant_of_record

          def initialize(incoming={})
            super(:type => PaymentMethodSummary::Types::PAYMENT_METHOD_SUMMARY_AFTERPAY)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:merchant_of_record], 'PaymentMethodSummaryAfterpay')
            @merchant_of_record = (x = opts.delete(:merchant_of_record); x.is_a?(::Io::Flow::V0::Models::MerchantOfRecord) ? x : ::Io::Flow::V0::Models::MerchantOfRecord.apply(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PaymentMethodSummaryAfterpay.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :merchant_of_record => merchant_of_record.value
            }
          end

        end

        class PaymentMethodSummaryApplepay < PaymentMethodSummary

          attr_reader :merchant_of_record

          def initialize(incoming={})
            super(:type => PaymentMethodSummary::Types::PAYMENT_METHOD_SUMMARY_APPLEPAY)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:merchant_of_record], 'PaymentMethodSummaryApplepay')
            @merchant_of_record = (x = opts.delete(:merchant_of_record); x.is_a?(::Io::Flow::V0::Models::MerchantOfRecord) ? x : ::Io::Flow::V0::Models::MerchantOfRecord.apply(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PaymentMethodSummaryApplepay.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :merchant_of_record => merchant_of_record.value
            }
          end

        end

        class PaymentMethodSummaryCard < PaymentMethodSummary

          attr_reader :merchant_of_record, :last_four, :card_type, :id

          def initialize(incoming={})
            super(:type => PaymentMethodSummary::Types::PAYMENT_METHOD_SUMMARY_CARD)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:merchant_of_record, :last_four, :card_type, :id], 'PaymentMethodSummaryCard')
            @merchant_of_record = (x = opts.delete(:merchant_of_record); x.is_a?(::Io::Flow::V0::Models::MerchantOfRecord) ? x : ::Io::Flow::V0::Models::MerchantOfRecord.apply(x))
            @last_four = HttpClient::Preconditions.assert_class('last_four', opts.delete(:last_four), String)
            @card_type = (x = opts.delete(:card_type); x.is_a?(::Io::Flow::V0::Models::CardType) ? x : ::Io::Flow::V0::Models::CardType.apply(x))
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PaymentMethodSummaryCard.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :merchant_of_record => merchant_of_record.value,
              :last_four => last_four,
              :card_type => card_type.value,
              :id => id
            }
          end

        end

        class PaymentMethodSummaryGooglepay < PaymentMethodSummary

          attr_reader :merchant_of_record

          def initialize(incoming={})
            super(:type => PaymentMethodSummary::Types::PAYMENT_METHOD_SUMMARY_GOOGLEPAY)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:merchant_of_record], 'PaymentMethodSummaryGooglepay')
            @merchant_of_record = (x = opts.delete(:merchant_of_record); x.is_a?(::Io::Flow::V0::Models::MerchantOfRecord) ? x : ::Io::Flow::V0::Models::MerchantOfRecord.apply(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PaymentMethodSummaryGooglepay.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :merchant_of_record => merchant_of_record.value
            }
          end

        end

        class PaymentMethodSummaryIdeal < PaymentMethodSummary

          attr_reader :merchant_of_record, :issuer

          def initialize(incoming={})
            super(:type => PaymentMethodSummary::Types::PAYMENT_METHOD_SUMMARY_IDEAL)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:merchant_of_record, :issuer], 'PaymentMethodSummaryIdeal')
            @merchant_of_record = (x = opts.delete(:merchant_of_record); x.is_a?(::Io::Flow::V0::Models::MerchantOfRecord) ? x : ::Io::Flow::V0::Models::MerchantOfRecord.apply(x))
            @issuer = HttpClient::Preconditions.assert_class('issuer', opts.delete(:issuer), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PaymentMethodSummaryIdeal.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :merchant_of_record => merchant_of_record.value,
              :issuer => issuer
            }
          end

        end

        class PaymentMethodSummaryKlarna < PaymentMethodSummary

          attr_reader :merchant_of_record

          def initialize(incoming={})
            super(:type => PaymentMethodSummary::Types::PAYMENT_METHOD_SUMMARY_KLARNA)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:merchant_of_record], 'PaymentMethodSummaryKlarna')
            @merchant_of_record = (x = opts.delete(:merchant_of_record); x.is_a?(::Io::Flow::V0::Models::MerchantOfRecord) ? x : ::Io::Flow::V0::Models::MerchantOfRecord.apply(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PaymentMethodSummaryKlarna.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :merchant_of_record => merchant_of_record.value
            }
          end

        end

        class PaymentMethodSummaryPaypal < PaymentMethodSummary

          attr_reader :merchant_of_record

          def initialize(incoming={})
            super(:type => PaymentMethodSummary::Types::PAYMENT_METHOD_SUMMARY_PAYPAL)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:merchant_of_record], 'PaymentMethodSummaryPaypal')
            @merchant_of_record = (x = opts.delete(:merchant_of_record); x.is_a?(::Io::Flow::V0::Models::MerchantOfRecord) ? x : ::Io::Flow::V0::Models::MerchantOfRecord.apply(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PaymentMethodSummaryPaypal.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :merchant_of_record => merchant_of_record.value
            }
          end

        end

        class PaymentOrderDetailsLineItem

          attr_reader :id, :description, :quantity, :amount, :tax, :duty, :product_url, :image_url, :category, :discounts

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :description, :quantity, :amount], 'PaymentOrderDetailsLineItem')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @description = HttpClient::Preconditions.assert_class('description', opts.delete(:description), String)
            @quantity = HttpClient::Preconditions.assert_class('quantity', opts.delete(:quantity), Integer)
            @amount = HttpClient::Preconditions.assert_class('amount', HttpClient::Helper.to_big_decimal(opts.delete(:amount)), BigDecimal)
            @tax = (x = opts.delete(:tax); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::PaymentTax) ? x : ::Io::Flow::V0::Models::PaymentTax.new(x)))
            @duty = (x = opts.delete(:duty); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::PaymentDuty) ? x : ::Io::Flow::V0::Models::PaymentDuty.new(x)))
            @product_url = (x = opts.delete(:product_url); x.nil? ? nil : HttpClient::Preconditions.assert_class('product_url', x, String))
            @image_url = (x = opts.delete(:image_url); x.nil? ? nil : HttpClient::Preconditions.assert_class('image_url', x, String))
            @category = (x = opts.delete(:category); x.nil? ? nil : HttpClient::Preconditions.assert_class('category', x, String))
            @discounts = (x = opts.delete(:discounts); x.nil? ? nil : HttpClient::Preconditions.assert_class('discounts', x, Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::PaymentDiscount) ? x : ::Io::Flow::V0::Models::PaymentDiscount.new(x)) })
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PaymentOrderDetailsLineItem.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :description => description,
              :quantity => quantity,
              :amount => amount.to_f.to_s,
              :tax => tax.nil? ? nil : tax.to_hash,
              :duty => duty.nil? ? nil : duty.to_hash,
              :product_url => product_url,
              :image_url => image_url,
              :category => category,
              :discounts => discounts.nil? ? nil : discounts.map { |o| o.to_hash }
            }
          end

        end

        class PaymentPaymentMethod

          attr_reader :id, :name, :type, :brands, :merchant_of_record, :images, :possible_actions

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :name, :type, :brands, :merchant_of_record, :images, :possible_actions], 'PaymentPaymentMethod')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
            @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::V0::Models::PaymentType) ? x : ::Io::Flow::V0::Models::PaymentType.apply(x))
            @brands = HttpClient::Preconditions.assert_class('brands', opts.delete(:brands), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::PaymentMethodBrand) ? x : ::Io::Flow::V0::Models::PaymentMethodBrand.new(x)) }
            @merchant_of_record = (x = opts.delete(:merchant_of_record); x.is_a?(::Io::Flow::V0::Models::MerchantOfRecord) ? x : ::Io::Flow::V0::Models::MerchantOfRecord.apply(x))
            @images = (x = opts.delete(:images); x.is_a?(::Io::Flow::V0::Models::PaymentMethodImages) ? x : ::Io::Flow::V0::Models::PaymentMethodImages.new(x))
            @possible_actions = HttpClient::Preconditions.assert_class('possible_actions', opts.delete(:possible_actions), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::PaymentActionType) ? x : ::Io::Flow::V0::Models::PaymentActionType.apply(x)) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PaymentPaymentMethod.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :name => name,
              :type => type.value,
              :brands => brands.map { |o| o.to_hash },
              :merchant_of_record => merchant_of_record.value,
              :images => images.to_hash,
              :possible_actions => possible_actions.map { |o| o.value }
            }
          end

        end

        class PaymentPaymentRequestReference < PaymentOrderReference

          attr_reader :payment_request_id

          def initialize(incoming={})
            super(:discriminator => PaymentOrderReference::Types::PAYMENT_PAYMENT_REQUEST_REFERENCE)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:payment_request_id], 'PaymentPaymentRequestReference')
            @payment_request_id = HttpClient::Preconditions.assert_class('payment_request_id', opts.delete(:payment_request_id), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PaymentPaymentRequestReference.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :payment_request_id => payment_request_id
            }
          end

        end

        # Represents an online payment processed through PayPal.
        class PaymentPaypal < Payment

          attr_reader :id, :order, :amount, :currency, :paypal

          def initialize(incoming={})
            super(:discriminator => Payment::Types::PAYMENT_PAYPAL)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :amount, :currency, :paypal], 'PaymentPaypal')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @order = (x = opts.delete(:order); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::AuthorizationOrderReference) ? x : ::Io::Flow::V0::Models::AuthorizationOrderReference.new(x)))
            @amount = HttpClient::Preconditions.assert_class('amount', HttpClient::Helper.to_big_decimal(opts.delete(:amount)), BigDecimal)
            @currency = HttpClient::Preconditions.assert_class('currency', opts.delete(:currency), String)
            @paypal = (x = opts.delete(:paypal); x.is_a?(::Io::Flow::V0::Models::OnlineAuthorizationDetails) ? x : ::Io::Flow::V0::Models::OnlineAuthorizationDetails.from_json(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PaymentPaypal.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :id => id,
              :order => order.nil? ? nil : order.to_hash,
              :amount => amount.to_f.to_s,
              :currency => currency,
              :paypal => paypal.to_hash
            }
          end

        end

        # Information about which payment processor performed the transaction and how it
        # can be tracked in their system
        class PaymentProcessor < ExpandablePaymentProcessor

          attr_reader :processor, :operation_identifier, :account

          def initialize(incoming={})
            super(:discriminator => ExpandablePaymentProcessor::Types::PAYMENT_PROCESSOR)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:processor], 'PaymentProcessor')
            @processor = HttpClient::Preconditions.assert_class('processor', opts.delete(:processor), String)
            @operation_identifier = (x = opts.delete(:operation_identifier); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::PaymentProcessorIdentifier) ? x : ::Io::Flow::V0::Models::PaymentProcessorIdentifier.new(x)))
            @account = (x = opts.delete(:account); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::PaymentProcessorAccount) ? x : ::Io::Flow::V0::Models::PaymentProcessorAccount.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PaymentProcessor.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :processor => processor,
              :operation_identifier => operation_identifier.nil? ? nil : operation_identifier.to_hash,
              :account => account.nil? ? nil : account.to_hash
            }
          end

        end

        # Information about an account with a payment processor
        class PaymentProcessorAccount

          attr_reader :organization, :key, :identifier, :parent_account

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:organization, :key, :identifier], 'PaymentProcessorAccount')
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @key = HttpClient::Preconditions.assert_class('key', opts.delete(:key), String)
            @identifier = (x = opts.delete(:identifier); x.is_a?(::Io::Flow::V0::Models::PaymentProcessorIdentifier) ? x : ::Io::Flow::V0::Models::PaymentProcessorIdentifier.new(x))
            @parent_account = (x = opts.delete(:parent_account); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::PaymentProcessorAccountReference) ? x : ::Io::Flow::V0::Models::PaymentProcessorAccountReference.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PaymentProcessorAccount.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :organization => organization,
              :key => key,
              :identifier => identifier.to_hash,
              :parent_account => parent_account.nil? ? nil : parent_account.to_hash
            }
          end

        end

        class PaymentProcessorAccountReference

          attr_reader :organization, :key

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:organization, :key], 'PaymentProcessorAccountReference')
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @key = HttpClient::Preconditions.assert_class('key', opts.delete(:key), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PaymentProcessorAccountReference.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :organization => organization,
              :key => key
            }
          end

        end

        class PaymentProcessorIdentifier

          attr_reader :id, :label

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :label], 'PaymentProcessorIdentifier')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @label = HttpClient::Preconditions.assert_class('label', opts.delete(:label), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PaymentProcessorIdentifier.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :label => label
            }
          end

        end

        class PaymentProcessorReference < ExpandablePaymentProcessor

          attr_reader :processor

          def initialize(incoming={})
            super(:discriminator => ExpandablePaymentProcessor::Types::PAYMENT_PROCESSOR_REFERENCE)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:processor], 'PaymentProcessorReference')
            @processor = HttpClient::Preconditions.assert_class('processor', opts.delete(:processor), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PaymentProcessorReference.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :processor => processor
            }
          end

        end

        class PaymentReference

          attr_reader :id

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id], 'PaymentReference')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PaymentReference.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id
            }
          end

        end

        # A refund is used to return already captured funds back to the customer. The
        # customer will see the amount credited back to them as a separate transaction.
        class PaymentRefund

          attr_reader :id, :amount, :currency, :created_at, :updated_at, :status

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :amount, :currency, :created_at, :updated_at, :status], 'PaymentRefund')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @amount = HttpClient::Preconditions.assert_class('amount', HttpClient::Helper.to_big_decimal(opts.delete(:amount)), BigDecimal)
            @currency = HttpClient::Preconditions.assert_class('currency', opts.delete(:currency), String)
            @created_at = HttpClient::Preconditions.assert_class('created_at', HttpClient::Helper.to_date_time_iso8601(opts.delete(:created_at)), DateTime)
            @updated_at = HttpClient::Preconditions.assert_class('updated_at', HttpClient::Helper.to_date_time_iso8601(opts.delete(:updated_at)), DateTime)
            @status = (x = opts.delete(:status); x.is_a?(::Io::Flow::V0::Models::PaymentRefundStatus) ? x : ::Io::Flow::V0::Models::PaymentRefundStatus.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PaymentRefund.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :amount => amount.to_f.to_s,
              :currency => currency,
              :created_at => created_at,
              :updated_at => updated_at,
              :status => status.to_hash
            }
          end

        end

        # Returns already captured funds back to the customer. You can refund as many
        # times as you'd like up until the total captured amount has been refunded.
        # Refunds are allowed up to one year after the capture (depending on the payment
        # method) unless a dispute has been raised for a transaction.
        class PaymentRefundForm

          attr_reader :amount, :currency

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @amount = (x = opts.delete(:amount); x.nil? ? nil : HttpClient::Preconditions.assert_class('amount', HttpClient::Helper.to_big_decimal(x), BigDecimal))
            @currency = (x = opts.delete(:currency); x.nil? ? nil : HttpClient::Preconditions.assert_class('currency', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PaymentRefundForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :amount => amount.to_f.to_s,
              :currency => currency
            }
          end

        end

        class PaymentRefundStatus

          attr_reader :status, :reason

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:status], 'PaymentRefundStatus')
            @status = (x = opts.delete(:status); x.is_a?(::Io::Flow::V0::Models::RefundStatus) ? x : ::Io::Flow::V0::Models::RefundStatus.apply(x))
            @reason = (x = opts.delete(:reason); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::RefundDeclineCode) ? x : ::Io::Flow::V0::Models::RefundDeclineCode.apply(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PaymentRefundStatus.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :status => status.value,
              :reason => reason.nil? ? nil : reason.value
            }
          end

        end

        class PaymentRequest

          attr_reader :id, :status, :created_at, :updated_at, :available_payment_methods, :last_payment_failure, :next_action, :amount, :currency, :order_information, :device_details, :locale, :return_url, :attributes, :reference, :payment_information, :supported_actions, :payment_capture_option

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :status, :created_at, :updated_at, :available_payment_methods, :amount, :currency, :order_information, :device_details, :return_url, :payment_information, :supported_actions], 'PaymentRequest')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @status = (x = opts.delete(:status); x.is_a?(::Io::Flow::V0::Models::PaymentStatus) ? x : ::Io::Flow::V0::Models::PaymentStatus.apply(x))
            @created_at = HttpClient::Preconditions.assert_class('created_at', HttpClient::Helper.to_date_time_iso8601(opts.delete(:created_at)), DateTime)
            @updated_at = HttpClient::Preconditions.assert_class('updated_at', HttpClient::Helper.to_date_time_iso8601(opts.delete(:updated_at)), DateTime)
            @available_payment_methods = HttpClient::Preconditions.assert_class('available_payment_methods', opts.delete(:available_payment_methods), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::PaymentPaymentMethod) ? x : ::Io::Flow::V0::Models::PaymentPaymentMethod.new(x)) }
            @last_payment_failure = (x = opts.delete(:last_payment_failure); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::PaymentFailure) ? x : ::Io::Flow::V0::Models::PaymentFailure.new(x)))
            @next_action = (x = opts.delete(:next_action); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Action) ? x : ::Io::Flow::V0::Models::Action.from_json(x)))
            @amount = HttpClient::Preconditions.assert_class('amount', HttpClient::Helper.to_big_decimal(opts.delete(:amount)), BigDecimal)
            @currency = HttpClient::Preconditions.assert_class('currency', opts.delete(:currency), String)
            @order_information = (x = opts.delete(:order_information); x.is_a?(::Io::Flow::V0::Models::OrderInformation) ? x : ::Io::Flow::V0::Models::OrderInformation.from_json(x))
            @device_details = (x = opts.delete(:device_details); x.is_a?(::Io::Flow::V0::Models::DeviceDetails) ? x : ::Io::Flow::V0::Models::DeviceDetails.from_json(x))
            @locale = (x = opts.delete(:locale); x.nil? ? nil : HttpClient::Preconditions.assert_class('locale', x, String))
            @return_url = HttpClient::Preconditions.assert_class('return_url', opts.delete(:return_url), String)
            @attributes = (x = opts.delete(:attributes); x.nil? ? nil : HttpClient::Preconditions.assert_class('attributes', x, Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h })
            @reference = (x = opts.delete(:reference); x.nil? ? nil : HttpClient::Preconditions.assert_class('reference', x, String))
            @payment_information = (x = opts.delete(:payment_information); x.is_a?(::Io::Flow::V0::Models::PaymentInformation) ? x : ::Io::Flow::V0::Models::PaymentInformation.new(x))
            @supported_actions = HttpClient::Preconditions.assert_class('supported_actions', opts.delete(:supported_actions), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::PaymentActionType) ? x : ::Io::Flow::V0::Models::PaymentActionType.apply(x)) }
            @payment_capture_option = (x = opts.delete(:payment_capture_option); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::PaymentCaptureOption) ? x : ::Io::Flow::V0::Models::PaymentCaptureOption.from_json(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PaymentRequest.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :status => status.value,
              :created_at => created_at,
              :updated_at => updated_at,
              :available_payment_methods => available_payment_methods.map { |o| o.to_hash },
              :last_payment_failure => last_payment_failure.nil? ? nil : last_payment_failure.to_hash,
              :next_action => next_action.nil? ? nil : next_action.to_hash,
              :amount => amount.to_f.to_s,
              :currency => currency,
              :order_information => order_information.to_hash,
              :device_details => device_details.to_hash,
              :locale => locale,
              :return_url => return_url,
              :attributes => attributes.nil? ? nil : attributes,
              :reference => reference,
              :payment_information => payment_information.to_hash,
              :supported_actions => supported_actions.map { |o| o.value },
              :payment_capture_option => payment_capture_option.nil? ? nil : payment_capture_option.to_hash
            }
          end

        end

        class PaymentRequestForm

          attr_reader :amount, :currency, :order_information, :device_details, :locale, :return_url, :attributes, :reference, :payment_method_data, :supported_actions, :payment_capture_option

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:amount, :currency, :order_information, :device_details, :return_url], 'PaymentRequestForm')
            @amount = HttpClient::Preconditions.assert_class('amount', HttpClient::Helper.to_big_decimal(opts.delete(:amount)), BigDecimal)
            @currency = HttpClient::Preconditions.assert_class('currency', opts.delete(:currency), String)
            @order_information = (x = opts.delete(:order_information); x.is_a?(::Io::Flow::V0::Models::OrderInformation) ? x : ::Io::Flow::V0::Models::OrderInformation.from_json(x))
            @device_details = (x = opts.delete(:device_details); x.is_a?(::Io::Flow::V0::Models::DeviceDetails) ? x : ::Io::Flow::V0::Models::DeviceDetails.from_json(x))
            @locale = (x = opts.delete(:locale); x.nil? ? nil : HttpClient::Preconditions.assert_class('locale', x, String))
            @return_url = HttpClient::Preconditions.assert_class('return_url', opts.delete(:return_url), String)
            @attributes = (x = opts.delete(:attributes); x.nil? ? nil : HttpClient::Preconditions.assert_class('attributes', x, Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h })
            @reference = (x = opts.delete(:reference); x.nil? ? nil : HttpClient::Preconditions.assert_class('reference', x, String))
            @payment_method_data = (x = opts.delete(:payment_method_data); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::PaymentMethodData) ? x : ::Io::Flow::V0::Models::PaymentMethodData.from_json(x)))
            @supported_actions = (x = opts.delete(:supported_actions); x.nil? ? nil : HttpClient::Preconditions.assert_class('supported_actions', x, Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::PaymentActionType) ? x : ::Io::Flow::V0::Models::PaymentActionType.apply(x)) })
            @payment_capture_option = (x = opts.delete(:payment_capture_option); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::PaymentCaptureOption) ? x : ::Io::Flow::V0::Models::PaymentCaptureOption.from_json(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PaymentRequestForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :amount => amount.to_f.to_s,
              :currency => currency,
              :order_information => order_information.to_hash,
              :device_details => device_details.to_hash,
              :locale => locale,
              :return_url => return_url,
              :attributes => attributes.nil? ? nil : attributes,
              :reference => reference,
              :payment_method_data => payment_method_data.nil? ? nil : payment_method_data.to_hash,
              :supported_actions => supported_actions.nil? ? nil : supported_actions.map { |o| o.value },
              :payment_capture_option => payment_capture_option.nil? ? nil : payment_capture_option.to_hash
            }
          end

        end

        class PaymentRequestReference

          attr_reader :id, :reference

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id], 'PaymentRequestReference')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @reference = (x = opts.delete(:reference); x.nil? ? nil : HttpClient::Preconditions.assert_class('reference', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PaymentRequestReference.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :reference => reference
            }
          end

        end

        class PaymentRequestUpserted < Event

          attr_reader :event_id, :timestamp, :organization, :payment_request

          def initialize(incoming={})
            super(:discriminator => Event::Types::PAYMENT_REQUEST_UPSERTED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :payment_request], 'PaymentRequestUpserted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @payment_request = (x = opts.delete(:payment_request); x.is_a?(::Io::Flow::V0::Models::PaymentRequest) ? x : ::Io::Flow::V0::Models::PaymentRequest.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PaymentRequestUpserted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :payment_request => payment_request.to_hash
            }
          end

        end

        # A reversal is used to release the remaining authorization hold for a payment
        # request. When a reversal is processed, this indicates that the funds in
        # question were never withdrawn from the customer's account.
        class PaymentReversal

          attr_reader :id, :amount, :currency, :created_at, :updated_at, :status

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :amount, :currency, :created_at, :updated_at, :status], 'PaymentReversal')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @amount = HttpClient::Preconditions.assert_class('amount', HttpClient::Helper.to_big_decimal(opts.delete(:amount)), BigDecimal)
            @currency = HttpClient::Preconditions.assert_class('currency', opts.delete(:currency), String)
            @created_at = HttpClient::Preconditions.assert_class('created_at', HttpClient::Helper.to_date_time_iso8601(opts.delete(:created_at)), DateTime)
            @updated_at = HttpClient::Preconditions.assert_class('updated_at', HttpClient::Helper.to_date_time_iso8601(opts.delete(:updated_at)), DateTime)
            @status = (x = opts.delete(:status); x.is_a?(::Io::Flow::V0::Models::PaymentReversalStatus) ? x : ::Io::Flow::V0::Models::PaymentReversalStatus.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PaymentReversal.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :amount => amount.to_f.to_s,
              :currency => currency,
              :created_at => created_at,
              :updated_at => updated_at,
              :status => status.to_hash
            }
          end

        end

        # Releases the remaining uncaptured authorization hold from the payment request.
        # The reversal will automatically cancel all funds that have not yet been
        # captured - you cannot issue a partial reversal, but you can partially capture
        # an authorization, then issue a reversal to cancel the remaining balance.
        class PaymentReversalForm

          attr_reader :amount, :currency

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @amount = (x = opts.delete(:amount); x.nil? ? nil : HttpClient::Preconditions.assert_class('amount', HttpClient::Helper.to_big_decimal(x), BigDecimal))
            @currency = (x = opts.delete(:currency); x.nil? ? nil : HttpClient::Preconditions.assert_class('currency', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PaymentReversalForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :amount => amount.to_f.to_s,
              :currency => currency
            }
          end

        end

        class PaymentReversalStatus

          attr_reader :status, :reason

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:status], 'PaymentReversalStatus')
            @status = (x = opts.delete(:status); x.is_a?(::Io::Flow::V0::Models::ReversalStatus) ? x : ::Io::Flow::V0::Models::ReversalStatus.apply(x))
            @reason = (x = opts.delete(:reason); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::ReversalErrorCode) ? x : ::Io::Flow::V0::Models::ReversalErrorCode.apply(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PaymentReversalStatus.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :status => status.value,
              :reason => reason.nil? ? nil : reason.value
            }
          end

        end

        # Represents confirmation details & any additional confirmation actions required
        # to execute the payment.
        class PaymentSourceConfirmationAction

          attr_reader :type

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:type], 'PaymentSourceConfirmationAction')
            @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::V0::Models::PaymentSourceConfirmationActionType) ? x : ::Io::Flow::V0::Models::PaymentSourceConfirmationActionType.apply(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PaymentSourceConfirmationAction.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :type => type.value
            }
          end

        end

        class PaymentTax

          attr_reader :amount, :name

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:amount], 'PaymentTax')
            @amount = HttpClient::Preconditions.assert_class('amount', HttpClient::Helper.to_big_decimal(opts.delete(:amount)), BigDecimal)
            @name = HttpClient::Preconditions.assert_class('name', (x = opts.delete(:name); x.nil? ? "Tax" : x), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PaymentTax.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :amount => amount.to_f.to_s,
              :name => name
            }
          end

        end

        class PaymentUpserted < Event

          attr_reader :event_id, :timestamp, :organization, :id, :payment

          def initialize(incoming={})
            super(:discriminator => Event::Types::PAYMENT_UPSERTED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :id, :payment], 'PaymentUpserted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @payment = (x = opts.delete(:payment); x.is_a?(::Io::Flow::V0::Models::Payment) ? x : ::Io::Flow::V0::Models::Payment.from_json(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PaymentUpserted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :id => id,
              :payment => payment.to_hash
            }
          end

        end

        class PaymentVersion

          attr_reader :id, :timestamp, :type, :payment

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :timestamp, :type, :payment], 'PaymentVersion')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::V0::Models::ChangeType) ? x : ::Io::Flow::V0::Models::ChangeType.apply(x))
            @payment = (x = opts.delete(:payment); x.is_a?(::Io::Flow::V0::Models::Payment) ? x : ::Io::Flow::V0::Models::Payment.from_json(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PaymentVersion.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :timestamp => timestamp,
              :type => type.value,
              :payment => payment.to_hash
            }
          end

        end

        # Represents online payment
        class PaypalAuthorizationDetails < OnlineAuthorizationDetails

          attr_reader :payment_id, :payment_method, :payment_state, :payer_email, :payer_status, :approval_url

          def initialize(incoming={})
            super(:discriminator => OnlineAuthorizationDetails::Types::PAYPAL_AUTHORIZATION_DETAILS)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:payment_id], 'PaypalAuthorizationDetails')
            @payment_id = HttpClient::Preconditions.assert_class('payment_id', opts.delete(:payment_id), String)
            @payment_method = (x = opts.delete(:payment_method); x.nil? ? nil : HttpClient::Preconditions.assert_class('payment_method', x, String))
            @payment_state = (x = opts.delete(:payment_state); x.nil? ? nil : HttpClient::Preconditions.assert_class('payment_state', x, String))
            @payer_email = (x = opts.delete(:payer_email); x.nil? ? nil : HttpClient::Preconditions.assert_class('payer_email', x, String))
            @payer_status = (x = opts.delete(:payer_status); x.nil? ? nil : HttpClient::Preconditions.assert_class('payer_status', x, String))
            @approval_url = (x = opts.delete(:approval_url); x.nil? ? nil : HttpClient::Preconditions.assert_class('approval_url', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PaypalAuthorizationDetails.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :payment_id => payment_id,
              :payment_method => payment_method,
              :payment_state => payment_state,
              :payer_email => payer_email,
              :payer_status => payer_status,
              :approval_url => approval_url
            }
          end

        end

        # Executes the PayPal payment
        class PaypalAuthorizationForm < AuthorizationForm

          attr_reader :paypal_payment_id, :paypal_payer_id, :key, :attributes, :ip

          def initialize(incoming={})
            super(:discriminator => AuthorizationForm::Types::PAYPAL_AUTHORIZATION_FORM)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:paypal_payment_id, :paypal_payer_id], 'PaypalAuthorizationForm')
            @paypal_payment_id = HttpClient::Preconditions.assert_class('paypal_payment_id', opts.delete(:paypal_payment_id), String)
            @paypal_payer_id = HttpClient::Preconditions.assert_class('paypal_payer_id', opts.delete(:paypal_payer_id), String)
            @key = (x = opts.delete(:key); x.nil? ? nil : HttpClient::Preconditions.assert_class('key', x, String))
            @attributes = (x = opts.delete(:attributes); x.nil? ? nil : HttpClient::Preconditions.assert_class('attributes', x, Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h })
            @ip = (x = opts.delete(:ip); x.nil? ? nil : HttpClient::Preconditions.assert_class('ip', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PaypalAuthorizationForm.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :paypal_payment_id => paypal_payment_id,
              :paypal_payer_id => paypal_payer_id,
              :key => key,
              :attributes => attributes.nil? ? nil : attributes,
              :ip => ip
            }
          end

        end

        class PeakSurchargeByWeightServiceFee < ServiceFee

          attr_reader :amount, :weight, :regions, :starts_at, :ends_at

          def initialize(incoming={})
            super(:discriminator => ServiceFee::Types::PEAK_SURCHARGE_BY_WEIGHT_SERVICE_FEE)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:amount, :weight], 'PeakSurchargeByWeightServiceFee')
            @amount = (x = opts.delete(:amount); x.is_a?(::Io::Flow::V0::Models::Money) ? x : ::Io::Flow::V0::Models::Money.new(x))
            @weight = (x = opts.delete(:weight); x.is_a?(::Io::Flow::V0::Models::FeeWeight) ? x : ::Io::Flow::V0::Models::FeeWeight.new(x))
            @regions = (x = opts.delete(:regions); x.nil? ? nil : HttpClient::Preconditions.assert_class('regions', x, Array).map { |v| HttpClient::Preconditions.assert_class('regions', v, String) })
            @starts_at = (x = opts.delete(:starts_at); x.nil? ? nil : HttpClient::Preconditions.assert_class('starts_at', HttpClient::Helper.to_date_time_iso8601(x), DateTime))
            @ends_at = (x = opts.delete(:ends_at); x.nil? ? nil : HttpClient::Preconditions.assert_class('ends_at', HttpClient::Helper.to_date_time_iso8601(x), DateTime))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PeakSurchargeByWeightServiceFee.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :amount => amount.to_hash,
              :weight => weight.to_hash,
              :regions => regions.nil? ? nil : regions,
              :starts_at => starts_at,
              :ends_at => ends_at
            }
          end

        end

        class PeakSurchargeRatecardFee < RatecardFee

          attr_reader :amount, :starts_at, :ends_at

          def initialize(incoming={})
            super(:discriminator => RatecardFee::Types::PEAK_SURCHARGE_RATECARD_FEE)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:amount], 'PeakSurchargeRatecardFee')
            @amount = (x = opts.delete(:amount); x.is_a?(::Io::Flow::V0::Models::Money) ? x : ::Io::Flow::V0::Models::Money.new(x))
            @starts_at = (x = opts.delete(:starts_at); x.nil? ? nil : HttpClient::Preconditions.assert_class('starts_at', HttpClient::Helper.to_date_time_iso8601(x), DateTime))
            @ends_at = (x = opts.delete(:ends_at); x.nil? ? nil : HttpClient::Preconditions.assert_class('ends_at', HttpClient::Helper.to_date_time_iso8601(x), DateTime))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PeakSurchargeRatecardFee.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :amount => amount.to_hash,
              :starts_at => starts_at,
              :ends_at => ends_at
            }
          end

        end

        class PeakSurchargeServiceFee < ServiceFee

          attr_reader :amount, :starts_at, :ends_at

          def initialize(incoming={})
            super(:discriminator => ServiceFee::Types::PEAK_SURCHARGE_SERVICE_FEE)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:amount], 'PeakSurchargeServiceFee')
            @amount = (x = opts.delete(:amount); x.is_a?(::Io::Flow::V0::Models::Money) ? x : ::Io::Flow::V0::Models::Money.new(x))
            @starts_at = (x = opts.delete(:starts_at); x.nil? ? nil : HttpClient::Preconditions.assert_class('starts_at', HttpClient::Helper.to_date_time_iso8601(x), DateTime))
            @ends_at = (x = opts.delete(:ends_at); x.nil? ? nil : HttpClient::Preconditions.assert_class('ends_at', HttpClient::Helper.to_date_time_iso8601(x), DateTime))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PeakSurchargeServiceFee.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :amount => amount.to_hash,
              :starts_at => starts_at,
              :ends_at => ends_at
            }
          end

        end

        # Rule outcome where shipping surfaced in quote is actual cost plus a predefined
        # margin percentage
        class PercentMargin < TierRuleOutcome

          attr_reader :percentage

          def initialize(incoming={})
            super(:discriminator => TierRuleOutcome::Types::PERCENT_MARGIN)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:percentage], 'PercentMargin')
            @percentage = HttpClient::Preconditions.assert_class('percentage', opts.delete(:percentage), Numeric)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PercentMargin.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :percentage => percentage
            }
          end

        end

        # Returns all known permissions, along with their authorization technique and
        # all of the roles which contain them.
        class PermissionAudit

          attr_reader :routes, :behaviors

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:routes, :behaviors], 'PermissionAudit')
            @routes = HttpClient::Preconditions.assert_class('routes', opts.delete(:routes), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::RouteAudit) ? x : ::Io::Flow::V0::Models::RouteAudit.new(x)) }
            @behaviors = HttpClient::Preconditions.assert_class('behaviors', opts.delete(:behaviors), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::BehaviorAudit) ? x : ::Io::Flow::V0::Models::BehaviorAudit.new(x)) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PermissionAudit.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :routes => routes.map { |o| o.to_hash },
              :behaviors => behaviors.map { |o| o.to_hash }
            }
          end

        end

        # Used to test an integration's permissions, including identifying the
        # authentication technique that will be used for similar requests.
        class PermissionCheck

          attr_reader :authentication_technique, :user, :roles, :behaviors, :routes

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:authentication_technique, :roles, :behaviors, :routes], 'PermissionCheck')
            @authentication_technique = (x = opts.delete(:authentication_technique); x.is_a?(::Io::Flow::V0::Models::AuthenticationTechnique) ? x : ::Io::Flow::V0::Models::AuthenticationTechnique.apply(x))
            @user = (x = opts.delete(:user); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::ExpandableUser) ? x : ::Io::Flow::V0::Models::ExpandableUser.from_json(x)))
            @roles = HttpClient::Preconditions.assert_class('roles', opts.delete(:roles), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::FlowRole) ? x : ::Io::Flow::V0::Models::FlowRole.apply(x)) }
            @behaviors = HttpClient::Preconditions.assert_class('behaviors', opts.delete(:behaviors), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::FlowBehavior) ? x : ::Io::Flow::V0::Models::FlowBehavior.apply(x)) }
            @routes = HttpClient::Preconditions.assert_class('routes', opts.delete(:routes), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::PermittedRoute) ? x : ::Io::Flow::V0::Models::PermittedRoute.new(x)) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PermissionCheck.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :authentication_technique => authentication_technique.value,
              :user => user.nil? ? nil : user.to_hash,
              :roles => roles.map { |o| o.value },
              :behaviors => behaviors.map { |o| o.value },
              :routes => routes.map { |o| o.to_hash }
            }
          end

        end

        # Returned if no permissions are available for a request.
        class PermissionError

          attr_reader :code, :messages, :granting_roles, :admin_users

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:code, :messages], 'PermissionError')
            @code = (x = opts.delete(:code); x.is_a?(::Io::Flow::V0::Models::GenericErrorCode) ? x : ::Io::Flow::V0::Models::GenericErrorCode.apply(x))
            @messages = HttpClient::Preconditions.assert_class('messages', opts.delete(:messages), Array).map { |v| HttpClient::Preconditions.assert_class('messages', v, String) }
            @granting_roles = (x = opts.delete(:granting_roles); x.nil? ? nil : HttpClient::Preconditions.assert_class('granting_roles', x, Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::FlowRole) ? x : ::Io::Flow::V0::Models::FlowRole.apply(x)) })
            @admin_users = (x = opts.delete(:admin_users); x.nil? ? nil : HttpClient::Preconditions.assert_class('admin_users', x, Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::User) ? x : ::Io::Flow::V0::Models::User.new(x)) })
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PermissionError.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :code => code.value,
              :messages => messages,
              :granting_roles => granting_roles.nil? ? nil : granting_roles.map { |o| o.value },
              :admin_users => admin_users.nil? ? nil : admin_users.map { |o| o.to_hash }
            }
          end

        end

        # A Flow API route and method.
        class PermittedRoute

          attr_reader :method, :path

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:method, :path], 'PermittedRoute')
            @method = (x = opts.delete(:method); x.is_a?(::Io::Flow::V0::Models::PermittedHttpMethod) ? x : ::Io::Flow::V0::Models::PermittedHttpMethod.apply(x))
            @path = HttpClient::Preconditions.assert_class('path', opts.delete(:path), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PermittedRoute.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :method => method.value,
              :path => path
            }
          end

        end

        class PfsInventoryCheckResponse

          attr_reader :items

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:items], 'PfsInventoryCheckResponse')
            @items = HttpClient::Preconditions.assert_class('items', opts.delete(:items), Hash).inject({}) { |h, d| h[d[0]] = (x = d[1]; x.is_a?(::Io::Flow::V0::Models::PfsInventoryCheckResponseItem) ? x : ::Io::Flow::V0::Models::PfsInventoryCheckResponseItem.new(x)); h }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PfsInventoryCheckResponse.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :items => items.inject({}) { |hash, o| hash[o[0]] = o[1].nil? ? nil : o[1].to_hash; hash }
            }
          end

        end

        class PfsInventoryCheckResponseItem

          attr_reader :number, :ats, :in_stock

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:number, :ats, :in_stock], 'PfsInventoryCheckResponseItem')
            @number = HttpClient::Preconditions.assert_class('number', opts.delete(:number), String)
            @ats = HttpClient::Preconditions.assert_class('ats', opts.delete(:ats), Integer)
            @in_stock = HttpClient::Preconditions.assert_boolean('in_stock', opts.delete(:in_stock))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PfsInventoryCheckResponseItem.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :number => number,
              :ats => ats,
              :in_stock => in_stock
            }
          end

        end

        class PfsInventoryStatus

          attr_reader :status

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:status], 'PfsInventoryStatus')
            @status = HttpClient::Preconditions.assert_class('status', opts.delete(:status), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PfsInventoryStatus.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :status => status
            }
          end

        end

        # Represents a collection of items, the available delivery option tier for that
        # collection of items, and metadata about those options
        class PhysicalDelivery < Delivery

          attr_reader :id, :key, :center, :items, :options, :special_services, :prices, :total, :goods_supply, :merchant_of_record_flow_entity

          def initialize(incoming={})
            super(:discriminator => Delivery::Types::PHYSICAL_DELIVERY)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :items, :options], 'PhysicalDelivery')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @key = (x = opts.delete(:key); x.nil? ? nil : HttpClient::Preconditions.assert_class('key', x, String))
            @center = (x = opts.delete(:center); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::CenterSummary) ? x : ::Io::Flow::V0::Models::CenterSummary.new(x)))
            @items = HttpClient::Preconditions.assert_class('items', opts.delete(:items), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::DeliveryItem) ? x : ::Io::Flow::V0::Models::DeliveryItem.new(x)) }
            @options = HttpClient::Preconditions.assert_class('options', opts.delete(:options), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::DeliveryOption) ? x : ::Io::Flow::V0::Models::DeliveryOption.new(x)) }
            @special_services = (x = opts.delete(:special_services); x.nil? ? nil : HttpClient::Preconditions.assert_class('special_services', x, Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::PhysicalDeliverySpecialSerivce) ? x : ::Io::Flow::V0::Models::PhysicalDeliverySpecialSerivce.apply(x)) })
            @prices = (x = opts.delete(:prices); x.nil? ? nil : HttpClient::Preconditions.assert_class('prices', x, Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::OrderPriceDetail) ? x : ::Io::Flow::V0::Models::OrderPriceDetail.new(x)) })
            @total = (x = opts.delete(:total); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::LocalizedTotal) ? x : ::Io::Flow::V0::Models::LocalizedTotal.new(x)))
            @goods_supply = (x = opts.delete(:goods_supply); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::GoodsSupply) ? x : ::Io::Flow::V0::Models::GoodsSupply.apply(x)))
            @merchant_of_record_flow_entity = (x = opts.delete(:merchant_of_record_flow_entity); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::FlowEntity) ? x : ::Io::Flow::V0::Models::FlowEntity.apply(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PhysicalDelivery.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :id => id,
              :key => key,
              :center => center.nil? ? nil : center.to_hash,
              :items => items.map { |o| o.to_hash },
              :options => options.map { |o| o.to_hash },
              :special_services => special_services.nil? ? nil : special_services.map { |o| o.value },
              :prices => prices.nil? ? nil : prices.map { |o| o.to_hash },
              :total => total.nil? ? nil : total.to_hash,
              :goods_supply => goods_supply.nil? ? nil : goods_supply.value,
              :merchant_of_record_flow_entity => merchant_of_record_flow_entity.nil? ? nil : merchant_of_record_flow_entity.value
            }
          end

        end

        # The URLs to which the customer will be redirected based on the authorization
        # status.
        class PostPaymentRedirectUrls

          attr_reader :success, :failure

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:success], 'PostPaymentRedirectUrls')
            @success = HttpClient::Preconditions.assert_class('success', opts.delete(:success), String)
            @failure = (x = opts.delete(:failure); x.nil? ? nil : HttpClient::Preconditions.assert_class('failure', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PostPaymentRedirectUrls.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :success => success,
              :failure => failure
            }
          end

        end

        # Represents an amount-currency pair for a basic price
        class Price

          attr_reader :amount, :currency, :label

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:amount, :currency, :label], 'Price')
            @amount = HttpClient::Preconditions.assert_class('amount', opts.delete(:amount), Numeric)
            @currency = HttpClient::Preconditions.assert_class('currency', opts.delete(:currency), String)
            @label = HttpClient::Preconditions.assert_class('label', opts.delete(:label), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            Price.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :amount => amount,
              :currency => currency,
              :label => label
            }
          end

        end

        # Represents a list of target prices in a specific currency that can override
        # any subset of item prices within an experience.
        class PriceBook

          attr_reader :id, :key, :currency, :name, :includes, :status

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :key, :currency, :name, :includes, :status], 'PriceBook')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @key = HttpClient::Preconditions.assert_class('key', opts.delete(:key), String)
            @currency = HttpClient::Preconditions.assert_class('currency', opts.delete(:currency), String)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
            @includes = (x = opts.delete(:includes); x.is_a?(::Io::Flow::V0::Models::IncludedLevies) ? x : ::Io::Flow::V0::Models::IncludedLevies.new(x))
            @status = (x = opts.delete(:status); x.is_a?(::Io::Flow::V0::Models::PriceBookStatus) ? x : ::Io::Flow::V0::Models::PriceBookStatus.apply(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PriceBook.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :key => key,
              :currency => currency,
              :name => name,
              :includes => includes.to_hash,
              :status => status.value
            }
          end

        end

        class PriceBookDeleted < Event

          attr_reader :event_id, :timestamp, :organization, :id

          def initialize(incoming={})
            super(:discriminator => Event::Types::PRICE_BOOK_DELETED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :id], 'PriceBookDeleted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PriceBookDeleted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :id => id
            }
          end

        end

        # Represents a price book for a specific currency that can override any subset
        # of item prices within an experience.
        class PriceBookForm

          attr_reader :currency, :name, :includes, :status

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:currency, :name, :includes], 'PriceBookForm')
            @currency = HttpClient::Preconditions.assert_class('currency', opts.delete(:currency), String)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
            @includes = (x = opts.delete(:includes); x.is_a?(::Io::Flow::V0::Models::IncludedLevyKey) ? x : ::Io::Flow::V0::Models::IncludedLevyKey.apply(x))
            @status = (x = (x = opts.delete(:status); x.nil? ? "draft" : x); x.is_a?(::Io::Flow::V0::Models::PriceBookStatus) ? x : ::Io::Flow::V0::Models::PriceBookStatus.apply(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PriceBookForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :currency => currency,
              :name => name,
              :includes => includes.value,
              :status => status.value
            }
          end

        end

        # Represents the price of a single item within a price book.
        class PriceBookItem

          attr_reader :id, :key, :price_book, :price, :item_number, :schedule, :item_attributes

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :key, :price_book, :price, :item_number, :schedule], 'PriceBookItem')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @key = HttpClient::Preconditions.assert_class('key', opts.delete(:key), String)
            @price_book = (x = opts.delete(:price_book); x.is_a?(::Io::Flow::V0::Models::PriceBookReference) ? x : ::Io::Flow::V0::Models::PriceBookReference.new(x))
            @price = (x = opts.delete(:price); x.is_a?(::Io::Flow::V0::Models::Price) ? x : ::Io::Flow::V0::Models::Price.new(x))
            @item_number = HttpClient::Preconditions.assert_class('item_number', opts.delete(:item_number), String)
            @schedule = (x = opts.delete(:schedule); x.is_a?(::Io::Flow::V0::Models::PriceBookItemSchedule) ? x : ::Io::Flow::V0::Models::PriceBookItemSchedule.new(x))
            @item_attributes = (x = opts.delete(:item_attributes); x.nil? ? nil : HttpClient::Preconditions.assert_class('item_attributes', x, Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('item_attributes', d[1], String); h })
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PriceBookItem.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :key => key,
              :price_book => price_book.to_hash,
              :price => price.to_hash,
              :item_number => item_number,
              :schedule => schedule.to_hash,
              :item_attributes => item_attributes.nil? ? nil : item_attributes
            }
          end

        end

        class PriceBookItemDeleted < Event

          attr_reader :event_id, :timestamp, :organization, :id

          def initialize(incoming={})
            super(:discriminator => Event::Types::PRICE_BOOK_ITEM_DELETED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :id], 'PriceBookItemDeleted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PriceBookItemDeleted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :id => id
            }
          end

        end

        class PriceBookItemExportOptions

          attr_reader :available_identifiers

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:available_identifiers], 'PriceBookItemExportOptions')
            @available_identifiers = HttpClient::Preconditions.assert_class('available_identifiers', opts.delete(:available_identifiers), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::ItemIdentifier) ? x : ::Io::Flow::V0::Models::ItemIdentifier.apply(x)) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PriceBookItemExportOptions.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :available_identifiers => available_identifiers.map { |o| o.value }
            }
          end

        end

        # Defines the filters that can be applied when requesting a price book item data
        # export
        class PriceBookItemExportType < ExportType

          attr_reader :price_book_key, :item_numbers, :start_date, :end_date, :item_identifier

          def initialize(incoming={})
            super(:discriminator => ExportType::Types::PRICE_BOOK_ITEM_EXPORT_TYPE)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @price_book_key = (x = opts.delete(:price_book_key); x.nil? ? nil : HttpClient::Preconditions.assert_class('price_book_key', x, String))
            @item_numbers = (x = opts.delete(:item_numbers); x.nil? ? nil : HttpClient::Preconditions.assert_class('item_numbers', x, Array).map { |v| HttpClient::Preconditions.assert_class('item_numbers', v, String) })
            @start_date = (x = opts.delete(:start_date); x.nil? ? nil : HttpClient::Preconditions.assert_class('start_date', HttpClient::Helper.to_date_time_iso8601(x), DateTime))
            @end_date = (x = opts.delete(:end_date); x.nil? ? nil : HttpClient::Preconditions.assert_class('end_date', HttpClient::Helper.to_date_time_iso8601(x), DateTime))
            @item_identifier = (x = (x = opts.delete(:item_identifier); x.nil? ? "item_number" : x); x.is_a?(::Io::Flow::V0::Models::ItemIdentifier) ? x : ::Io::Flow::V0::Models::ItemIdentifier.apply(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PriceBookItemExportType.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :price_book_key => price_book_key,
              :item_numbers => item_numbers.nil? ? nil : item_numbers,
              :start_date => start_date,
              :end_date => end_date,
              :item_identifier => item_identifier.value
            }
          end

        end

        # Represents the form to create an item in a pricebook.
        class PriceBookItemForm

          attr_reader :price_book_key, :item_number, :amount, :schedule, :item_attributes

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:price_book_key, :item_number, :amount], 'PriceBookItemForm')
            @price_book_key = HttpClient::Preconditions.assert_class('price_book_key', opts.delete(:price_book_key), String)
            @item_number = HttpClient::Preconditions.assert_class('item_number', opts.delete(:item_number), String)
            @amount = HttpClient::Preconditions.assert_class('amount', HttpClient::Helper.to_big_decimal(opts.delete(:amount)), BigDecimal)
            @schedule = (x = opts.delete(:schedule); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::PriceBookItemSchedule) ? x : ::Io::Flow::V0::Models::PriceBookItemSchedule.new(x)))
            @item_attributes = (x = opts.delete(:item_attributes); x.nil? ? nil : HttpClient::Preconditions.assert_class('item_attributes', x, Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('item_attributes', d[1], String); h })
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PriceBookItemForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :price_book_key => price_book_key,
              :item_number => item_number,
              :amount => amount.to_f.to_s,
              :schedule => schedule.nil? ? nil : schedule.to_hash,
              :item_attributes => item_attributes.nil? ? nil : item_attributes
            }
          end

        end

        # Used to create price book items for multiple items matching a query
        class PriceBookItemQueryForm

          attr_reader :price_book_key, :item_query, :amount, :schedule, :item_attributes

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:price_book_key, :item_query, :amount], 'PriceBookItemQueryForm')
            @price_book_key = HttpClient::Preconditions.assert_class('price_book_key', opts.delete(:price_book_key), String)
            @item_query = HttpClient::Preconditions.assert_class('item_query', opts.delete(:item_query), String)
            @amount = HttpClient::Preconditions.assert_class('amount', HttpClient::Helper.to_big_decimal(opts.delete(:amount)), BigDecimal)
            @schedule = (x = opts.delete(:schedule); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::PriceBookItemSchedule) ? x : ::Io::Flow::V0::Models::PriceBookItemSchedule.new(x)))
            @item_attributes = (x = opts.delete(:item_attributes); x.nil? ? nil : HttpClient::Preconditions.assert_class('item_attributes', x, Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('item_attributes', d[1], String); h })
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PriceBookItemQueryForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :price_book_key => price_book_key,
              :item_query => item_query,
              :amount => amount.to_f.to_s,
              :schedule => schedule.nil? ? nil : schedule.to_hash,
              :item_attributes => item_attributes.nil? ? nil : item_attributes
            }
          end

        end

        # Represents schedule applied to a price book item
        class PriceBookItemSchedule

          attr_reader :starts_at, :ends_at

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:starts_at], 'PriceBookItemSchedule')
            @starts_at = HttpClient::Preconditions.assert_class('starts_at', HttpClient::Helper.to_date_time_iso8601(opts.delete(:starts_at)), DateTime)
            @ends_at = (x = opts.delete(:ends_at); x.nil? ? nil : HttpClient::Preconditions.assert_class('ends_at', HttpClient::Helper.to_date_time_iso8601(x), DateTime))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PriceBookItemSchedule.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :starts_at => starts_at,
              :ends_at => ends_at
            }
          end

        end

        class PriceBookItemUpserted < Event

          attr_reader :event_id, :timestamp, :organization, :price_book_item

          def initialize(incoming={})
            super(:discriminator => Event::Types::PRICE_BOOK_ITEM_UPSERTED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :price_book_item], 'PriceBookItemUpserted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @price_book_item = (x = opts.delete(:price_book_item); x.is_a?(::Io::Flow::V0::Models::PriceBookItem) ? x : ::Io::Flow::V0::Models::PriceBookItem.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PriceBookItemUpserted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :price_book_item => price_book_item.to_hash
            }
          end

        end

        class PriceBookReference

          attr_reader :id, :key

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :key], 'PriceBookReference')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @key = HttpClient::Preconditions.assert_class('key', opts.delete(:key), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PriceBookReference.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :key => key
            }
          end

        end

        class PriceBookUpserted < Event

          attr_reader :event_id, :timestamp, :organization, :price_book

          def initialize(incoming={})
            super(:discriminator => Event::Types::PRICE_BOOK_UPSERTED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :price_book], 'PriceBookUpserted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @price_book = (x = opts.delete(:price_book); x.is_a?(::Io::Flow::V0::Models::PriceBook) ? x : ::Io::Flow::V0::Models::PriceBook.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PriceBookUpserted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :price_book => price_book.to_hash
            }
          end

        end

        class PriceCheck

          attr_reader :display, :final

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:display, :final], 'PriceCheck')
            @display = (x = opts.delete(:display); x.is_a?(::Io::Flow::V0::Models::LocalPriceDetails) ? x : ::Io::Flow::V0::Models::LocalPriceDetails.new(x))
            @final = (x = opts.delete(:final); x.is_a?(::Io::Flow::V0::Models::LocalPriceDetails) ? x : ::Io::Flow::V0::Models::LocalPriceDetails.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PriceCheck.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :display => display.to_hash,
              :final => final.to_hash
            }
          end

        end

        # Represents a top-level price detail, e.g. 'Subtotal' or 'VAT'.
        class PriceDetail

          attr_reader :key, :components, :amount, :label, :name, :basis

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:key, :components, :amount, :label], 'PriceDetail')
            @key = (x = opts.delete(:key); x.is_a?(::Io::Flow::V0::Models::PriceDetailKey) ? x : ::Io::Flow::V0::Models::PriceDetailKey.apply(x))
            @components = HttpClient::Preconditions.assert_class('components', opts.delete(:components), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::PriceDetailComponent) ? x : ::Io::Flow::V0::Models::PriceDetailComponent.new(x)) }
            @amount = HttpClient::Preconditions.assert_class('amount', HttpClient::Helper.to_big_decimal(opts.delete(:amount)), BigDecimal)
            @label = HttpClient::Preconditions.assert_class('label', opts.delete(:label), String)
            @name = (x = opts.delete(:name); x.nil? ? nil : HttpClient::Preconditions.assert_class('name', x, String))
            @basis = (x = opts.delete(:basis); x.nil? ? nil : HttpClient::Preconditions.assert_class('basis', HttpClient::Helper.to_big_decimal(x), BigDecimal))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PriceDetail.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :key => key.value,
              :components => components.map { |o| o.to_hash },
              :amount => amount.to_f.to_s,
              :label => label,
              :name => name,
              :basis => basis.to_f.to_s
            }
          end

        end

        class PriceDetailComponent

          attr_reader :key, :amount, :label, :name

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:key, :amount, :label], 'PriceDetailComponent')
            @key = (x = opts.delete(:key); x.is_a?(::Io::Flow::V0::Models::PriceDetailComponentKey) ? x : ::Io::Flow::V0::Models::PriceDetailComponentKey.apply(x))
            @amount = HttpClient::Preconditions.assert_class('amount', HttpClient::Helper.to_big_decimal(opts.delete(:amount)), BigDecimal)
            @label = HttpClient::Preconditions.assert_class('label', opts.delete(:label), String)
            @name = (x = opts.delete(:name); x.nil? ? nil : HttpClient::Preconditions.assert_class('name', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PriceDetailComponent.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :key => key.value,
              :amount => amount.to_f.to_s,
              :label => label,
              :name => name
            }
          end

        end

        # Detailed information for the pricing of a given item within an experience.
        class PriceDetails

          attr_reader :currency, :item_price, :margins, :vat, :duty, :rounding, :price, :total, :adjustment

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:currency, :item_price, :margins, :vat, :duty, :rounding, :price, :total], 'PriceDetails')
            @currency = HttpClient::Preconditions.assert_class('currency', opts.delete(:currency), String)
            @item_price = (x = opts.delete(:item_price); x.is_a?(::Io::Flow::V0::Models::PriceDetail) ? x : ::Io::Flow::V0::Models::PriceDetail.new(x))
            @margins = (x = opts.delete(:margins); x.is_a?(::Io::Flow::V0::Models::PriceDetail) ? x : ::Io::Flow::V0::Models::PriceDetail.new(x))
            @vat = (x = opts.delete(:vat); x.is_a?(::Io::Flow::V0::Models::PriceDetail) ? x : ::Io::Flow::V0::Models::PriceDetail.new(x))
            @duty = (x = opts.delete(:duty); x.is_a?(::Io::Flow::V0::Models::PriceDetail) ? x : ::Io::Flow::V0::Models::PriceDetail.new(x))
            @rounding = (x = opts.delete(:rounding); x.is_a?(::Io::Flow::V0::Models::PriceDetail) ? x : ::Io::Flow::V0::Models::PriceDetail.new(x))
            @price = (x = opts.delete(:price); x.is_a?(::Io::Flow::V0::Models::Price) ? x : ::Io::Flow::V0::Models::Price.new(x))
            @total = (x = opts.delete(:total); x.is_a?(::Io::Flow::V0::Models::Price) ? x : ::Io::Flow::V0::Models::Price.new(x))
            @adjustment = (x = opts.delete(:adjustment); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::PriceDetail) ? x : ::Io::Flow::V0::Models::PriceDetail.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PriceDetails.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :currency => currency,
              :item_price => item_price.to_hash,
              :margins => margins.to_hash,
              :vat => vat.to_hash,
              :duty => duty.to_hash,
              :rounding => rounding.to_hash,
              :price => price.to_hash,
              :total => total.to_hash,
              :adjustment => adjustment.nil? ? nil : adjustment.to_hash
            }
          end

        end

        class PriceEquation

          attr_reader :contracted_rate, :rate, :pricing, :base_price, :discount, :fixed_margin, :percent_margin, :insurance, :freight, :duty, :tax, :percent_sales_margin

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:contracted_rate, :rate, :pricing, :base_price, :discount, :fixed_margin, :percent_margin, :insurance, :freight], 'PriceEquation')
            @contracted_rate = HttpClient::Preconditions.assert_class('contracted_rate', HttpClient::Helper.to_big_decimal(opts.delete(:contracted_rate)), BigDecimal)
            @rate = HttpClient::Preconditions.assert_class('rate', HttpClient::Helper.to_big_decimal(opts.delete(:rate)), BigDecimal)
            @pricing = (x = opts.delete(:pricing); x.is_a?(::Io::Flow::V0::Models::Pricing) ? x : ::Io::Flow::V0::Models::Pricing.new(x))
            @base_price = HttpClient::Preconditions.assert_class('base_price', HttpClient::Helper.to_big_decimal(opts.delete(:base_price)), BigDecimal)
            @discount = HttpClient::Preconditions.assert_class('discount', HttpClient::Helper.to_big_decimal(opts.delete(:discount)), BigDecimal)
            @fixed_margin = HttpClient::Preconditions.assert_class('fixed_margin', HttpClient::Helper.to_big_decimal(opts.delete(:fixed_margin)), BigDecimal)
            @percent_margin = HttpClient::Preconditions.assert_class('percent_margin', HttpClient::Helper.to_big_decimal(opts.delete(:percent_margin)), BigDecimal)
            @insurance = HttpClient::Preconditions.assert_class('insurance', HttpClient::Helper.to_big_decimal(opts.delete(:insurance)), BigDecimal)
            @freight = HttpClient::Preconditions.assert_class('freight', HttpClient::Helper.to_big_decimal(opts.delete(:freight)), BigDecimal)
            @duty = (x = opts.delete(:duty); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Duty) ? x : ::Io::Flow::V0::Models::Duty.new(x)))
            @tax = (x = opts.delete(:tax); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Tax) ? x : ::Io::Flow::V0::Models::Tax.new(x)))
            @percent_sales_margin = HttpClient::Preconditions.assert_class('percent_sales_margin', HttpClient::Helper.to_big_decimal((x = opts.delete(:percent_sales_margin); x.nil? ? 0 : x)), BigDecimal)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PriceEquation.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :contracted_rate => contracted_rate.to_f.to_s,
              :rate => rate.to_f.to_s,
              :pricing => pricing.to_hash,
              :base_price => base_price.to_f.to_s,
              :discount => discount.to_f.to_s,
              :fixed_margin => fixed_margin.to_f.to_s,
              :percent_margin => percent_margin.to_f.to_s,
              :insurance => insurance.to_f.to_s,
              :freight => freight.to_f.to_s,
              :duty => duty.nil? ? nil : duty.to_hash,
              :tax => tax.nil? ? nil : tax.to_hash,
              :percent_sales_margin => percent_sales_margin.to_f.to_s
            }
          end

        end

        # Amount-currency paid for a basic price to be used in model forms, before a
        # price label is created. Label in the main price model is created by the
        # implementing api.
        class PriceForm

          attr_reader :amount, :currency

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:amount, :currency], 'PriceForm')
            @amount = HttpClient::Preconditions.assert_class('amount', opts.delete(:amount), Numeric)
            @currency = HttpClient::Preconditions.assert_class('currency', opts.delete(:currency), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PriceForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :amount => amount,
              :currency => currency
            }
          end

        end

        class PriceSourceCatalog < PriceSource

          attr_reader :price

          def initialize(incoming={})
            super(:discriminator => PriceSource::Types::PRICE_SOURCE_CATALOG)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:price], 'PriceSourceCatalog')
            @price = (x = opts.delete(:price); x.is_a?(::Io::Flow::V0::Models::Money) ? x : ::Io::Flow::V0::Models::Money.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PriceSourceCatalog.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :price => price.to_hash
            }
          end

        end

        class PriceSourcePriceBook < PriceSource

          attr_reader :price, :includes, :price_book_reference

          def initialize(incoming={})
            super(:discriminator => PriceSource::Types::PRICE_SOURCE_PRICE_BOOK)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:price, :includes, :price_book_reference], 'PriceSourcePriceBook')
            @price = (x = opts.delete(:price); x.is_a?(::Io::Flow::V0::Models::Money) ? x : ::Io::Flow::V0::Models::Money.new(x))
            @includes = (x = opts.delete(:includes); x.is_a?(::Io::Flow::V0::Models::IncludedLevies) ? x : ::Io::Flow::V0::Models::IncludedLevies.new(x))
            @price_book_reference = (x = opts.delete(:price_book_reference); x.is_a?(::Io::Flow::V0::Models::PriceSourcePriceBookReference) ? x : ::Io::Flow::V0::Models::PriceSourcePriceBookReference.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PriceSourcePriceBook.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :price => price.to_hash,
              :includes => includes.to_hash,
              :price_book_reference => price_book_reference.to_hash
            }
          end

        end

        class PriceSourcePriceBookReference

          attr_reader :id, :key

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :key], 'PriceSourcePriceBookReference')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @key = HttpClient::Preconditions.assert_class('key', opts.delete(:key), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PriceSourcePriceBookReference.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :key => key
            }
          end

        end

        class PriceSourceProvided < PriceSource

          attr_reader :price

          def initialize(incoming={})
            super(:discriminator => PriceSource::Types::PRICE_SOURCE_PROVIDED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:price], 'PriceSourceProvided')
            @price = (x = opts.delete(:price); x.is_a?(::Io::Flow::V0::Models::Money) ? x : ::Io::Flow::V0::Models::Money.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PriceSourceProvided.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :price => price.to_hash
            }
          end

        end

        class PriceWithBase

          attr_reader :currency, :amount, :label, :base

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:currency, :amount, :label], 'PriceWithBase')
            @currency = HttpClient::Preconditions.assert_class('currency', opts.delete(:currency), String)
            @amount = HttpClient::Preconditions.assert_class('amount', opts.delete(:amount), Numeric)
            @label = HttpClient::Preconditions.assert_class('label', opts.delete(:label), String)
            @base = (x = opts.delete(:base); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Price) ? x : ::Io::Flow::V0::Models::Price.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PriceWithBase.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :currency => currency,
              :amount => amount,
              :label => label,
              :base => base.nil? ? nil : base.to_hash
            }
          end

        end

        class PriceWithBaseAndDetails

          attr_reader :currency, :amount, :label, :base, :details

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:currency, :amount, :label], 'PriceWithBaseAndDetails')
            @currency = HttpClient::Preconditions.assert_class('currency', opts.delete(:currency), String)
            @amount = HttpClient::Preconditions.assert_class('amount', opts.delete(:amount), Numeric)
            @label = HttpClient::Preconditions.assert_class('label', opts.delete(:label), String)
            @base = (x = opts.delete(:base); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Price) ? x : ::Io::Flow::V0::Models::Price.new(x)))
            @details = (x = opts.delete(:details); x.nil? ? nil : HttpClient::Preconditions.assert_class('details', x, Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::DeliveryOptionCostDetail) ? x : ::Io::Flow::V0::Models::DeliveryOptionCostDetail.new(x)) })
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PriceWithBaseAndDetails.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :currency => currency,
              :amount => amount,
              :label => label,
              :base => base.nil? ? nil : base.to_hash,
              :details => details.nil? ? nil : details.map { |o| o.to_hash }
            }
          end

        end

        # Pricing determines how the item price is calculated when items are requests
        # via the experience.
        class Pricing

          attr_reader :vat, :duty, :rounding

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:vat, :duty], 'Pricing')
            @vat = (x = opts.delete(:vat); x.is_a?(::Io::Flow::V0::Models::PricingLevySetting) ? x : ::Io::Flow::V0::Models::PricingLevySetting.apply(x))
            @duty = (x = opts.delete(:duty); x.is_a?(::Io::Flow::V0::Models::PricingLevySetting) ? x : ::Io::Flow::V0::Models::PricingLevySetting.apply(x))
            @rounding = (x = opts.delete(:rounding); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Rounding) ? x : ::Io::Flow::V0::Models::Rounding.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            Pricing.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :vat => vat.value,
              :duty => duty.value,
              :rounding => rounding.nil? ? nil : rounding.to_hash
            }
          end

        end

        class PricingDeleted < Event

          attr_reader :event_id, :timestamp, :organization, :experience_key

          def initialize(incoming={})
            super(:discriminator => Event::Types::PRICING_DELETED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :experience_key], 'PricingDeleted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @experience_key = HttpClient::Preconditions.assert_class('experience_key', opts.delete(:experience_key), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PricingDeleted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :experience_key => experience_key
            }
          end

        end

        class PricingSettings

          attr_reader :editable, :default_tax_display, :default_duty_display

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:editable, :default_tax_display, :default_duty_display], 'PricingSettings')
            @editable = HttpClient::Preconditions.assert_boolean('editable', opts.delete(:editable))
            @default_tax_display = (x = opts.delete(:default_tax_display); x.is_a?(::Io::Flow::V0::Models::PricingLevySetting) ? x : ::Io::Flow::V0::Models::PricingLevySetting.apply(x))
            @default_duty_display = (x = opts.delete(:default_duty_display); x.is_a?(::Io::Flow::V0::Models::PricingLevySetting) ? x : ::Io::Flow::V0::Models::PricingLevySetting.apply(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PricingSettings.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :editable => editable,
              :default_tax_display => default_tax_display.value,
              :default_duty_display => default_duty_display.value
            }
          end

        end

        class PricingUpserted < Event

          attr_reader :event_id, :timestamp, :organization, :experience_key, :vat, :duty, :rounding_type, :rounding_method, :rounding_value

          def initialize(incoming={})
            super(:discriminator => Event::Types::PRICING_UPSERTED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :experience_key, :vat, :duty], 'PricingUpserted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @experience_key = HttpClient::Preconditions.assert_class('experience_key', opts.delete(:experience_key), String)
            @vat = HttpClient::Preconditions.assert_class('vat', opts.delete(:vat), String)
            @duty = HttpClient::Preconditions.assert_class('duty', opts.delete(:duty), String)
            @rounding_type = (x = opts.delete(:rounding_type); x.nil? ? nil : HttpClient::Preconditions.assert_class('rounding_type', x, String))
            @rounding_method = (x = opts.delete(:rounding_method); x.nil? ? nil : HttpClient::Preconditions.assert_class('rounding_method', x, String))
            @rounding_value = (x = opts.delete(:rounding_value); x.nil? ? nil : HttpClient::Preconditions.assert_class('rounding_value', HttpClient::Helper.to_big_decimal(x), BigDecimal))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PricingUpserted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :experience_key => experience_key,
              :vat => vat,
              :duty => duty,
              :rounding_type => rounding_type,
              :rounding_method => rounding_method,
              :rounding_value => rounding_value.to_f.to_s
            }
          end

        end

        class PricingVersion

          attr_reader :id, :timestamp, :type, :pricing

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :timestamp, :type, :pricing], 'PricingVersion')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::V0::Models::ChangeType) ? x : ::Io::Flow::V0::Models::ChangeType.apply(x))
            @pricing = (x = opts.delete(:pricing); x.is_a?(::Io::Flow::V0::Models::Pricing) ? x : ::Io::Flow::V0::Models::Pricing.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PricingVersion.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :timestamp => timestamp,
              :type => type.value,
              :pricing => pricing.to_hash
            }
          end

        end

        class ProcessingEstimate

          attr_reader :location, :min_date, :max_date, :source

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:location, :min_date, :max_date, :source], 'ProcessingEstimate')
            @location = (x = opts.delete(:location); x.is_a?(::Io::Flow::V0::Models::DeliveryWindowLocation) ? x : ::Io::Flow::V0::Models::DeliveryWindowLocation.apply(x))
            @min_date = HttpClient::Preconditions.assert_class('min_date', HttpClient::Helper.to_date_time_iso8601(opts.delete(:min_date)), DateTime)
            @max_date = HttpClient::Preconditions.assert_class('max_date', HttpClient::Helper.to_date_time_iso8601(opts.delete(:max_date)), DateTime)
            @source = (x = opts.delete(:source); x.is_a?(::Io::Flow::V0::Models::DeliveryWindowComponentSource) ? x : ::Io::Flow::V0::Models::DeliveryWindowComponentSource.apply(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ProcessingEstimate.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :location => location.value,
              :min_date => min_date,
              :max_date => max_date,
              :source => source.value
            }
          end

        end

        class PromotionTrigger

          attr_reader :type, :min, :remaining

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:type, :min, :remaining], 'PromotionTrigger')
            @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::V0::Models::PromotionTriggerType) ? x : ::Io::Flow::V0::Models::PromotionTriggerType.apply(x))
            @min = (x = opts.delete(:min); x.is_a?(::Io::Flow::V0::Models::Price) ? x : ::Io::Flow::V0::Models::Price.new(x))
            @remaining = (x = opts.delete(:remaining); x.is_a?(::Io::Flow::V0::Models::Price) ? x : ::Io::Flow::V0::Models::Price.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PromotionTrigger.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :type => type.value,
              :min => min.to_hash,
              :remaining => remaining.to_hash
            }
          end

        end

        class PromotionTriggerForm

          attr_reader :type, :min

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:type], 'PromotionTriggerForm')
            @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::V0::Models::PromotionTriggerType) ? x : ::Io::Flow::V0::Models::PromotionTriggerType.apply(x))
            @min = (x = opts.delete(:min); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::PriceForm) ? x : ::Io::Flow::V0::Models::PriceForm.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PromotionTriggerForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :type => type.value,
              :min => min.nil? ? nil : min.to_hash
            }
          end

        end

        class Promotions

          attr_reader :applied, :available

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:applied, :available], 'Promotions')
            @applied = HttpClient::Preconditions.assert_class('applied', opts.delete(:applied), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::Promotion) ? x : ::Io::Flow::V0::Models::Promotion.from_json(x)) }
            @available = HttpClient::Preconditions.assert_class('available', opts.delete(:available), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::Promotion) ? x : ::Io::Flow::V0::Models::Promotion.from_json(x)) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            Promotions.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :applied => applied.map { |o| o.to_hash },
              :available => available.map { |o| o.to_hash }
            }
          end

        end

        # A subdivision/province/state within a country. These conform to the ISO 3166-2
        # standard for country subdivisions. See https://api.flow.io/reference/provinces
        class Province

          attr_reader :id, :iso_3166_2, :name, :country, :province_type, :translations

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :iso_3166_2, :name, :country, :province_type], 'Province')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @iso_3166_2 = HttpClient::Preconditions.assert_class('iso_3166_2', opts.delete(:iso_3166_2), String)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
            @country = HttpClient::Preconditions.assert_class('country', opts.delete(:country), String)
            @province_type = (x = opts.delete(:province_type); x.is_a?(::Io::Flow::V0::Models::ProvinceType) ? x : ::Io::Flow::V0::Models::ProvinceType.apply(x))
            @translations = (x = opts.delete(:translations); x.nil? ? nil : HttpClient::Preconditions.assert_class('translations', x, Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::LocalizedTranslation) ? x : ::Io::Flow::V0::Models::LocalizedTranslation.new(x)) })
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            Province.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :iso_3166_2 => iso_3166_2,
              :name => name,
              :country => country,
              :province_type => province_type.value,
              :translations => translations.nil? ? nil : translations.map { |o| o.to_hash }
            }
          end

        end

        # A public key is used to encrypt cards client side prior to submitting to the
        # Flow vault.
        class PublicKey

          attr_reader :id

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id], 'PublicKey')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            PublicKey.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id
            }
          end

        end

        # The query model is used to present a query to a user, containing both the raw
        # query as well as the filter representation of the query.
        class Query

          attr_reader :q, :filters

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:q, :filters], 'Query')
            @q = HttpClient::Preconditions.assert_class('q', opts.delete(:q), String)
            @filters = HttpClient::Preconditions.assert_class('filters', opts.delete(:filters), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::QueryFilter) ? x : ::Io::Flow::V0::Models::QueryFilter.from_json(x)) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            Query.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :q => q,
              :filters => filters.map { |o| o.to_hash }
            }
          end

        end

        # The query builder model is used to build a query using structured filters. The
        # end result is a single 'q' string - e.g. 'category:jewelry and brand:Flow'
        class QueryBuilder

          attr_reader :q, :filters, :available

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:q, :filters, :available], 'QueryBuilder')
            @q = HttpClient::Preconditions.assert_class('q', opts.delete(:q), String)
            @filters = HttpClient::Preconditions.assert_class('filters', opts.delete(:filters), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::QueryFilter) ? x : ::Io::Flow::V0::Models::QueryFilter.from_json(x)) }
            @available = HttpClient::Preconditions.assert_class('available', opts.delete(:available), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::AvailableFilter) ? x : ::Io::Flow::V0::Models::AvailableFilter.from_json(x)) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            QueryBuilder.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :q => q,
              :filters => filters.map { |o| o.to_hash },
              :available => available.map { |o| o.to_hash }
            }
          end

        end

        class QueryBuilderFilterForm < QueryBuilderForm

          attr_reader :filters

          def initialize(incoming={})
            super(:discriminator => QueryBuilderForm::Types::QUERY_BUILDER_FILTER_FORM)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:filters], 'QueryBuilderFilterForm')
            @filters = HttpClient::Preconditions.assert_class('filters', opts.delete(:filters), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::QueryFilterForm) ? x : ::Io::Flow::V0::Models::QueryFilterForm.from_json(x)) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            QueryBuilderFilterForm.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :filters => filters.map { |o| o.to_hash }
            }
          end

        end

        class QueryBuilderQueryForm < QueryBuilderForm

          attr_reader :q

          def initialize(incoming={})
            super(:discriminator => QueryBuilderForm::Types::QUERY_BUILDER_QUERY_FORM)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:q], 'QueryBuilderQueryForm')
            @q = HttpClient::Preconditions.assert_class('q', opts.delete(:q), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            QueryBuilderQueryForm.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :q => q
            }
          end

        end

        class QueryFilterStructured < QueryFilter

          attr_reader :q, :field, :operator, :values

          def initialize(incoming={})
            super(:discriminator => QueryFilter::Types::QUERY_FILTER_STRUCTURED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:q, :field, :operator, :values], 'QueryFilterStructured')
            @q = HttpClient::Preconditions.assert_class('q', opts.delete(:q), String)
            @field = HttpClient::Preconditions.assert_class('field', opts.delete(:field), String)
            @operator = HttpClient::Preconditions.assert_class('operator', opts.delete(:operator), String)
            @values = HttpClient::Preconditions.assert_class('values', opts.delete(:values), Array).map { |v| HttpClient::Preconditions.assert_class('values', v, String) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            QueryFilterStructured.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :q => q,
              :field => field,
              :operator => operator,
              :values => values
            }
          end

        end

        class QueryFilterStructuredForm < QueryFilterForm

          attr_reader :field, :operator, :values

          def initialize(incoming={})
            super(:discriminator => QueryFilterForm::Types::QUERY_FILTER_STRUCTURED_FORM)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:field, :operator, :values], 'QueryFilterStructuredForm')
            @field = HttpClient::Preconditions.assert_class('field', opts.delete(:field), String)
            @operator = HttpClient::Preconditions.assert_class('operator', opts.delete(:operator), String)
            @values = HttpClient::Preconditions.assert_class('values', opts.delete(:values), Array).map { |v| HttpClient::Preconditions.assert_class('values', v, String) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            QueryFilterStructuredForm.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :field => field,
              :operator => operator,
              :values => values
            }
          end

        end

        class QueryFilterUnstructured < QueryFilter

          attr_reader :q

          def initialize(incoming={})
            super(:discriminator => QueryFilter::Types::QUERY_FILTER_UNSTRUCTURED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:q], 'QueryFilterUnstructured')
            @q = HttpClient::Preconditions.assert_class('q', opts.delete(:q), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            QueryFilterUnstructured.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :q => q
            }
          end

        end

        class QueryFilterUnstructuredForm < QueryFilterForm

          attr_reader :q

          def initialize(incoming={})
            super(:discriminator => QueryFilterForm::Types::QUERY_FILTER_UNSTRUCTURED_FORM)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:q], 'QueryFilterUnstructuredForm')
            @q = HttpClient::Preconditions.assert_class('q', opts.delete(:q), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            QueryFilterUnstructuredForm.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :q => q
            }
          end

        end

        # Represents a collection of deliveries and available options for fulfillment of
        # that delivery
        class Quote

          attr_reader :id, :destination, :deliveries, :selections, :delivered_duty, :delivered_duties

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :destination, :deliveries, :selections, :delivered_duties], 'Quote')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @destination = (x = opts.delete(:destination); x.is_a?(::Io::Flow::V0::Models::ShippingAddress) ? x : ::Io::Flow::V0::Models::ShippingAddress.new(x))
            @deliveries = HttpClient::Preconditions.assert_class('deliveries', opts.delete(:deliveries), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::Delivery) ? x : ::Io::Flow::V0::Models::Delivery.from_json(x)) }
            @selections = HttpClient::Preconditions.assert_class('selections', opts.delete(:selections), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::DeliveryOptionReference) ? x : ::Io::Flow::V0::Models::DeliveryOptionReference.new(x)) }
            @delivered_duty = (x = (x = opts.delete(:delivered_duty); x.nil? ? "paid" : x); x.is_a?(::Io::Flow::V0::Models::DeliveredDuty) ? x : ::Io::Flow::V0::Models::DeliveredDuty.apply(x))
            @delivered_duties = HttpClient::Preconditions.assert_class('delivered_duties', opts.delete(:delivered_duties), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::DeliveredDuty) ? x : ::Io::Flow::V0::Models::DeliveredDuty.apply(x)) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            Quote.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :destination => destination.to_hash,
              :deliveries => deliveries.map { |o| o.to_hash },
              :selections => selections.map { |o| o.to_hash },
              :delivered_duty => delivered_duty.value,
              :delivered_duties => delivered_duties.map { |o| o.value }
            }
          end

        end

        class QuoteError

          attr_reader :code, :messages, :item_numbers

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:code, :messages], 'QuoteError')
            @code = (x = opts.delete(:code); x.is_a?(::Io::Flow::V0::Models::QuoteErrorCode) ? x : ::Io::Flow::V0::Models::QuoteErrorCode.apply(x))
            @messages = HttpClient::Preconditions.assert_class('messages', opts.delete(:messages), Array).map { |v| HttpClient::Preconditions.assert_class('messages', v, String) }
            @item_numbers = (x = opts.delete(:item_numbers); x.nil? ? nil : HttpClient::Preconditions.assert_class('item_numbers', x, Array).map { |v| HttpClient::Preconditions.assert_class('item_numbers', v, String) })
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            QuoteError.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :code => code.value,
              :messages => messages,
              :item_numbers => item_numbers.nil? ? nil : item_numbers
            }
          end

        end

        class QuoteForm

          attr_reader :destination, :experience, :items, :delivered_duty, :delivered_duties, :direction

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:destination, :experience, :items], 'QuoteForm')
            @destination = (x = opts.delete(:destination); x.is_a?(::Io::Flow::V0::Models::ShippingAddress) ? x : ::Io::Flow::V0::Models::ShippingAddress.new(x))
            @experience = HttpClient::Preconditions.assert_class('experience', opts.delete(:experience), String)
            @items = HttpClient::Preconditions.assert_class('items', opts.delete(:items), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::QuoteLineItemForm) ? x : ::Io::Flow::V0::Models::QuoteLineItemForm.new(x)) }
            @delivered_duty = (x = opts.delete(:delivered_duty); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::DeliveredDuty) ? x : ::Io::Flow::V0::Models::DeliveredDuty.apply(x)))
            @delivered_duties = (x = opts.delete(:delivered_duties); x.nil? ? nil : HttpClient::Preconditions.assert_class('delivered_duties', x, Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::DeliveredDuty) ? x : ::Io::Flow::V0::Models::DeliveredDuty.apply(x)) })
            @direction = (x = opts.delete(:direction); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::LaneDirection) ? x : ::Io::Flow::V0::Models::LaneDirection.apply(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            QuoteForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :destination => destination.to_hash,
              :experience => experience,
              :items => items.map { |o| o.to_hash },
              :delivered_duty => delivered_duty.nil? ? nil : delivered_duty.value,
              :delivered_duties => delivered_duties.nil? ? nil : delivered_duties.map { |o| o.value },
              :direction => direction.nil? ? nil : direction.value
            }
          end

        end

        # Line items and relevant attributes. Similar to common.line_item_form, but
        # price is a money_with_optional_base
        class QuoteLineItemForm

          attr_reader :number, :quantity, :shipment_estimate, :price, :attributes, :center

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:number, :quantity, :price], 'QuoteLineItemForm')
            @number = HttpClient::Preconditions.assert_class('number', opts.delete(:number), String)
            @quantity = HttpClient::Preconditions.assert_class('quantity', opts.delete(:quantity), Integer)
            @shipment_estimate = (x = opts.delete(:shipment_estimate); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::DatetimeRange) ? x : ::Io::Flow::V0::Models::DatetimeRange.new(x)))
            @price = (x = opts.delete(:price); x.is_a?(::Io::Flow::V0::Models::MoneyWithBase) ? x : ::Io::Flow::V0::Models::MoneyWithBase.new(x))
            @attributes = (x = opts.delete(:attributes); x.nil? ? nil : HttpClient::Preconditions.assert_class('attributes', x, Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h })
            @center = (x = opts.delete(:center); x.nil? ? nil : HttpClient::Preconditions.assert_class('center', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            QuoteLineItemForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :number => number,
              :quantity => quantity,
              :shipment_estimate => shipment_estimate.nil? ? nil : shipment_estimate.to_hash,
              :price => price.to_hash,
              :attributes => attributes.nil? ? nil : attributes,
              :center => center
            }
          end

        end

        class QuoteSummary

          attr_reader :id, :destination

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :destination], 'QuoteSummary')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @destination = (x = opts.delete(:destination); x.is_a?(::Io::Flow::V0::Models::ShippingAddress) ? x : ::Io::Flow::V0::Models::ShippingAddress.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            QuoteSummary.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :destination => destination.to_hash
            }
          end

        end

        class QuoteVersion

          attr_reader :id, :timestamp, :type, :quote

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :timestamp, :type, :quote], 'QuoteVersion')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::V0::Models::ChangeType) ? x : ::Io::Flow::V0::Models::ChangeType.apply(x))
            @quote = (x = opts.delete(:quote); x.is_a?(::Io::Flow::V0::Models::QuoteSummary) ? x : ::Io::Flow::V0::Models::QuoteSummary.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            QuoteVersion.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :timestamp => timestamp,
              :type => type.value,
              :quote => quote.to_hash
            }
          end

        end

        # Represents an organization-specific currency conversion rate at a point in
        # time.
        class Rate

          attr_reader :id, :base, :target, :effective_at, :value

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :base, :target, :effective_at, :value], 'Rate')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @base = HttpClient::Preconditions.assert_class('base', opts.delete(:base), String)
            @target = HttpClient::Preconditions.assert_class('target', opts.delete(:target), String)
            @effective_at = HttpClient::Preconditions.assert_class('effective_at', HttpClient::Helper.to_date_time_iso8601(opts.delete(:effective_at)), DateTime)
            @value = HttpClient::Preconditions.assert_class('value', HttpClient::Helper.to_big_decimal(opts.delete(:value)), BigDecimal)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            Rate.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :base => base,
              :target => target,
              :effective_at => effective_at,
              :value => value.to_f.to_s
            }
          end

        end

        class RateDeleted < Event

          attr_reader :event_id, :timestamp, :rate_id

          def initialize(incoming={})
            super(:discriminator => Event::Types::RATE_DELETED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :rate_id], 'RateDeleted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @rate_id = HttpClient::Preconditions.assert_class('rate_id', opts.delete(:rate_id), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            RateDeleted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :rate_id => rate_id
            }
          end

        end

        class RateDeletedV3 < Event

          attr_reader :event_id, :timestamp, :organization, :rate

          def initialize(incoming={})
            super(:discriminator => Event::Types::RATE_DELETED_V3)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :rate], 'RateDeletedV3')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @rate = (x = opts.delete(:rate); x.is_a?(::Io::Flow::V0::Models::Rate) ? x : ::Io::Flow::V0::Models::Rate.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            RateDeletedV3.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :rate => rate.to_hash
            }
          end

        end

        # Represents the parts of an organization rate that can be updated.
        class RateForm

          attr_reader :base, :target, :effective_at

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:base, :target, :effective_at], 'RateForm')
            @base = HttpClient::Preconditions.assert_class('base', opts.delete(:base), String)
            @target = HttpClient::Preconditions.assert_class('target', opts.delete(:target), String)
            @effective_at = HttpClient::Preconditions.assert_class('effective_at', HttpClient::Helper.to_date_time_iso8601(opts.delete(:effective_at)), DateTime)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            RateForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :base => base,
              :target => target,
              :effective_at => effective_at
            }
          end

        end

        class RateUpserted < Event

          attr_reader :event_id, :timestamp, :rate_id, :organization_id, :base, :target, :effective_at, :value

          def initialize(incoming={})
            super(:discriminator => Event::Types::RATE_UPSERTED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :rate_id, :organization_id, :base, :target, :effective_at, :value], 'RateUpserted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @rate_id = HttpClient::Preconditions.assert_class('rate_id', opts.delete(:rate_id), String)
            @organization_id = HttpClient::Preconditions.assert_class('organization_id', opts.delete(:organization_id), String)
            @base = HttpClient::Preconditions.assert_class('base', opts.delete(:base), String)
            @target = HttpClient::Preconditions.assert_class('target', opts.delete(:target), String)
            @effective_at = HttpClient::Preconditions.assert_class('effective_at', HttpClient::Helper.to_date_time_iso8601(opts.delete(:effective_at)), DateTime)
            @value = HttpClient::Preconditions.assert_class('value', HttpClient::Helper.to_big_decimal(opts.delete(:value)), BigDecimal)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            RateUpserted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :rate_id => rate_id,
              :organization_id => organization_id,
              :base => base,
              :target => target,
              :effective_at => effective_at,
              :value => value.to_f.to_s
            }
          end

        end

        class RateUpsertedV3 < Event

          attr_reader :event_id, :timestamp, :organization, :rate

          def initialize(incoming={})
            super(:discriminator => Event::Types::RATE_UPSERTED_V3)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :rate], 'RateUpsertedV3')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @rate = (x = opts.delete(:rate); x.is_a?(::Io::Flow::V0::Models::Rate) ? x : ::Io::Flow::V0::Models::Rate.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            RateUpsertedV3.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :rate => rate.to_hash
            }
          end

        end

        class RateVersion

          attr_reader :id, :timestamp, :type, :rate

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :timestamp, :type, :rate], 'RateVersion')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::V0::Models::ChangeType) ? x : ::Io::Flow::V0::Models::ChangeType.apply(x))
            @rate = (x = opts.delete(:rate); x.is_a?(::Io::Flow::V0::Models::Rate) ? x : ::Io::Flow::V0::Models::Rate.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            RateVersion.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :timestamp => timestamp,
              :type => type.value,
              :rate => rate.to_hash
            }
          end

        end

        # Snapshot of all lanes and rows across all service levels of an organization
        class Ratecard

          attr_reader :id, :number, :direction, :effective_at, :origination_zones, :service, :published_at, :ratecard_owner

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :number, :direction, :effective_at, :origination_zones, :service, :ratecard_owner], 'Ratecard')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @number = HttpClient::Preconditions.assert_class('number', opts.delete(:number), String)
            @direction = (x = opts.delete(:direction); x.is_a?(::Io::Flow::V0::Models::Direction) ? x : ::Io::Flow::V0::Models::Direction.apply(x))
            @effective_at = HttpClient::Preconditions.assert_class('effective_at', HttpClient::Helper.to_date_time_iso8601(opts.delete(:effective_at)), DateTime)
            @origination_zones = HttpClient::Preconditions.assert_class('origination_zones', opts.delete(:origination_zones), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::Zone) ? x : ::Io::Flow::V0::Models::Zone.new(x)) }
            @service = (x = opts.delete(:service); x.is_a?(::Io::Flow::V0::Models::RatecardServiceSummary) ? x : ::Io::Flow::V0::Models::RatecardServiceSummary.new(x))
            @published_at = (x = opts.delete(:published_at); x.nil? ? nil : HttpClient::Preconditions.assert_class('published_at', HttpClient::Helper.to_date_time_iso8601(x), DateTime))
            @ratecard_owner = (x = opts.delete(:ratecard_owner); x.is_a?(::Io::Flow::V0::Models::RatecardOwner) ? x : ::Io::Flow::V0::Models::RatecardOwner.apply(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            Ratecard.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :number => number,
              :direction => direction.value,
              :effective_at => effective_at,
              :origination_zones => origination_zones.map { |o| o.to_hash },
              :service => service.to_hash,
              :published_at => published_at,
              :ratecard_owner => ratecard_owner.value
            }
          end

        end

        class RatecardCarrierSummary

          attr_reader :id, :name

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :name], 'RatecardCarrierSummary')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            RatecardCarrierSummary.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :name => name
            }
          end

        end

        class RatecardDeleted < Event

          attr_reader :event_id, :timestamp, :organization, :ratecard

          def initialize(incoming={})
            super(:discriminator => Event::Types::RATECARD_DELETED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :ratecard], 'RatecardDeleted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @ratecard = (x = opts.delete(:ratecard); x.is_a?(::Io::Flow::V0::Models::Ratecard) ? x : ::Io::Flow::V0::Models::Ratecard.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            RatecardDeleted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :ratecard => ratecard.to_hash
            }
          end

        end

        class RatecardEstimateForm

          attr_reader :origin_address, :destination_address, :weight_unit, :distance_unit, :service, :weight, :length, :width, :depth, :delivered_duty, :line_items, :center_id

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:origin_address, :destination_address], 'RatecardEstimateForm')
            @origin_address = (x = opts.delete(:origin_address); x.is_a?(::Io::Flow::V0::Models::Address) ? x : ::Io::Flow::V0::Models::Address.new(x))
            @destination_address = (x = opts.delete(:destination_address); x.is_a?(::Io::Flow::V0::Models::Address) ? x : ::Io::Flow::V0::Models::Address.new(x))
            @weight_unit = (x = opts.delete(:weight_unit); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::UnitOfMeasurement) ? x : ::Io::Flow::V0::Models::UnitOfMeasurement.apply(x)))
            @distance_unit = (x = opts.delete(:distance_unit); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::UnitOfMeasurement) ? x : ::Io::Flow::V0::Models::UnitOfMeasurement.apply(x)))
            @service = (x = opts.delete(:service); x.nil? ? nil : HttpClient::Preconditions.assert_class('service', x, String))
            @weight = (x = opts.delete(:weight); x.nil? ? nil : HttpClient::Preconditions.assert_class('weight', x, Numeric))
            @length = (x = opts.delete(:length); x.nil? ? nil : HttpClient::Preconditions.assert_class('length', x, Numeric))
            @width = (x = opts.delete(:width); x.nil? ? nil : HttpClient::Preconditions.assert_class('width', x, Numeric))
            @depth = (x = opts.delete(:depth); x.nil? ? nil : HttpClient::Preconditions.assert_class('depth', x, Numeric))
            @delivered_duty = (x = opts.delete(:delivered_duty); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::DeliveredDuty) ? x : ::Io::Flow::V0::Models::DeliveredDuty.apply(x)))
            @line_items = (x = opts.delete(:line_items); x.nil? ? nil : HttpClient::Preconditions.assert_class('line_items', x, Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::LineItemForm) ? x : ::Io::Flow::V0::Models::LineItemForm.new(x)) })
            @center_id = (x = opts.delete(:center_id); x.nil? ? nil : HttpClient::Preconditions.assert_class('center_id', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            RatecardEstimateForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :origin_address => origin_address.to_hash,
              :destination_address => destination_address.to_hash,
              :weight_unit => weight_unit.nil? ? nil : weight_unit.value,
              :distance_unit => distance_unit.nil? ? nil : distance_unit.value,
              :service => service,
              :weight => weight,
              :length => length,
              :width => width,
              :depth => depth,
              :delivered_duty => delivered_duty.nil? ? nil : delivered_duty.value,
              :line_items => line_items.nil? ? nil : line_items.map { |o| o.to_hash },
              :center_id => center_id
            }
          end

        end

        class RatecardEstimateSummaryForm

          attr_reader :origin, :destination, :service, :center_key

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @origin = (x = opts.delete(:origin); x.nil? ? nil : HttpClient::Preconditions.assert_class('origin', x, String))
            @destination = (x = opts.delete(:destination); x.nil? ? nil : HttpClient::Preconditions.assert_class('destination', x, String))
            @service = (x = opts.delete(:service); x.nil? ? nil : HttpClient::Preconditions.assert_class('service', x, String))
            @center_key = (x = opts.delete(:center_key); x.nil? ? nil : HttpClient::Preconditions.assert_class('center_key', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            RatecardEstimateSummaryForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :origin => origin,
              :destination => destination,
              :service => service,
              :center_key => center_key
            }
          end

        end

        # Represents a summary of a cost estimate based on rate card data for an
        # origin/destination and weight, either gravitational or dimensional
        class RatecardEstimateV1 < RatecardEstimate

          attr_reader :service, :shipment_window, :currency, :amount, :fees, :total, :delivered_duty, :dimensional_weight, :gravitational_weight, :line_items

          def initialize(incoming={})
            super(:discriminator => RatecardEstimate::Types::RATECARD_ESTIMATE_V1)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:service, :shipment_window, :currency, :amount, :fees, :total, :delivered_duty], 'RatecardEstimateV1')
            @service = (x = opts.delete(:service); x.is_a?(::Io::Flow::V0::Models::RatecardServiceSummary) ? x : ::Io::Flow::V0::Models::RatecardServiceSummary.new(x))
            @shipment_window = (x = opts.delete(:shipment_window); x.is_a?(::Io::Flow::V0::Models::ShipmentWindow) ? x : ::Io::Flow::V0::Models::ShipmentWindow.new(x))
            @currency = HttpClient::Preconditions.assert_class('currency', opts.delete(:currency), String)
            @amount = HttpClient::Preconditions.assert_class('amount', opts.delete(:amount), Numeric)
            @fees = HttpClient::Preconditions.assert_class('fees', opts.delete(:fees), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::RatecardFee) ? x : ::Io::Flow::V0::Models::RatecardFee.from_json(x)) }
            @total = HttpClient::Preconditions.assert_class('total', opts.delete(:total), Numeric)
            @delivered_duty = (x = opts.delete(:delivered_duty); x.is_a?(::Io::Flow::V0::Models::DeliveredDuty) ? x : ::Io::Flow::V0::Models::DeliveredDuty.apply(x))
            @dimensional_weight = (x = opts.delete(:dimensional_weight); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Measurement) ? x : ::Io::Flow::V0::Models::Measurement.new(x)))
            @gravitational_weight = (x = opts.delete(:gravitational_weight); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Measurement) ? x : ::Io::Flow::V0::Models::Measurement.new(x)))
            @line_items = (x = opts.delete(:line_items); x.nil? ? nil : HttpClient::Preconditions.assert_class('line_items', x, Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::LineItemForm) ? x : ::Io::Flow::V0::Models::LineItemForm.new(x)) })
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            RatecardEstimateV1.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :service => service.to_hash,
              :shipment_window => shipment_window.to_hash,
              :currency => currency,
              :amount => amount,
              :fees => fees.map { |o| o.to_hash },
              :total => total,
              :delivered_duty => delivered_duty.value,
              :dimensional_weight => dimensional_weight.nil? ? nil : dimensional_weight.to_hash,
              :gravitational_weight => gravitational_weight.nil? ? nil : gravitational_weight.to_hash,
              :line_items => line_items.nil? ? nil : line_items.map { |o| o.to_hash }
            }
          end

        end

        # Represents a summary of a cost estimate based on rate card data for an
        # origin/destination and weight, either gravitational or dimensional
        class RatecardEstimateV2 < RatecardEstimate

          attr_reader :hops, :delivered_duty, :dimensional_weight, :gravitational_weight, :line_items, :ratecard_owner

          def initialize(incoming={})
            super(:discriminator => RatecardEstimate::Types::RATECARD_ESTIMATE_V2)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:hops, :delivered_duty], 'RatecardEstimateV2')
            @hops = HttpClient::Preconditions.assert_class('hops', opts.delete(:hops), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::Hop) ? x : ::Io::Flow::V0::Models::Hop.new(x)) }
            @delivered_duty = (x = opts.delete(:delivered_duty); x.is_a?(::Io::Flow::V0::Models::DeliveredDuty) ? x : ::Io::Flow::V0::Models::DeliveredDuty.apply(x))
            @dimensional_weight = (x = opts.delete(:dimensional_weight); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Measurement) ? x : ::Io::Flow::V0::Models::Measurement.new(x)))
            @gravitational_weight = (x = opts.delete(:gravitational_weight); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Measurement) ? x : ::Io::Flow::V0::Models::Measurement.new(x)))
            @line_items = (x = opts.delete(:line_items); x.nil? ? nil : HttpClient::Preconditions.assert_class('line_items', x, Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::LineItemForm) ? x : ::Io::Flow::V0::Models::LineItemForm.new(x)) })
            @ratecard_owner = (x = opts.delete(:ratecard_owner); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::RatecardOwner) ? x : ::Io::Flow::V0::Models::RatecardOwner.apply(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            RatecardEstimateV2.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :hops => hops.map { |o| o.to_hash },
              :delivered_duty => delivered_duty.value,
              :dimensional_weight => dimensional_weight.nil? ? nil : dimensional_weight.to_hash,
              :gravitational_weight => gravitational_weight.nil? ? nil : gravitational_weight.to_hash,
              :line_items => line_items.nil? ? nil : line_items.map { |o| o.to_hash },
              :ratecard_owner => ratecard_owner.nil? ? nil : ratecard_owner.value
            }
          end

        end

        # Represents a summary of a cost estimate based on rate card data for an
        # origin/destination and weight, either gravitational or dimensional
        class RatecardEstimateV3 < RatecardEstimate

          attr_reader :hops, :delivered_duty, :dimensional_weight, :gravitational_weight, :line_items, :ratecard

          def initialize(incoming={})
            super(:discriminator => RatecardEstimate::Types::RATECARD_ESTIMATE_V3)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:hops, :delivered_duty, :ratecard], 'RatecardEstimateV3')
            @hops = HttpClient::Preconditions.assert_class('hops', opts.delete(:hops), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::Hop) ? x : ::Io::Flow::V0::Models::Hop.new(x)) }
            @delivered_duty = (x = opts.delete(:delivered_duty); x.is_a?(::Io::Flow::V0::Models::DeliveredDuty) ? x : ::Io::Flow::V0::Models::DeliveredDuty.apply(x))
            @dimensional_weight = (x = opts.delete(:dimensional_weight); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Measurement) ? x : ::Io::Flow::V0::Models::Measurement.new(x)))
            @gravitational_weight = (x = opts.delete(:gravitational_weight); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Measurement) ? x : ::Io::Flow::V0::Models::Measurement.new(x)))
            @line_items = (x = opts.delete(:line_items); x.nil? ? nil : HttpClient::Preconditions.assert_class('line_items', x, Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::LineItemForm) ? x : ::Io::Flow::V0::Models::LineItemForm.new(x)) })
            @ratecard = (x = opts.delete(:ratecard); x.is_a?(::Io::Flow::V0::Models::RatecardSummary) ? x : ::Io::Flow::V0::Models::RatecardSummary.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            RatecardEstimateV3.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :hops => hops.map { |o| o.to_hash },
              :delivered_duty => delivered_duty.value,
              :dimensional_weight => dimensional_weight.nil? ? nil : dimensional_weight.to_hash,
              :gravitational_weight => gravitational_weight.nil? ? nil : gravitational_weight.to_hash,
              :line_items => line_items.nil? ? nil : line_items.map { |o| o.to_hash },
              :ratecard => ratecard.to_hash
            }
          end

        end

        # Represents a summary of a cost estimate based on rate card data for an
        # origin/destination and weight, either gravitational or dimensional
        class RatecardEstimateV4 < RatecardEstimate

          attr_reader :hops, :delivered_duty, :dimensional_weight, :gravitational_weight, :line_items

          def initialize(incoming={})
            super(:discriminator => RatecardEstimate::Types::RATECARD_ESTIMATE_V4)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:hops, :delivered_duty], 'RatecardEstimateV4')
            @hops = HttpClient::Preconditions.assert_class('hops', opts.delete(:hops), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::HopV2) ? x : ::Io::Flow::V0::Models::HopV2.new(x)) }
            @delivered_duty = (x = opts.delete(:delivered_duty); x.is_a?(::Io::Flow::V0::Models::DeliveredDuty) ? x : ::Io::Flow::V0::Models::DeliveredDuty.apply(x))
            @dimensional_weight = (x = opts.delete(:dimensional_weight); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Measurement) ? x : ::Io::Flow::V0::Models::Measurement.new(x)))
            @gravitational_weight = (x = opts.delete(:gravitational_weight); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Measurement) ? x : ::Io::Flow::V0::Models::Measurement.new(x)))
            @line_items = (x = opts.delete(:line_items); x.nil? ? nil : HttpClient::Preconditions.assert_class('line_items', x, Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::LineItemForm) ? x : ::Io::Flow::V0::Models::LineItemForm.new(x)) })
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            RatecardEstimateV4.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :hops => hops.map { |o| o.to_hash },
              :delivered_duty => delivered_duty.value,
              :dimensional_weight => dimensional_weight.nil? ? nil : dimensional_weight.to_hash,
              :gravitational_weight => gravitational_weight.nil? ? nil : gravitational_weight.to_hash,
              :line_items => line_items.nil? ? nil : line_items.map { |o| o.to_hash }
            }
          end

        end

        class RatecardForm

          attr_reader :direction, :effective_at, :origination_zones, :service, :number, :ratecard_owner

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:direction, :effective_at, :origination_zones, :service], 'RatecardForm')
            @direction = (x = opts.delete(:direction); x.is_a?(::Io::Flow::V0::Models::Direction) ? x : ::Io::Flow::V0::Models::Direction.apply(x))
            @effective_at = HttpClient::Preconditions.assert_class('effective_at', HttpClient::Helper.to_date_time_iso8601(opts.delete(:effective_at)), DateTime)
            @origination_zones = HttpClient::Preconditions.assert_class('origination_zones', opts.delete(:origination_zones), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::Zone) ? x : ::Io::Flow::V0::Models::Zone.new(x)) }
            @service = HttpClient::Preconditions.assert_class('service', opts.delete(:service), String)
            @number = (x = opts.delete(:number); x.nil? ? nil : HttpClient::Preconditions.assert_class('number', x, String))
            @ratecard_owner = (x = (x = opts.delete(:ratecard_owner); x.nil? ? "flow" : x); x.is_a?(::Io::Flow::V0::Models::RatecardOwner) ? x : ::Io::Flow::V0::Models::RatecardOwner.apply(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            RatecardForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :direction => direction.value,
              :effective_at => effective_at,
              :origination_zones => origination_zones.map { |o| o.to_hash },
              :service => service,
              :number => number,
              :ratecard_owner => ratecard_owner.value
            }
          end

        end

        # Describe list of rates applicable for a lane on the ratecard - defined by
        # origin and destination zone
        class RatecardLane

          attr_reader :id, :ratecard, :currency, :delivered_duty, :shipment_window, :destination, :dim_factor, :fees, :origin, :service, :rates, :rounding, :weight_unit, :distance_unit

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :ratecard, :currency, :delivered_duty, :shipment_window, :destination, :dim_factor, :fees, :origin, :service, :rates, :rounding, :weight_unit, :distance_unit], 'RatecardLane')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @ratecard = (x = opts.delete(:ratecard); x.is_a?(::Io::Flow::V0::Models::RatecardSummary) ? x : ::Io::Flow::V0::Models::RatecardSummary.new(x))
            @currency = HttpClient::Preconditions.assert_class('currency', opts.delete(:currency), String)
            @delivered_duty = (x = opts.delete(:delivered_duty); x.is_a?(::Io::Flow::V0::Models::DeliveredDuty) ? x : ::Io::Flow::V0::Models::DeliveredDuty.apply(x))
            @shipment_window = (x = opts.delete(:shipment_window); x.is_a?(::Io::Flow::V0::Models::ShipmentWindow) ? x : ::Io::Flow::V0::Models::ShipmentWindow.new(x))
            @destination = (x = opts.delete(:destination); x.is_a?(::Io::Flow::V0::Models::Zone) ? x : ::Io::Flow::V0::Models::Zone.new(x))
            @dim_factor = HttpClient::Preconditions.assert_class('dim_factor', opts.delete(:dim_factor), Numeric)
            @fees = HttpClient::Preconditions.assert_class('fees', opts.delete(:fees), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::RatecardFee) ? x : ::Io::Flow::V0::Models::RatecardFee.from_json(x)) }
            @origin = (x = opts.delete(:origin); x.is_a?(::Io::Flow::V0::Models::Zone) ? x : ::Io::Flow::V0::Models::Zone.new(x))
            @service = (x = opts.delete(:service); x.is_a?(::Io::Flow::V0::Models::RatecardServiceSummary) ? x : ::Io::Flow::V0::Models::RatecardServiceSummary.new(x))
            @rates = HttpClient::Preconditions.assert_class('rates', opts.delete(:rates), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::RatecardRate) ? x : ::Io::Flow::V0::Models::RatecardRate.new(x)) }
            @rounding = (x = opts.delete(:rounding); x.is_a?(::Io::Flow::V0::Models::Rounding) ? x : ::Io::Flow::V0::Models::Rounding.new(x))
            @weight_unit = (x = opts.delete(:weight_unit); x.is_a?(::Io::Flow::V0::Models::UnitOfMeasurement) ? x : ::Io::Flow::V0::Models::UnitOfMeasurement.apply(x))
            @distance_unit = (x = opts.delete(:distance_unit); x.is_a?(::Io::Flow::V0::Models::UnitOfMeasurement) ? x : ::Io::Flow::V0::Models::UnitOfMeasurement.apply(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            RatecardLane.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :ratecard => ratecard.to_hash,
              :currency => currency,
              :delivered_duty => delivered_duty.value,
              :shipment_window => shipment_window.to_hash,
              :destination => destination.to_hash,
              :dim_factor => dim_factor,
              :fees => fees.map { |o| o.to_hash },
              :origin => origin.to_hash,
              :service => service.to_hash,
              :rates => rates.map { |o| o.to_hash },
              :rounding => rounding.to_hash,
              :weight_unit => weight_unit.value,
              :distance_unit => distance_unit.value
            }
          end

        end

        class RatecardLaneDeleted < Event

          attr_reader :event_id, :timestamp, :organization, :id

          def initialize(incoming={})
            super(:discriminator => Event::Types::RATECARD_LANE_DELETED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :id], 'RatecardLaneDeleted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            RatecardLaneDeleted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :id => id
            }
          end

        end

        class RatecardLaneForm

          attr_reader :ratecard_id, :currency, :destination, :shipment_window, :delivered_duty, :dim_factor, :fees, :origin, :rounding, :rates, :weight_unit, :distance_unit

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:ratecard_id, :currency, :destination, :shipment_window, :delivered_duty, :dim_factor, :fees, :origin, :rounding, :rates, :weight_unit, :distance_unit], 'RatecardLaneForm')
            @ratecard_id = HttpClient::Preconditions.assert_class('ratecard_id', opts.delete(:ratecard_id), String)
            @currency = HttpClient::Preconditions.assert_class('currency', opts.delete(:currency), String)
            @destination = (x = opts.delete(:destination); x.is_a?(::Io::Flow::V0::Models::Zone) ? x : ::Io::Flow::V0::Models::Zone.new(x))
            @shipment_window = (x = opts.delete(:shipment_window); x.is_a?(::Io::Flow::V0::Models::ShipmentWindow) ? x : ::Io::Flow::V0::Models::ShipmentWindow.new(x))
            @delivered_duty = (x = opts.delete(:delivered_duty); x.is_a?(::Io::Flow::V0::Models::DeliveredDuty) ? x : ::Io::Flow::V0::Models::DeliveredDuty.apply(x))
            @dim_factor = HttpClient::Preconditions.assert_class('dim_factor', opts.delete(:dim_factor), Numeric)
            @fees = HttpClient::Preconditions.assert_class('fees', opts.delete(:fees), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::RatecardFee) ? x : ::Io::Flow::V0::Models::RatecardFee.from_json(x)) }
            @origin = (x = opts.delete(:origin); x.is_a?(::Io::Flow::V0::Models::Zone) ? x : ::Io::Flow::V0::Models::Zone.new(x))
            @rounding = (x = opts.delete(:rounding); x.is_a?(::Io::Flow::V0::Models::Rounding) ? x : ::Io::Flow::V0::Models::Rounding.new(x))
            @rates = HttpClient::Preconditions.assert_class('rates', opts.delete(:rates), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::RatecardRateForm) ? x : ::Io::Flow::V0::Models::RatecardRateForm.new(x)) }
            @weight_unit = (x = opts.delete(:weight_unit); x.is_a?(::Io::Flow::V0::Models::UnitOfMeasurement) ? x : ::Io::Flow::V0::Models::UnitOfMeasurement.apply(x))
            @distance_unit = (x = opts.delete(:distance_unit); x.is_a?(::Io::Flow::V0::Models::UnitOfMeasurement) ? x : ::Io::Flow::V0::Models::UnitOfMeasurement.apply(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            RatecardLaneForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :ratecard_id => ratecard_id,
              :currency => currency,
              :destination => destination.to_hash,
              :shipment_window => shipment_window.to_hash,
              :delivered_duty => delivered_duty.value,
              :dim_factor => dim_factor,
              :fees => fees.map { |o| o.to_hash },
              :origin => origin.to_hash,
              :rounding => rounding.to_hash,
              :rates => rates.map { |o| o.to_hash },
              :weight_unit => weight_unit.value,
              :distance_unit => distance_unit.value
            }
          end

        end

        # Represents a line in a ratecard lane import file to be used with bulk CSV
        # imports of multiple ratecard lanes across different services in a single
        # import file. This would represent a row in each file.
        class RatecardLaneImportForm

          attr_reader :ratecard_owner, :service, :currency, :delivered_duty, :origin, :destination, :shipment_window, :dim_factor, :weight_unit, :distance_unit, :rates

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:ratecard_owner, :service, :currency, :delivered_duty, :origin, :destination, :shipment_window, :dim_factor, :weight_unit, :distance_unit, :rates], 'RatecardLaneImportForm')
            @ratecard_owner = (x = opts.delete(:ratecard_owner); x.is_a?(::Io::Flow::V0::Models::RatecardOwner) ? x : ::Io::Flow::V0::Models::RatecardOwner.apply(x))
            @service = HttpClient::Preconditions.assert_class('service', opts.delete(:service), String)
            @currency = HttpClient::Preconditions.assert_class('currency', opts.delete(:currency), String)
            @delivered_duty = (x = opts.delete(:delivered_duty); x.is_a?(::Io::Flow::V0::Models::DeliveredDuty) ? x : ::Io::Flow::V0::Models::DeliveredDuty.apply(x))
            @origin = (x = opts.delete(:origin); x.is_a?(::Io::Flow::V0::Models::Zone) ? x : ::Io::Flow::V0::Models::Zone.new(x))
            @destination = (x = opts.delete(:destination); x.is_a?(::Io::Flow::V0::Models::Zone) ? x : ::Io::Flow::V0::Models::Zone.new(x))
            @shipment_window = (x = opts.delete(:shipment_window); x.is_a?(::Io::Flow::V0::Models::ShipmentWindow) ? x : ::Io::Flow::V0::Models::ShipmentWindow.new(x))
            @dim_factor = HttpClient::Preconditions.assert_class('dim_factor', HttpClient::Helper.to_big_decimal(opts.delete(:dim_factor)), BigDecimal)
            @weight_unit = (x = opts.delete(:weight_unit); x.is_a?(::Io::Flow::V0::Models::UnitOfMeasurement) ? x : ::Io::Flow::V0::Models::UnitOfMeasurement.apply(x))
            @distance_unit = (x = opts.delete(:distance_unit); x.is_a?(::Io::Flow::V0::Models::UnitOfMeasurement) ? x : ::Io::Flow::V0::Models::UnitOfMeasurement.apply(x))
            @rates = HttpClient::Preconditions.assert_class('rates', opts.delete(:rates), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::RatecardRateForm) ? x : ::Io::Flow::V0::Models::RatecardRateForm.new(x)) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            RatecardLaneImportForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :ratecard_owner => ratecard_owner.value,
              :service => service,
              :currency => currency,
              :delivered_duty => delivered_duty.value,
              :origin => origin.to_hash,
              :destination => destination.to_hash,
              :shipment_window => shipment_window.to_hash,
              :dim_factor => dim_factor.to_f.to_s,
              :weight_unit => weight_unit.value,
              :distance_unit => distance_unit.value,
              :rates => rates.map { |o| o.to_hash }
            }
          end

        end

        class RatecardLaneUpserted < Event

          attr_reader :event_id, :timestamp, :organization, :ratecard_lane

          def initialize(incoming={})
            super(:discriminator => Event::Types::RATECARD_LANE_UPSERTED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :ratecard_lane], 'RatecardLaneUpserted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @ratecard_lane = (x = opts.delete(:ratecard_lane); x.is_a?(::Io::Flow::V0::Models::RatecardLane) ? x : ::Io::Flow::V0::Models::RatecardLane.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            RatecardLaneUpserted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :ratecard_lane => ratecard_lane.to_hash
            }
          end

        end

        class RatecardLaneVersion

          attr_reader :id, :timestamp, :type, :ratecard_lane

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :timestamp, :type, :ratecard_lane], 'RatecardLaneVersion')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::V0::Models::ChangeType) ? x : ::Io::Flow::V0::Models::ChangeType.apply(x))
            @ratecard_lane = (x = opts.delete(:ratecard_lane); x.is_a?(::Io::Flow::V0::Models::RatecardLane) ? x : ::Io::Flow::V0::Models::RatecardLane.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            RatecardLaneVersion.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :timestamp => timestamp,
              :type => type.value,
              :ratecard_lane => ratecard_lane.to_hash
            }
          end

        end

        class RatecardLanesImportRequestData

          attr_reader :id, :source_url, :filename

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :source_url], 'RatecardLanesImportRequestData')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @source_url = HttpClient::Preconditions.assert_class('source_url', opts.delete(:source_url), String)
            @filename = (x = opts.delete(:filename); x.nil? ? nil : HttpClient::Preconditions.assert_class('filename', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            RatecardLanesImportRequestData.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :source_url => source_url,
              :filename => filename
            }
          end

        end

        # Specific line item in a ratecard lane with information on a weight threshold
        # and corresponding amount to charge
        class RatecardRate

          attr_reader :id, :amount, :weight

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :amount, :weight], 'RatecardRate')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @amount = HttpClient::Preconditions.assert_class('amount', opts.delete(:amount), Numeric)
            @weight = HttpClient::Preconditions.assert_class('weight', opts.delete(:weight), Numeric)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            RatecardRate.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :amount => amount,
              :weight => weight
            }
          end

        end

        class RatecardRateForm

          attr_reader :amount, :weight

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:amount, :weight], 'RatecardRateForm')
            @amount = HttpClient::Preconditions.assert_class('amount', opts.delete(:amount), Numeric)
            @weight = HttpClient::Preconditions.assert_class('weight', opts.delete(:weight), Numeric)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            RatecardRateForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :amount => amount,
              :weight => weight
            }
          end

        end

        class RatecardRateVersion

          attr_reader :id, :timestamp, :type, :ratecard_rate

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :timestamp, :type, :ratecard_rate], 'RatecardRateVersion')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::V0::Models::ChangeType) ? x : ::Io::Flow::V0::Models::ChangeType.apply(x))
            @ratecard_rate = (x = opts.delete(:ratecard_rate); x.is_a?(::Io::Flow::V0::Models::RatecardRate) ? x : ::Io::Flow::V0::Models::RatecardRate.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            RatecardRateVersion.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :timestamp => timestamp,
              :type => type.value,
              :ratecard_rate => ratecard_rate.to_hash
            }
          end

        end

        class RatecardReference

          attr_reader :id

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id], 'RatecardReference')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            RatecardReference.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id
            }
          end

        end

        class RatecardRegionReference

          attr_reader :id

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id], 'RatecardRegionReference')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            RatecardRegionReference.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id
            }
          end

        end

        class RatecardServiceSummary

          attr_reader :id, :name, :carrier

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :name, :carrier], 'RatecardServiceSummary')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
            @carrier = (x = opts.delete(:carrier); x.is_a?(::Io::Flow::V0::Models::RatecardCarrierSummary) ? x : ::Io::Flow::V0::Models::RatecardCarrierSummary.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            RatecardServiceSummary.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :name => name,
              :carrier => carrier.to_hash
            }
          end

        end

        class RatecardSummary

          attr_reader :id, :number, :ratecard_owner

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :number, :ratecard_owner], 'RatecardSummary')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @number = HttpClient::Preconditions.assert_class('number', opts.delete(:number), String)
            @ratecard_owner = (x = opts.delete(:ratecard_owner); x.is_a?(::Io::Flow::V0::Models::RatecardOwner) ? x : ::Io::Flow::V0::Models::RatecardOwner.apply(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            RatecardSummary.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :number => number,
              :ratecard_owner => ratecard_owner.value
            }
          end

        end

        class RatecardUpserted < Event

          attr_reader :event_id, :timestamp, :organization, :ratecard

          def initialize(incoming={})
            super(:discriminator => Event::Types::RATECARD_UPSERTED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :ratecard], 'RatecardUpserted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @ratecard = (x = opts.delete(:ratecard); x.is_a?(::Io::Flow::V0::Models::Ratecard) ? x : ::Io::Flow::V0::Models::Ratecard.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            RatecardUpserted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :ratecard => ratecard.to_hash
            }
          end

        end

        class RatecardVersion

          attr_reader :id, :timestamp, :type, :ratecard

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :timestamp, :type, :ratecard], 'RatecardVersion')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::V0::Models::ChangeType) ? x : ::Io::Flow::V0::Models::ChangeType.apply(x))
            @ratecard = (x = opts.delete(:ratecard); x.is_a?(::Io::Flow::V0::Models::Ratecard) ? x : ::Io::Flow::V0::Models::Ratecard.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            RatecardVersion.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :timestamp => timestamp,
              :type => type.value,
              :ratecard => ratecard.to_hash
            }
          end

        end

        # Sent when an order is assigned to a fulfillment center in whole or in part.
        # All assigned fulfillments for all centers will be included on the message.
        class ReadyToFulfill < Event

          attr_reader :event_id, :timestamp, :organization, :order_number, :order, :fulfillments, :fulfillment_item_allocation_details

          def initialize(incoming={})
            super(:discriminator => Event::Types::READY_TO_FULFILL)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :order_number, :order], 'ReadyToFulfill')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @order_number = HttpClient::Preconditions.assert_class('order_number', opts.delete(:order_number), String)
            @order = (x = opts.delete(:order); x.is_a?(::Io::Flow::V0::Models::Order) ? x : ::Io::Flow::V0::Models::Order.new(x))
            @fulfillments = (x = opts.delete(:fulfillments); x.nil? ? nil : HttpClient::Preconditions.assert_class('fulfillments', x, Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::Fulfillment) ? x : ::Io::Flow::V0::Models::Fulfillment.new(x)) })
            @fulfillment_item_allocation_details = (x = opts.delete(:fulfillment_item_allocation_details); x.nil? ? nil : HttpClient::Preconditions.assert_class('fulfillment_item_allocation_details', x, Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::FulfillmentItemAllocationDetails) ? x : ::Io::Flow::V0::Models::FulfillmentItemAllocationDetails.new(x)) })
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ReadyToFulfill.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :order_number => order_number,
              :order => order.to_hash,
              :fulfillments => fulfillments.nil? ? nil : fulfillments.map { |o| o.to_hash },
              :fulfillment_item_allocation_details => fulfillment_item_allocation_details.nil? ? nil : fulfillment_item_allocation_details.map { |o| o.to_hash }
            }
          end

        end

        class ReadyToFulfillDetails

          attr_reader :id, :order_number, :order, :fulfillments, :fulfillment_item_allocation_details

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :order_number, :order], 'ReadyToFulfillDetails')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @order_number = HttpClient::Preconditions.assert_class('order_number', opts.delete(:order_number), String)
            @order = (x = opts.delete(:order); x.is_a?(::Io::Flow::V0::Models::Order) ? x : ::Io::Flow::V0::Models::Order.new(x))
            @fulfillments = (x = opts.delete(:fulfillments); x.nil? ? nil : HttpClient::Preconditions.assert_class('fulfillments', x, Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::Fulfillment) ? x : ::Io::Flow::V0::Models::Fulfillment.new(x)) })
            @fulfillment_item_allocation_details = (x = opts.delete(:fulfillment_item_allocation_details); x.nil? ? nil : HttpClient::Preconditions.assert_class('fulfillment_item_allocation_details', x, Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::FulfillmentItemAllocationDetails) ? x : ::Io::Flow::V0::Models::FulfillmentItemAllocationDetails.new(x)) })
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ReadyToFulfillDetails.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :order_number => order_number,
              :order => order.to_hash,
              :fulfillments => fulfillments.nil? ? nil : fulfillments.map { |o| o.to_hash },
              :fulfillment_item_allocation_details => fulfillment_item_allocation_details.nil? ? nil : fulfillment_item_allocation_details.map { |o| o.to_hash }
            }
          end

        end

        # Sent when an order is assigned to a fulfillment center in whole or in part.
        # All assigned fulfillments for all centers will be included on the message.
        class ReadyToFulfillV2 < Event

          attr_reader :event_id, :timestamp, :organization, :ready_to_fulfill

          def initialize(incoming={})
            super(:discriminator => Event::Types::READY_TO_FULFILL_V2)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :ready_to_fulfill], 'ReadyToFulfillV2')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @ready_to_fulfill = (x = opts.delete(:ready_to_fulfill); x.is_a?(::Io::Flow::V0::Models::ReadyToFulfillDetails) ? x : ::Io::Flow::V0::Models::ReadyToFulfillDetails.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ReadyToFulfillV2.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :ready_to_fulfill => ready_to_fulfill.to_hash
            }
          end

        end

        # Represents an online payment that requires the user to redirect to another
        # site before entering their payment information.
        class RedirectAuthorizationDetails < OnlineAuthorizationDetails

          attr_reader :id, :payment_redirect_url, :confirmation_details

          def initialize(incoming={})
            super(:discriminator => OnlineAuthorizationDetails::Types::REDIRECT_AUTHORIZATION_DETAILS)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :payment_redirect_url], 'RedirectAuthorizationDetails')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @payment_redirect_url = HttpClient::Preconditions.assert_class('payment_redirect_url', opts.delete(:payment_redirect_url), String)
            @confirmation_details = (x = opts.delete(:confirmation_details); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::ConfirmationDetails) ? x : ::Io::Flow::V0::Models::ConfirmationDetails.from_json(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            RedirectAuthorizationDetails.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :id => id,
              :payment_redirect_url => payment_redirect_url,
              :confirmation_details => confirmation_details.nil? ? nil : confirmation_details.to_hash
            }
          end

        end

        # Executes a redirect-based payment based on the provided payment method.
        class RedirectAuthorizationForm < AuthorizationForm

          attr_reader :method, :issuer, :order_number, :amount, :currency, :redirect_urls, :key, :attributes, :ip

          def initialize(incoming={})
            super(:discriminator => AuthorizationForm::Types::REDIRECT_AUTHORIZATION_FORM)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:method, :order_number, :amount, :currency, :redirect_urls], 'RedirectAuthorizationForm')
            @method = HttpClient::Preconditions.assert_class('method', opts.delete(:method), String)
            @issuer = (x = opts.delete(:issuer); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::IssuerReference) ? x : ::Io::Flow::V0::Models::IssuerReference.new(x)))
            @order_number = HttpClient::Preconditions.assert_class('order_number', opts.delete(:order_number), String)
            @amount = HttpClient::Preconditions.assert_class('amount', HttpClient::Helper.to_big_decimal(opts.delete(:amount)), BigDecimal)
            @currency = HttpClient::Preconditions.assert_class('currency', opts.delete(:currency), String)
            @redirect_urls = (x = opts.delete(:redirect_urls); x.is_a?(::Io::Flow::V0::Models::PostPaymentRedirectUrls) ? x : ::Io::Flow::V0::Models::PostPaymentRedirectUrls.new(x))
            @key = (x = opts.delete(:key); x.nil? ? nil : HttpClient::Preconditions.assert_class('key', x, String))
            @attributes = (x = opts.delete(:attributes); x.nil? ? nil : HttpClient::Preconditions.assert_class('attributes', x, Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h })
            @ip = (x = opts.delete(:ip); x.nil? ? nil : HttpClient::Preconditions.assert_class('ip', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            RedirectAuthorizationForm.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :method => method,
              :issuer => issuer.nil? ? nil : issuer.to_hash,
              :order_number => order_number,
              :amount => amount.to_f.to_s,
              :currency => currency,
              :redirect_urls => redirect_urls.to_hash,
              :key => key,
              :attributes => attributes.nil? ? nil : attributes,
              :ip => ip
            }
          end

        end

        # Refunds can be created against either a specific capture or an authorization
        # (in which case we will select 1 or more specific captures against which to
        # execute the refund).
        class Refund

          attr_reader :id, :key, :authorization, :amount, :currency, :requested, :captures, :created_at, :attributes, :status, :base

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :key, :authorization, :amount, :currency, :captures, :created_at], 'Refund')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @key = HttpClient::Preconditions.assert_class('key', opts.delete(:key), String)
            @authorization = (x = opts.delete(:authorization); x.is_a?(::Io::Flow::V0::Models::AuthorizationReference) ? x : ::Io::Flow::V0::Models::AuthorizationReference.new(x))
            @amount = HttpClient::Preconditions.assert_class('amount', HttpClient::Helper.to_big_decimal(opts.delete(:amount)), BigDecimal)
            @currency = HttpClient::Preconditions.assert_class('currency', opts.delete(:currency), String)
            @requested = (x = opts.delete(:requested); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Money) ? x : ::Io::Flow::V0::Models::Money.new(x)))
            @captures = HttpClient::Preconditions.assert_class('captures', opts.delete(:captures), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::RefundCaptureSummary) ? x : ::Io::Flow::V0::Models::RefundCaptureSummary.new(x)) }
            @created_at = HttpClient::Preconditions.assert_class('created_at', HttpClient::Helper.to_date_time_iso8601(opts.delete(:created_at)), DateTime)
            @attributes = (x = opts.delete(:attributes); x.nil? ? nil : HttpClient::Preconditions.assert_class('attributes', x, Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h })
            @status = (x = (x = opts.delete(:status); x.nil? ? "succeeded" : x); x.is_a?(::Io::Flow::V0::Models::RefundStatus) ? x : ::Io::Flow::V0::Models::RefundStatus.apply(x))
            @base = (x = opts.delete(:base); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Money) ? x : ::Io::Flow::V0::Models::Money.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            Refund.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :key => key,
              :authorization => authorization.to_hash,
              :amount => amount.to_f.to_s,
              :currency => currency,
              :requested => requested.nil? ? nil : requested.to_hash,
              :captures => captures.map { |o| o.to_hash },
              :created_at => created_at,
              :attributes => attributes.nil? ? nil : attributes,
              :status => status.value,
              :base => base.nil? ? nil : base.to_hash
            }
          end

        end

        # Refund captures provide the detailed information on the amount refunded
        # against a specific capture
        class RefundCapture

          attr_reader :id, :refund, :capture, :amount, :currency, :base, :status

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :refund, :capture, :amount, :currency, :base], 'RefundCapture')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @refund = (x = opts.delete(:refund); x.is_a?(::Io::Flow::V0::Models::Refund) ? x : ::Io::Flow::V0::Models::Refund.new(x))
            @capture = (x = opts.delete(:capture); x.is_a?(::Io::Flow::V0::Models::Capture) ? x : ::Io::Flow::V0::Models::Capture.new(x))
            @amount = HttpClient::Preconditions.assert_class('amount', HttpClient::Helper.to_big_decimal(opts.delete(:amount)), BigDecimal)
            @currency = HttpClient::Preconditions.assert_class('currency', opts.delete(:currency), String)
            @base = (x = opts.delete(:base); x.is_a?(::Io::Flow::V0::Models::Money) ? x : ::Io::Flow::V0::Models::Money.new(x))
            @status = (x = (x = opts.delete(:status); x.nil? ? "succeeded" : x); x.is_a?(::Io::Flow::V0::Models::RefundStatus) ? x : ::Io::Flow::V0::Models::RefundStatus.apply(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            RefundCapture.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :refund => refund.to_hash,
              :capture => capture.to_hash,
              :amount => amount.to_f.to_s,
              :currency => currency,
              :base => base.to_hash,
              :status => status.value
            }
          end

        end

        # Refund captures provide the detailed information on the amount refunded
        # against a specific capture
        class RefundCaptureSummary

          attr_reader :capture, :amount

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:capture, :amount], 'RefundCaptureSummary')
            @capture = (x = opts.delete(:capture); x.is_a?(::Io::Flow::V0::Models::Capture) ? x : ::Io::Flow::V0::Models::Capture.new(x))
            @amount = HttpClient::Preconditions.assert_class('amount', HttpClient::Helper.to_big_decimal(opts.delete(:amount)), BigDecimal)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            RefundCaptureSummary.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :capture => capture.to_hash,
              :amount => amount.to_f.to_s
            }
          end

        end

        class RefundCaptureUpsertedV2 < Event

          attr_reader :event_id, :timestamp, :organization, :id, :refund_capture

          def initialize(incoming={})
            super(:discriminator => Event::Types::REFUND_CAPTURE_UPSERTED_V2)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :id, :refund_capture], 'RefundCaptureUpsertedV2')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @refund_capture = (x = opts.delete(:refund_capture); x.is_a?(::Io::Flow::V0::Models::RefundCapture) ? x : ::Io::Flow::V0::Models::RefundCapture.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            RefundCaptureUpsertedV2.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :id => id,
              :refund_capture => refund_capture.to_hash
            }
          end

        end

        class RefundDeletedV2 < Event

          attr_reader :event_id, :timestamp, :organization, :refund

          def initialize(incoming={})
            super(:discriminator => Event::Types::REFUND_DELETED_V2)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :refund], 'RefundDeletedV2')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @refund = (x = opts.delete(:refund); x.is_a?(::Io::Flow::V0::Models::Refund) ? x : ::Io::Flow::V0::Models::Refund.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            RefundDeletedV2.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :refund => refund.to_hash
            }
          end

        end

        class RefundError

          attr_reader :code, :messages, :decline_code

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:messages, :decline_code], 'RefundError')
            @code = (x = (x = opts.delete(:code); x.nil? ? "generic_error" : x); x.is_a?(::Io::Flow::V0::Models::GenericErrorCode) ? x : ::Io::Flow::V0::Models::GenericErrorCode.apply(x))
            @messages = HttpClient::Preconditions.assert_class('messages', opts.delete(:messages), Array).map { |v| HttpClient::Preconditions.assert_class('messages', v, String) }
            @decline_code = (x = opts.delete(:decline_code); x.is_a?(::Io::Flow::V0::Models::RefundDeclineCode) ? x : ::Io::Flow::V0::Models::RefundDeclineCode.apply(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            RefundError.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :code => code.value,
              :messages => messages,
              :decline_code => decline_code.value
            }
          end

        end

        # Refund actually transfers funds. You can refund as many times as you'd like up
        # until the total amount of captured funds has been refunded. Note when creating
        # a refund you can specify either an order authorization id, a capture id, or an
        # order number (or all of them as long as they match).
        class RefundForm

          attr_reader :authorization_id, :capture_id, :order_number, :key, :amount, :currency, :rma_key, :attributes

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @authorization_id = (x = opts.delete(:authorization_id); x.nil? ? nil : HttpClient::Preconditions.assert_class('authorization_id', x, String))
            @capture_id = (x = opts.delete(:capture_id); x.nil? ? nil : HttpClient::Preconditions.assert_class('capture_id', x, String))
            @order_number = (x = opts.delete(:order_number); x.nil? ? nil : HttpClient::Preconditions.assert_class('order_number', x, String))
            @key = (x = opts.delete(:key); x.nil? ? nil : HttpClient::Preconditions.assert_class('key', x, String))
            @amount = (x = opts.delete(:amount); x.nil? ? nil : HttpClient::Preconditions.assert_class('amount', HttpClient::Helper.to_big_decimal(x), BigDecimal))
            @currency = (x = opts.delete(:currency); x.nil? ? nil : HttpClient::Preconditions.assert_class('currency', x, String))
            @rma_key = (x = opts.delete(:rma_key); x.nil? ? nil : HttpClient::Preconditions.assert_class('rma_key', x, String))
            @attributes = (x = opts.delete(:attributes); x.nil? ? nil : HttpClient::Preconditions.assert_class('attributes', x, Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h })
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            RefundForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :authorization_id => authorization_id,
              :capture_id => capture_id,
              :order_number => order_number,
              :key => key,
              :amount => amount.to_f.to_s,
              :currency => currency,
              :rma_key => rma_key,
              :attributes => attributes.nil? ? nil : attributes
            }
          end

        end

        class RefundIdentifier

          attr_reader :id, :refund, :name, :identifier, :primary

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :refund, :name, :identifier, :primary], 'RefundIdentifier')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @refund = (x = opts.delete(:refund); x.is_a?(::Io::Flow::V0::Models::RefundReference) ? x : ::Io::Flow::V0::Models::RefundReference.new(x))
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
            @identifier = HttpClient::Preconditions.assert_class('identifier', opts.delete(:identifier), String)
            @primary = HttpClient::Preconditions.assert_boolean('primary', opts.delete(:primary))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            RefundIdentifier.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :refund => refund.to_hash,
              :name => name,
              :identifier => identifier,
              :primary => primary
            }
          end

        end

        class RefundIdentifierDeleted < Event

          attr_reader :event_id, :timestamp, :organization, :identifier

          def initialize(incoming={})
            super(:discriminator => Event::Types::REFUND_IDENTIFIER_DELETED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :identifier], 'RefundIdentifierDeleted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @identifier = (x = opts.delete(:identifier); x.is_a?(::Io::Flow::V0::Models::RefundIdentifier) ? x : ::Io::Flow::V0::Models::RefundIdentifier.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            RefundIdentifierDeleted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :identifier => identifier.to_hash
            }
          end

        end

        class RefundIdentifierUpserted < Event

          attr_reader :event_id, :timestamp, :organization, :identifier

          def initialize(incoming={})
            super(:discriminator => Event::Types::REFUND_IDENTIFIER_UPSERTED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :identifier], 'RefundIdentifierUpserted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @identifier = (x = opts.delete(:identifier); x.is_a?(::Io::Flow::V0::Models::RefundIdentifier) ? x : ::Io::Flow::V0::Models::RefundIdentifier.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            RefundIdentifierUpserted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :identifier => identifier.to_hash
            }
          end

        end

        # For merchant of record authorizations, we provide a summary of refund
        # information primarily to support customer service workflow.
        class RefundOrderSummary

          attr_reader :order_number, :currency, :captured, :refunded, :amounts

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:order_number, :currency, :captured, :refunded, :amounts], 'RefundOrderSummary')
            @order_number = HttpClient::Preconditions.assert_class('order_number', opts.delete(:order_number), String)
            @currency = HttpClient::Preconditions.assert_class('currency', opts.delete(:currency), String)
            @captured = HttpClient::Preconditions.assert_class('captured', HttpClient::Helper.to_big_decimal(opts.delete(:captured)), BigDecimal)
            @refunded = HttpClient::Preconditions.assert_class('refunded', HttpClient::Helper.to_big_decimal(opts.delete(:refunded)), BigDecimal)
            @amounts = (x = opts.delete(:amounts); x.is_a?(::Io::Flow::V0::Models::RefundOrderSummaryAmounts) ? x : ::Io::Flow::V0::Models::RefundOrderSummaryAmounts.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            RefundOrderSummary.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :order_number => order_number,
              :currency => currency,
              :captured => captured.to_f.to_s,
              :refunded => refunded.to_f.to_s,
              :amounts => amounts.to_hash
            }
          end

        end

        # Detailed examples of amount to refund following common e-commerce use cases.
        class RefundOrderSummaryAmounts

          attr_reader :balance, :balance_excluding_shipping, :shipping

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:balance], 'RefundOrderSummaryAmounts')
            @balance = HttpClient::Preconditions.assert_class('balance', HttpClient::Helper.to_big_decimal(opts.delete(:balance)), BigDecimal)
            @balance_excluding_shipping = (x = opts.delete(:balance_excluding_shipping); x.nil? ? nil : HttpClient::Preconditions.assert_class('balance_excluding_shipping', HttpClient::Helper.to_big_decimal(x), BigDecimal))
            @shipping = (x = opts.delete(:shipping); x.nil? ? nil : HttpClient::Preconditions.assert_class('shipping', HttpClient::Helper.to_big_decimal(x), BigDecimal))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            RefundOrderSummaryAmounts.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :balance => balance.to_f.to_s,
              :balance_excluding_shipping => balance_excluding_shipping.to_f.to_s,
              :shipping => shipping.to_f.to_s
            }
          end

        end

        class RefundReference

          attr_reader :id, :key

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :key], 'RefundReference')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @key = HttpClient::Preconditions.assert_class('key', opts.delete(:key), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            RefundReference.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :key => key
            }
          end

        end

        class RefundUpsertedV2 < Event

          attr_reader :event_id, :timestamp, :organization, :id, :refund

          def initialize(incoming={})
            super(:discriminator => Event::Types::REFUND_UPSERTED_V2)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :id, :refund], 'RefundUpsertedV2')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @refund = (x = opts.delete(:refund); x.is_a?(::Io::Flow::V0::Models::Refund) ? x : ::Io::Flow::V0::Models::Refund.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            RefundUpsertedV2.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :id => id,
              :refund => refund.to_hash
            }
          end

        end

        class RefundVersion

          attr_reader :id, :timestamp, :type, :refund

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :timestamp, :type, :refund], 'RefundVersion')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::V0::Models::ChangeType) ? x : ::Io::Flow::V0::Models::ChangeType.apply(x))
            @refund = (x = opts.delete(:refund); x.is_a?(::Io::Flow::V0::Models::Refund) ? x : ::Io::Flow::V0::Models::Refund.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            RefundVersion.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :timestamp => timestamp,
              :type => type.value,
              :refund => refund.to_hash
            }
          end

        end

        # A region represents a geographic area of the world. Regions can be countries,
        # continents or other political areas (like the Eurozone). See
        # https://api.flow.io/reference/regions
        class Region

          attr_reader :id, :name, :countries, :currencies, :languages, :measurement_systems, :timezones

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :name, :countries, :currencies, :languages, :measurement_systems, :timezones], 'Region')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
            @countries = HttpClient::Preconditions.assert_class('countries', opts.delete(:countries), Array).map { |v| HttpClient::Preconditions.assert_class('countries', v, String) }
            @currencies = HttpClient::Preconditions.assert_class('currencies', opts.delete(:currencies), Array).map { |v| HttpClient::Preconditions.assert_class('currencies', v, String) }
            @languages = HttpClient::Preconditions.assert_class('languages', opts.delete(:languages), Array).map { |v| HttpClient::Preconditions.assert_class('languages', v, String) }
            @measurement_systems = HttpClient::Preconditions.assert_class('measurement_systems', opts.delete(:measurement_systems), Array).map { |v| HttpClient::Preconditions.assert_class('measurement_systems', v, String) }
            @timezones = HttpClient::Preconditions.assert_class('timezones', opts.delete(:timezones), Array).map { |v| HttpClient::Preconditions.assert_class('timezones', v, String) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            Region.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :name => name,
              :countries => countries,
              :currencies => currencies,
              :languages => languages,
              :measurement_systems => measurement_systems,
              :timezones => timezones
            }
          end

        end

        class RegionReference

          attr_reader :id

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id], 'RegionReference')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            RegionReference.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id
            }
          end

        end

        class RegionSetting

          attr_reader :id, :region, :status

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :region, :status], 'RegionSetting')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @region = HttpClient::Preconditions.assert_class('region', opts.delete(:region), String)
            @status = (x = opts.delete(:status); x.is_a?(::Io::Flow::V0::Models::AvailabilityStatus) ? x : ::Io::Flow::V0::Models::AvailabilityStatus.apply(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            RegionSetting.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :region => region,
              :status => status.value
            }
          end

        end

        class RegionSettingForm

          attr_reader :status

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:status], 'RegionSettingForm')
            @status = (x = opts.delete(:status); x.is_a?(::Io::Flow::V0::Models::AvailabilityStatus) ? x : ::Io::Flow::V0::Models::AvailabilityStatus.apply(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            RegionSettingForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :status => status.value
            }
          end

        end

        class RemoteAreaRatecardFee < RatecardFee

          attr_reader :amount

          def initialize(incoming={})
            super(:discriminator => RatecardFee::Types::REMOTE_AREA_RATECARD_FEE)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:amount], 'RemoteAreaRatecardFee')
            @amount = (x = opts.delete(:amount); x.is_a?(::Io::Flow::V0::Models::Money) ? x : ::Io::Flow::V0::Models::Money.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            RemoteAreaRatecardFee.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :amount => amount.to_hash
            }
          end

        end

        class RemoteAreaServiceFee < ServiceFee

          attr_reader :amount

          def initialize(incoming={})
            super(:discriminator => ServiceFee::Types::REMOTE_AREA_SERVICE_FEE)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:amount], 'RemoteAreaServiceFee')
            @amount = (x = opts.delete(:amount); x.is_a?(::Io::Flow::V0::Models::Money) ? x : ::Io::Flow::V0::Models::Money.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            RemoteAreaServiceFee.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :amount => amount.to_hash
            }
          end

        end

        class RepeatDaily < RepeatSchedule

          attr_reader :interval

          def initialize(incoming={})
            super(:discriminator => RepeatSchedule::Types::REPEAT_DAILY)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:interval], 'RepeatDaily')
            @interval = HttpClient::Preconditions.assert_class('interval', opts.delete(:interval), Integer)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            RepeatDaily.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :interval => interval
            }
          end

        end

        class RepeatHourly < RepeatSchedule

          attr_reader :interval

          def initialize(incoming={})
            super(:discriminator => RepeatSchedule::Types::REPEAT_HOURLY)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:interval], 'RepeatHourly')
            @interval = HttpClient::Preconditions.assert_class('interval', opts.delete(:interval), Integer)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            RepeatHourly.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :interval => interval
            }
          end

        end

        # Monthly on the {day} of each {interval} month. Note if you specify a day > 28
        # and the month does not have that day, the repeat schedule is assumed to be the
        # last day of the month. Common examples are: Monthly on the 1st, monthly on the
        # 15th and 31st, every 3 months on the 1st, etc.
        class RepeatMonthly < RepeatSchedule

          attr_reader :interval, :days

          def initialize(incoming={})
            super(:discriminator => RepeatSchedule::Types::REPEAT_MONTHLY)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:interval, :days], 'RepeatMonthly')
            @interval = HttpClient::Preconditions.assert_class('interval', opts.delete(:interval), Integer)
            @days = HttpClient::Preconditions.assert_class('days', opts.delete(:days), Array).map { |v| HttpClient::Preconditions.assert_class('days', v, Integer) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            RepeatMonthly.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :interval => interval,
              :days => days
            }
          end

        end

        class RepeatWeekly < RepeatSchedule

          attr_reader :interval, :days_of_week

          def initialize(incoming={})
            super(:discriminator => RepeatSchedule::Types::REPEAT_WEEKLY)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:interval, :days_of_week], 'RepeatWeekly')
            @interval = HttpClient::Preconditions.assert_class('interval', opts.delete(:interval), Integer)
            @days_of_week = HttpClient::Preconditions.assert_class('days_of_week', opts.delete(:days_of_week), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::DayOfWeek) ? x : ::Io::Flow::V0::Models::DayOfWeek.apply(x)) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            RepeatWeekly.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :interval => interval,
              :days_of_week => days_of_week.map { |o| o.value }
            }
          end

        end

        # Inventory reservation for a set of items in organization that potentially
        # expires at specified date/time
        class Reservation

          attr_reader :id, :key, :order, :items, :reserved_until

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :key, :items], 'Reservation')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @key = HttpClient::Preconditions.assert_class('key', opts.delete(:key), String)
            @order = (x = opts.delete(:order); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::ReservationOrderReference) ? x : ::Io::Flow::V0::Models::ReservationOrderReference.new(x)))
            @items = HttpClient::Preconditions.assert_class('items', opts.delete(:items), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::ReservationItem) ? x : ::Io::Flow::V0::Models::ReservationItem.new(x)) }
            @reserved_until = (x = opts.delete(:reserved_until); x.nil? ? nil : HttpClient::Preconditions.assert_class('reserved_until', HttpClient::Helper.to_date_time_iso8601(x), DateTime))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            Reservation.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :key => key,
              :order => order.nil? ? nil : order.to_hash,
              :items => items.map { |o| o.to_hash },
              :reserved_until => reserved_until
            }
          end

        end

        class ReservationForm

          attr_reader :order_number, :items

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:items], 'ReservationForm')
            @order_number = (x = opts.delete(:order_number); x.nil? ? nil : HttpClient::Preconditions.assert_class('order_number', x, String))
            @items = HttpClient::Preconditions.assert_class('items', opts.delete(:items), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::ReservationItemForm) ? x : ::Io::Flow::V0::Models::ReservationItemForm.new(x)) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ReservationForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :order_number => order_number,
              :items => items.map { |o| o.to_hash }
            }
          end

        end

        class ReservationItem

          attr_reader :item, :quantity

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:item, :quantity], 'ReservationItem')
            @item = (x = opts.delete(:item); x.is_a?(::Io::Flow::V0::Models::ReservationItemReference) ? x : ::Io::Flow::V0::Models::ReservationItemReference.new(x))
            @quantity = HttpClient::Preconditions.assert_class('quantity', opts.delete(:quantity), Integer)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ReservationItem.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :item => item.to_hash,
              :quantity => quantity
            }
          end

        end

        class ReservationItemForm

          attr_reader :item_number, :quantity

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:item_number, :quantity], 'ReservationItemForm')
            @item_number = HttpClient::Preconditions.assert_class('item_number', opts.delete(:item_number), String)
            @quantity = HttpClient::Preconditions.assert_class('quantity', opts.delete(:quantity), Integer)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ReservationItemForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :item_number => item_number,
              :quantity => quantity
            }
          end

        end

        class ReservationItemReference

          attr_reader :number

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:number], 'ReservationItemReference')
            @number = HttpClient::Preconditions.assert_class('number', opts.delete(:number), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ReservationItemReference.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :number => number
            }
          end

        end

        class ReservationOrderReference

          attr_reader :number

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:number], 'ReservationOrderReference')
            @number = HttpClient::Preconditions.assert_class('number', opts.delete(:number), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ReservationOrderReference.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :number => number
            }
          end

        end

        class Return

          attr_reader :id, :key, :order, :service, :items, :labels, :origin, :destination, :source, :tracking_status, :tracking_status_timestamp, :carrier_tracking_number

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :key, :service, :items, :origin, :destination, :source], 'Return')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @key = HttpClient::Preconditions.assert_class('key', opts.delete(:key), String)
            @order = (x = opts.delete(:order); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::ReturnOrderReference) ? x : ::Io::Flow::V0::Models::ReturnOrderReference.new(x)))
            @service = (x = opts.delete(:service); x.is_a?(::Io::Flow::V0::Models::ServiceSummary) ? x : ::Io::Flow::V0::Models::ServiceSummary.new(x))
            @items = HttpClient::Preconditions.assert_class('items', opts.delete(:items), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::ReturnLineItem) ? x : ::Io::Flow::V0::Models::ReturnLineItem.new(x)) }
            @labels = (x = opts.delete(:labels); x.nil? ? nil : HttpClient::Preconditions.assert_class('labels', x, Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::ShippingLabel) ? x : ::Io::Flow::V0::Models::ShippingLabel.new(x)) })
            @origin = (x = opts.delete(:origin); x.is_a?(::Io::Flow::V0::Models::ShippingAddress) ? x : ::Io::Flow::V0::Models::ShippingAddress.new(x))
            @destination = (x = opts.delete(:destination); x.is_a?(::Io::Flow::V0::Models::ShippingAddress) ? x : ::Io::Flow::V0::Models::ShippingAddress.new(x))
            @source = (x = opts.delete(:source); x.is_a?(::Io::Flow::V0::Models::ReturnSource) ? x : ::Io::Flow::V0::Models::ReturnSource.from_json(x))
            @tracking_status = (x = opts.delete(:tracking_status); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::ReturnTrackingStatus) ? x : ::Io::Flow::V0::Models::ReturnTrackingStatus.apply(x)))
            @tracking_status_timestamp = (x = opts.delete(:tracking_status_timestamp); x.nil? ? nil : HttpClient::Preconditions.assert_class('tracking_status_timestamp', HttpClient::Helper.to_date_time_iso8601(x), DateTime))
            @carrier_tracking_number = (x = opts.delete(:carrier_tracking_number); x.nil? ? nil : HttpClient::Preconditions.assert_class('carrier_tracking_number', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            Return.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :key => key,
              :order => order.nil? ? nil : order.to_hash,
              :service => service.to_hash,
              :items => items.map { |o| o.to_hash },
              :labels => labels.nil? ? nil : labels.map { |o| o.to_hash },
              :origin => origin.to_hash,
              :destination => destination.to_hash,
              :source => source.to_hash,
              :tracking_status => tracking_status.nil? ? nil : tracking_status.value,
              :tracking_status_timestamp => tracking_status_timestamp,
              :carrier_tracking_number => carrier_tracking_number
            }
          end

        end

        class ReturnDeleted < Event

          attr_reader :event_id, :timestamp, :id

          def initialize(incoming={})
            super(:discriminator => Event::Types::RETURN_DELETED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :id], 'ReturnDeleted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ReturnDeleted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :id => id
            }
          end

        end

        class ReturnDeletedV2 < Event

          attr_reader :event_id, :timestamp, :organization, :return_

          def initialize(incoming={})
            super(:discriminator => Event::Types::RETURN_DELETED_V2)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :return_], 'ReturnDeletedV2')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @return_ = (x = opts.delete(:return); x.is_a?(::Io::Flow::V0::Models::Return) ? x : ::Io::Flow::V0::Models::Return.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ReturnDeletedV2.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :return => return_.to_hash
            }
          end

        end

        class ReturnForm

          attr_reader :items, :tier_id, :order_number, :service, :destination, :key, :origin, :center_key, :source, :tracking_status, :tracking_status_timestamp, :carrier_tracking_number

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:items], 'ReturnForm')
            @items = HttpClient::Preconditions.assert_class('items', opts.delete(:items), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::ReturnLineItem) ? x : ::Io::Flow::V0::Models::ReturnLineItem.new(x)) }
            @tier_id = (x = opts.delete(:tier_id); x.nil? ? nil : HttpClient::Preconditions.assert_class('tier_id', x, String))
            @order_number = (x = opts.delete(:order_number); x.nil? ? nil : HttpClient::Preconditions.assert_class('order_number', x, String))
            @service = (x = opts.delete(:service); x.nil? ? nil : HttpClient::Preconditions.assert_class('service', x, String))
            @destination = (x = opts.delete(:destination); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::ShippingAddress) ? x : ::Io::Flow::V0::Models::ShippingAddress.new(x)))
            @key = (x = opts.delete(:key); x.nil? ? nil : HttpClient::Preconditions.assert_class('key', x, String))
            @origin = (x = opts.delete(:origin); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::ShippingAddress) ? x : ::Io::Flow::V0::Models::ShippingAddress.new(x)))
            @center_key = (x = opts.delete(:center_key); x.nil? ? nil : HttpClient::Preconditions.assert_class('center_key', x, String))
            @source = (x = opts.delete(:source); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::ReturnSource) ? x : ::Io::Flow::V0::Models::ReturnSource.from_json(x)))
            @tracking_status = (x = opts.delete(:tracking_status); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::ReturnTrackingStatus) ? x : ::Io::Flow::V0::Models::ReturnTrackingStatus.apply(x)))
            @tracking_status_timestamp = (x = opts.delete(:tracking_status_timestamp); x.nil? ? nil : HttpClient::Preconditions.assert_class('tracking_status_timestamp', HttpClient::Helper.to_date_time_iso8601(x), DateTime))
            @carrier_tracking_number = (x = opts.delete(:carrier_tracking_number); x.nil? ? nil : HttpClient::Preconditions.assert_class('carrier_tracking_number', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ReturnForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :items => items.map { |o| o.to_hash },
              :tier_id => tier_id,
              :order_number => order_number,
              :service => service,
              :destination => destination.nil? ? nil : destination.to_hash,
              :key => key,
              :origin => origin.nil? ? nil : origin.to_hash,
              :center_key => center_key,
              :source => source.nil? ? nil : source.to_hash,
              :tracking_status => tracking_status.nil? ? nil : tracking_status.value,
              :tracking_status_timestamp => tracking_status_timestamp,
              :carrier_tracking_number => carrier_tracking_number
            }
          end

        end

        class ReturnItemReference

          attr_reader :number

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:number], 'ReturnItemReference')
            @number = HttpClient::Preconditions.assert_class('number', opts.delete(:number), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ReturnItemReference.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :number => number
            }
          end

        end

        class ReturnLineItem

          attr_reader :item_number, :order_number, :quantity, :reason, :notes, :attributes

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:item_number, :quantity], 'ReturnLineItem')
            @item_number = HttpClient::Preconditions.assert_class('item_number', opts.delete(:item_number), String)
            @order_number = (x = opts.delete(:order_number); x.nil? ? nil : HttpClient::Preconditions.assert_class('order_number', x, String))
            @quantity = HttpClient::Preconditions.assert_class('quantity', opts.delete(:quantity), Integer)
            @reason = (x = opts.delete(:reason); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::ReturnReason) ? x : ::Io::Flow::V0::Models::ReturnReason.new(x)))
            @notes = (x = opts.delete(:notes); x.nil? ? nil : HttpClient::Preconditions.assert_class('notes', x, String))
            @attributes = (x = opts.delete(:attributes); x.nil? ? nil : HttpClient::Preconditions.assert_class('attributes', x, Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h })
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ReturnLineItem.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :item_number => item_number,
              :order_number => order_number,
              :quantity => quantity,
              :reason => reason.nil? ? nil : reason.to_hash,
              :notes => notes,
              :attributes => attributes.nil? ? nil : attributes
            }
          end

        end

        class ReturnOrderReference

          attr_reader :number

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:number], 'ReturnOrderReference')
            @number = HttpClient::Preconditions.assert_class('number', opts.delete(:number), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ReturnOrderReference.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :number => number
            }
          end

        end

        class ReturnPackageRatecardFee < RatecardFee

          attr_reader :amount

          def initialize(incoming={})
            super(:discriminator => RatecardFee::Types::RETURN_PACKAGE_RATECARD_FEE)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:amount], 'ReturnPackageRatecardFee')
            @amount = HttpClient::Preconditions.assert_class('amount', HttpClient::Helper.to_big_decimal(opts.delete(:amount)), BigDecimal)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ReturnPackageRatecardFee.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :amount => amount.to_f.to_s
            }
          end

        end

        # A global return policy allows the user to select 1 or more items by query and
        # to globally mark those items as non-returnable
        class ReturnPolicy

          attr_reader :id, :q, :query, :status, :description, :statistics

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :q, :query, :status, :statistics], 'ReturnPolicy')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @q = HttpClient::Preconditions.assert_class('q', opts.delete(:q), String)
            @query = (x = opts.delete(:query); x.is_a?(::Io::Flow::V0::Models::Query) ? x : ::Io::Flow::V0::Models::Query.new(x))
            @status = (x = opts.delete(:status); x.is_a?(::Io::Flow::V0::Models::ReturnItemStatus) ? x : ::Io::Flow::V0::Models::ReturnItemStatus.apply(x))
            @description = (x = opts.delete(:description); x.nil? ? nil : HttpClient::Preconditions.assert_class('description', x, String))
            @statistics = (x = opts.delete(:statistics); x.is_a?(::Io::Flow::V0::Models::ReturnPolicyStatistic) ? x : ::Io::Flow::V0::Models::ReturnPolicyStatistic.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ReturnPolicy.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :q => q,
              :query => query.to_hash,
              :status => status.value,
              :description => description,
              :statistics => statistics.to_hash
            }
          end

        end

        class ReturnPolicyForm

          attr_reader :q, :description

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:q], 'ReturnPolicyForm')
            @q = HttpClient::Preconditions.assert_class('q', opts.delete(:q), String)
            @description = (x = opts.delete(:description); x.nil? ? nil : HttpClient::Preconditions.assert_class('description', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ReturnPolicyForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :q => q,
              :description => description
            }
          end

        end

        class ReturnPolicyItemResult

          attr_reader :id, :organization_id, :catalog_item_id, :return_policy_id, :status

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :organization_id, :catalog_item_id, :return_policy_id, :status], 'ReturnPolicyItemResult')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @organization_id = HttpClient::Preconditions.assert_class('organization_id', opts.delete(:organization_id), String)
            @catalog_item_id = HttpClient::Preconditions.assert_class('catalog_item_id', opts.delete(:catalog_item_id), String)
            @return_policy_id = HttpClient::Preconditions.assert_class('return_policy_id', opts.delete(:return_policy_id), String)
            @status = (x = opts.delete(:status); x.is_a?(::Io::Flow::V0::Models::ReturnItemStatus) ? x : ::Io::Flow::V0::Models::ReturnItemStatus.apply(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ReturnPolicyItemResult.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :organization_id => organization_id,
              :catalog_item_id => catalog_item_id,
              :return_policy_id => return_policy_id,
              :status => status.value
            }
          end

        end

        class ReturnPolicyStatistic

          attr_reader :state, :number_items

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:state, :number_items], 'ReturnPolicyStatistic')
            @state = (x = opts.delete(:state); x.is_a?(::Io::Flow::V0::Models::ReturnPolicyState) ? x : ::Io::Flow::V0::Models::ReturnPolicyState.apply(x))
            @number_items = HttpClient::Preconditions.assert_class('number_items', opts.delete(:number_items), Integer)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ReturnPolicyStatistic.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :state => state.value,
              :number_items => number_items
            }
          end

        end

        class ReturnPolicyVersion

          attr_reader :id, :timestamp, :type, :return_policy

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :timestamp, :type, :return_policy], 'ReturnPolicyVersion')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::V0::Models::ChangeType) ? x : ::Io::Flow::V0::Models::ChangeType.apply(x))
            @return_policy = (x = opts.delete(:return_policy); x.is_a?(::Io::Flow::V0::Models::ReturnPolicy) ? x : ::Io::Flow::V0::Models::ReturnPolicy.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ReturnPolicyVersion.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :timestamp => timestamp,
              :type => type.value,
              :return_policy => return_policy.to_hash
            }
          end

        end

        class ReturnReason

          attr_reader :name

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:name], 'ReturnReason')
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ReturnReason.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :name => name
            }
          end

        end

        class ReturnReasonForm

          attr_reader :name

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = (x = opts.delete(:name); x.nil? ? nil : HttpClient::Preconditions.assert_class('name', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ReturnReasonForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :name => name
            }
          end

        end

        class ReturnReasonPutForm

          attr_reader :name

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @name = (x = opts.delete(:name); x.nil? ? nil : HttpClient::Preconditions.assert_class('name', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ReturnReasonPutForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :name => name
            }
          end

        end

        class ReturnSourceExternalVendor < ReturnSource

          attr_reader :key

          def initialize(incoming={})
            super(:discriminator => ReturnSource::Types::RETURN_SOURCE_EXTERNAL_VENDOR)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:key], 'ReturnSourceExternalVendor')
            @key = HttpClient::Preconditions.assert_class('key', opts.delete(:key), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ReturnSourceExternalVendor.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :key => key
            }
          end

        end

        class ReturnSourceFlow < ReturnSource

          attr_reader :attributes

          def initialize(incoming={})
            super(:discriminator => ReturnSource::Types::RETURN_SOURCE_FLOW)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @attributes = (x = opts.delete(:attributes); x.nil? ? nil : HttpClient::Preconditions.assert_class('attributes', x, Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h })
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ReturnSourceFlow.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :attributes => attributes.nil? ? nil : attributes
            }
          end

        end

        class ReturnUpserted < Event

          attr_reader :event_id, :timestamp, :id, :organization, :destination, :items, :key, :labels, :service, :origin

          def initialize(incoming={})
            super(:discriminator => Event::Types::RETURN_UPSERTED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :id, :organization, :destination, :items, :key, :service, :origin], 'ReturnUpserted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @destination = (x = opts.delete(:destination); x.is_a?(::Io::Flow::V0::Models::ShippingAddress) ? x : ::Io::Flow::V0::Models::ShippingAddress.new(x))
            @items = HttpClient::Preconditions.assert_class('items', opts.delete(:items), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::ReturnLineItem) ? x : ::Io::Flow::V0::Models::ReturnLineItem.new(x)) }
            @key = HttpClient::Preconditions.assert_class('key', opts.delete(:key), String)
            @labels = (x = opts.delete(:labels); x.nil? ? nil : HttpClient::Preconditions.assert_class('labels', x, Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::ShippingLabel) ? x : ::Io::Flow::V0::Models::ShippingLabel.new(x)) })
            @service = HttpClient::Preconditions.assert_class('service', opts.delete(:service), String)
            @origin = (x = opts.delete(:origin); x.is_a?(::Io::Flow::V0::Models::ShippingAddress) ? x : ::Io::Flow::V0::Models::ShippingAddress.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ReturnUpserted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :id => id,
              :organization => organization,
              :destination => destination.to_hash,
              :items => items.map { |o| o.to_hash },
              :key => key,
              :labels => labels.nil? ? nil : labels.map { |o| o.to_hash },
              :service => service,
              :origin => origin.to_hash
            }
          end

        end

        class ReturnUpsertedV2 < Event

          attr_reader :event_id, :timestamp, :organization, :return_

          def initialize(incoming={})
            super(:discriminator => Event::Types::RETURN_UPSERTED_V2)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :return_], 'ReturnUpsertedV2')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @return_ = (x = opts.delete(:return); x.is_a?(::Io::Flow::V0::Models::Return) ? x : ::Io::Flow::V0::Models::Return.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ReturnUpsertedV2.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :return => return_.to_hash
            }
          end

        end

        class ReturnVersion

          attr_reader :id, :timestamp, :type, :return_

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :timestamp, :type, :return_], 'ReturnVersion')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::V0::Models::ChangeType) ? x : ::Io::Flow::V0::Models::ChangeType.apply(x))
            @return_ = (x = opts.delete(:return); x.is_a?(::Io::Flow::V0::Models::Return) ? x : ::Io::Flow::V0::Models::Return.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ReturnVersion.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :timestamp => timestamp,
              :type => type.value,
              :return => return_.to_hash
            }
          end

        end

        # A reversal is used to clear an authorization (full or partial).
        class Reversal

          attr_reader :id, :key, :authorization, :status, :amount, :currency, :requested, :created_at, :attributes, :base

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :key, :authorization, :status, :amount, :currency, :requested, :created_at, :attributes], 'Reversal')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @key = HttpClient::Preconditions.assert_class('key', opts.delete(:key), String)
            @authorization = (x = opts.delete(:authorization); x.is_a?(::Io::Flow::V0::Models::AuthorizationReference) ? x : ::Io::Flow::V0::Models::AuthorizationReference.new(x))
            @status = (x = opts.delete(:status); x.is_a?(::Io::Flow::V0::Models::ReversalStatus) ? x : ::Io::Flow::V0::Models::ReversalStatus.apply(x))
            @amount = HttpClient::Preconditions.assert_class('amount', HttpClient::Helper.to_big_decimal(opts.delete(:amount)), BigDecimal)
            @currency = HttpClient::Preconditions.assert_class('currency', opts.delete(:currency), String)
            @requested = (x = opts.delete(:requested); x.is_a?(::Io::Flow::V0::Models::Money) ? x : ::Io::Flow::V0::Models::Money.new(x))
            @created_at = HttpClient::Preconditions.assert_class('created_at', HttpClient::Helper.to_date_time_iso8601(opts.delete(:created_at)), DateTime)
            @attributes = HttpClient::Preconditions.assert_class('attributes', opts.delete(:attributes), Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h }
            @base = (x = opts.delete(:base); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Money) ? x : ::Io::Flow::V0::Models::Money.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            Reversal.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :key => key,
              :authorization => authorization.to_hash,
              :status => status.value,
              :amount => amount.to_f.to_s,
              :currency => currency,
              :requested => requested.to_hash,
              :created_at => created_at,
              :attributes => attributes,
              :base => base.nil? ? nil : base.to_hash
            }
          end

        end

        class ReversalDeleted < Event

          attr_reader :event_id, :timestamp, :organization, :reversal

          def initialize(incoming={})
            super(:discriminator => Event::Types::REVERSAL_DELETED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :reversal], 'ReversalDeleted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @reversal = (x = opts.delete(:reversal); x.is_a?(::Io::Flow::V0::Models::Reversal) ? x : ::Io::Flow::V0::Models::Reversal.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ReversalDeleted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :reversal => reversal.to_hash
            }
          end

        end

        # Details for why a reversal could not be created
        class ReversalError

          attr_reader :code, :messages, :codes

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:messages, :codes], 'ReversalError')
            @code = HttpClient::Preconditions.assert_class('code', (x = opts.delete(:code); x.nil? ? "reversal_error" : x), String)
            @messages = HttpClient::Preconditions.assert_class('messages', opts.delete(:messages), Array).map { |v| HttpClient::Preconditions.assert_class('messages', v, String) }
            @codes = HttpClient::Preconditions.assert_class('codes', opts.delete(:codes), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::ReversalErrorCode) ? x : ::Io::Flow::V0::Models::ReversalErrorCode.apply(x)) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ReversalError.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :code => code,
              :messages => messages,
              :codes => codes.map { |o| o.value }
            }
          end

        end

        class ReversalForm

          attr_reader :key, :authorization_id, :amount, :currency, :attributes

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:authorization_id], 'ReversalForm')
            @key = (x = opts.delete(:key); x.nil? ? nil : HttpClient::Preconditions.assert_class('key', x, String))
            @authorization_id = HttpClient::Preconditions.assert_class('authorization_id', opts.delete(:authorization_id), String)
            @amount = (x = opts.delete(:amount); x.nil? ? nil : HttpClient::Preconditions.assert_class('amount', HttpClient::Helper.to_big_decimal(x), BigDecimal))
            @currency = (x = opts.delete(:currency); x.nil? ? nil : HttpClient::Preconditions.assert_class('currency', x, String))
            @attributes = (x = opts.delete(:attributes); x.nil? ? nil : HttpClient::Preconditions.assert_class('attributes', x, Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h })
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ReversalForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :key => key,
              :authorization_id => authorization_id,
              :amount => amount.to_f.to_s,
              :currency => currency,
              :attributes => attributes.nil? ? nil : attributes
            }
          end

        end

        class ReversalPutForm

          attr_reader :authorization_id, :amount, :currency, :attributes

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:authorization_id], 'ReversalPutForm')
            @authorization_id = HttpClient::Preconditions.assert_class('authorization_id', opts.delete(:authorization_id), String)
            @amount = (x = opts.delete(:amount); x.nil? ? nil : HttpClient::Preconditions.assert_class('amount', HttpClient::Helper.to_big_decimal(x), BigDecimal))
            @currency = (x = opts.delete(:currency); x.nil? ? nil : HttpClient::Preconditions.assert_class('currency', x, String))
            @attributes = (x = opts.delete(:attributes); x.nil? ? nil : HttpClient::Preconditions.assert_class('attributes', x, Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h })
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ReversalPutForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :authorization_id => authorization_id,
              :amount => amount.to_f.to_s,
              :currency => currency,
              :attributes => attributes.nil? ? nil : attributes
            }
          end

        end

        class ReversalUpserted < Event

          attr_reader :event_id, :timestamp, :organization, :id, :reversal

          def initialize(incoming={})
            super(:discriminator => Event::Types::REVERSAL_UPSERTED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :id, :reversal], 'ReversalUpserted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @reversal = (x = opts.delete(:reversal); x.is_a?(::Io::Flow::V0::Models::Reversal) ? x : ::Io::Flow::V0::Models::Reversal.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ReversalUpserted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :id => id,
              :reversal => reversal.to_hash
            }
          end

        end

        class ReversalVersion

          attr_reader :id, :timestamp, :type, :reversal

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :timestamp, :type, :reversal], 'ReversalVersion')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::V0::Models::ChangeType) ? x : ::Io::Flow::V0::Models::ChangeType.apply(x))
            @reversal = (x = opts.delete(:reversal); x.is_a?(::Io::Flow::V0::Models::Reversal) ? x : ::Io::Flow::V0::Models::Reversal.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ReversalVersion.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :timestamp => timestamp,
              :type => type.value,
              :reversal => reversal.to_hash
            }
          end

        end

        # The data in the this model reflects transliterated text into Roman (Latin)
        # script, a consumable format for system processing
        class Romanization

          attr_reader :address, :contact

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @address = (x = opts.delete(:address); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Address) ? x : ::Io::Flow::V0::Models::Address.new(x)))
            @contact = (x = opts.delete(:contact); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Contact) ? x : ::Io::Flow::V0::Models::Contact.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            Romanization.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :address => address.nil? ? nil : address.to_hash,
              :contact => contact.nil? ? nil : contact.to_hash
            }
          end

        end

        # Information to be romanized
        class RomanizationForm

          attr_reader :address, :contact

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @address = (x = opts.delete(:address); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Address) ? x : ::Io::Flow::V0::Models::Address.new(x)))
            @contact = (x = opts.delete(:contact); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Contact) ? x : ::Io::Flow::V0::Models::Contact.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            RomanizationForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :address => address.nil? ? nil : address.to_hash,
              :contact => contact.nil? ? nil : contact.to_hash
            }
          end

        end

        class Rounding

          attr_reader :type, :method, :value

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:type, :method, :value], 'Rounding')
            @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::V0::Models::RoundingType) ? x : ::Io::Flow::V0::Models::RoundingType.apply(x))
            @method = (x = opts.delete(:method); x.is_a?(::Io::Flow::V0::Models::RoundingMethod) ? x : ::Io::Flow::V0::Models::RoundingMethod.apply(x))
            @value = HttpClient::Preconditions.assert_class('value', HttpClient::Helper.to_big_decimal(opts.delete(:value)), BigDecimal)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            Rounding.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :type => type.value,
              :method => method.value,
              :value => value.to_f.to_s
            }
          end

        end

        class RouteAudit

          attr_reader :method, :path, :authentication_techniques, :roles

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:method, :path, :authentication_techniques, :roles], 'RouteAudit')
            @method = (x = opts.delete(:method); x.is_a?(::Io::Flow::V0::Models::PermittedHttpMethod) ? x : ::Io::Flow::V0::Models::PermittedHttpMethod.apply(x))
            @path = HttpClient::Preconditions.assert_class('path', opts.delete(:path), String)
            @authentication_techniques = HttpClient::Preconditions.assert_class('authentication_techniques', opts.delete(:authentication_techniques), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::AuthenticationTechnique) ? x : ::Io::Flow::V0::Models::AuthenticationTechnique.apply(x)) }
            @roles = HttpClient::Preconditions.assert_class('roles', opts.delete(:roles), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::FlowRole) ? x : ::Io::Flow::V0::Models::FlowRole.apply(x)) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            RouteAudit.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :method => method.value,
              :path => path,
              :authentication_techniques => authentication_techniques.map { |o| o.value },
              :roles => roles.map { |o| o.value }
            }
          end

        end

        class RuleDeleted < Event

          attr_reader :event_id, :timestamp, :id

          def initialize(incoming={})
            super(:discriminator => Event::Types::RULE_DELETED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :id], 'RuleDeleted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            RuleDeleted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :id => id
            }
          end

        end

        class RuleUpserted < Event

          attr_reader :event_id, :timestamp, :organization_id, :rule

          def initialize(incoming={})
            super(:discriminator => Event::Types::RULE_UPSERTED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization_id, :rule], 'RuleUpserted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization_id = HttpClient::Preconditions.assert_class('organization_id', opts.delete(:organization_id), String)
            @rule = (x = opts.delete(:rule); x.is_a?(::Io::Flow::V0::Models::InventoryRule) ? x : ::Io::Flow::V0::Models::InventoryRule.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            RuleUpserted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization_id => organization_id,
              :rule => rule.to_hash
            }
          end

        end

        # Represents operating calendar and holidays of a center
        class Schedule

          attr_reader :calendar, :holiday, :exception, :cutoff, :min_lead_time, :max_lead_time

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:holiday, :exception], 'Schedule')
            @calendar = (x = opts.delete(:calendar); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Calendar) ? x : ::Io::Flow::V0::Models::Calendar.apply(x)))
            @holiday = (x = opts.delete(:holiday); x.is_a?(::Io::Flow::V0::Models::HolidayCalendar) ? x : ::Io::Flow::V0::Models::HolidayCalendar.apply(x))
            @exception = HttpClient::Preconditions.assert_class('exception', opts.delete(:exception), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::Exception) ? x : ::Io::Flow::V0::Models::Exception.new(x)) }
            @cutoff = (x = opts.delete(:cutoff); x.nil? ? nil : HttpClient::Preconditions.assert_class('cutoff', x, String))
            @min_lead_time = (x = opts.delete(:min_lead_time); x.nil? ? nil : HttpClient::Preconditions.assert_class('min_lead_time', x, Integer))
            @max_lead_time = (x = opts.delete(:max_lead_time); x.nil? ? nil : HttpClient::Preconditions.assert_class('max_lead_time', x, Integer))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            Schedule.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :calendar => calendar.nil? ? nil : calendar.value,
              :holiday => holiday.value,
              :exception => exception.map { |o| o.to_hash },
              :cutoff => cutoff,
              :min_lead_time => min_lead_time,
              :max_lead_time => max_lead_time
            }
          end

        end

        # Allows a user to create a scheduled export that will be delivered on a
        # schedule (currently only support once / day at a set time)
        class ScheduledExport

          attr_reader :id, :user, :organization_q, :hour, :minute, :timezone, :types, :last_sent_at

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :user, :organization_q, :hour, :minute, :timezone, :types], 'ScheduledExport')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @user = (x = opts.delete(:user); x.is_a?(::Io::Flow::V0::Models::UserReference) ? x : ::Io::Flow::V0::Models::UserReference.new(x))
            @organization_q = HttpClient::Preconditions.assert_class('organization_q', opts.delete(:organization_q), String)
            @hour = HttpClient::Preconditions.assert_class('hour', opts.delete(:hour), Integer)
            @minute = HttpClient::Preconditions.assert_class('minute', opts.delete(:minute), Integer)
            @timezone = HttpClient::Preconditions.assert_class('timezone', opts.delete(:timezone), String)
            @types = HttpClient::Preconditions.assert_class('types', opts.delete(:types), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::ExportType) ? x : ::Io::Flow::V0::Models::ExportType.from_json(x)) }
            @last_sent_at = (x = opts.delete(:last_sent_at); x.nil? ? nil : HttpClient::Preconditions.assert_class('last_sent_at', HttpClient::Helper.to_date_time_iso8601(x), DateTime))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ScheduledExport.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :user => user.to_hash,
              :organization_q => organization_q,
              :hour => hour,
              :minute => minute,
              :timezone => timezone,
              :types => types.map { |o| o.to_hash },
              :last_sent_at => last_sent_at
            }
          end

        end

        class ScheduledExportForm

          attr_reader :user_id, :organization_q, :hour, :minute, :timezone, :types

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:user_id, :organization_q, :hour, :minute, :timezone, :types], 'ScheduledExportForm')
            @user_id = HttpClient::Preconditions.assert_class('user_id', opts.delete(:user_id), String)
            @organization_q = HttpClient::Preconditions.assert_class('organization_q', opts.delete(:organization_q), String)
            @hour = HttpClient::Preconditions.assert_class('hour', opts.delete(:hour), Integer)
            @minute = HttpClient::Preconditions.assert_class('minute', opts.delete(:minute), Integer)
            @timezone = HttpClient::Preconditions.assert_class('timezone', opts.delete(:timezone), String)
            @types = HttpClient::Preconditions.assert_class('types', opts.delete(:types), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::ExportType) ? x : ::Io::Flow::V0::Models::ExportType.from_json(x)) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ScheduledExportForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :user_id => user_id,
              :organization_q => organization_q,
              :hour => hour,
              :minute => minute,
              :timezone => timezone,
              :types => types.map { |o| o.to_hash }
            }
          end

        end

        class ScheduledPickup

          attr_reader :day_of_week, :hour_of_day, :minute_of_hour

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:day_of_week, :hour_of_day, :minute_of_hour], 'ScheduledPickup')
            @day_of_week = (x = opts.delete(:day_of_week); x.is_a?(::Io::Flow::V0::Models::DayOfWeek) ? x : ::Io::Flow::V0::Models::DayOfWeek.apply(x))
            @hour_of_day = HttpClient::Preconditions.assert_class('hour_of_day', opts.delete(:hour_of_day), String)
            @minute_of_hour = HttpClient::Preconditions.assert_class('minute_of_hour', opts.delete(:minute_of_hour), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ScheduledPickup.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :day_of_week => day_of_week.value,
              :hour_of_day => hour_of_day,
              :minute_of_hour => minute_of_hour
            }
          end

        end

        class ServiceReference

          attr_reader :id

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id], 'ServiceReference')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ServiceReference.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id
            }
          end

        end

        class ServiceSummary

          attr_reader :id, :carrier, :name, :center_code

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :carrier, :name], 'ServiceSummary')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @carrier = (x = opts.delete(:carrier); x.is_a?(::Io::Flow::V0::Models::CarrierReference) ? x : ::Io::Flow::V0::Models::CarrierReference.new(x))
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
            @center_code = (x = opts.delete(:center_code); x.nil? ? nil : HttpClient::Preconditions.assert_class('center_code', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ServiceSummary.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :carrier => carrier.to_hash,
              :name => name,
              :center_code => center_code
            }
          end

        end

        # Authorize a request using a session id
        class SessionAuthorizationForm

          attr_reader :session

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:session], 'SessionAuthorizationForm')
            @session = HttpClient::Preconditions.assert_class('session', opts.delete(:session), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            SessionAuthorizationForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :session => session
            }
          end

        end

        # Experiment for A/B testing
        class SessionContextExperiment

          attr_reader :key, :variant

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:key], 'SessionContextExperiment')
            @key = HttpClient::Preconditions.assert_class('key', opts.delete(:key), String)
            @variant = (x = opts.delete(:variant); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::ExperimentVariant) ? x : ::Io::Flow::V0::Models::ExperimentVariant.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            SessionContextExperiment.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :key => key,
              :variant => variant.nil? ? nil : variant.to_hash
            }
          end

        end

        class SessionCurrencyFormat

          attr_reader :symbol, :label_formatters

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:symbol, :label_formatters], 'SessionCurrencyFormat')
            @symbol = (x = opts.delete(:symbol); x.is_a?(::Io::Flow::V0::Models::CurrencySymbolFormat) ? x : ::Io::Flow::V0::Models::CurrencySymbolFormat.apply(x))
            @label_formatters = HttpClient::Preconditions.assert_class('label_formatters', opts.delete(:label_formatters), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::CurrencyLabelFormatter) ? x : ::Io::Flow::V0::Models::CurrencyLabelFormatter.apply(x)) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            SessionCurrencyFormat.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :symbol => symbol.value,
              :label_formatters => label_formatters.map { |o| o.value }
            }
          end

        end

        # Experiment for A/B testing
        class SessionExperiment

          attr_reader :key, :variant

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:key], 'SessionExperiment')
            @key = HttpClient::Preconditions.assert_class('key', opts.delete(:key), String)
            @variant = (x = opts.delete(:variant); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::SessionExperimentVariant) ? x : ::Io::Flow::V0::Models::SessionExperimentVariant.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            SessionExperiment.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :key => key,
              :variant => variant.nil? ? nil : variant.to_hash
            }
          end

        end

        class SessionExperimentForm

          attr_reader :key, :variant

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:key], 'SessionExperimentForm')
            @key = HttpClient::Preconditions.assert_class('key', opts.delete(:key), String)
            @variant = (x = opts.delete(:variant); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::SessionExperimentVariantForm) ? x : ::Io::Flow::V0::Models::SessionExperimentVariantForm.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            SessionExperimentForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :key => key,
              :variant => variant.nil? ? nil : variant.to_hash
            }
          end

        end

        # Experiment variant. Control or variant
        class SessionExperimentVariant

          attr_reader :key, :name

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:key, :name], 'SessionExperimentVariant')
            @key = HttpClient::Preconditions.assert_class('key', opts.delete(:key), String)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            SessionExperimentVariant.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :key => key,
              :name => name
            }
          end

        end

        class SessionExperimentVariantForm

          attr_reader :key

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:key], 'SessionExperimentVariantForm')
            @key = HttpClient::Preconditions.assert_class('key', opts.delete(:key), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            SessionExperimentVariantForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :key => key
            }
          end

        end

        # Configures session expiration time. We default to 30 minutes to follow Google
        # Analytics
        class SessionExpirationConfig

          attr_reader :unit, :value

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @unit = (x = (x = opts.delete(:unit); x.nil? ? "minute" : x); x.is_a?(::Io::Flow::V0::Models::UnitOfTime) ? x : ::Io::Flow::V0::Models::UnitOfTime.apply(x))
            @value = HttpClient::Preconditions.assert_class('value', (x = opts.delete(:value); x.nil? ? 30 : x), Integer)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            SessionExpirationConfig.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :unit => unit.value,
              :value => value
            }
          end

        end

        class SessionForm

          attr_reader :ip, :experience, :country, :currency, :language, :locale, :attributes

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @ip = (x = opts.delete(:ip); x.nil? ? nil : HttpClient::Preconditions.assert_class('ip', x, String))
            @experience = (x = opts.delete(:experience); x.nil? ? nil : HttpClient::Preconditions.assert_class('experience', x, String))
            @country = (x = opts.delete(:country); x.nil? ? nil : HttpClient::Preconditions.assert_class('country', x, String))
            @currency = (x = opts.delete(:currency); x.nil? ? nil : HttpClient::Preconditions.assert_class('currency', x, String))
            @language = (x = opts.delete(:language); x.nil? ? nil : HttpClient::Preconditions.assert_class('language', x, String))
            @locale = (x = opts.delete(:locale); x.nil? ? nil : HttpClient::Preconditions.assert_class('locale', x, String))
            @attributes = (x = opts.delete(:attributes); x.nil? ? nil : HttpClient::Preconditions.assert_class('attributes', x, Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h })
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            SessionForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :ip => ip,
              :experience => experience,
              :country => country,
              :currency => currency,
              :language => language,
              :locale => locale,
              :attributes => attributes.nil? ? nil : attributes
            }
          end

        end

        class SessionFormat

          attr_reader :currency

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:currency], 'SessionFormat')
            @currency = (x = opts.delete(:currency); x.is_a?(::Io::Flow::V0::Models::SessionCurrencyFormat) ? x : ::Io::Flow::V0::Models::SessionCurrencyFormat.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            SessionFormat.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :currency => currency.to_hash
            }
          end

        end

        # The geolocated information for this session
        class SessionGeo

          attr_reader :country, :currency, :language, :locale

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:country, :currency, :language, :locale], 'SessionGeo')
            @country = (x = opts.delete(:country); x.is_a?(::Io::Flow::V0::Models::Country) ? x : ::Io::Flow::V0::Models::Country.new(x))
            @currency = (x = opts.delete(:currency); x.is_a?(::Io::Flow::V0::Models::Currency) ? x : ::Io::Flow::V0::Models::Currency.new(x))
            @language = (x = opts.delete(:language); x.is_a?(::Io::Flow::V0::Models::Language) ? x : ::Io::Flow::V0::Models::Language.new(x))
            @locale = (x = opts.delete(:locale); x.is_a?(::Io::Flow::V0::Models::Locale) ? x : ::Io::Flow::V0::Models::Locale.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            SessionGeo.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :country => country.to_hash,
              :currency => currency.to_hash,
              :language => language.to_hash,
              :locale => locale.to_hash
            }
          end

        end

        class SessionPutForm

          attr_reader :ip, :experience, :country, :currency, :language, :locale, :attributes

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @ip = (x = opts.delete(:ip); x.nil? ? nil : HttpClient::Preconditions.assert_class('ip', x, String))
            @experience = (x = opts.delete(:experience); x.nil? ? nil : HttpClient::Preconditions.assert_class('experience', x, String))
            @country = (x = opts.delete(:country); x.nil? ? nil : HttpClient::Preconditions.assert_class('country', x, String))
            @currency = (x = opts.delete(:currency); x.nil? ? nil : HttpClient::Preconditions.assert_class('currency', x, String))
            @language = (x = opts.delete(:language); x.nil? ? nil : HttpClient::Preconditions.assert_class('language', x, String))
            @locale = (x = opts.delete(:locale); x.nil? ? nil : HttpClient::Preconditions.assert_class('locale', x, String))
            @attributes = (x = opts.delete(:attributes); x.nil? ? nil : HttpClient::Preconditions.assert_class('attributes', x, Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h })
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            SessionPutForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :ip => ip,
              :experience => experience,
              :country => country,
              :currency => currency,
              :language => language,
              :locale => locale,
              :attributes => attributes.nil? ? nil : attributes
            }
          end

        end

        class SessionReference

          attr_reader :id

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id], 'SessionReference')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            SessionReference.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id
            }
          end

        end

        # A session visit expires after a configurable period of inactivity (e.g. 30
        # minutes).
        class SessionVisit

          attr_reader :id, :expires_at

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :expires_at], 'SessionVisit')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @expires_at = HttpClient::Preconditions.assert_class('expires_at', HttpClient::Helper.to_date_time_iso8601(opts.delete(:expires_at)), DateTime)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            SessionVisit.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :expires_at => expires_at
            }
          end

        end

        # A session visitor is a unique identifier for our best guess as to who the
        # individual user is interacting with Flow.
        class SessionVisitor

          attr_reader :id

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id], 'SessionVisitor')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            SessionVisitor.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id
            }
          end

        end

        class ShipmentWindow

          attr_reader :from, :to

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:from, :to], 'ShipmentWindow')
            @from = HttpClient::Preconditions.assert_class('from', opts.delete(:from), Integer)
            @to = HttpClient::Preconditions.assert_class('to', opts.delete(:to), Integer)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ShipmentWindow.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :from => from,
              :to => to
            }
          end

        end

        class Shipping

          attr_reader :description, :amount, :tax, :duty, :discounts

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:description, :amount], 'Shipping')
            @description = HttpClient::Preconditions.assert_class('description', opts.delete(:description), String)
            @amount = HttpClient::Preconditions.assert_class('amount', HttpClient::Helper.to_big_decimal(opts.delete(:amount)), BigDecimal)
            @tax = (x = opts.delete(:tax); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::PaymentTax) ? x : ::Io::Flow::V0::Models::PaymentTax.new(x)))
            @duty = (x = opts.delete(:duty); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::PaymentDuty) ? x : ::Io::Flow::V0::Models::PaymentDuty.new(x)))
            @discounts = (x = opts.delete(:discounts); x.nil? ? nil : HttpClient::Preconditions.assert_class('discounts', x, Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::PaymentDiscount) ? x : ::Io::Flow::V0::Models::PaymentDiscount.new(x)) })
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            Shipping.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :description => description,
              :amount => amount.to_f.to_s,
              :tax => tax.nil? ? nil : tax.to_hash,
              :duty => duty.nil? ? nil : duty.to_hash,
              :discounts => discounts.nil? ? nil : discounts.map { |o| o.to_hash }
            }
          end

        end

        class ShippingAddress

          attr_reader :contact, :location, :center_key, :center_reference, :service

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:contact, :location], 'ShippingAddress')
            @contact = (x = opts.delete(:contact); x.is_a?(::Io::Flow::V0::Models::Contact) ? x : ::Io::Flow::V0::Models::Contact.new(x))
            @location = (x = opts.delete(:location); x.is_a?(::Io::Flow::V0::Models::Address) ? x : ::Io::Flow::V0::Models::Address.new(x))
            @center_key = (x = opts.delete(:center_key); x.nil? ? nil : HttpClient::Preconditions.assert_class('center_key', x, String))
            @center_reference = (x = opts.delete(:center_reference); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::CenterReference) ? x : ::Io::Flow::V0::Models::CenterReference.new(x)))
            @service = (x = opts.delete(:service); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::ServiceSummary) ? x : ::Io::Flow::V0::Models::ServiceSummary.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ShippingAddress.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :contact => contact.to_hash,
              :location => location.to_hash,
              :center_key => center_key,
              :center_reference => center_reference.nil? ? nil : center_reference.to_hash,
              :service => service.nil? ? nil : service.to_hash
            }
          end

        end

        class ShippingConfiguration

          attr_reader :id, :name, :key, :type, :shipping_lanes

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :name, :key, :type, :shipping_lanes], 'ShippingConfiguration')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
            @key = HttpClient::Preconditions.assert_class('key', opts.delete(:key), String)
            @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::V0::Models::ShippingConfigurationType) ? x : ::Io::Flow::V0::Models::ShippingConfigurationType.apply(x))
            @shipping_lanes = HttpClient::Preconditions.assert_class('shipping_lanes', opts.delete(:shipping_lanes), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::ShippingLane) ? x : ::Io::Flow::V0::Models::ShippingLane.new(x)) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ShippingConfiguration.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :name => name,
              :key => key,
              :type => type.value,
              :shipping_lanes => shipping_lanes.map { |o| o.to_hash }
            }
          end

        end

        class ShippingConfigurationCopy

          attr_reader :original, :new

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:original, :new], 'ShippingConfigurationCopy')
            @original = (x = opts.delete(:original); x.is_a?(::Io::Flow::V0::Models::ShippingConfigurationReference) ? x : ::Io::Flow::V0::Models::ShippingConfigurationReference.new(x))
            @new = (x = opts.delete(:new); x.is_a?(::Io::Flow::V0::Models::ShippingConfigurationReference) ? x : ::Io::Flow::V0::Models::ShippingConfigurationReference.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ShippingConfigurationCopy.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :original => original.to_hash,
              :new => new.to_hash
            }
          end

        end

        class ShippingConfigurationCopyForm

          attr_reader :name

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:name], 'ShippingConfigurationCopyForm')
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ShippingConfigurationCopyForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :name => name
            }
          end

        end

        class ShippingConfigurationDeleted < Event

          attr_reader :event_id, :timestamp, :organization, :id

          def initialize(incoming={})
            super(:discriminator => Event::Types::SHIPPING_CONFIGURATION_DELETED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :id], 'ShippingConfigurationDeleted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ShippingConfigurationDeleted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :id => id
            }
          end

        end

        class ShippingConfigurationForm

          attr_reader :name

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:name], 'ShippingConfigurationForm')
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ShippingConfigurationForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :name => name
            }
          end

        end

        # Denormalized availability status of an item in a shipping configuration for a
        # destination region
        class ShippingConfigurationItemAvailability

          attr_reader :id, :item, :shipping_configuration, :availabilities

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :item, :shipping_configuration, :availabilities], 'ShippingConfigurationItemAvailability')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @item = (x = opts.delete(:item); x.is_a?(::Io::Flow::V0::Models::ItemReference) ? x : ::Io::Flow::V0::Models::ItemReference.new(x))
            @shipping_configuration = (x = opts.delete(:shipping_configuration); x.is_a?(::Io::Flow::V0::Models::ShippingConfigurationSummary) ? x : ::Io::Flow::V0::Models::ShippingConfigurationSummary.new(x))
            @availabilities = HttpClient::Preconditions.assert_class('availabilities', opts.delete(:availabilities), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::CountryAvailability) ? x : ::Io::Flow::V0::Models::CountryAvailability.new(x)) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ShippingConfigurationItemAvailability.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :item => item.to_hash,
              :shipping_configuration => shipping_configuration.to_hash,
              :availabilities => availabilities.map { |o| o.to_hash }
            }
          end

        end

        class ShippingConfigurationItemAvailabilityDeleted < Event

          attr_reader :event_id, :timestamp, :organization_id, :shipping_configuration_item_availability

          def initialize(incoming={})
            super(:discriminator => Event::Types::SHIPPING_CONFIGURATION_ITEM_AVAILABILITY_DELETED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization_id, :shipping_configuration_item_availability], 'ShippingConfigurationItemAvailabilityDeleted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization_id = HttpClient::Preconditions.assert_class('organization_id', opts.delete(:organization_id), String)
            @shipping_configuration_item_availability = (x = opts.delete(:shipping_configuration_item_availability); x.is_a?(::Io::Flow::V0::Models::ShippingConfigurationItemAvailability) ? x : ::Io::Flow::V0::Models::ShippingConfigurationItemAvailability.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ShippingConfigurationItemAvailabilityDeleted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization_id => organization_id,
              :shipping_configuration_item_availability => shipping_configuration_item_availability.to_hash
            }
          end

        end

        class ShippingConfigurationItemAvailabilityUpserted < Event

          attr_reader :event_id, :timestamp, :organization_id, :shipping_configuration_item_availability

          def initialize(incoming={})
            super(:discriminator => Event::Types::SHIPPING_CONFIGURATION_ITEM_AVAILABILITY_UPSERTED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization_id, :shipping_configuration_item_availability], 'ShippingConfigurationItemAvailabilityUpserted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization_id = HttpClient::Preconditions.assert_class('organization_id', opts.delete(:organization_id), String)
            @shipping_configuration_item_availability = (x = opts.delete(:shipping_configuration_item_availability); x.is_a?(::Io::Flow::V0::Models::ShippingConfigurationItemAvailability) ? x : ::Io::Flow::V0::Models::ShippingConfigurationItemAvailability.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ShippingConfigurationItemAvailabilityUpserted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization_id => organization_id,
              :shipping_configuration_item_availability => shipping_configuration_item_availability.to_hash
            }
          end

        end

        # Denormalized shipping pricing available for a customer of an item in a
        # shipping configuration for a destination region.
        class ShippingConfigurationItemShippingPricing

          attr_reader :id, :item, :shipping_configuration, :country_shipping_pricings

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :item, :shipping_configuration, :country_shipping_pricings], 'ShippingConfigurationItemShippingPricing')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @item = (x = opts.delete(:item); x.is_a?(::Io::Flow::V0::Models::ItemReference) ? x : ::Io::Flow::V0::Models::ItemReference.new(x))
            @shipping_configuration = (x = opts.delete(:shipping_configuration); x.is_a?(::Io::Flow::V0::Models::ShippingConfigurationSummary) ? x : ::Io::Flow::V0::Models::ShippingConfigurationSummary.new(x))
            @country_shipping_pricings = HttpClient::Preconditions.assert_class('country_shipping_pricings', opts.delete(:country_shipping_pricings), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::CountryShippingPricing) ? x : ::Io::Flow::V0::Models::CountryShippingPricing.new(x)) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ShippingConfigurationItemShippingPricing.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :item => item.to_hash,
              :shipping_configuration => shipping_configuration.to_hash,
              :country_shipping_pricings => country_shipping_pricings.map { |o| o.to_hash }
            }
          end

        end

        class ShippingConfigurationItemShippingPricingDeleted < Event

          attr_reader :event_id, :timestamp, :organization_id, :shipping_configuration_item_shipping_pricing

          def initialize(incoming={})
            super(:discriminator => Event::Types::SHIPPING_CONFIGURATION_ITEM_SHIPPING_PRICING_DELETED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization_id, :shipping_configuration_item_shipping_pricing], 'ShippingConfigurationItemShippingPricingDeleted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization_id = HttpClient::Preconditions.assert_class('organization_id', opts.delete(:organization_id), String)
            @shipping_configuration_item_shipping_pricing = (x = opts.delete(:shipping_configuration_item_shipping_pricing); x.is_a?(::Io::Flow::V0::Models::ShippingConfigurationItemShippingPricing) ? x : ::Io::Flow::V0::Models::ShippingConfigurationItemShippingPricing.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ShippingConfigurationItemShippingPricingDeleted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization_id => organization_id,
              :shipping_configuration_item_shipping_pricing => shipping_configuration_item_shipping_pricing.to_hash
            }
          end

        end

        class ShippingConfigurationItemShippingPricingUpserted < Event

          attr_reader :event_id, :timestamp, :organization_id, :shipping_configuration_item_shipping_pricing

          def initialize(incoming={})
            super(:discriminator => Event::Types::SHIPPING_CONFIGURATION_ITEM_SHIPPING_PRICING_UPSERTED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization_id, :shipping_configuration_item_shipping_pricing], 'ShippingConfigurationItemShippingPricingUpserted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization_id = HttpClient::Preconditions.assert_class('organization_id', opts.delete(:organization_id), String)
            @shipping_configuration_item_shipping_pricing = (x = opts.delete(:shipping_configuration_item_shipping_pricing); x.is_a?(::Io::Flow::V0::Models::ShippingConfigurationItemShippingPricing) ? x : ::Io::Flow::V0::Models::ShippingConfigurationItemShippingPricing.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ShippingConfigurationItemShippingPricingUpserted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization_id => organization_id,
              :shipping_configuration_item_shipping_pricing => shipping_configuration_item_shipping_pricing.to_hash
            }
          end

        end

        class ShippingConfigurationReference

          attr_reader :key

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:key], 'ShippingConfigurationReference')
            @key = HttpClient::Preconditions.assert_class('key', opts.delete(:key), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ShippingConfigurationReference.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :key => key
            }
          end

        end

        class ShippingConfigurationSummary

          attr_reader :id, :name, :key, :type

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :name, :key, :type], 'ShippingConfigurationSummary')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
            @key = HttpClient::Preconditions.assert_class('key', opts.delete(:key), String)
            @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::V0::Models::ShippingConfigurationType) ? x : ::Io::Flow::V0::Models::ShippingConfigurationType.apply(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ShippingConfigurationSummary.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :name => name,
              :key => key,
              :type => type.value
            }
          end

        end

        class ShippingConfigurationUpserted < Event

          attr_reader :event_id, :timestamp, :organization, :shipping_configuration

          def initialize(incoming={})
            super(:discriminator => Event::Types::SHIPPING_CONFIGURATION_UPSERTED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :shipping_configuration], 'ShippingConfigurationUpserted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @shipping_configuration = (x = opts.delete(:shipping_configuration); x.is_a?(::Io::Flow::V0::Models::ShippingConfiguration) ? x : ::Io::Flow::V0::Models::ShippingConfiguration.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ShippingConfigurationUpserted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :shipping_configuration => shipping_configuration.to_hash
            }
          end

        end

        class ShippingConfigurationVersion

          attr_reader :id, :timestamp, :type, :shipping_configuration

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :timestamp, :type, :shipping_configuration], 'ShippingConfigurationVersion')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::V0::Models::ChangeType) ? x : ::Io::Flow::V0::Models::ChangeType.apply(x))
            @shipping_configuration = (x = opts.delete(:shipping_configuration); x.is_a?(::Io::Flow::V0::Models::ShippingConfiguration) ? x : ::Io::Flow::V0::Models::ShippingConfiguration.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ShippingConfigurationVersion.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :timestamp => timestamp,
              :type => type.value,
              :shipping_configuration => shipping_configuration.to_hash
            }
          end

        end

        # Represents information about a carrier-generated shipping label used by a
        # shipper to transport a package from a given origin to destination
        class ShippingLabel

          attr_reader :id, :hop, :attributes, :carrier_tracking_number, :carrier_tracking_number_url, :cost, :destination, :flow_tracking_number, :flow_tracking_number_url, :origin, :service, :window, :label, :invoice, :return_, :order, :package, :order_identifier, :fulfillment_key, :shipment_recipient, :created_at, :updated_at

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :carrier_tracking_number, :carrier_tracking_number_url, :destination, :flow_tracking_number, :flow_tracking_number_url, :origin, :service, :window, :shipment_recipient], 'ShippingLabel')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @hop = (x = opts.delete(:hop); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::ShippingLabelHopSummary) ? x : ::Io::Flow::V0::Models::ShippingLabelHopSummary.new(x)))
            @attributes = HttpClient::Preconditions.assert_class('attributes', (x = opts.delete(:attributes); x.nil? ? {} : x), Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h }
            @carrier_tracking_number = HttpClient::Preconditions.assert_class('carrier_tracking_number', opts.delete(:carrier_tracking_number), String)
            @carrier_tracking_number_url = HttpClient::Preconditions.assert_class('carrier_tracking_number_url', opts.delete(:carrier_tracking_number_url), String)
            @cost = (x = opts.delete(:cost); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Price) ? x : ::Io::Flow::V0::Models::Price.new(x)))
            @destination = (x = opts.delete(:destination); x.is_a?(::Io::Flow::V0::Models::ShippingAddress) ? x : ::Io::Flow::V0::Models::ShippingAddress.new(x))
            @flow_tracking_number = HttpClient::Preconditions.assert_class('flow_tracking_number', opts.delete(:flow_tracking_number), String)
            @flow_tracking_number_url = HttpClient::Preconditions.assert_class('flow_tracking_number_url', opts.delete(:flow_tracking_number_url), String)
            @origin = (x = opts.delete(:origin); x.is_a?(::Io::Flow::V0::Models::ShippingAddress) ? x : ::Io::Flow::V0::Models::ShippingAddress.new(x))
            @service = (x = opts.delete(:service); x.is_a?(::Io::Flow::V0::Models::ServiceSummary) ? x : ::Io::Flow::V0::Models::ServiceSummary.new(x))
            @window = (x = opts.delete(:window); x.is_a?(::Io::Flow::V0::Models::DatetimeRange) ? x : ::Io::Flow::V0::Models::DatetimeRange.new(x))
            @label = (x = opts.delete(:label); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::ShippingLabelDocument) ? x : ::Io::Flow::V0::Models::ShippingLabelDocument.new(x)))
            @invoice = (x = opts.delete(:invoice); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::ShippingLabelDocument) ? x : ::Io::Flow::V0::Models::ShippingLabelDocument.new(x)))
            @return_ = (x = opts.delete(:return); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::ShippingLabelDocument) ? x : ::Io::Flow::V0::Models::ShippingLabelDocument.new(x)))
            @order = (x = opts.delete(:order); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::LabelOrderSummary) ? x : ::Io::Flow::V0::Models::LabelOrderSummary.new(x)))
            @package = (x = opts.delete(:package); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::ShippingLabelPackage) ? x : ::Io::Flow::V0::Models::ShippingLabelPackage.new(x)))
            @order_identifier = (x = opts.delete(:order_identifier); x.nil? ? nil : HttpClient::Preconditions.assert_class('order_identifier', x, String))
            @fulfillment_key = (x = opts.delete(:fulfillment_key); x.nil? ? nil : HttpClient::Preconditions.assert_class('fulfillment_key', x, String))
            @shipment_recipient = (x = opts.delete(:shipment_recipient); x.is_a?(::Io::Flow::V0::Models::ShipmentRecipient) ? x : ::Io::Flow::V0::Models::ShipmentRecipient.apply(x))
            @created_at = (x = opts.delete(:created_at); x.nil? ? nil : HttpClient::Preconditions.assert_class('created_at', HttpClient::Helper.to_date_time_iso8601(x), DateTime))
            @updated_at = (x = opts.delete(:updated_at); x.nil? ? nil : HttpClient::Preconditions.assert_class('updated_at', HttpClient::Helper.to_date_time_iso8601(x), DateTime))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ShippingLabel.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :hop => hop.nil? ? nil : hop.to_hash,
              :attributes => attributes,
              :carrier_tracking_number => carrier_tracking_number,
              :carrier_tracking_number_url => carrier_tracking_number_url,
              :cost => cost.nil? ? nil : cost.to_hash,
              :destination => destination.to_hash,
              :flow_tracking_number => flow_tracking_number,
              :flow_tracking_number_url => flow_tracking_number_url,
              :origin => origin.to_hash,
              :service => service.to_hash,
              :window => window.to_hash,
              :label => label.nil? ? nil : label.to_hash,
              :invoice => invoice.nil? ? nil : invoice.to_hash,
              :return => return_.nil? ? nil : return_.to_hash,
              :order => order.nil? ? nil : order.to_hash,
              :package => package.nil? ? nil : package.to_hash,
              :order_identifier => order_identifier,
              :fulfillment_key => fulfillment_key,
              :shipment_recipient => shipment_recipient.value,
              :created_at => created_at,
              :updated_at => updated_at
            }
          end

        end

        # Output data or downloadable links for shipping label documents such as labels
        # or commercial invoices
        class ShippingLabelDocument

          attr_reader :zpl, :pdf, :png, :html, :required

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @zpl = (x = opts.delete(:zpl); x.nil? ? nil : HttpClient::Preconditions.assert_class('zpl', x, String))
            @pdf = (x = opts.delete(:pdf); x.nil? ? nil : HttpClient::Preconditions.assert_class('pdf', x, String))
            @png = (x = opts.delete(:png); x.nil? ? nil : HttpClient::Preconditions.assert_class('png', x, String))
            @html = (x = opts.delete(:html); x.nil? ? nil : HttpClient::Preconditions.assert_class('html', x, String))
            @required = HttpClient::Preconditions.assert_boolean('required', (x = opts.delete(:required); x.nil? ? true : x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ShippingLabelDocument.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :zpl => zpl,
              :pdf => pdf,
              :png => png,
              :html => html,
              :required => required
            }
          end

        end

        class ShippingLabelHopSummary

          attr_reader :lane, :cost

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:lane, :cost], 'ShippingLabelHopSummary')
            @lane = (x = opts.delete(:lane); x.is_a?(::Io::Flow::V0::Models::ShippingLabelLaneSummary) ? x : ::Io::Flow::V0::Models::ShippingLabelLaneSummary.new(x))
            @cost = (x = opts.delete(:cost); x.is_a?(::Io::Flow::V0::Models::Money) ? x : ::Io::Flow::V0::Models::Money.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ShippingLabelHopSummary.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :lane => lane.to_hash,
              :cost => cost.to_hash
            }
          end

        end

        class ShippingLabelLaneSummary

          attr_reader :id, :ratecard

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :ratecard], 'ShippingLabelLaneSummary')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @ratecard = (x = opts.delete(:ratecard); x.is_a?(::Io::Flow::V0::Models::ShippingLabelRatecardSummary) ? x : ::Io::Flow::V0::Models::ShippingLabelRatecardSummary.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ShippingLabelLaneSummary.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :ratecard => ratecard.to_hash
            }
          end

        end

        # Describes a package to be shipped, including dimensions and items included
        class ShippingLabelPackage

          attr_reader :dimensions, :items, :reference_number

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:dimensions, :items], 'ShippingLabelPackage')
            @dimensions = (x = opts.delete(:dimensions); x.is_a?(::Io::Flow::V0::Models::Dimension) ? x : ::Io::Flow::V0::Models::Dimension.new(x))
            @items = HttpClient::Preconditions.assert_class('items', opts.delete(:items), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::LineItemForm) ? x : ::Io::Flow::V0::Models::LineItemForm.new(x)) }
            @reference_number = (x = opts.delete(:reference_number); x.nil? ? nil : HttpClient::Preconditions.assert_class('reference_number', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ShippingLabelPackage.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :dimensions => dimensions.to_hash,
              :items => items.map { |o| o.to_hash },
              :reference_number => reference_number
            }
          end

        end

        class ShippingLabelRatecardSummary

          attr_reader :id, :ratecard_owner

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :ratecard_owner], 'ShippingLabelRatecardSummary')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @ratecard_owner = (x = opts.delete(:ratecard_owner); x.is_a?(::Io::Flow::V0::Models::RatecardOwner) ? x : ::Io::Flow::V0::Models::RatecardOwner.apply(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ShippingLabelRatecardSummary.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :ratecard_owner => ratecard_owner.value
            }
          end

        end

        class ShippingLabelSummary

          attr_reader :id, :flow_tracking_number, :carrier_tracking_number

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :flow_tracking_number, :carrier_tracking_number], 'ShippingLabelSummary')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @flow_tracking_number = HttpClient::Preconditions.assert_class('flow_tracking_number', opts.delete(:flow_tracking_number), String)
            @carrier_tracking_number = HttpClient::Preconditions.assert_class('carrier_tracking_number', opts.delete(:carrier_tracking_number), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ShippingLabelSummary.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :flow_tracking_number => flow_tracking_number,
              :carrier_tracking_number => carrier_tracking_number
            }
          end

        end

        class ShippingLabelVersion

          attr_reader :id, :timestamp, :type, :shipping_label

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :timestamp, :type, :shipping_label], 'ShippingLabelVersion')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::V0::Models::ChangeType) ? x : ::Io::Flow::V0::Models::ChangeType.apply(x))
            @shipping_label = (x = opts.delete(:shipping_label); x.is_a?(::Io::Flow::V0::Models::ShippingLabel) ? x : ::Io::Flow::V0::Models::ShippingLabel.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ShippingLabelVersion.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :timestamp => timestamp,
              :type => type.value,
              :shipping_label => shipping_label.to_hash
            }
          end

        end

        class ShippingLane

          attr_reader :id, :shipping_configuration, :region, :centers, :tiers, :query, :strategy, :direction, :preference

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :shipping_configuration, :region, :centers, :tiers, :query], 'ShippingLane')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @shipping_configuration = (x = opts.delete(:shipping_configuration); x.is_a?(::Io::Flow::V0::Models::ShippingConfigurationReference) ? x : ::Io::Flow::V0::Models::ShippingConfigurationReference.new(x))
            @region = HttpClient::Preconditions.assert_class('region', opts.delete(:region), String)
            @centers = HttpClient::Preconditions.assert_class('centers', opts.delete(:centers), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::ExpandableCenter) ? x : ::Io::Flow::V0::Models::ExpandableCenter.from_json(x)) }
            @tiers = HttpClient::Preconditions.assert_class('tiers', opts.delete(:tiers), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::Tier) ? x : ::Io::Flow::V0::Models::Tier.new(x)) }
            @query = (x = opts.delete(:query); x.is_a?(::Io::Flow::V0::Models::Query) ? x : ::Io::Flow::V0::Models::Query.new(x))
            @strategy = (x = (x = opts.delete(:strategy); x.nil? ? "oldest" : x); x.is_a?(::Io::Flow::V0::Models::LaneStrategy) ? x : ::Io::Flow::V0::Models::LaneStrategy.apply(x))
            @direction = (x = opts.delete(:direction); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::LaneDirection) ? x : ::Io::Flow::V0::Models::LaneDirection.apply(x)))
            @preference = (x = opts.delete(:preference); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::LanePreselectPreference) ? x : ::Io::Flow::V0::Models::LanePreselectPreference.apply(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ShippingLane.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :shipping_configuration => shipping_configuration.to_hash,
              :region => region,
              :centers => centers.map { |o| o.to_hash },
              :tiers => tiers.map { |o| o.to_hash },
              :query => query.to_hash,
              :strategy => strategy.value,
              :direction => direction.nil? ? nil : direction.value,
              :preference => preference.nil? ? nil : preference.value
            }
          end

        end

        class ShippingLaneDefaultTier

          attr_reader :id, :tier

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :tier], 'ShippingLaneDefaultTier')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @tier = (x = opts.delete(:tier); x.is_a?(::Io::Flow::V0::Models::TierReference) ? x : ::Io::Flow::V0::Models::TierReference.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ShippingLaneDefaultTier.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :tier => tier.to_hash
            }
          end

        end

        class ShippingLaneDefaultTierForm

          attr_reader :tier_id

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:tier_id], 'ShippingLaneDefaultTierForm')
            @tier_id = HttpClient::Preconditions.assert_class('tier_id', opts.delete(:tier_id), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ShippingLaneDefaultTierForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :tier_id => tier_id
            }
          end

        end

        class ShippingLaneDeleted < Event

          attr_reader :event_id, :timestamp, :shipping_lane

          def initialize(incoming={})
            super(:discriminator => Event::Types::SHIPPING_LANE_DELETED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :shipping_lane], 'ShippingLaneDeleted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @shipping_lane = (x = opts.delete(:shipping_lane); x.is_a?(::Io::Flow::V0::Models::ShippingLane) ? x : ::Io::Flow::V0::Models::ShippingLane.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ShippingLaneDeleted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :shipping_lane => shipping_lane.to_hash
            }
          end

        end

        class ShippingLaneForm

          attr_reader :from, :to, :strategy, :direction, :preference

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:from, :to], 'ShippingLaneForm')
            @from = HttpClient::Preconditions.assert_class('from', opts.delete(:from), String)
            @to = HttpClient::Preconditions.assert_class('to', opts.delete(:to), String)
            @strategy = (x = opts.delete(:strategy); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::LaneStrategy) ? x : ::Io::Flow::V0::Models::LaneStrategy.apply(x)))
            @direction = (x = opts.delete(:direction); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::LaneDirection) ? x : ::Io::Flow::V0::Models::LaneDirection.apply(x)))
            @preference = (x = opts.delete(:preference); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::LanePreselectPreference) ? x : ::Io::Flow::V0::Models::LanePreselectPreference.apply(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ShippingLaneForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :from => from,
              :to => to,
              :strategy => strategy.nil? ? nil : strategy.value,
              :direction => direction.nil? ? nil : direction.value,
              :preference => preference.nil? ? nil : preference.value
            }
          end

        end

        class ShippingLaneSummary

          attr_reader :shipping_lane_id, :region, :centers

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:shipping_lane_id, :region, :centers], 'ShippingLaneSummary')
            @shipping_lane_id = HttpClient::Preconditions.assert_class('shipping_lane_id', opts.delete(:shipping_lane_id), String)
            @region = HttpClient::Preconditions.assert_class('region', opts.delete(:region), String)
            @centers = HttpClient::Preconditions.assert_class('centers', opts.delete(:centers), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::ExpandableCenter) ? x : ::Io::Flow::V0::Models::ExpandableCenter.from_json(x)) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ShippingLaneSummary.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :shipping_lane_id => shipping_lane_id,
              :region => region,
              :centers => centers.map { |o| o.to_hash }
            }
          end

        end

        class ShippingLaneUpserted < Event

          attr_reader :event_id, :timestamp, :organization, :shipping_lane

          def initialize(incoming={})
            super(:discriminator => Event::Types::SHIPPING_LANE_UPSERTED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :shipping_lane], 'ShippingLaneUpserted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @shipping_lane = (x = opts.delete(:shipping_lane); x.is_a?(::Io::Flow::V0::Models::ShippingLane) ? x : ::Io::Flow::V0::Models::ShippingLane.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ShippingLaneUpserted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :shipping_lane => shipping_lane.to_hash
            }
          end

        end

        class ShippingLaneVersion

          attr_reader :id, :timestamp, :type, :shipping_lane

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :timestamp, :type, :shipping_lane], 'ShippingLaneVersion')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::V0::Models::ChangeType) ? x : ::Io::Flow::V0::Models::ChangeType.apply(x))
            @shipping_lane = (x = opts.delete(:shipping_lane); x.is_a?(::Io::Flow::V0::Models::ShippingLane) ? x : ::Io::Flow::V0::Models::ShippingLane.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ShippingLaneVersion.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :timestamp => timestamp,
              :type => type.value,
              :shipping_lane => shipping_lane.to_hash
            }
          end

        end

        # Represents information about a client-facilitated shipment where the shipping
        # label and fulfillment was not handled by Flow. For merchant-of-record and
        # tracking purposes, clients doing their own shipping will need to notify Flow
        # of shipped packages.
        class ShippingNotification

          attr_reader :id, :key, :attributes, :carrier_tracking_number, :destination, :flow_tracking_number, :origin, :package, :service, :window, :order, :order_identifier, :fulfillment_key, :shipment_recipient

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :key, :carrier_tracking_number, :destination, :flow_tracking_number, :origin, :package, :service, :window], 'ShippingNotification')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @key = HttpClient::Preconditions.assert_class('key', opts.delete(:key), String)
            @attributes = HttpClient::Preconditions.assert_class('attributes', (x = opts.delete(:attributes); x.nil? ? {} : x), Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h }
            @carrier_tracking_number = HttpClient::Preconditions.assert_class('carrier_tracking_number', opts.delete(:carrier_tracking_number), String)
            @destination = (x = opts.delete(:destination); x.is_a?(::Io::Flow::V0::Models::ShippingAddress) ? x : ::Io::Flow::V0::Models::ShippingAddress.new(x))
            @flow_tracking_number = HttpClient::Preconditions.assert_class('flow_tracking_number', opts.delete(:flow_tracking_number), String)
            @origin = (x = opts.delete(:origin); x.is_a?(::Io::Flow::V0::Models::ShippingAddress) ? x : ::Io::Flow::V0::Models::ShippingAddress.new(x))
            @package = (x = opts.delete(:package); x.is_a?(::Io::Flow::V0::Models::ShippingLabelPackage) ? x : ::Io::Flow::V0::Models::ShippingLabelPackage.new(x))
            @service = (x = opts.delete(:service); x.is_a?(::Io::Flow::V0::Models::ServiceSummary) ? x : ::Io::Flow::V0::Models::ServiceSummary.new(x))
            @window = (x = opts.delete(:window); x.is_a?(::Io::Flow::V0::Models::DatetimeRange) ? x : ::Io::Flow::V0::Models::DatetimeRange.new(x))
            @order = (x = opts.delete(:order); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::LabelOrderSummary) ? x : ::Io::Flow::V0::Models::LabelOrderSummary.new(x)))
            @order_identifier = (x = opts.delete(:order_identifier); x.nil? ? nil : HttpClient::Preconditions.assert_class('order_identifier', x, String))
            @fulfillment_key = (x = opts.delete(:fulfillment_key); x.nil? ? nil : HttpClient::Preconditions.assert_class('fulfillment_key', x, String))
            @shipment_recipient = (x = opts.delete(:shipment_recipient); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::ShipmentRecipient) ? x : ::Io::Flow::V0::Models::ShipmentRecipient.apply(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ShippingNotification.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :key => key,
              :attributes => attributes,
              :carrier_tracking_number => carrier_tracking_number,
              :destination => destination.to_hash,
              :flow_tracking_number => flow_tracking_number,
              :origin => origin.to_hash,
              :package => package.to_hash,
              :service => service.to_hash,
              :window => window.to_hash,
              :order => order.nil? ? nil : order.to_hash,
              :order_identifier => order_identifier,
              :fulfillment_key => fulfillment_key,
              :shipment_recipient => shipment_recipient.nil? ? nil : shipment_recipient.value
            }
          end

        end

        class ShippingNotificationVersion

          attr_reader :id, :timestamp, :type, :shipping_notification

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :timestamp, :type, :shipping_notification], 'ShippingNotificationVersion')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::V0::Models::ChangeType) ? x : ::Io::Flow::V0::Models::ChangeType.apply(x))
            @shipping_notification = (x = opts.delete(:shipping_notification); x.is_a?(::Io::Flow::V0::Models::ShippingNotification) ? x : ::Io::Flow::V0::Models::ShippingNotification.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ShippingNotificationVersion.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :timestamp => timestamp,
              :type => type.value,
              :shipping_notification => shipping_notification.to_hash
            }
          end

        end

        # Representation of a Shopify cart exactly as defined by shopify.com
        class ShopifyCart

          attr_reader :id, :items, :item_count, :total_price, :local, :attributes, :note, :requires_shipping, :total_weight

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :items, :item_count, :total_price, :local], 'ShopifyCart')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @items = HttpClient::Preconditions.assert_class('items', opts.delete(:items), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::ShopifyCartItem) ? x : ::Io::Flow::V0::Models::ShopifyCartItem.new(x)) }
            @item_count = HttpClient::Preconditions.assert_class('item_count', opts.delete(:item_count), Integer)
            @total_price = HttpClient::Preconditions.assert_class('total_price', opts.delete(:total_price), Integer)
            @local = (x = opts.delete(:local); x.is_a?(::Io::Flow::V0::Models::ShopifyLocalCartMetadata) ? x : ::Io::Flow::V0::Models::ShopifyLocalCartMetadata.new(x))
            @attributes = (x = opts.delete(:attributes); x.nil? ? nil : HttpClient::Preconditions.assert_class('attributes', HttpClient::Helper.to_object(x), Hash))
            @note = (x = opts.delete(:note); x.nil? ? nil : HttpClient::Preconditions.assert_class('note', x, String))
            @requires_shipping = HttpClient::Preconditions.assert_boolean('requires_shipping', (x = opts.delete(:requires_shipping); x.nil? ? true : x))
            @total_weight = (x = opts.delete(:total_weight); x.nil? ? nil : HttpClient::Preconditions.assert_class('total_weight', x, Integer))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ShopifyCart.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :items => items.map { |o| o.to_hash },
              :item_count => item_count,
              :total_price => total_price,
              :local => local.to_hash,
              :attributes => attributes,
              :note => note,
              :requires_shipping => requires_shipping,
              :total_weight => total_weight
            }
          end

        end

        class ShopifyCartAddMultipleForm < ShopifyCartAddForm

          attr_reader :items, :attributes

          def initialize(incoming={})
            super(:discriminator => ShopifyCartAddForm::Types::SHOPIFY_CART_ADD_MULTIPLE_FORM)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:items], 'ShopifyCartAddMultipleForm')
            @items = HttpClient::Preconditions.assert_class('items', opts.delete(:items), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::ShopifyCartAddSingleForm) ? x : ::Io::Flow::V0::Models::ShopifyCartAddSingleForm.new(x)) }
            @attributes = (x = opts.delete(:attributes); x.nil? ? nil : HttpClient::Preconditions.assert_class('attributes', x, Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h })
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ShopifyCartAddMultipleForm.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :items => items.map { |o| o.to_hash },
              :attributes => attributes.nil? ? nil : attributes
            }
          end

        end

        class ShopifyCartAddSingleForm < ShopifyCartAddForm

          attr_reader :id, :quantity, :properties

          def initialize(incoming={})
            super(:discriminator => ShopifyCartAddForm::Types::SHOPIFY_CART_ADD_SINGLE_FORM)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :quantity], 'ShopifyCartAddSingleForm')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), Integer)
            @quantity = HttpClient::Preconditions.assert_class('quantity', opts.delete(:quantity), Integer)
            @properties = (x = opts.delete(:properties); x.nil? ? nil : HttpClient::Preconditions.assert_class('properties', x, Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('properties', d[1], String); h })
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ShopifyCartAddSingleForm.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :id => id,
              :quantity => quantity,
              :properties => properties.nil? ? nil : properties
            }
          end

        end

        # Must provide either line or id. If you provide both, they must match
        class ShopifyCartChangeForm

          attr_reader :quantity, :line, :id, :properties

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:quantity], 'ShopifyCartChangeForm')
            @quantity = HttpClient::Preconditions.assert_class('quantity', opts.delete(:quantity), Integer)
            @line = (x = opts.delete(:line); x.nil? ? nil : HttpClient::Preconditions.assert_class('line', x, Integer))
            @id = (x = opts.delete(:id); x.nil? ? nil : HttpClient::Preconditions.assert_class('id', x, Integer))
            @properties = (x = opts.delete(:properties); x.nil? ? nil : HttpClient::Preconditions.assert_class('properties', x, Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('properties', d[1], String); h })
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ShopifyCartChangeForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :quantity => quantity,
              :line => line,
              :id => id,
              :properties => properties.nil? ? nil : properties
            }
          end

        end

        class ShopifyCartConversion

          attr_reader :flow, :shopify

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:flow, :shopify], 'ShopifyCartConversion')
            @flow = (x = opts.delete(:flow); x.is_a?(::Io::Flow::V0::Models::ShopifyCartConversionFlowOrder) ? x : ::Io::Flow::V0::Models::ShopifyCartConversionFlowOrder.new(x))
            @shopify = (x = opts.delete(:shopify); x.is_a?(::Io::Flow::V0::Models::ShopifyCartConversionShopifyCart) ? x : ::Io::Flow::V0::Models::ShopifyCartConversionShopifyCart.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ShopifyCartConversion.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :flow => flow.to_hash,
              :shopify => shopify.to_hash
            }
          end

        end

        class ShopifyCartConversionFlowOrder

          attr_reader :order, :errors

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:order], 'ShopifyCartConversionFlowOrder')
            @order = (x = opts.delete(:order); x.is_a?(::Io::Flow::V0::Models::Order) ? x : ::Io::Flow::V0::Models::Order.new(x))
            @errors = (x = opts.delete(:errors); x.nil? ? nil : HttpClient::Preconditions.assert_class('errors', x, Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::OrderError) ? x : ::Io::Flow::V0::Models::OrderError.new(x)) })
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ShopifyCartConversionFlowOrder.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :order => order.to_hash,
              :errors => errors.nil? ? nil : errors.map { |o| o.to_hash }
            }
          end

        end

        class ShopifyCartConversionShopifyCart

          attr_reader :cart

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:cart], 'ShopifyCartConversionShopifyCart')
            @cart = (x = opts.delete(:cart); x.is_a?(::Io::Flow::Shopify::External::V0::Models::ShopifyExternalCart) ? x : ::Io::Flow::Shopify::External::V0::Models::ShopifyExternalCart.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ShopifyCartConversionShopifyCart.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :cart => cart.to_hash
            }
          end

        end

        class ShopifyCartItem

          attr_reader :id, :handle, :line_price, :price, :product_id, :product_title, :quantity, :title, :url, :variant_id, :local, :gift_card, :image, :product_description, :product_type, :properties, :requires_shipping, :sku, :variant_title, :variant_options, :vendor

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :handle, :line_price, :price, :product_id, :product_title, :quantity, :title, :url, :variant_id, :local], 'ShopifyCartItem')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @handle = HttpClient::Preconditions.assert_class('handle', opts.delete(:handle), String)
            @line_price = HttpClient::Preconditions.assert_class('line_price', opts.delete(:line_price), Numeric)
            @price = HttpClient::Preconditions.assert_class('price', opts.delete(:price), Integer)
            @product_id = HttpClient::Preconditions.assert_class('product_id', opts.delete(:product_id), Integer)
            @product_title = HttpClient::Preconditions.assert_class('product_title', opts.delete(:product_title), String)
            @quantity = HttpClient::Preconditions.assert_class('quantity', opts.delete(:quantity), Integer)
            @title = HttpClient::Preconditions.assert_class('title', opts.delete(:title), String)
            @url = HttpClient::Preconditions.assert_class('url', opts.delete(:url), String)
            @variant_id = HttpClient::Preconditions.assert_class('variant_id', opts.delete(:variant_id), Integer)
            @local = (x = opts.delete(:local); x.is_a?(::Io::Flow::V0::Models::ShopifyLocalCartItemMetadata) ? x : ::Io::Flow::V0::Models::ShopifyLocalCartItemMetadata.new(x))
            @gift_card = HttpClient::Preconditions.assert_boolean('gift_card', (x = opts.delete(:gift_card); x.nil? ? false : x))
            @image = (x = opts.delete(:image); x.nil? ? nil : HttpClient::Preconditions.assert_class('image', x, String))
            @product_description = (x = opts.delete(:product_description); x.nil? ? nil : HttpClient::Preconditions.assert_class('product_description', x, String))
            @product_type = (x = opts.delete(:product_type); x.nil? ? nil : HttpClient::Preconditions.assert_class('product_type', x, String))
            @properties = (x = opts.delete(:properties); x.nil? ? nil : HttpClient::Preconditions.assert_class('properties', x, Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('properties', d[1], String); h })
            @requires_shipping = HttpClient::Preconditions.assert_boolean('requires_shipping', (x = opts.delete(:requires_shipping); x.nil? ? true : x))
            @sku = (x = opts.delete(:sku); x.nil? ? nil : HttpClient::Preconditions.assert_class('sku', x, String))
            @variant_title = (x = opts.delete(:variant_title); x.nil? ? nil : HttpClient::Preconditions.assert_class('variant_title', x, String))
            @variant_options = (x = opts.delete(:variant_options); x.nil? ? nil : HttpClient::Preconditions.assert_class('variant_options', x, Array).map { |v| HttpClient::Preconditions.assert_class('variant_options', v, String) })
            @vendor = (x = opts.delete(:vendor); x.nil? ? nil : HttpClient::Preconditions.assert_class('vendor', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ShopifyCartItem.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :handle => handle,
              :line_price => line_price,
              :price => price,
              :product_id => product_id,
              :product_title => product_title,
              :quantity => quantity,
              :title => title,
              :url => url,
              :variant_id => variant_id,
              :local => local.to_hash,
              :gift_card => gift_card,
              :image => image,
              :product_description => product_description,
              :product_type => product_type,
              :properties => properties.nil? ? nil : properties,
              :requires_shipping => requires_shipping,
              :sku => sku,
              :variant_title => variant_title,
              :variant_options => variant_options.nil? ? nil : variant_options,
              :vendor => vendor
            }
          end

        end

        # Model to represent details available in a customer metafield.
        class ShopifyCustomerMetafieldValue

          attr_reader :flow_consumer_id

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:flow_consumer_id], 'ShopifyCustomerMetafieldValue')
            @flow_consumer_id = HttpClient::Preconditions.assert_class('flow_consumer_id', opts.delete(:flow_consumer_id), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ShopifyCustomerMetafieldValue.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :flow_consumer_id => flow_consumer_id
            }
          end

        end

        class ShopifyItemEventBucket < ShopifyEventBucket

          attr_reader :range, :count, :data

          def initialize(incoming={})
            super(:discriminator => ShopifyEventBucket::Types::SHOPIFY_ITEM_EVENT_BUCKET)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:range, :count, :data], 'ShopifyItemEventBucket')
            @range = (x = opts.delete(:range); x.is_a?(::Io::Flow::V0::Models::DatetimeRange) ? x : ::Io::Flow::V0::Models::DatetimeRange.new(x))
            @count = HttpClient::Preconditions.assert_class('count', opts.delete(:count), Integer)
            @data = HttpClient::Preconditions.assert_class('data', opts.delete(:data), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::ShopifyItemEventData) ? x : ::Io::Flow::V0::Models::ShopifyItemEventData.new(x)) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ShopifyItemEventBucket.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :range => range.to_hash,
              :count => count,
              :data => data.map { |o| o.to_hash }
            }
          end

        end

        class ShopifyItemEventData

          attr_reader :created_at, :experience, :item

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:created_at, :experience, :item], 'ShopifyItemEventData')
            @created_at = HttpClient::Preconditions.assert_class('created_at', HttpClient::Helper.to_date_time_iso8601(opts.delete(:created_at)), DateTime)
            @experience = (x = opts.delete(:experience); x.is_a?(::Io::Flow::V0::Models::ExperienceReference) ? x : ::Io::Flow::V0::Models::ExperienceReference.new(x))
            @item = (x = opts.delete(:item); x.is_a?(::Io::Flow::V0::Models::CatalogItemSummary) ? x : ::Io::Flow::V0::Models::CatalogItemSummary.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ShopifyItemEventData.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :created_at => created_at,
              :experience => experience.to_hash,
              :item => item.to_hash
            }
          end

        end

        class ShopifyLine

          attr_reader :variant_id, :quantity, :price, :total, :price_source

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:variant_id, :quantity, :price, :total], 'ShopifyLine')
            @variant_id = HttpClient::Preconditions.assert_class('variant_id', opts.delete(:variant_id), Integer)
            @quantity = HttpClient::Preconditions.assert_class('quantity', opts.delete(:quantity), Integer)
            @price = (x = opts.delete(:price); x.is_a?(::Io::Flow::V0::Models::ShopifyPrice) ? x : ::Io::Flow::V0::Models::ShopifyPrice.new(x))
            @total = (x = opts.delete(:total); x.is_a?(::Io::Flow::V0::Models::ShopifyPrice) ? x : ::Io::Flow::V0::Models::ShopifyPrice.new(x))
            @price_source = (x = opts.delete(:price_source); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::PriceSource) ? x : ::Io::Flow::V0::Models::PriceSource.from_json(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ShopifyLine.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :variant_id => variant_id,
              :quantity => quantity,
              :price => price.to_hash,
              :total => total.to_hash,
              :price_source => price_source.nil? ? nil : price_source.to_hash
            }
          end

        end

        class ShopifyLocalCartItemMetadata

          attr_reader :line_price, :price

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:line_price, :price], 'ShopifyLocalCartItemMetadata')
            @line_price = (x = opts.delete(:line_price); x.is_a?(::Io::Flow::V0::Models::PriceWithBase) ? x : ::Io::Flow::V0::Models::PriceWithBase.new(x))
            @price = (x = opts.delete(:price); x.is_a?(::Io::Flow::V0::Models::PriceWithBase) ? x : ::Io::Flow::V0::Models::PriceWithBase.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ShopifyLocalCartItemMetadata.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :line_price => line_price.to_hash,
              :price => price.to_hash
            }
          end

        end

        class ShopifyLocalCartMetadata

          attr_reader :total_price, :promotions, :rules, :subtotal, :vat, :duty, :discount

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:total_price, :promotions, :subtotal], 'ShopifyLocalCartMetadata')
            @total_price = (x = opts.delete(:total_price); x.is_a?(::Io::Flow::V0::Models::PriceWithBase) ? x : ::Io::Flow::V0::Models::PriceWithBase.new(x))
            @promotions = (x = opts.delete(:promotions); x.is_a?(::Io::Flow::V0::Models::Promotions) ? x : ::Io::Flow::V0::Models::Promotions.new(x))
            @rules = (x = opts.delete(:rules); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::OrderRulesSummary) ? x : ::Io::Flow::V0::Models::OrderRulesSummary.new(x)))
            @subtotal = (x = opts.delete(:subtotal); x.is_a?(::Io::Flow::V0::Models::PriceWithBase) ? x : ::Io::Flow::V0::Models::PriceWithBase.new(x))
            @vat = (x = opts.delete(:vat); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::PriceWithBase) ? x : ::Io::Flow::V0::Models::PriceWithBase.new(x)))
            @duty = (x = opts.delete(:duty); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::PriceWithBase) ? x : ::Io::Flow::V0::Models::PriceWithBase.new(x)))
            @discount = (x = opts.delete(:discount); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::PriceWithBase) ? x : ::Io::Flow::V0::Models::PriceWithBase.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ShopifyLocalCartMetadata.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :total_price => total_price.to_hash,
              :promotions => promotions.to_hash,
              :rules => rules.nil? ? nil : rules.to_hash,
              :subtotal => subtotal.to_hash,
              :vat => vat.nil? ? nil : vat.to_hash,
              :duty => duty.nil? ? nil : duty.to_hash,
              :discount => discount.nil? ? nil : discount.to_hash
            }
          end

        end

        class ShopifyLocalPriceMetadata

          attr_reader :price

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:price], 'ShopifyLocalPriceMetadata')
            @price = (x = opts.delete(:price); x.is_a?(::Io::Flow::V0::Models::PriceWithBase) ? x : ::Io::Flow::V0::Models::PriceWithBase.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ShopifyLocalPriceMetadata.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :price => price.to_hash
            }
          end

        end

        class ShopifyLocalizationSetting

          attr_reader :id, :method, :datetime_range

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :method, :datetime_range], 'ShopifyLocalizationSetting')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @method = (x = opts.delete(:method); x.is_a?(::Io::Flow::V0::Models::ShopifyLocalizationMethod) ? x : ::Io::Flow::V0::Models::ShopifyLocalizationMethod.apply(x))
            @datetime_range = (x = opts.delete(:datetime_range); x.is_a?(::Io::Flow::V0::Models::DatetimeRange) ? x : ::Io::Flow::V0::Models::DatetimeRange.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ShopifyLocalizationSetting.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :method => method.value,
              :datetime_range => datetime_range.to_hash
            }
          end

        end

        class ShopifyLocalizationSettingDeleted < Event

          attr_reader :event_id, :timestamp, :organization_id, :shopify_localization_setting

          def initialize(incoming={})
            super(:discriminator => Event::Types::SHOPIFY_LOCALIZATION_SETTING_DELETED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization_id, :shopify_localization_setting], 'ShopifyLocalizationSettingDeleted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization_id = HttpClient::Preconditions.assert_class('organization_id', opts.delete(:organization_id), String)
            @shopify_localization_setting = (x = opts.delete(:shopify_localization_setting); x.is_a?(::Io::Flow::V0::Models::ShopifyLocalizationSetting) ? x : ::Io::Flow::V0::Models::ShopifyLocalizationSetting.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ShopifyLocalizationSettingDeleted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization_id => organization_id,
              :shopify_localization_setting => shopify_localization_setting.to_hash
            }
          end

        end

        class ShopifyLocalizationSettingForm

          attr_reader :method, :datetime_range

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:method, :datetime_range], 'ShopifyLocalizationSettingForm')
            @method = (x = opts.delete(:method); x.is_a?(::Io::Flow::V0::Models::ShopifyLocalizationMethod) ? x : ::Io::Flow::V0::Models::ShopifyLocalizationMethod.apply(x))
            @datetime_range = (x = opts.delete(:datetime_range); x.is_a?(::Io::Flow::V0::Models::DatetimeRange) ? x : ::Io::Flow::V0::Models::DatetimeRange.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ShopifyLocalizationSettingForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :method => method.value,
              :datetime_range => datetime_range.to_hash
            }
          end

        end

        class ShopifyLocalizationSettingUpserted < Event

          attr_reader :event_id, :timestamp, :organization_id, :shopify_localization_setting

          def initialize(incoming={})
            super(:discriminator => Event::Types::SHOPIFY_LOCALIZATION_SETTING_UPSERTED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization_id, :shopify_localization_setting], 'ShopifyLocalizationSettingUpserted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization_id = HttpClient::Preconditions.assert_class('organization_id', opts.delete(:organization_id), String)
            @shopify_localization_setting = (x = opts.delete(:shopify_localization_setting); x.is_a?(::Io::Flow::V0::Models::ShopifyLocalizationSetting) ? x : ::Io::Flow::V0::Models::ShopifyLocalizationSetting.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ShopifyLocalizationSettingUpserted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization_id => organization_id,
              :shopify_localization_setting => shopify_localization_setting.to_hash
            }
          end

        end

        class ShopifyLocalizedOrder

          attr_reader :id, :lines, :prices, :total, :allocation_details, :merchant_of_record, :merchant_of_record_entity, :incoterm, :flow_order_id, :tax_registration, :geo

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :lines, :prices, :total, :allocation_details], 'ShopifyLocalizedOrder')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), Integer)
            @lines = HttpClient::Preconditions.assert_class('lines', opts.delete(:lines), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::ShopifyLine) ? x : ::Io::Flow::V0::Models::ShopifyLine.new(x)) }
            @prices = HttpClient::Preconditions.assert_class('prices', opts.delete(:prices), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::ShopifyPrice) ? x : ::Io::Flow::V0::Models::ShopifyPrice.new(x)) }
            @total = (x = opts.delete(:total); x.is_a?(::Io::Flow::V0::Models::ShopifyPrice) ? x : ::Io::Flow::V0::Models::ShopifyPrice.new(x))
            @allocation_details = HttpClient::Preconditions.assert_class('allocation_details', opts.delete(:allocation_details), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::AllocationDetail) ? x : ::Io::Flow::V0::Models::AllocationDetail.from_json(x)) }
            @merchant_of_record = (x = opts.delete(:merchant_of_record); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::OrderMerchantOfRecord) ? x : ::Io::Flow::V0::Models::OrderMerchantOfRecord.apply(x)))
            @merchant_of_record_entity = (x = opts.delete(:merchant_of_record_entity); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::MerchantOfRecordEntity) ? x : ::Io::Flow::V0::Models::MerchantOfRecordEntity.new(x)))
            @incoterm = (x = opts.delete(:incoterm); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Incoterm) ? x : ::Io::Flow::V0::Models::Incoterm.apply(x)))
            @flow_order_id = (x = opts.delete(:flow_order_id); x.nil? ? nil : HttpClient::Preconditions.assert_class('flow_order_id', x, String))
            @tax_registration = (x = opts.delete(:tax_registration); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::TaxRegistration) ? x : ::Io::Flow::V0::Models::TaxRegistration.new(x)))
            @geo = (x = opts.delete(:geo); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::OrderGeo) ? x : ::Io::Flow::V0::Models::OrderGeo.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ShopifyLocalizedOrder.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :lines => lines.map { |o| o.to_hash },
              :prices => prices.map { |o| o.to_hash },
              :total => total.to_hash,
              :allocation_details => allocation_details.map { |o| o.to_hash },
              :merchant_of_record => merchant_of_record.nil? ? nil : merchant_of_record.value,
              :merchant_of_record_entity => merchant_of_record_entity.nil? ? nil : merchant_of_record_entity.to_hash,
              :incoterm => incoterm.nil? ? nil : incoterm.value,
              :flow_order_id => flow_order_id,
              :tax_registration => tax_registration.nil? ? nil : tax_registration.to_hash,
              :geo => geo.nil? ? nil : geo.to_hash
            }
          end

        end

        class ShopifyLocalizedVariant

          attr_reader :id, :handle, :experience, :prices, :status, :inventory_status

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :handle, :experience, :prices, :status], 'ShopifyLocalizedVariant')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), Integer)
            @handle = HttpClient::Preconditions.assert_class('handle', opts.delete(:handle), String)
            @experience = (x = opts.delete(:experience); x.is_a?(::Io::Flow::V0::Models::ExperienceReference) ? x : ::Io::Flow::V0::Models::ExperienceReference.new(x))
            @prices = (x = opts.delete(:prices); x.is_a?(::Io::Flow::V0::Models::ShopifyLocalizedVariantPrices) ? x : ::Io::Flow::V0::Models::ShopifyLocalizedVariantPrices.new(x))
            @status = (x = opts.delete(:status); x.is_a?(::Io::Flow::V0::Models::SubcatalogItemStatus) ? x : ::Io::Flow::V0::Models::SubcatalogItemStatus.apply(x))
            @inventory_status = (x = opts.delete(:inventory_status); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::ItemAvailabilityStatus) ? x : ::Io::Flow::V0::Models::ItemAvailabilityStatus.apply(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ShopifyLocalizedVariant.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :handle => handle,
              :experience => experience.to_hash,
              :prices => prices.to_hash,
              :status => status.value,
              :inventory_status => inventory_status.nil? ? nil : inventory_status.value
            }
          end

        end

        class ShopifyLocalizedVariantPrices

          attr_reader :item, :compare_at, :vat, :duty

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:item], 'ShopifyLocalizedVariantPrices')
            @item = (x = opts.delete(:item); x.is_a?(::Io::Flow::V0::Models::ShopifyPrice) ? x : ::Io::Flow::V0::Models::ShopifyPrice.new(x))
            @compare_at = (x = opts.delete(:compare_at); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::ShopifyPrice) ? x : ::Io::Flow::V0::Models::ShopifyPrice.new(x)))
            @vat = (x = opts.delete(:vat); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::ShopifyPrice) ? x : ::Io::Flow::V0::Models::ShopifyPrice.new(x)))
            @duty = (x = opts.delete(:duty); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::ShopifyPrice) ? x : ::Io::Flow::V0::Models::ShopifyPrice.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ShopifyLocalizedVariantPrices.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :item => item.to_hash,
              :compare_at => compare_at.nil? ? nil : compare_at.to_hash,
              :vat => vat.nil? ? nil : vat.to_hash,
              :duty => duty.nil? ? nil : duty.to_hash
            }
          end

        end

        class ShopifyLocationFlowCenterMapping

          attr_reader :id, :shopify_location, :flow_center

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :shopify_location, :flow_center], 'ShopifyLocationFlowCenterMapping')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @shopify_location = (x = opts.delete(:shopify_location); x.is_a?(::Io::Flow::V0::Models::ShopifyLocationReference) ? x : ::Io::Flow::V0::Models::ShopifyLocationReference.new(x))
            @flow_center = (x = opts.delete(:flow_center); x.is_a?(::Io::Flow::V0::Models::FlowCenterReference) ? x : ::Io::Flow::V0::Models::FlowCenterReference.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ShopifyLocationFlowCenterMapping.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :shopify_location => shopify_location.to_hash,
              :flow_center => flow_center.to_hash
            }
          end

        end

        class ShopifyLocationFlowCenterMappingForm

          attr_reader :shopify_location_id, :flow_center_key

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:shopify_location_id, :flow_center_key], 'ShopifyLocationFlowCenterMappingForm')
            @shopify_location_id = HttpClient::Preconditions.assert_class('shopify_location_id', opts.delete(:shopify_location_id), Integer)
            @flow_center_key = HttpClient::Preconditions.assert_class('flow_center_key', opts.delete(:flow_center_key), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ShopifyLocationFlowCenterMappingForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :shopify_location_id => shopify_location_id,
              :flow_center_key => flow_center_key
            }
          end

        end

        class ShopifyLocationReference

          attr_reader :id

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id], 'ShopifyLocationReference')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ShopifyLocationReference.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id
            }
          end

        end

        class ShopifyOrderAttributesForm

          attr_reader :attributes

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:attributes], 'ShopifyOrderAttributesForm')
            @attributes = HttpClient::Preconditions.assert_class('attributes', opts.delete(:attributes), Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ShopifyOrderAttributesForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :attributes => attributes
            }
          end

        end

        # Model to represent a delivery metafield
        class ShopifyOrderDeliveryMetafield

          attr_reader :key, :items, :service, :window, :liability, :cost, :prices, :total, :merchant_of_record_entity

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:items, :service, :window], 'ShopifyOrderDeliveryMetafield')
            @key = (x = opts.delete(:key); x.nil? ? nil : HttpClient::Preconditions.assert_class('key', x, String))
            @items = HttpClient::Preconditions.assert_class('items', opts.delete(:items), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::ShopifyOrderDeliveryMetafieldItem) ? x : ::Io::Flow::V0::Models::ShopifyOrderDeliveryMetafieldItem.new(x)) }
            @service = (x = opts.delete(:service); x.is_a?(::Io::Flow::V0::Models::ServiceSummary) ? x : ::Io::Flow::V0::Models::ServiceSummary.new(x))
            @window = (x = opts.delete(:window); x.is_a?(::Io::Flow::V0::Models::DeliveryWindow) ? x : ::Io::Flow::V0::Models::DeliveryWindow.new(x))
            @liability = (x = opts.delete(:liability); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::RatecardOwner) ? x : ::Io::Flow::V0::Models::RatecardOwner.apply(x)))
            @cost = (x = opts.delete(:cost); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::MoneyWithOptionalBase) ? x : ::Io::Flow::V0::Models::MoneyWithOptionalBase.new(x)))
            @prices = (x = opts.delete(:prices); x.nil? ? nil : HttpClient::Preconditions.assert_class('prices', x, Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::ShopifyPrice) ? x : ::Io::Flow::V0::Models::ShopifyPrice.new(x)) })
            @total = (x = opts.delete(:total); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::ShopifyPrice) ? x : ::Io::Flow::V0::Models::ShopifyPrice.new(x)))
            @merchant_of_record_entity = (x = opts.delete(:merchant_of_record_entity); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::MerchantOfRecordEntity) ? x : ::Io::Flow::V0::Models::MerchantOfRecordEntity.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ShopifyOrderDeliveryMetafield.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :key => key,
              :items => items.map { |o| o.to_hash },
              :service => service.to_hash,
              :window => window.to_hash,
              :liability => liability.nil? ? nil : liability.value,
              :cost => cost.nil? ? nil : cost.to_hash,
              :prices => prices.nil? ? nil : prices.map { |o| o.to_hash },
              :total => total.nil? ? nil : total.to_hash,
              :merchant_of_record_entity => merchant_of_record_entity.nil? ? nil : merchant_of_record_entity.to_hash
            }
          end

        end

        # Model to represent a delivery metafield
        class ShopifyOrderDeliveryMetafieldItem

          attr_reader :number, :quantity

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:number, :quantity], 'ShopifyOrderDeliveryMetafieldItem')
            @number = HttpClient::Preconditions.assert_class('number', opts.delete(:number), String)
            @quantity = HttpClient::Preconditions.assert_class('quantity', opts.delete(:quantity), Integer)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ShopifyOrderDeliveryMetafieldItem.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :number => number,
              :quantity => quantity
            }
          end

        end

        # Model to represent item's price attributes metafield
        class ShopifyOrderPriceAttributesMetafield

          attr_reader :item_number, :price_attributes

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:item_number, :price_attributes], 'ShopifyOrderPriceAttributesMetafield')
            @item_number = HttpClient::Preconditions.assert_class('item_number', opts.delete(:item_number), String)
            @price_attributes = HttpClient::Preconditions.assert_class('price_attributes', opts.delete(:price_attributes), Hash).inject({}) { |h, d| h[d[0]] = (x = d[1]; x.is_a?(::Io::Flow::V0::Models::PriceWithBase) ? x : ::Io::Flow::V0::Models::PriceWithBase.new(x)); h }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ShopifyOrderPriceAttributesMetafield.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :item_number => item_number,
              :price_attributes => price_attributes.inject({}) { |hash, o| hash[o[0]] = o[1].nil? ? nil : o[1].to_hash; hash }
            }
          end

        end

        # Model to represent romanized order detail metafield
        class ShopifyOrderRomanizationMetafield

          attr_reader :destination, :billing

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:destination], 'ShopifyOrderRomanizationMetafield')
            @destination = (x = opts.delete(:destination); x.is_a?(::Io::Flow::V0::Models::OrderAddress) ? x : ::Io::Flow::V0::Models::OrderAddress.new(x))
            @billing = (x = opts.delete(:billing); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::BillingAddress) ? x : ::Io::Flow::V0::Models::BillingAddress.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ShopifyOrderRomanizationMetafield.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :destination => destination.to_hash,
              :billing => billing.nil? ? nil : billing.to_hash
            }
          end

        end

        class ShopifyPrice

          attr_reader :name, :amount, :cents, :currency, :label, :includes, :local

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:name, :amount, :cents, :currency, :label], 'ShopifyPrice')
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
            @amount = HttpClient::Preconditions.assert_class('amount', opts.delete(:amount), Numeric)
            @cents = HttpClient::Preconditions.assert_class('cents', opts.delete(:cents), Numeric)
            @currency = HttpClient::Preconditions.assert_class('currency', opts.delete(:currency), String)
            @label = HttpClient::Preconditions.assert_class('label', opts.delete(:label), String)
            @includes = (x = opts.delete(:includes); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::IncludedLevies) ? x : ::Io::Flow::V0::Models::IncludedLevies.new(x)))
            @local = (x = opts.delete(:local); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::ShopifyLocalPriceMetadata) ? x : ::Io::Flow::V0::Models::ShopifyLocalPriceMetadata.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ShopifyPrice.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :name => name,
              :amount => amount,
              :cents => cents,
              :currency => currency,
              :label => label,
              :includes => includes.nil? ? nil : includes.to_hash,
              :local => local.nil? ? nil : local.to_hash
            }
          end

        end

        # Shopify private app information.
        class ShopifyPrivateApp

          attr_reader :id, :api_key, :password

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :api_key, :password], 'ShopifyPrivateApp')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @api_key = HttpClient::Preconditions.assert_class('api_key', opts.delete(:api_key), String)
            @password = HttpClient::Preconditions.assert_class('password', opts.delete(:password), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ShopifyPrivateApp.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :api_key => api_key,
              :password => password
            }
          end

        end

        class ShopifyPrivateAppForm

          attr_reader :api_key, :password

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:api_key, :password], 'ShopifyPrivateAppForm')
            @api_key = HttpClient::Preconditions.assert_class('api_key', opts.delete(:api_key), String)
            @password = HttpClient::Preconditions.assert_class('password', opts.delete(:password), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ShopifyPrivateAppForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :api_key => api_key,
              :password => password
            }
          end

        end

        class ShopifySyncStatus

          attr_reader :sync_check, :range, :interval_seconds, :total, :buckets

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:sync_check, :range, :interval_seconds, :total, :buckets], 'ShopifySyncStatus')
            @sync_check = (x = opts.delete(:sync_check); x.is_a?(::Io::Flow::V0::Models::ShopifySyncCheck) ? x : ::Io::Flow::V0::Models::ShopifySyncCheck.apply(x))
            @range = (x = opts.delete(:range); x.is_a?(::Io::Flow::V0::Models::DatetimeRange) ? x : ::Io::Flow::V0::Models::DatetimeRange.new(x))
            @interval_seconds = HttpClient::Preconditions.assert_class('interval_seconds', opts.delete(:interval_seconds), Integer)
            @total = HttpClient::Preconditions.assert_class('total', opts.delete(:total), Integer)
            @buckets = HttpClient::Preconditions.assert_class('buckets', opts.delete(:buckets), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::ShopifyEventBucket) ? x : ::Io::Flow::V0::Models::ShopifyEventBucket.from_json(x)) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ShopifySyncStatus.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :sync_check => sync_check.value,
              :range => range.to_hash,
              :interval_seconds => interval_seconds,
              :total => total,
              :buckets => buckets.map { |o| o.to_hash }
            }
          end

        end

        # The shopify variant metafield defines the individual metafield values we write
        # into Shopify for each variant. This model was introduced to enable server side
        # rendering of content (e.g. the price on the product detail page). Each field
        # in this model is available as its own metafield within a namespace named
        # 'price_abc' where abc is a unique, short identifier for an experience.
        class ShopifyVariantFlowMetafield

          attr_reader :prices_item, :prices_currency, :prices_includes, :prices_vat, :prices_vat_name, :prices_duty, :prices_compare_at, :prices_status, :inventory_status

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:prices_item, :prices_currency, :prices_status], 'ShopifyVariantFlowMetafield')
            @prices_item = HttpClient::Preconditions.assert_class('prices_item', opts.delete(:prices_item), String)
            @prices_currency = HttpClient::Preconditions.assert_class('prices_currency', opts.delete(:prices_currency), String)
            @prices_includes = (x = opts.delete(:prices_includes); x.nil? ? nil : HttpClient::Preconditions.assert_class('prices_includes', x, String))
            @prices_vat = (x = opts.delete(:prices_vat); x.nil? ? nil : HttpClient::Preconditions.assert_class('prices_vat', x, String))
            @prices_vat_name = (x = opts.delete(:prices_vat_name); x.nil? ? nil : HttpClient::Preconditions.assert_class('prices_vat_name', x, String))
            @prices_duty = (x = opts.delete(:prices_duty); x.nil? ? nil : HttpClient::Preconditions.assert_class('prices_duty', x, String))
            @prices_compare_at = (x = opts.delete(:prices_compare_at); x.nil? ? nil : HttpClient::Preconditions.assert_class('prices_compare_at', x, String))
            @prices_status = (x = opts.delete(:prices_status); x.is_a?(::Io::Flow::V0::Models::SubcatalogItemStatus) ? x : ::Io::Flow::V0::Models::SubcatalogItemStatus.apply(x))
            @inventory_status = (x = opts.delete(:inventory_status); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::ItemAvailabilityStatus) ? x : ::Io::Flow::V0::Models::ItemAvailabilityStatus.apply(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ShopifyVariantFlowMetafield.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :prices_item => prices_item,
              :prices_currency => prices_currency,
              :prices_includes => prices_includes,
              :prices_vat => prices_vat,
              :prices_vat_name => prices_vat_name,
              :prices_duty => prices_duty,
              :prices_compare_at => prices_compare_at,
              :prices_status => prices_status.value,
              :inventory_status => inventory_status.nil? ? nil : inventory_status.value
            }
          end

        end

        # For enabled organizations, this indicates the total number of available units
        # of inventory for customers in this experience.
        class ShopifyVariantInventoryMetafield

          attr_reader :experience, :status

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:experience, :status], 'ShopifyVariantInventoryMetafield')
            @experience = (x = opts.delete(:experience); x.is_a?(::Io::Flow::V0::Models::ExperienceReference) ? x : ::Io::Flow::V0::Models::ExperienceReference.new(x))
            @status = (x = opts.delete(:status); x.is_a?(::Io::Flow::V0::Models::ItemAvailabilityStatus) ? x : ::Io::Flow::V0::Models::ItemAvailabilityStatus.apply(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ShopifyVariantInventoryMetafield.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :experience => experience.to_hash,
              :status => status.value
            }
          end

        end

        # A short identifier for a channel or organization that is used to setup account
        # IDs, invoice Prefixes, etc.
        class ShortId

          attr_reader :id, :source, :identifier

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :source, :identifier], 'ShortId')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @source = (x = opts.delete(:source); x.is_a?(::Io::Flow::V0::Models::ShortIdSource) ? x : ::Io::Flow::V0::Models::ShortIdSource.new(x))
            @identifier = HttpClient::Preconditions.assert_class('identifier', opts.delete(:identifier), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ShortId.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :source => source.to_hash,
              :identifier => identifier
            }
          end

        end

        class ShortIdDeleted < Event

          attr_reader :event_id, :timestamp, :id

          def initialize(incoming={})
            super(:discriminator => Event::Types::SHORT_ID_DELETED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :id], 'ShortIdDeleted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ShortIdDeleted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :id => id
            }
          end

        end

        class ShortIdSource

          attr_reader :key, :id

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:key, :id], 'ShortIdSource')
            @key = (x = opts.delete(:key); x.is_a?(::Io::Flow::V0::Models::ShortIdSourceKey) ? x : ::Io::Flow::V0::Models::ShortIdSourceKey.apply(x))
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ShortIdSource.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :key => key.value,
              :id => id
            }
          end

        end

        class ShortIdUpserted < Event

          attr_reader :event_id, :timestamp, :short_id

          def initialize(incoming={})
            super(:discriminator => Event::Types::SHORT_ID_UPSERTED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :short_id], 'ShortIdUpserted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @short_id = (x = opts.delete(:short_id); x.is_a?(::Io::Flow::V0::Models::ShortId) ? x : ::Io::Flow::V0::Models::ShortId.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ShortIdUpserted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :short_id => short_id.to_hash
            }
          end

        end

        # A simple model, used to convey permitted behaviors along with approval of a
        # request for a specific permitted route.
        class SimplePermissionCheck

          attr_reader :behaviors

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:behaviors], 'SimplePermissionCheck')
            @behaviors = HttpClient::Preconditions.assert_class('behaviors', opts.delete(:behaviors), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::FlowBehavior) ? x : ::Io::Flow::V0::Models::FlowBehavior.apply(x)) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            SimplePermissionCheck.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :behaviors => behaviors.map { |o| o.value }
            }
          end

        end

        # Simplified form for notifying Flow of a Fulfillment shipped entirely in a
        # single tracked package.
        class SinglePackageShippingNotificationForm < ShippingNotificationForm

          attr_reader :fulfillment_key, :carrier_tracking_number, :package_dimensions, :service, :shipment_recipient

          def initialize(incoming={})
            super(:discriminator => ShippingNotificationForm::Types::SINGLE_PACKAGE_SHIPPING_NOTIFICATION_FORM)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:fulfillment_key, :carrier_tracking_number], 'SinglePackageShippingNotificationForm')
            @fulfillment_key = HttpClient::Preconditions.assert_class('fulfillment_key', opts.delete(:fulfillment_key), String)
            @carrier_tracking_number = HttpClient::Preconditions.assert_class('carrier_tracking_number', opts.delete(:carrier_tracking_number), String)
            @package_dimensions = (x = opts.delete(:package_dimensions); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Dimension) ? x : ::Io::Flow::V0::Models::Dimension.new(x)))
            @service = (x = opts.delete(:service); x.nil? ? nil : HttpClient::Preconditions.assert_class('service', x, String))
            @shipment_recipient = (x = opts.delete(:shipment_recipient); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::ShipmentRecipient) ? x : ::Io::Flow::V0::Models::ShipmentRecipient.apply(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            SinglePackageShippingNotificationForm.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :fulfillment_key => fulfillment_key,
              :carrier_tracking_number => carrier_tracking_number,
              :package_dimensions => package_dimensions.nil? ? nil : package_dimensions.to_hash,
              :service => service,
              :shipment_recipient => shipment_recipient.nil? ? nil : shipment_recipient.value
            }
          end

        end

        class SnapshotDeleted < Event

          attr_reader :event_id, :timestamp, :snapshot_id

          def initialize(incoming={})
            super(:discriminator => Event::Types::SNAPSHOT_DELETED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :snapshot_id], 'SnapshotDeleted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @snapshot_id = HttpClient::Preconditions.assert_class('snapshot_id', opts.delete(:snapshot_id), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            SnapshotDeleted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :snapshot_id => snapshot_id
            }
          end

        end

        class SnapshotUpserted < Event

          attr_reader :event_id, :timestamp, :organization, :snapshot_id, :available, :center_key, :item_number, :quantity

          def initialize(incoming={})
            super(:discriminator => Event::Types::SNAPSHOT_UPSERTED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :snapshot_id, :available, :center_key, :item_number, :quantity], 'SnapshotUpserted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @snapshot_id = HttpClient::Preconditions.assert_class('snapshot_id', opts.delete(:snapshot_id), String)
            @available = HttpClient::Preconditions.assert_class('available', opts.delete(:available), Integer)
            @center_key = HttpClient::Preconditions.assert_class('center_key', opts.delete(:center_key), String)
            @item_number = HttpClient::Preconditions.assert_class('item_number', opts.delete(:item_number), String)
            @quantity = HttpClient::Preconditions.assert_class('quantity', opts.delete(:quantity), Integer)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            SnapshotUpserted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :snapshot_id => snapshot_id,
              :available => available,
              :center_key => center_key,
              :item_number => item_number,
              :quantity => quantity
            }
          end

        end

        # Exports product level data for import into solidus
        class SolidusProductExportType < ExportType

          attr_reader :numbers, :sort

          def initialize(incoming={})
            super(:discriminator => ExportType::Types::SOLIDUS_PRODUCT_EXPORT_TYPE)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @numbers = (x = opts.delete(:numbers); x.nil? ? nil : HttpClient::Preconditions.assert_class('numbers', x, Array).map { |v| HttpClient::Preconditions.assert_class('numbers', v, String) })
            @sort = (x = opts.delete(:sort); x.nil? ? nil : HttpClient::Preconditions.assert_class('sort', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            SolidusProductExportType.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :numbers => numbers.nil? ? nil : numbers,
              :sort => sort
            }
          end

        end

        # Exports variant level data for import into solidus
        class SolidusVariantExportType < ExportType

          attr_reader :numbers, :sort

          def initialize(incoming={})
            super(:discriminator => ExportType::Types::SOLIDUS_VARIANT_EXPORT_TYPE)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @numbers = (x = opts.delete(:numbers); x.nil? ? nil : HttpClient::Preconditions.assert_class('numbers', x, Array).map { |v| HttpClient::Preconditions.assert_class('numbers', v, String) })
            @sort = (x = opts.delete(:sort); x.nil? ? nil : HttpClient::Preconditions.assert_class('sort', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            SolidusVariantExportType.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :numbers => numbers.nil? ? nil : numbers,
              :sort => sort
            }
          end

        end

        class StreetAddress

          attr_reader :streets, :city, :province, :postal, :country

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @streets = (x = opts.delete(:streets); x.nil? ? nil : HttpClient::Preconditions.assert_class('streets', x, Array).map { |v| HttpClient::Preconditions.assert_class('streets', v, String) })
            @city = (x = opts.delete(:city); x.nil? ? nil : HttpClient::Preconditions.assert_class('city', x, String))
            @province = (x = opts.delete(:province); x.nil? ? nil : HttpClient::Preconditions.assert_class('province', x, String))
            @postal = (x = opts.delete(:postal); x.nil? ? nil : HttpClient::Preconditions.assert_class('postal', x, String))
            @country = (x = opts.delete(:country); x.nil? ? nil : HttpClient::Preconditions.assert_class('country', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            StreetAddress.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :streets => streets.nil? ? nil : streets,
              :city => city,
              :province => province,
              :postal => postal,
              :country => country
            }
          end

        end

        # Stripe authentication data.
        class StripeAuthenticationData < GatewayAuthenticationData

          attr_reader :secret_key_reference

          def initialize(incoming={})
            super(:discriminator => GatewayAuthenticationData::Types::STRIPE_AUTHENTICATION_DATA)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:secret_key_reference], 'StripeAuthenticationData')
            @secret_key_reference = HttpClient::Preconditions.assert_class('secret_key_reference', opts.delete(:secret_key_reference), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            StripeAuthenticationData.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :secret_key_reference => secret_key_reference
            }
          end

        end

        # Used to specify Stripe API secret key.
        class StripeAuthenticationDataForm < GatewayAuthenticationDataForm

          attr_reader :account_id, :secret_key, :key

          def initialize(incoming={})
            super(:discriminator => GatewayAuthenticationDataForm::Types::STRIPE_AUTHENTICATION_DATA_FORM)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:account_id, :secret_key], 'StripeAuthenticationDataForm')
            @account_id = HttpClient::Preconditions.assert_class('account_id', opts.delete(:account_id), String)
            @secret_key = HttpClient::Preconditions.assert_class('secret_key', opts.delete(:secret_key), String)
            @key = (x = opts.delete(:key); x.nil? ? nil : HttpClient::Preconditions.assert_class('key', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            StripeAuthenticationDataForm.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :account_id => account_id,
              :secret_key => secret_key,
              :key => key
            }
          end

        end

        # Provides details for Stripe authorizations (e.g. client secret to be used for
        # 3D Secure).
        class StripeAuthorizationResultActionDetails < AuthorizationResultActionDetails

          attr_reader :client_secret, :payment_method_id, :publishable_key

          def initialize(incoming={})
            super(:discriminator => AuthorizationResultActionDetails::Types::STRIPE_AUTHORIZATION_RESULT_ACTION_DETAILS)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @client_secret = (x = opts.delete(:client_secret); x.nil? ? nil : HttpClient::Preconditions.assert_class('client_secret', x, String))
            @payment_method_id = (x = opts.delete(:payment_method_id); x.nil? ? nil : HttpClient::Preconditions.assert_class('payment_method_id', x, String))
            @publishable_key = (x = opts.delete(:publishable_key); x.nil? ? nil : HttpClient::Preconditions.assert_class('publishable_key', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            StripeAuthorizationResultActionDetails.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :client_secret => client_secret,
              :payment_method_id => payment_method_id,
              :publishable_key => publishable_key
            }
          end

        end

        # A configuration with custom query to select a subset of the catalog items for
        # a localized experience
        class Subcatalog < ExpandableSubcatalog

          attr_reader :id, :catalog, :settings

          def initialize(incoming={})
            super(:discriminator => ExpandableSubcatalog::Types::SUBCATALOG)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :catalog, :settings], 'Subcatalog')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @catalog = (x = opts.delete(:catalog); x.is_a?(::Io::Flow::V0::Models::Catalog) ? x : ::Io::Flow::V0::Models::Catalog.new(x))
            @settings = (x = opts.delete(:settings); x.is_a?(::Io::Flow::V0::Models::SubcatalogSettings) ? x : ::Io::Flow::V0::Models::SubcatalogSettings.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            Subcatalog.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :id => id,
              :catalog => catalog.to_hash,
              :settings => settings.to_hash
            }
          end

        end

        class SubcatalogDeleted < Event

          attr_reader :event_id, :timestamp, :organization, :subcatalog_id

          def initialize(incoming={})
            super(:discriminator => Event::Types::SUBCATALOG_DELETED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :subcatalog_id], 'SubcatalogDeleted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @subcatalog_id = HttpClient::Preconditions.assert_class('subcatalog_id', opts.delete(:subcatalog_id), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            SubcatalogDeleted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :subcatalog_id => subcatalog_id
            }
          end

        end

        class SubcatalogForm

          attr_reader :settings

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @settings = (x = opts.delete(:settings); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::SubcatalogSettingsForm) ? x : ::Io::Flow::V0::Models::SubcatalogSettingsForm.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            SubcatalogForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :settings => settings.nil? ? nil : settings.to_hash
            }
          end

        end

        # Represents information specific to an item in a given subcatalog
        class SubcatalogItem

          attr_reader :id, :item, :status

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :item, :status], 'SubcatalogItem')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @item = (x = opts.delete(:item); x.is_a?(::Io::Flow::V0::Models::Item) ? x : ::Io::Flow::V0::Models::Item.new(x))
            @status = (x = opts.delete(:status); x.is_a?(::Io::Flow::V0::Models::SubcatalogItemStatus) ? x : ::Io::Flow::V0::Models::SubcatalogItemStatus.apply(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            SubcatalogItem.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :item => item.to_hash,
              :status => status.value
            }
          end

        end

        class SubcatalogItemDeleted < Event

          attr_reader :event_id, :timestamp, :organization, :number, :subcatalog_id

          def initialize(incoming={})
            super(:discriminator => Event::Types::SUBCATALOG_ITEM_DELETED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :number, :subcatalog_id], 'SubcatalogItemDeleted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @number = HttpClient::Preconditions.assert_class('number', opts.delete(:number), String)
            @subcatalog_id = HttpClient::Preconditions.assert_class('subcatalog_id', opts.delete(:subcatalog_id), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            SubcatalogItemDeleted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :number => number,
              :subcatalog_id => subcatalog_id
            }
          end

        end

        class SubcatalogItemUpserted < Event

          attr_reader :event_id, :timestamp, :organization, :number, :subcatalog_id, :status

          def initialize(incoming={})
            super(:discriminator => Event::Types::SUBCATALOG_ITEM_UPSERTED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :number, :subcatalog_id, :status], 'SubcatalogItemUpserted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @number = HttpClient::Preconditions.assert_class('number', opts.delete(:number), String)
            @subcatalog_id = HttpClient::Preconditions.assert_class('subcatalog_id', opts.delete(:subcatalog_id), String)
            @status = HttpClient::Preconditions.assert_class('status', opts.delete(:status), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            SubcatalogItemUpserted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :number => number,
              :subcatalog_id => subcatalog_id,
              :status => status
            }
          end

        end

        class SubcatalogItemVersion

          attr_reader :id, :timestamp, :type, :subcatalog_item

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :timestamp, :type, :subcatalog_item], 'SubcatalogItemVersion')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::V0::Models::ChangeType) ? x : ::Io::Flow::V0::Models::ChangeType.apply(x))
            @subcatalog_item = (x = opts.delete(:subcatalog_item); x.is_a?(::Io::Flow::V0::Models::SubcatalogItem) ? x : ::Io::Flow::V0::Models::SubcatalogItem.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            SubcatalogItemVersion.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :timestamp => timestamp,
              :type => type.value,
              :subcatalog_item => subcatalog_item.to_hash
            }
          end

        end

        class SubcatalogReference < ExpandableSubcatalog

          attr_reader :id

          def initialize(incoming={})
            super(:discriminator => ExpandableSubcatalog::Types::SUBCATALOG_REFERENCE)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id], 'SubcatalogReference')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            SubcatalogReference.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :id => id
            }
          end

        end

        class SubcatalogSettings

          attr_reader :update_policy

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @update_policy = (x = (x = opts.delete(:update_policy); x.nil? ? "auto" : x); x.is_a?(::Io::Flow::V0::Models::UpdatePolicy) ? x : ::Io::Flow::V0::Models::UpdatePolicy.apply(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            SubcatalogSettings.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :update_policy => update_policy.value
            }
          end

        end

        class SubcatalogSettingsForm

          attr_reader :update_policy

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @update_policy = (x = opts.delete(:update_policy); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::UpdatePolicy) ? x : ::Io::Flow::V0::Models::UpdatePolicy.apply(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            SubcatalogSettingsForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :update_policy => update_policy.nil? ? nil : update_policy.value
            }
          end

        end

        # Statistics related to the items in this subcatalog, including item count,
        # number of distinct categories, etc.
        class SubcatalogStatistics

          attr_reader :excluded, :included, :restricted, :queue, :catalog

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:excluded, :included, :restricted, :queue, :catalog], 'SubcatalogStatistics')
            @excluded = (x = opts.delete(:excluded); x.is_a?(::Io::Flow::V0::Models::ItemStatistics) ? x : ::Io::Flow::V0::Models::ItemStatistics.new(x))
            @included = (x = opts.delete(:included); x.is_a?(::Io::Flow::V0::Models::ItemStatistics) ? x : ::Io::Flow::V0::Models::ItemStatistics.new(x))
            @restricted = (x = opts.delete(:restricted); x.is_a?(::Io::Flow::V0::Models::ItemStatistics) ? x : ::Io::Flow::V0::Models::ItemStatistics.new(x))
            @queue = (x = opts.delete(:queue); x.is_a?(::Io::Flow::V0::Models::ItemStatistics) ? x : ::Io::Flow::V0::Models::ItemStatistics.new(x))
            @catalog = (x = opts.delete(:catalog); x.is_a?(::Io::Flow::V0::Models::CatalogStatistics) ? x : ::Io::Flow::V0::Models::CatalogStatistics.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            SubcatalogStatistics.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :excluded => excluded.to_hash,
              :included => included.to_hash,
              :restricted => restricted.to_hash,
              :queue => queue.to_hash,
              :catalog => catalog.to_hash
            }
          end

        end

        class SubcatalogUpserted < Event

          attr_reader :event_id, :timestamp, :organization, :subcatalog_id

          def initialize(incoming={})
            super(:discriminator => Event::Types::SUBCATALOG_UPSERTED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :subcatalog_id], 'SubcatalogUpserted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @subcatalog_id = HttpClient::Preconditions.assert_class('subcatalog_id', opts.delete(:subcatalog_id), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            SubcatalogUpserted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :subcatalog_id => subcatalog_id
            }
          end

        end

        class SubcatalogVersion

          attr_reader :id, :timestamp, :type, :subcatalog

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :timestamp, :type, :subcatalog], 'SubcatalogVersion')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::V0::Models::ChangeType) ? x : ::Io::Flow::V0::Models::ChangeType.apply(x))
            @subcatalog = (x = opts.delete(:subcatalog); x.is_a?(::Io::Flow::V0::Models::Subcatalog) ? x : ::Io::Flow::V0::Models::Subcatalog.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            SubcatalogVersion.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :timestamp => timestamp,
              :type => type.value,
              :subcatalog => subcatalog.to_hash
            }
          end

        end

        class Suggestion

          attr_reader :label, :count

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:label, :count], 'Suggestion')
            @label = HttpClient::Preconditions.assert_class('label', opts.delete(:label), String)
            @count = HttpClient::Preconditions.assert_class('count', opts.delete(:count), Integer)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            Suggestion.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :label => label,
              :count => count
            }
          end

        end

        # Minimal form to create a shipping label. Origin and destination are assumed
        # based on a given order's center and final shipping destination, if no center
        # key is provided
        class SummaryShippingLabelForm < ShippingLabelForm

          attr_reader :order_number, :items, :center_key

          def initialize(incoming={})
            super(:discriminator => ShippingLabelForm::Types::SUMMARY_SHIPPING_LABEL_FORM)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:order_number, :items], 'SummaryShippingLabelForm')
            @order_number = HttpClient::Preconditions.assert_class('order_number', opts.delete(:order_number), String)
            @items = HttpClient::Preconditions.assert_class('items', opts.delete(:items), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::LineItemForm) ? x : ::Io::Flow::V0::Models::LineItemForm.new(x)) }
            @center_key = (x = opts.delete(:center_key); x.nil? ? nil : HttpClient::Preconditions.assert_class('center_key', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            SummaryShippingLabelForm.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :order_number => order_number,
              :items => items.map { |o| o.to_hash },
              :center_key => center_key
            }
          end

        end

        # Form for minimal information needed for a client-facilitated shipment where
        # the shipping label and fulfillment was not handled by Flow.
        class SummaryShippingNotificationForm < ShippingNotificationForm

          attr_reader :order_number, :items, :service, :carrier_tracking_number, :key, :shipment_recipient

          def initialize(incoming={})
            super(:discriminator => ShippingNotificationForm::Types::SUMMARY_SHIPPING_NOTIFICATION_FORM)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:order_number, :items, :service, :carrier_tracking_number], 'SummaryShippingNotificationForm')
            @order_number = HttpClient::Preconditions.assert_class('order_number', opts.delete(:order_number), String)
            @items = HttpClient::Preconditions.assert_class('items', opts.delete(:items), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::LineItemForm) ? x : ::Io::Flow::V0::Models::LineItemForm.new(x)) }
            @service = HttpClient::Preconditions.assert_class('service', opts.delete(:service), String)
            @carrier_tracking_number = HttpClient::Preconditions.assert_class('carrier_tracking_number', opts.delete(:carrier_tracking_number), String)
            @key = (x = opts.delete(:key); x.nil? ? nil : HttpClient::Preconditions.assert_class('key', x, String))
            @shipment_recipient = (x = opts.delete(:shipment_recipient); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::ShipmentRecipient) ? x : ::Io::Flow::V0::Models::ShipmentRecipient.apply(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            SummaryShippingNotificationForm.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :order_number => order_number,
              :items => items.map { |o| o.to_hash },
              :service => service,
              :carrier_tracking_number => carrier_tracking_number,
              :key => key,
              :shipment_recipient => shipment_recipient.nil? ? nil : shipment_recipient.value
            }
          end

        end

        # Surcharge responsible parties that can be displayed and selected
        class SurchargeResponsiblePartyDisplay

          attr_reader :name, :responsible_party

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:name, :responsible_party], 'SurchargeResponsiblePartyDisplay')
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
            @responsible_party = (x = opts.delete(:responsible_party); x.is_a?(::Io::Flow::V0::Models::SurchargeResponsibleParty) ? x : ::Io::Flow::V0::Models::SurchargeResponsibleParty.apply(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            SurchargeResponsiblePartyDisplay.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :name => name,
              :responsible_party => responsible_party.value
            }
          end

        end

        class SurchargeSetting

          attr_reader :key, :responsible_party

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:key, :responsible_party], 'SurchargeSetting')
            @key = (x = opts.delete(:key); x.is_a?(::Io::Flow::V0::Models::DeliveryOptionCostDetailComponentKey) ? x : ::Io::Flow::V0::Models::DeliveryOptionCostDetailComponentKey.apply(x))
            @responsible_party = (x = opts.delete(:responsible_party); x.is_a?(::Io::Flow::V0::Models::SurchargeResponsibleParty) ? x : ::Io::Flow::V0::Models::SurchargeResponsibleParty.apply(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            SurchargeSetting.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :key => key.value,
              :responsible_party => responsible_party.value
            }
          end

        end

        # Surcharge settings that can be displayed and configured
        class SurchargeSettingDisplay

          attr_reader :name, :description, :key, :available

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:name, :description, :key, :available], 'SurchargeSettingDisplay')
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
            @description = HttpClient::Preconditions.assert_class('description', opts.delete(:description), String)
            @key = (x = opts.delete(:key); x.is_a?(::Io::Flow::V0::Models::DeliveryOptionCostDetailComponentKey) ? x : ::Io::Flow::V0::Models::DeliveryOptionCostDetailComponentKey.apply(x))
            @available = HttpClient::Preconditions.assert_class('available', opts.delete(:available), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::SurchargeResponsiblePartyDisplay) ? x : ::Io::Flow::V0::Models::SurchargeResponsiblePartyDisplay.new(x)) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            SurchargeSettingDisplay.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :name => name,
              :description => description,
              :key => key.value,
              :available => available.map { |o| o.to_hash }
            }
          end

        end

        # Represents a duration of time with the ability to convert to a scala
        # FiniteDuration.
        class SyncDuration

          attr_reader :unit, :value

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:unit, :value], 'SyncDuration')
            @unit = (x = opts.delete(:unit); x.is_a?(::Io::Flow::V0::Models::SyncUnitOfTime) ? x : ::Io::Flow::V0::Models::SyncUnitOfTime.apply(x))
            @value = HttpClient::Preconditions.assert_class('value', opts.delete(:value), Integer)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            SyncDuration.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :unit => unit.value,
              :value => value
            }
          end

        end

        class SyncPendingRecord

          attr_reader :id, :stream, :value, :system

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :stream, :value, :system], 'SyncPendingRecord')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @stream = (x = opts.delete(:stream); x.is_a?(::Io::Flow::V0::Models::SyncStreamReference) ? x : ::Io::Flow::V0::Models::SyncStreamReference.new(x))
            @value = HttpClient::Preconditions.assert_class('value', opts.delete(:value), String)
            @system = HttpClient::Preconditions.assert_class('system', opts.delete(:system), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            SyncPendingRecord.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :stream => stream.to_hash,
              :value => value,
              :system => system
            }
          end

        end

        class SyncRecord

          attr_reader :id, :system, :value, :stream

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :system, :value, :stream], 'SyncRecord')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @system = HttpClient::Preconditions.assert_class('system', opts.delete(:system), String)
            @value = HttpClient::Preconditions.assert_class('value', opts.delete(:value), String)
            @stream = (x = opts.delete(:stream); x.is_a?(::Io::Flow::V0::Models::SyncStreamReference) ? x : ::Io::Flow::V0::Models::SyncStreamReference.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            SyncRecord.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :system => system,
              :value => value,
              :stream => stream.to_hash
            }
          end

        end

        class SyncRecordFailure

          attr_reader :id, :stream, :value, :system, :reason, :attributes

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :stream, :value, :system, :reason], 'SyncRecordFailure')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @stream = (x = opts.delete(:stream); x.is_a?(::Io::Flow::V0::Models::SyncStreamReference) ? x : ::Io::Flow::V0::Models::SyncStreamReference.new(x))
            @value = HttpClient::Preconditions.assert_class('value', opts.delete(:value), String)
            @system = HttpClient::Preconditions.assert_class('system', opts.delete(:system), String)
            @reason = (x = opts.delete(:reason); x.is_a?(::Io::Flow::V0::Models::SyncRecordFailureReason) ? x : ::Io::Flow::V0::Models::SyncRecordFailureReason.apply(x))
            @attributes = (x = opts.delete(:attributes); x.nil? ? nil : HttpClient::Preconditions.assert_class('attributes', x, Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h })
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            SyncRecordFailure.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :stream => stream.to_hash,
              :value => value,
              :system => system,
              :reason => reason.value,
              :attributes => attributes.nil? ? nil : attributes
            }
          end

        end

        class SyncRecordFailureForm

          attr_reader :stream_key, :value, :system, :reason, :attributes

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:stream_key, :value, :system, :reason], 'SyncRecordFailureForm')
            @stream_key = HttpClient::Preconditions.assert_class('stream_key', opts.delete(:stream_key), String)
            @value = HttpClient::Preconditions.assert_class('value', opts.delete(:value), String)
            @system = HttpClient::Preconditions.assert_class('system', opts.delete(:system), String)
            @reason = (x = opts.delete(:reason); x.is_a?(::Io::Flow::V0::Models::SyncRecordFailureReason) ? x : ::Io::Flow::V0::Models::SyncRecordFailureReason.apply(x))
            @attributes = (x = opts.delete(:attributes); x.nil? ? nil : HttpClient::Preconditions.assert_class('attributes', x, Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h })
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            SyncRecordFailureForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :stream_key => stream_key,
              :value => value,
              :system => system,
              :reason => reason.value,
              :attributes => attributes.nil? ? nil : attributes
            }
          end

        end

        class SyncRecordForm

          attr_reader :stream_key, :system, :value

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:stream_key, :system, :value], 'SyncRecordForm')
            @stream_key = HttpClient::Preconditions.assert_class('stream_key', opts.delete(:stream_key), String)
            @system = HttpClient::Preconditions.assert_class('system', opts.delete(:system), String)
            @value = HttpClient::Preconditions.assert_class('value', opts.delete(:value), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            SyncRecordForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :stream_key => stream_key,
              :system => system,
              :value => value
            }
          end

        end

        class SyncStream

          attr_reader :id, :key, :type, :systems, :settings

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :key, :type, :systems, :settings], 'SyncStream')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @key = HttpClient::Preconditions.assert_class('key', opts.delete(:key), String)
            @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::V0::Models::SyncStreamType) ? x : ::Io::Flow::V0::Models::SyncStreamType.apply(x))
            @systems = HttpClient::Preconditions.assert_class('systems', opts.delete(:systems), Array).map { |v| HttpClient::Preconditions.assert_class('systems', v, String) }
            @settings = (x = opts.delete(:settings); x.is_a?(::Io::Flow::V0::Models::SyncStreamSettings) ? x : ::Io::Flow::V0::Models::SyncStreamSettings.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            SyncStream.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :key => key,
              :type => type.value,
              :systems => systems,
              :settings => settings.to_hash
            }
          end

        end

        class SyncStreamForm

          attr_reader :type, :systems, :settings

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:type, :systems], 'SyncStreamForm')
            @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::V0::Models::SyncStreamType) ? x : ::Io::Flow::V0::Models::SyncStreamType.apply(x))
            @systems = HttpClient::Preconditions.assert_class('systems', opts.delete(:systems), Array).map { |v| HttpClient::Preconditions.assert_class('systems', v, String) }
            @settings = (x = opts.delete(:settings); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::SyncStreamSettingsForm) ? x : ::Io::Flow::V0::Models::SyncStreamSettingsForm.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            SyncStreamForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :type => type.value,
              :systems => systems,
              :settings => settings.nil? ? nil : settings.to_hash
            }
          end

        end

        class SyncStreamReference

          attr_reader :id, :key

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :key], 'SyncStreamReference')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @key = HttpClient::Preconditions.assert_class('key', opts.delete(:key), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            SyncStreamReference.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :key => key
            }
          end

        end

        class SyncStreamSettings

          attr_reader :pending_record_after, :warn_after, :error_after

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:pending_record_after, :warn_after, :error_after], 'SyncStreamSettings')
            @pending_record_after = (x = opts.delete(:pending_record_after); x.is_a?(::Io::Flow::V0::Models::SyncDuration) ? x : ::Io::Flow::V0::Models::SyncDuration.new(x))
            @warn_after = (x = opts.delete(:warn_after); x.is_a?(::Io::Flow::V0::Models::SyncDuration) ? x : ::Io::Flow::V0::Models::SyncDuration.new(x))
            @error_after = (x = opts.delete(:error_after); x.is_a?(::Io::Flow::V0::Models::SyncDuration) ? x : ::Io::Flow::V0::Models::SyncDuration.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            SyncStreamSettings.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :pending_record_after => pending_record_after.to_hash,
              :warn_after => warn_after.to_hash,
              :error_after => error_after.to_hash
            }
          end

        end

        class SyncStreamSettingsForm

          attr_reader :pending_record_after, :warn_after, :error_after

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:pending_record_after, :warn_after, :error_after], 'SyncStreamSettingsForm')
            @pending_record_after = (x = opts.delete(:pending_record_after); x.is_a?(::Io::Flow::V0::Models::SyncDuration) ? x : ::Io::Flow::V0::Models::SyncDuration.new(x))
            @warn_after = (x = opts.delete(:warn_after); x.is_a?(::Io::Flow::V0::Models::SyncDuration) ? x : ::Io::Flow::V0::Models::SyncDuration.new(x))
            @error_after = (x = opts.delete(:error_after); x.is_a?(::Io::Flow::V0::Models::SyncDuration) ? x : ::Io::Flow::V0::Models::SyncDuration.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            SyncStreamSettingsForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :pending_record_after => pending_record_after.to_hash,
              :warn_after => warn_after.to_hash,
              :error_after => error_after.to_hash
            }
          end

        end

        # Represents a simple model of taxes that apply to a given item / destination.
        class Tax

          attr_reader :name, :rate, :components, :deminimis

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:name, :rate, :components], 'Tax')
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
            @rate = HttpClient::Preconditions.assert_class('rate', HttpClient::Helper.to_big_decimal(opts.delete(:rate)), BigDecimal)
            @components = HttpClient::Preconditions.assert_class('components', opts.delete(:components), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::LevyComponent) ? x : ::Io::Flow::V0::Models::LevyComponent.apply(x)) }
            @deminimis = (x = opts.delete(:deminimis); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Deminimis) ? x : ::Io::Flow::V0::Models::Deminimis.from_json(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            Tax.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :name => name,
              :rate => rate.to_f.to_s,
              :components => components.map { |o| o.value },
              :deminimis => deminimis.nil? ? nil : deminimis.to_hash
            }
          end

        end

        class TaxDutyCalculatorValidationError

          attr_reader :code, :messages, :codes

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:code, :messages, :codes], 'TaxDutyCalculatorValidationError')
            @code = (x = opts.delete(:code); x.is_a?(::Io::Flow::V0::Models::TaxDutyCalculatorValidationErrorCode) ? x : ::Io::Flow::V0::Models::TaxDutyCalculatorValidationErrorCode.apply(x))
            @messages = HttpClient::Preconditions.assert_class('messages', opts.delete(:messages), Array).map { |v| HttpClient::Preconditions.assert_class('messages', v, String) }
            @codes = HttpClient::Preconditions.assert_class('codes', opts.delete(:codes), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::TaxDutyCalculatorValidationErrorCode) ? x : ::Io::Flow::V0::Models::TaxDutyCalculatorValidationErrorCode.apply(x)) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            TaxDutyCalculatorValidationError.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :code => code.value,
              :messages => messages,
              :codes => codes.map { |o| o.value }
            }
          end

        end

        # An order to have tax and duty calculated. Quote will provide all values in the
        # local currency.
        class TaxDutyQuote

          attr_reader :id, :primary_identifier, :attributes, :merchant_of_record, :delivered_duty, :destination, :quote_date, :currency, :lines, :shipping, :total_values

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :primary_identifier, :destination, :quote_date, :currency, :lines, :shipping, :total_values], 'TaxDutyQuote')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @primary_identifier = HttpClient::Preconditions.assert_class('primary_identifier', opts.delete(:primary_identifier), String)
            @attributes = HttpClient::Preconditions.assert_class('attributes', (x = opts.delete(:attributes); x.nil? ? {} : x), Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h }
            @merchant_of_record = (x = (x = opts.delete(:merchant_of_record); x.nil? ? "flow" : x); x.is_a?(::Io::Flow::V0::Models::MerchantOfRecord) ? x : ::Io::Flow::V0::Models::MerchantOfRecord.apply(x))
            @delivered_duty = (x = (x = opts.delete(:delivered_duty); x.nil? ? "paid" : x); x.is_a?(::Io::Flow::V0::Models::DeliveredDuty) ? x : ::Io::Flow::V0::Models::DeliveredDuty.apply(x))
            @destination = (x = opts.delete(:destination); x.is_a?(::Io::Flow::V0::Models::StreetAddress) ? x : ::Io::Flow::V0::Models::StreetAddress.new(x))
            @quote_date = HttpClient::Preconditions.assert_class('quote_date', HttpClient::Helper.to_date_time_iso8601(opts.delete(:quote_date)), DateTime)
            @currency = HttpClient::Preconditions.assert_class('currency', opts.delete(:currency), String)
            @lines = HttpClient::Preconditions.assert_class('lines', opts.delete(:lines), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::TaxDutyQuoteLineItem) ? x : ::Io::Flow::V0::Models::TaxDutyQuoteLineItem.new(x)) }
            @shipping = HttpClient::Preconditions.assert_class('shipping', opts.delete(:shipping), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::TaxDutyQuoteSimpleShipping) ? x : ::Io::Flow::V0::Models::TaxDutyQuoteSimpleShipping.new(x)) }
            @total_values = (x = opts.delete(:total_values); x.is_a?(::Io::Flow::V0::Models::TaxDutyQuoteValues) ? x : ::Io::Flow::V0::Models::TaxDutyQuoteValues.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            TaxDutyQuote.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :primary_identifier => primary_identifier,
              :attributes => attributes,
              :merchant_of_record => merchant_of_record.value,
              :delivered_duty => delivered_duty.value,
              :destination => destination.to_hash,
              :quote_date => quote_date,
              :currency => currency,
              :lines => lines.map { |o| o.to_hash },
              :shipping => shipping.map { |o| o.to_hash },
              :total_values => total_values.to_hash
            }
          end

        end

        # Value of a fee associated with customs or import.
        class TaxDutyQuoteFeeValue

          attr_reader :amount, :description, :amount_refundable_on_return

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:amount, :description, :amount_refundable_on_return], 'TaxDutyQuoteFeeValue')
            @amount = HttpClient::Preconditions.assert_class('amount', HttpClient::Helper.to_big_decimal(opts.delete(:amount)), BigDecimal)
            @description = HttpClient::Preconditions.assert_class('description', opts.delete(:description), String)
            @amount_refundable_on_return = HttpClient::Preconditions.assert_class('amount_refundable_on_return', HttpClient::Helper.to_big_decimal(opts.delete(:amount_refundable_on_return)), BigDecimal)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            TaxDutyQuoteFeeValue.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :amount => amount.to_f.to_s,
              :description => description,
              :amount_refundable_on_return => amount_refundable_on_return.to_f.to_s
            }
          end

        end

        # Calculates tax and duty in two currencies, representing consumer and client
        # values for an MoR sale. Preserves de minimis and LVG calculations from the
        # consumer sale.
        class TaxDutyQuoteForm

          attr_reader :primary_identifier, :attributes, :delivered_duty, :destination, :currency, :lines, :shipping

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:primary_identifier, :destination, :currency, :lines, :shipping], 'TaxDutyQuoteForm')
            @primary_identifier = HttpClient::Preconditions.assert_class('primary_identifier', opts.delete(:primary_identifier), String)
            @attributes = HttpClient::Preconditions.assert_class('attributes', (x = opts.delete(:attributes); x.nil? ? {} : x), Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h }
            @delivered_duty = (x = (x = opts.delete(:delivered_duty); x.nil? ? "paid" : x); x.is_a?(::Io::Flow::V0::Models::DeliveredDuty) ? x : ::Io::Flow::V0::Models::DeliveredDuty.apply(x))
            @destination = (x = opts.delete(:destination); x.is_a?(::Io::Flow::V0::Models::StreetAddress) ? x : ::Io::Flow::V0::Models::StreetAddress.new(x))
            @currency = HttpClient::Preconditions.assert_class('currency', opts.delete(:currency), String)
            @lines = HttpClient::Preconditions.assert_class('lines', opts.delete(:lines), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::TaxDutyQuoteLineItemForm) ? x : ::Io::Flow::V0::Models::TaxDutyQuoteLineItemForm.new(x)) }
            @shipping = HttpClient::Preconditions.assert_class('shipping', opts.delete(:shipping), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::TaxDutyQuoteSimpleShippingForm) ? x : ::Io::Flow::V0::Models::TaxDutyQuoteSimpleShippingForm.new(x)) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            TaxDutyQuoteForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :primary_identifier => primary_identifier,
              :attributes => attributes,
              :delivered_duty => delivered_duty.value,
              :destination => destination.to_hash,
              :currency => currency,
              :lines => lines.map { |o| o.to_hash },
              :shipping => shipping.map { |o| o.to_hash }
            }
          end

        end

        # An ordered quantity of goods for tax and duty calculation.
        class TaxDutyQuoteLineItem

          attr_reader :primary_identifier, :attributes, :ship_from, :quantity, :unit_values, :country_of_origin, :hs_code

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:primary_identifier, :ship_from, :quantity, :unit_values, :country_of_origin, :hs_code], 'TaxDutyQuoteLineItem')
            @primary_identifier = HttpClient::Preconditions.assert_class('primary_identifier', opts.delete(:primary_identifier), String)
            @attributes = HttpClient::Preconditions.assert_class('attributes', (x = opts.delete(:attributes); x.nil? ? {} : x), Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h }
            @ship_from = (x = opts.delete(:ship_from); x.is_a?(::Io::Flow::V0::Models::StreetAddress) ? x : ::Io::Flow::V0::Models::StreetAddress.new(x))
            @quantity = HttpClient::Preconditions.assert_class('quantity', opts.delete(:quantity), Integer)
            @unit_values = (x = opts.delete(:unit_values); x.is_a?(::Io::Flow::V0::Models::TaxDutyQuoteValues) ? x : ::Io::Flow::V0::Models::TaxDutyQuoteValues.new(x))
            @country_of_origin = HttpClient::Preconditions.assert_class('country_of_origin', opts.delete(:country_of_origin), String)
            @hs_code = HttpClient::Preconditions.assert_class('hs_code', opts.delete(:hs_code), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            TaxDutyQuoteLineItem.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :primary_identifier => primary_identifier,
              :attributes => attributes,
              :ship_from => ship_from.to_hash,
              :quantity => quantity,
              :unit_values => unit_values.to_hash,
              :country_of_origin => country_of_origin,
              :hs_code => hs_code
            }
          end

        end

        # An ordered quantity of goods for tax and duty calculation. At least one of
        # line_number, line_id, item_number or sku is required.
        class TaxDutyQuoteLineItemForm

          attr_reader :primary_identifier, :attributes, :ship_from, :quantity, :unit_price, :unit_weight, :country_of_origin, :hs_code, :includes

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:primary_identifier, :ship_from, :quantity, :unit_price, :hs_code], 'TaxDutyQuoteLineItemForm')
            @primary_identifier = HttpClient::Preconditions.assert_class('primary_identifier', opts.delete(:primary_identifier), String)
            @attributes = HttpClient::Preconditions.assert_class('attributes', (x = opts.delete(:attributes); x.nil? ? {} : x), Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h }
            @ship_from = (x = opts.delete(:ship_from); x.is_a?(::Io::Flow::V0::Models::StreetAddress) ? x : ::Io::Flow::V0::Models::StreetAddress.new(x))
            @quantity = HttpClient::Preconditions.assert_class('quantity', opts.delete(:quantity), Integer)
            @unit_price = HttpClient::Preconditions.assert_class('unit_price', HttpClient::Helper.to_big_decimal(opts.delete(:unit_price)), BigDecimal)
            @unit_weight = (x = opts.delete(:unit_weight); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Measurement) ? x : ::Io::Flow::V0::Models::Measurement.new(x)))
            @country_of_origin = (x = opts.delete(:country_of_origin); x.nil? ? nil : HttpClient::Preconditions.assert_class('country_of_origin', x, String))
            @hs_code = HttpClient::Preconditions.assert_class('hs_code', opts.delete(:hs_code), String)
            @includes = HttpClient::Preconditions.assert_class('includes', (x = opts.delete(:includes); x.nil? ? [] : x), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::LevyInclusion) ? x : ::Io::Flow::V0::Models::LevyInclusion.apply(x)) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            TaxDutyQuoteLineItemForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :primary_identifier => primary_identifier,
              :attributes => attributes,
              :ship_from => ship_from.to_hash,
              :quantity => quantity,
              :unit_price => unit_price.to_f.to_s,
              :unit_weight => unit_weight.nil? ? nil : unit_weight.to_hash,
              :country_of_origin => country_of_origin,
              :hs_code => hs_code,
              :includes => includes.map { |o| o.value }
            }
          end

        end

        # Value of a levy (tax or duty) with no additional detail.
        class TaxDutyQuoteSimpleLevyValue < TaxDutyQuoteLevyValue

          attr_reader :amount, :rate, :description, :zero_levy_reason, :amount_refundable_on_return

          def initialize(incoming={})
            super(:discriminator => TaxDutyQuoteLevyValue::Types::TAX_DUTY_QUOTE_SIMPLE_LEVY_VALUE)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:amount, :rate, :description, :amount_refundable_on_return], 'TaxDutyQuoteSimpleLevyValue')
            @amount = HttpClient::Preconditions.assert_class('amount', HttpClient::Helper.to_big_decimal(opts.delete(:amount)), BigDecimal)
            @rate = HttpClient::Preconditions.assert_class('rate', HttpClient::Helper.to_big_decimal(opts.delete(:rate)), BigDecimal)
            @description = HttpClient::Preconditions.assert_class('description', opts.delete(:description), String)
            @zero_levy_reason = (x = opts.delete(:zero_levy_reason); x.nil? ? nil : HttpClient::Preconditions.assert_class('zero_levy_reason', x, Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::ZeroLevyReasonCode) ? x : ::Io::Flow::V0::Models::ZeroLevyReasonCode.apply(x)) })
            @amount_refundable_on_return = HttpClient::Preconditions.assert_class('amount_refundable_on_return', HttpClient::Helper.to_big_decimal(opts.delete(:amount_refundable_on_return)), BigDecimal)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            TaxDutyQuoteSimpleLevyValue.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :amount => amount.to_f.to_s,
              :rate => rate.to_f.to_s,
              :description => description,
              :zero_levy_reason => zero_levy_reason.nil? ? nil : zero_levy_reason.map { |o| o.value },
              :amount_refundable_on_return => amount_refundable_on_return.to_f.to_s
            }
          end

        end

        # An ordered quantity of goods for tax and duty calculation.
        class TaxDutyQuoteSimpleShipping

          attr_reader :values, :ship_from

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:values, :ship_from], 'TaxDutyQuoteSimpleShipping')
            @values = (x = opts.delete(:values); x.is_a?(::Io::Flow::V0::Models::TaxDutyQuoteValues) ? x : ::Io::Flow::V0::Models::TaxDutyQuoteValues.new(x))
            @ship_from = (x = opts.delete(:ship_from); x.is_a?(::Io::Flow::V0::Models::StreetAddress) ? x : ::Io::Flow::V0::Models::StreetAddress.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            TaxDutyQuoteSimpleShipping.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :values => values.to_hash,
              :ship_from => ship_from.to_hash
            }
          end

        end

        # Shipping revenue paid by the consumer for a single shipping charge. If a
        # shipping revenue line is not provided for any ship_from location, it will be
        # assumed no shipping was collected for shipments from this location.
        class TaxDutyQuoteSimpleShippingForm

          attr_reader :price, :includes, :ship_from

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:price], 'TaxDutyQuoteSimpleShippingForm')
            @price = HttpClient::Preconditions.assert_class('price', HttpClient::Helper.to_big_decimal(opts.delete(:price)), BigDecimal)
            @includes = HttpClient::Preconditions.assert_class('includes', (x = opts.delete(:includes); x.nil? ? [] : x), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::LevyInclusion) ? x : ::Io::Flow::V0::Models::LevyInclusion.apply(x)) }
            @ship_from = (x = opts.delete(:ship_from); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::StreetAddress) ? x : ::Io::Flow::V0::Models::StreetAddress.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            TaxDutyQuoteSimpleShippingForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :price => price.to_f.to_s,
              :includes => includes.map { |o| o.value },
              :ship_from => ship_from.nil? ? nil : ship_from.to_hash
            }
          end

        end

        class TaxDutyQuoteValues

          attr_reader :price, :duty, :tax, :fees, :total

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:price, :duty, :tax, :fees, :total], 'TaxDutyQuoteValues')
            @price = HttpClient::Preconditions.assert_class('price', HttpClient::Helper.to_big_decimal(opts.delete(:price)), BigDecimal)
            @duty = (x = opts.delete(:duty); x.is_a?(::Io::Flow::V0::Models::TaxDutyQuoteSimpleLevyValue) ? x : ::Io::Flow::V0::Models::TaxDutyQuoteSimpleLevyValue.new(x))
            @tax = (x = opts.delete(:tax); x.is_a?(::Io::Flow::V0::Models::TaxDutyQuoteSimpleLevyValue) ? x : ::Io::Flow::V0::Models::TaxDutyQuoteSimpleLevyValue.new(x))
            @fees = (x = opts.delete(:fees); x.is_a?(::Io::Flow::V0::Models::TaxDutyQuoteFeeValue) ? x : ::Io::Flow::V0::Models::TaxDutyQuoteFeeValue.new(x))
            @total = HttpClient::Preconditions.assert_class('total', HttpClient::Helper.to_big_decimal(opts.delete(:total)), BigDecimal)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            TaxDutyQuoteValues.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :price => price.to_f.to_s,
              :duty => duty.to_hash,
              :tax => tax.to_hash,
              :fees => fees.to_hash,
              :total => total.to_f.to_s
            }
          end

        end

        # Result of looking up a specific tax registration number. Indicates validity of
        # a number for a specific country and (if valid) the associated person/company.
        class TaxRegistration

          attr_reader :id, :key, :number, :timestamp, :result, :result_reason, :name, :address, :company_name

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :key, :number, :timestamp, :result], 'TaxRegistration')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @key = HttpClient::Preconditions.assert_class('key', opts.delete(:key), String)
            @number = HttpClient::Preconditions.assert_class('number', opts.delete(:number), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @result = (x = opts.delete(:result); x.is_a?(::Io::Flow::V0::Models::TaxVerificationResult) ? x : ::Io::Flow::V0::Models::TaxVerificationResult.apply(x))
            @result_reason = (x = opts.delete(:result_reason); x.nil? ? nil : HttpClient::Preconditions.assert_class('result_reason', x, String))
            @name = (x = opts.delete(:name); x.nil? ? nil : HttpClient::Preconditions.assert_class('name', x, String))
            @address = (x = opts.delete(:address); x.nil? ? nil : HttpClient::Preconditions.assert_class('address', x, String))
            @company_name = (x = opts.delete(:company_name); x.nil? ? nil : HttpClient::Preconditions.assert_class('company_name', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            TaxRegistration.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :key => key,
              :number => number,
              :timestamp => timestamp,
              :result => result.value,
              :result_reason => result_reason,
              :name => name,
              :address => address,
              :company_name => company_name
            }
          end

        end

        class TaxRegistrationForm

          attr_reader :number, :company_name

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:number], 'TaxRegistrationForm')
            @number = HttpClient::Preconditions.assert_class('number', opts.delete(:number), String)
            @company_name = (x = opts.delete(:company_name); x.nil? ? nil : HttpClient::Preconditions.assert_class('company_name', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            TaxRegistrationForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :number => number,
              :company_name => company_name
            }
          end

        end

        class TaxReport

          attr_reader :schedule, :timezone, :types, :email_recipients

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:schedule, :timezone], 'TaxReport')
            @schedule = (x = opts.delete(:schedule); x.is_a?(::Io::Flow::V0::Models::RepeatSchedule) ? x : ::Io::Flow::V0::Models::RepeatSchedule.from_json(x))
            @timezone = HttpClient::Preconditions.assert_class('timezone', opts.delete(:timezone), String)
            @types = HttpClient::Preconditions.assert_class('types', (x = opts.delete(:types); x.nil? ? ["consumer","b2b"] : x), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::TaxReportType) ? x : ::Io::Flow::V0::Models::TaxReportType.apply(x)) }
            @email_recipients = (x = opts.delete(:email_recipients); x.nil? ? nil : HttpClient::Preconditions.assert_class('email_recipients', x, Array).map { |v| HttpClient::Preconditions.assert_class('email_recipients', v, String) })
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            TaxReport.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :schedule => schedule.to_hash,
              :timezone => timezone,
              :types => types.map { |o| o.value },
              :email_recipients => email_recipients.nil? ? nil : email_recipients
            }
          end

        end

        # Represents the results from 3D Secure, if applied to an authorization
        class ThreeDSecure

          attr_reader :code, :description

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:code], 'ThreeDSecure')
            @code = (x = opts.delete(:code); x.is_a?(::Io::Flow::V0::Models::ThreeDSecureCode) ? x : ::Io::Flow::V0::Models::ThreeDSecureCode.apply(x))
            @description = (x = opts.delete(:description); x.nil? ? nil : HttpClient::Preconditions.assert_class('description', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ThreeDSecure.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :code => code.value,
              :description => description
            }
          end

        end

        # Information necessary to perform a 3ds Challenge action inline to the user
        # experience.
        class ThreedsChallengeActionDetails < AuthorizationResultActionDetails

          attr_reader :threeds_challenge_action, :expires_at

          def initialize(incoming={})
            super(:discriminator => AuthorizationResultActionDetails::Types::THREEDS_CHALLENGE_ACTION_DETAILS)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:threeds_challenge_action, :expires_at], 'ThreedsChallengeActionDetails')
            @threeds_challenge_action = (x = opts.delete(:threeds_challenge_action); x.is_a?(::Io::Flow::V0::Models::ThreedsChallengeAction) ? x : ::Io::Flow::V0::Models::ThreedsChallengeAction.from_json(x))
            @expires_at = HttpClient::Preconditions.assert_class('expires_at', HttpClient::Helper.to_date_time_iso8601(opts.delete(:expires_at)), DateTime)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ThreedsChallengeActionDetails.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :threeds_challenge_action => threeds_challenge_action.to_hash,
              :expires_at => expires_at
            }
          end

        end

        # Information necessary to perform a 3ds Identify action inline to the user
        # experience.
        class ThreedsIdentifyActionDetails < AuthorizationResultActionDetails

          attr_reader :threeds_identify_action, :expires_at

          def initialize(incoming={})
            super(:discriminator => AuthorizationResultActionDetails::Types::THREEDS_IDENTIFY_ACTION_DETAILS)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:threeds_identify_action, :expires_at], 'ThreedsIdentifyActionDetails')
            @threeds_identify_action = (x = opts.delete(:threeds_identify_action); x.is_a?(::Io::Flow::V0::Models::ThreedsIdentifyAction) ? x : ::Io::Flow::V0::Models::ThreedsIdentifyAction.from_json(x))
            @expires_at = HttpClient::Preconditions.assert_class('expires_at', HttpClient::Helper.to_date_time_iso8601(opts.delete(:expires_at)), DateTime)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ThreedsIdentifyActionDetails.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :threeds_identify_action => threeds_identify_action.to_hash,
              :expires_at => expires_at
            }
          end

        end

        # Data that must be passed to the 3DS Client to help the issuer ACS render a
        # challenge for the user.
        class ThreedsTwoChallengeRequest < ThreedsChallengeAction

          attr_reader :acs_url, :challenge_request, :session_data

          def initialize(incoming={})
            super(:discriminator => ThreedsChallengeAction::Types::THREEDS_TWO_CHALLENGE_REQUEST)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:acs_url, :challenge_request], 'ThreedsTwoChallengeRequest')
            @acs_url = HttpClient::Preconditions.assert_class('acs_url', opts.delete(:acs_url), String)
            @challenge_request = HttpClient::Preconditions.assert_class('challenge_request', opts.delete(:challenge_request), String)
            @session_data = (x = opts.delete(:session_data); x.nil? ? nil : HttpClient::Preconditions.assert_class('session_data', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ThreedsTwoChallengeRequest.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :acs_url => acs_url,
              :challenge_request => challenge_request,
              :session_data => session_data
            }
          end

        end

        # Data that must be rendered by the 3DS Client in order to help the issuer ACS
        # silently identify the user. This format doesn't decompose the ACS identify
        # method.
        class ThreedsTwoMethod < ThreedsIdentifyAction

          attr_reader :method

          def initialize(incoming={})
            super(:discriminator => ThreedsIdentifyAction::Types::THREEDS_TWO_METHOD)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:method], 'ThreedsTwoMethod')
            @method = HttpClient::Preconditions.assert_class('method', opts.delete(:method), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ThreedsTwoMethod.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :method => method
            }
          end

        end

        # Service shipping tier available in this tier group. e.g. Standard tier,
        # Express tier, Economy tier
        class Tier

          attr_reader :id, :direction, :integration, :name, :message, :rules, :services, :strategy, :visibility, :currency, :description, :display, :shipping_lane, :surcharge_settings, :lane, :settings

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :integration, :name, :rules, :services, :strategy, :visibility, :currency], 'Tier')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @direction = (x = (x = opts.delete(:direction); x.nil? ? "outbound" : x); x.is_a?(::Io::Flow::V0::Models::LaneDirection) ? x : ::Io::Flow::V0::Models::LaneDirection.apply(x))
            @integration = (x = opts.delete(:integration); x.is_a?(::Io::Flow::V0::Models::ShipmentIntegrationType) ? x : ::Io::Flow::V0::Models::ShipmentIntegrationType.apply(x))
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
            @message = (x = opts.delete(:message); x.nil? ? nil : HttpClient::Preconditions.assert_class('message', x, String))
            @rules = HttpClient::Preconditions.assert_class('rules', opts.delete(:rules), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::TierRule) ? x : ::Io::Flow::V0::Models::TierRule.new(x)) }
            @services = HttpClient::Preconditions.assert_class('services', opts.delete(:services), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::CarrierService) ? x : ::Io::Flow::V0::Models::CarrierService.new(x)) }
            @strategy = (x = opts.delete(:strategy); x.is_a?(::Io::Flow::V0::Models::TierStrategy) ? x : ::Io::Flow::V0::Models::TierStrategy.apply(x))
            @visibility = (x = opts.delete(:visibility); x.is_a?(::Io::Flow::V0::Models::Visibility) ? x : ::Io::Flow::V0::Models::Visibility.apply(x))
            @currency = HttpClient::Preconditions.assert_class('currency', opts.delete(:currency), String)
            @description = (x = opts.delete(:description); x.nil? ? nil : HttpClient::Preconditions.assert_class('description', x, String))
            @display = (x = opts.delete(:display); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::TierDisplay) ? x : ::Io::Flow::V0::Models::TierDisplay.new(x)))
            @shipping_lane = (x = opts.delete(:shipping_lane); x.nil? ? nil : HttpClient::Preconditions.assert_class('shipping_lane', x, String))
            @surcharge_settings = (x = opts.delete(:surcharge_settings); x.nil? ? nil : HttpClient::Preconditions.assert_class('surcharge_settings', x, Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::SurchargeSetting) ? x : ::Io::Flow::V0::Models::SurchargeSetting.new(x)) })
            @lane = (x = opts.delete(:lane); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::ShippingLaneSummary) ? x : ::Io::Flow::V0::Models::ShippingLaneSummary.new(x)))
            @settings = (x = opts.delete(:settings); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::TierSettings) ? x : ::Io::Flow::V0::Models::TierSettings.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            Tier.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :direction => direction.value,
              :integration => integration.value,
              :name => name,
              :message => message,
              :rules => rules.map { |o| o.to_hash },
              :services => services.map { |o| o.to_hash },
              :strategy => strategy.value,
              :visibility => visibility.value,
              :currency => currency,
              :description => description,
              :display => display.nil? ? nil : display.to_hash,
              :shipping_lane => shipping_lane,
              :surcharge_settings => surcharge_settings.nil? ? nil : surcharge_settings.map { |o| o.to_hash },
              :lane => lane.nil? ? nil : lane.to_hash,
              :settings => settings.nil? ? nil : settings.to_hash
            }
          end

        end

        class TierDeletedV2 < Event

          attr_reader :event_id, :timestamp, :organization, :tier

          def initialize(incoming={})
            super(:discriminator => Event::Types::TIER_DELETED_V2)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :tier], 'TierDeletedV2')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @tier = (x = opts.delete(:tier); x.is_a?(::Io::Flow::V0::Models::Tier) ? x : ::Io::Flow::V0::Models::Tier.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            TierDeletedV2.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :tier => tier.to_hash
            }
          end

        end

        class TierDisplay

          attr_reader :estimate

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:estimate], 'TierDisplay')
            @estimate = (x = opts.delete(:estimate); x.is_a?(::Io::Flow::V0::Models::TierEstimate) ? x : ::Io::Flow::V0::Models::TierEstimate.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            TierDisplay.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :estimate => estimate.to_hash
            }
          end

        end

        class TierDisplayForm

          attr_reader :estimate

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @estimate = (x = opts.delete(:estimate); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::TierEstimate) ? x : ::Io::Flow::V0::Models::TierEstimate.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            TierDisplayForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :estimate => estimate.nil? ? nil : estimate.to_hash
            }
          end

        end

        class TierEstimate

          attr_reader :type, :label

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:type], 'TierEstimate')
            @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::V0::Models::TierEstimateType) ? x : ::Io::Flow::V0::Models::TierEstimateType.apply(x))
            @label = (x = opts.delete(:label); x.nil? ? nil : HttpClient::Preconditions.assert_class('label', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            TierEstimate.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :type => type.value,
              :label => label
            }
          end

        end

        # Service shipping tier available in this tier group. e.g. Standard tier,
        # Express tier, Economy tier
        class TierForm

          attr_reader :currency, :integration, :name, :message, :rules, :services, :strategy, :visibility, :description, :direction, :display, :shipping_lane, :surcharge_settings, :settings

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:currency, :integration, :name, :rules, :services, :strategy, :visibility, :shipping_lane], 'TierForm')
            @currency = HttpClient::Preconditions.assert_class('currency', opts.delete(:currency), String)
            @integration = (x = opts.delete(:integration); x.is_a?(::Io::Flow::V0::Models::ShipmentIntegrationType) ? x : ::Io::Flow::V0::Models::ShipmentIntegrationType.apply(x))
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
            @message = (x = opts.delete(:message); x.nil? ? nil : HttpClient::Preconditions.assert_class('message', x, String))
            @rules = HttpClient::Preconditions.assert_class('rules', opts.delete(:rules), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::TierRuleForm) ? x : ::Io::Flow::V0::Models::TierRuleForm.new(x)) }
            @services = HttpClient::Preconditions.assert_class('services', opts.delete(:services), Array).map { |v| HttpClient::Preconditions.assert_class('services', v, String) }
            @strategy = (x = opts.delete(:strategy); x.is_a?(::Io::Flow::V0::Models::TierStrategy) ? x : ::Io::Flow::V0::Models::TierStrategy.apply(x))
            @visibility = (x = opts.delete(:visibility); x.is_a?(::Io::Flow::V0::Models::Visibility) ? x : ::Io::Flow::V0::Models::Visibility.apply(x))
            @description = (x = opts.delete(:description); x.nil? ? nil : HttpClient::Preconditions.assert_class('description', x, String))
            @direction = (x = opts.delete(:direction); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::LaneDirection) ? x : ::Io::Flow::V0::Models::LaneDirection.apply(x)))
            @display = (x = opts.delete(:display); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::TierDisplayForm) ? x : ::Io::Flow::V0::Models::TierDisplayForm.new(x)))
            @shipping_lane = HttpClient::Preconditions.assert_class('shipping_lane', opts.delete(:shipping_lane), String)
            @surcharge_settings = (x = opts.delete(:surcharge_settings); x.nil? ? nil : HttpClient::Preconditions.assert_class('surcharge_settings', x, Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::SurchargeSetting) ? x : ::Io::Flow::V0::Models::SurchargeSetting.new(x)) })
            @settings = (x = opts.delete(:settings); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::TierSettings) ? x : ::Io::Flow::V0::Models::TierSettings.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            TierForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :currency => currency,
              :integration => integration.value,
              :name => name,
              :message => message,
              :rules => rules.map { |o| o.to_hash },
              :services => services,
              :strategy => strategy.value,
              :visibility => visibility.value,
              :description => description,
              :direction => direction.nil? ? nil : direction.value,
              :display => display.nil? ? nil : display.to_hash,
              :shipping_lane => shipping_lane,
              :surcharge_settings => surcharge_settings.nil? ? nil : surcharge_settings.map { |o| o.to_hash },
              :settings => settings.nil? ? nil : settings.to_hash
            }
          end

        end

        class TierReference

          attr_reader :id

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id], 'TierReference')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            TierReference.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id
            }
          end

        end

        # System to filter incoming quote for a shipment request based on a query and
        # output corresponding outcomes.
        class TierRule

          attr_reader :id, :position, :query, :outcome

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :position, :query, :outcome], 'TierRule')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @position = HttpClient::Preconditions.assert_class('position', opts.delete(:position), Integer)
            @query = HttpClient::Preconditions.assert_class('query', opts.delete(:query), String)
            @outcome = (x = opts.delete(:outcome); x.is_a?(::Io::Flow::V0::Models::TierRuleOutcome) ? x : ::Io::Flow::V0::Models::TierRuleOutcome.from_json(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            TierRule.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :position => position,
              :query => query,
              :outcome => outcome.to_hash
            }
          end

        end

        class TierRuleForm

          attr_reader :position, :query, :outcome

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:query, :outcome], 'TierRuleForm')
            @position = (x = opts.delete(:position); x.nil? ? nil : HttpClient::Preconditions.assert_class('position', x, Integer))
            @query = HttpClient::Preconditions.assert_class('query', opts.delete(:query), String)
            @outcome = (x = opts.delete(:outcome); x.is_a?(::Io::Flow::V0::Models::TierRuleOutcomeForm) ? x : ::Io::Flow::V0::Models::TierRuleOutcomeForm.from_json(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            TierRuleForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :position => position,
              :query => query,
              :outcome => outcome.to_hash
            }
          end

        end

        class TierRuleVersion

          attr_reader :id, :timestamp, :type, :tier_rule

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :timestamp, :type, :tier_rule], 'TierRuleVersion')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::V0::Models::ChangeType) ? x : ::Io::Flow::V0::Models::ChangeType.apply(x))
            @tier_rule = (x = opts.delete(:tier_rule); x.is_a?(::Io::Flow::V0::Models::TierRule) ? x : ::Io::Flow::V0::Models::TierRule.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            TierRuleVersion.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :timestamp => timestamp,
              :type => type.value,
              :tier_rule => tier_rule.to_hash
            }
          end

        end

        class TierSettings

          attr_reader :availability

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @availability = (x = (x = opts.delete(:availability); x.nil? ? "always" : x); x.is_a?(::Io::Flow::V0::Models::TierAvailability) ? x : ::Io::Flow::V0::Models::TierAvailability.apply(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            TierSettings.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :availability => availability.value
            }
          end

        end

        class TierSummary

          attr_reader :id, :experience, :integration, :name, :services, :strategy, :visibility, :currency, :display, :message, :settings

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :integration, :name, :services, :strategy, :visibility, :currency], 'TierSummary')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @experience = (x = opts.delete(:experience); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::FulfillmentExperienceReference) ? x : ::Io::Flow::V0::Models::FulfillmentExperienceReference.new(x)))
            @integration = (x = opts.delete(:integration); x.is_a?(::Io::Flow::V0::Models::ShipmentIntegrationType) ? x : ::Io::Flow::V0::Models::ShipmentIntegrationType.apply(x))
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
            @services = HttpClient::Preconditions.assert_class('services', opts.delete(:services), Array).map { |v| HttpClient::Preconditions.assert_class('services', v, String) }
            @strategy = (x = opts.delete(:strategy); x.is_a?(::Io::Flow::V0::Models::TierStrategy) ? x : ::Io::Flow::V0::Models::TierStrategy.apply(x))
            @visibility = (x = opts.delete(:visibility); x.is_a?(::Io::Flow::V0::Models::Visibility) ? x : ::Io::Flow::V0::Models::Visibility.apply(x))
            @currency = HttpClient::Preconditions.assert_class('currency', opts.delete(:currency), String)
            @display = (x = opts.delete(:display); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::TierDisplay) ? x : ::Io::Flow::V0::Models::TierDisplay.new(x)))
            @message = (x = opts.delete(:message); x.nil? ? nil : HttpClient::Preconditions.assert_class('message', x, String))
            @settings = (x = opts.delete(:settings); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::TierSettings) ? x : ::Io::Flow::V0::Models::TierSettings.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            TierSummary.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :experience => experience.nil? ? nil : experience.to_hash,
              :integration => integration.value,
              :name => name,
              :services => services,
              :strategy => strategy.value,
              :visibility => visibility.value,
              :currency => currency,
              :display => display.nil? ? nil : display.to_hash,
              :message => message,
              :settings => settings.nil? ? nil : settings.to_hash
            }
          end

        end

        class TierUpsertedV2 < Event

          attr_reader :event_id, :timestamp, :organization, :tier

          def initialize(incoming={})
            super(:discriminator => Event::Types::TIER_UPSERTED_V2)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :tier], 'TierUpsertedV2')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @tier = (x = opts.delete(:tier); x.is_a?(::Io::Flow::V0::Models::Tier) ? x : ::Io::Flow::V0::Models::Tier.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            TierUpsertedV2.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :tier => tier.to_hash
            }
          end

        end

        class TierVersion

          attr_reader :id, :timestamp, :type, :tier

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :timestamp, :type, :tier], 'TierVersion')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::V0::Models::ChangeType) ? x : ::Io::Flow::V0::Models::ChangeType.apply(x))
            @tier = (x = opts.delete(:tier); x.is_a?(::Io::Flow::V0::Models::TierSummary) ? x : ::Io::Flow::V0::Models::TierSummary.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            TierVersion.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :timestamp => timestamp,
              :type => type.value,
              :tier => tier.to_hash
            }
          end

        end

        # Time zone data is provided by the public IANA time zone database. See
        # http://www.iana.org/time-zones
        class Timezone

          attr_reader :name, :description, :offset

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:name, :description, :offset], 'Timezone')
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
            @description = HttpClient::Preconditions.assert_class('description', opts.delete(:description), String)
            @offset = HttpClient::Preconditions.assert_class('offset', opts.delete(:offset), Integer)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            Timezone.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :name => name,
              :description => description,
              :offset => offset
            }
          end

        end

        # Used to authenticate a given token.
        class TokenAuthenticationForm

          attr_reader :token

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:token], 'TokenAuthenticationForm')
            @token = HttpClient::Preconditions.assert_class('token', opts.delete(:token), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            TokenAuthenticationForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :token => token
            }
          end

        end

        class TokenPartnerReference

          attr_reader :id

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id], 'TokenPartnerReference')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            TokenPartnerReference.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id
            }
          end

        end

        # Model used to report whether or not a given token is valid
        class TokenValidation

          attr_reader :status

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:status], 'TokenValidation')
            @status = HttpClient::Preconditions.assert_class('status', opts.delete(:status), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            TokenValidation.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :status => status
            }
          end

        end

        # Defines the payload of a request to validate a token, with primary goal of
        # preventing the token from being included in an HTTP GET.
        class TokenValidationForm

          attr_reader :token

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:token], 'TokenValidationForm')
            @token = HttpClient::Preconditions.assert_class('token', opts.delete(:token), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            TokenValidationForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :token => token
            }
          end

        end

        # Top level tracking information which contains labels. In cases where shipments
        # are re-labeled, you will see multiple labels for each tracking allowing simple
        # access to see where a shipment is - with which carrier and with the local
        # tracking number
        class Tracking

          attr_reader :id, :labels, :status, :attributes, :url, :window, :order_number

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :labels, :status, :attributes, :url], 'Tracking')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @labels = HttpClient::Preconditions.assert_class('labels', opts.delete(:labels), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::TrackingLabel) ? x : ::Io::Flow::V0::Models::TrackingLabel.new(x)) }
            @status = (x = opts.delete(:status); x.is_a?(::Io::Flow::V0::Models::TrackingStatus) ? x : ::Io::Flow::V0::Models::TrackingStatus.apply(x))
            @attributes = HttpClient::Preconditions.assert_class('attributes', opts.delete(:attributes), Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h }
            @url = HttpClient::Preconditions.assert_class('url', opts.delete(:url), String)
            @window = (x = opts.delete(:window); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::DatetimeRange) ? x : ::Io::Flow::V0::Models::DatetimeRange.new(x)))
            @order_number = (x = opts.delete(:order_number); x.nil? ? nil : HttpClient::Preconditions.assert_class('order_number', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            Tracking.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :labels => labels.map { |o| o.to_hash },
              :status => status.value,
              :attributes => attributes,
              :url => url,
              :window => window.nil? ? nil : window.to_hash,
              :order_number => order_number
            }
          end

        end

        class TrackingEvent

          attr_reader :id, :address, :status, :timestamp, :description

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :address, :status, :timestamp], 'TrackingEvent')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @address = (x = opts.delete(:address); x.is_a?(::Io::Flow::V0::Models::Address) ? x : ::Io::Flow::V0::Models::Address.new(x))
            @status = (x = opts.delete(:status); x.is_a?(::Io::Flow::V0::Models::TrackingStatus) ? x : ::Io::Flow::V0::Models::TrackingStatus.apply(x))
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @description = (x = opts.delete(:description); x.nil? ? nil : HttpClient::Preconditions.assert_class('description', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            TrackingEvent.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :address => address.to_hash,
              :status => status.value,
              :timestamp => timestamp,
              :description => description
            }
          end

        end

        class TrackingEventForm

          attr_reader :tracking_label_id, :timestamp, :status, :description, :address

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:tracking_label_id, :timestamp, :status], 'TrackingEventForm')
            @tracking_label_id = HttpClient::Preconditions.assert_class('tracking_label_id', opts.delete(:tracking_label_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @status = (x = opts.delete(:status); x.is_a?(::Io::Flow::V0::Models::TrackingStatus) ? x : ::Io::Flow::V0::Models::TrackingStatus.apply(x))
            @description = (x = opts.delete(:description); x.nil? ? nil : HttpClient::Preconditions.assert_class('description', x, String))
            @address = (x = opts.delete(:address); x.nil? ? nil : HttpClient::Preconditions.assert_class('address', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            TrackingEventForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :tracking_label_id => tracking_label_id,
              :timestamp => timestamp,
              :status => status.value,
              :description => description,
              :address => address
            }
          end

        end

        class TrackingEventSummary

          attr_reader :id, :status, :timestamp

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :status, :timestamp], 'TrackingEventSummary')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @status = (x = opts.delete(:status); x.is_a?(::Io::Flow::V0::Models::TrackingStatus) ? x : ::Io::Flow::V0::Models::TrackingStatus.apply(x))
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            TrackingEventSummary.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :status => status.value,
              :timestamp => timestamp
            }
          end

        end

        class TrackingEventVersion

          attr_reader :id, :timestamp, :type, :tracking_event

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :timestamp, :type, :tracking_event], 'TrackingEventVersion')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::V0::Models::ChangeType) ? x : ::Io::Flow::V0::Models::ChangeType.apply(x))
            @tracking_event = (x = opts.delete(:tracking_event); x.is_a?(::Io::Flow::V0::Models::TrackingEventSummary) ? x : ::Io::Flow::V0::Models::TrackingEventSummary.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            TrackingEventVersion.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :timestamp => timestamp,
              :type => type.value,
              :tracking_event => tracking_event.to_hash
            }
          end

        end

        # Top level tracking information which contains labels. In cases where shipments
        # are re-labeled, you will see multiple labels for each tracking allowing simple
        # access to see where a shipment is - with which carrier and with the local
        # tracking number
        class TrackingForm

          attr_reader :status, :order_number, :attributes, :window

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @status = (x = opts.delete(:status); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::TrackingStatus) ? x : ::Io::Flow::V0::Models::TrackingStatus.apply(x)))
            @order_number = (x = opts.delete(:order_number); x.nil? ? nil : HttpClient::Preconditions.assert_class('order_number', x, String))
            @attributes = (x = opts.delete(:attributes); x.nil? ? nil : HttpClient::Preconditions.assert_class('attributes', x, Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h })
            @window = (x = opts.delete(:window); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::DatetimeRange) ? x : ::Io::Flow::V0::Models::DatetimeRange.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            TrackingForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :status => status.nil? ? nil : status.value,
              :order_number => order_number,
              :attributes => attributes.nil? ? nil : attributes,
              :window => window.nil? ? nil : window.to_hash
            }
          end

        end

        # Represents a specific label being tracked as part of the tracking bucket
        class TrackingLabel

          attr_reader :id, :carrier, :carrier_tracking_number, :events, :status, :timestamp, :delivery_estimate, :description

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :carrier, :carrier_tracking_number, :events, :status, :timestamp], 'TrackingLabel')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @carrier = HttpClient::Preconditions.assert_class('carrier', opts.delete(:carrier), String)
            @carrier_tracking_number = HttpClient::Preconditions.assert_class('carrier_tracking_number', opts.delete(:carrier_tracking_number), String)
            @events = HttpClient::Preconditions.assert_class('events', opts.delete(:events), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::TrackingEvent) ? x : ::Io::Flow::V0::Models::TrackingEvent.new(x)) }
            @status = (x = opts.delete(:status); x.is_a?(::Io::Flow::V0::Models::TrackingStatus) ? x : ::Io::Flow::V0::Models::TrackingStatus.apply(x))
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @delivery_estimate = (x = opts.delete(:delivery_estimate); x.nil? ? nil : HttpClient::Preconditions.assert_class('delivery_estimate', HttpClient::Helper.to_date_time_iso8601(x), DateTime))
            @description = (x = opts.delete(:description); x.nil? ? nil : HttpClient::Preconditions.assert_class('description', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            TrackingLabel.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :carrier => carrier,
              :carrier_tracking_number => carrier_tracking_number,
              :events => events.map { |o| o.to_hash },
              :status => status.value,
              :timestamp => timestamp,
              :delivery_estimate => delivery_estimate,
              :description => description
            }
          end

        end

        class TrackingLabelEventUpserted < Event

          attr_reader :event_id, :timestamp, :organization, :address, :carrier, :carrier_timestamp, :carrier_tracking_number, :flow_tracking_number, :status, :delivery_estimate, :description, :order_number

          def initialize(incoming={})
            super(:discriminator => Event::Types::TRACKING_LABEL_EVENT_UPSERTED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :address, :carrier, :carrier_timestamp, :carrier_tracking_number, :flow_tracking_number, :status], 'TrackingLabelEventUpserted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @address = (x = opts.delete(:address); x.is_a?(::Io::Flow::V0::Models::Address) ? x : ::Io::Flow::V0::Models::Address.new(x))
            @carrier = HttpClient::Preconditions.assert_class('carrier', opts.delete(:carrier), String)
            @carrier_timestamp = HttpClient::Preconditions.assert_class('carrier_timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:carrier_timestamp)), DateTime)
            @carrier_tracking_number = HttpClient::Preconditions.assert_class('carrier_tracking_number', opts.delete(:carrier_tracking_number), String)
            @flow_tracking_number = HttpClient::Preconditions.assert_class('flow_tracking_number', opts.delete(:flow_tracking_number), String)
            @status = HttpClient::Preconditions.assert_class('status', opts.delete(:status), String)
            @delivery_estimate = (x = opts.delete(:delivery_estimate); x.nil? ? nil : HttpClient::Preconditions.assert_class('delivery_estimate', HttpClient::Helper.to_date_time_iso8601(x), DateTime))
            @description = (x = opts.delete(:description); x.nil? ? nil : HttpClient::Preconditions.assert_class('description', x, String))
            @order_number = (x = opts.delete(:order_number); x.nil? ? nil : HttpClient::Preconditions.assert_class('order_number', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            TrackingLabelEventUpserted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :address => address.to_hash,
              :carrier => carrier,
              :carrier_timestamp => carrier_timestamp,
              :carrier_tracking_number => carrier_tracking_number,
              :flow_tracking_number => flow_tracking_number,
              :status => status,
              :delivery_estimate => delivery_estimate,
              :description => description,
              :order_number => order_number
            }
          end

        end

        # Represents a specific label being tracked as part of the tracking bucket
        class TrackingLabelForm

          attr_reader :tracking_id, :status, :carrier, :carrier_tracking_number, :delivery_estimate, :description, :timestamp, :parent_id

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:tracking_id, :carrier, :carrier_tracking_number], 'TrackingLabelForm')
            @tracking_id = HttpClient::Preconditions.assert_class('tracking_id', opts.delete(:tracking_id), String)
            @status = (x = (x = opts.delete(:status); x.nil? ? "pending" : x); x.is_a?(::Io::Flow::V0::Models::TrackingStatus) ? x : ::Io::Flow::V0::Models::TrackingStatus.apply(x))
            @carrier = HttpClient::Preconditions.assert_class('carrier', opts.delete(:carrier), String)
            @carrier_tracking_number = HttpClient::Preconditions.assert_class('carrier_tracking_number', opts.delete(:carrier_tracking_number), String)
            @delivery_estimate = (x = opts.delete(:delivery_estimate); x.nil? ? nil : HttpClient::Preconditions.assert_class('delivery_estimate', HttpClient::Helper.to_date_time_iso8601(x), DateTime))
            @description = (x = opts.delete(:description); x.nil? ? nil : HttpClient::Preconditions.assert_class('description', x, String))
            @timestamp = (x = opts.delete(:timestamp); x.nil? ? nil : HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(x), DateTime))
            @parent_id = (x = opts.delete(:parent_id); x.nil? ? nil : HttpClient::Preconditions.assert_class('parent_id', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            TrackingLabelForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :tracking_id => tracking_id,
              :status => status.value,
              :carrier => carrier,
              :carrier_tracking_number => carrier_tracking_number,
              :delivery_estimate => delivery_estimate,
              :description => description,
              :timestamp => timestamp,
              :parent_id => parent_id
            }
          end

        end

        class TrackingLabelSummary

          attr_reader :id, :tracking, :status, :carrier, :tracking_number

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :tracking, :status, :carrier, :tracking_number], 'TrackingLabelSummary')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @tracking = (x = opts.delete(:tracking); x.is_a?(::Io::Flow::V0::Models::TrackingSummary) ? x : ::Io::Flow::V0::Models::TrackingSummary.new(x))
            @status = (x = opts.delete(:status); x.is_a?(::Io::Flow::V0::Models::TrackingStatus) ? x : ::Io::Flow::V0::Models::TrackingStatus.apply(x))
            @carrier = HttpClient::Preconditions.assert_class('carrier', opts.delete(:carrier), String)
            @tracking_number = HttpClient::Preconditions.assert_class('tracking_number', opts.delete(:tracking_number), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            TrackingLabelSummary.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :tracking => tracking.to_hash,
              :status => status.value,
              :carrier => carrier,
              :tracking_number => tracking_number
            }
          end

        end

        class TrackingLabelVersion

          attr_reader :id, :timestamp, :type, :tracking_label

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :timestamp, :type, :tracking_label], 'TrackingLabelVersion')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::V0::Models::ChangeType) ? x : ::Io::Flow::V0::Models::ChangeType.apply(x))
            @tracking_label = (x = opts.delete(:tracking_label); x.is_a?(::Io::Flow::V0::Models::TrackingLabelSummary) ? x : ::Io::Flow::V0::Models::TrackingLabelSummary.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            TrackingLabelVersion.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :timestamp => timestamp,
              :type => type.value,
              :tracking_label => tracking_label.to_hash
            }
          end

        end

        class TrackingSummary

          attr_reader :id, :status, :order_number

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :status], 'TrackingSummary')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @status = (x = opts.delete(:status); x.is_a?(::Io::Flow::V0::Models::TrackingStatus) ? x : ::Io::Flow::V0::Models::TrackingStatus.apply(x))
            @order_number = (x = opts.delete(:order_number); x.nil? ? nil : HttpClient::Preconditions.assert_class('order_number', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            TrackingSummary.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :status => status.value,
              :order_number => order_number
            }
          end

        end

        class TrackingVersion

          attr_reader :id, :timestamp, :type, :tracking

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :timestamp, :type, :tracking], 'TrackingVersion')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::V0::Models::ChangeType) ? x : ::Io::Flow::V0::Models::ChangeType.apply(x))
            @tracking = (x = opts.delete(:tracking); x.is_a?(::Io::Flow::V0::Models::TrackingSummary) ? x : ::Io::Flow::V0::Models::TrackingSummary.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            TrackingVersion.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :timestamp => timestamp,
              :type => type.value,
              :tracking => tracking.to_hash
            }
          end

        end

        class TradeAgreement

          attr_reader :key, :name, :origins, :destinations, :ship_from, :effective_at, :status

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:key, :name, :origins, :destinations, :effective_at, :status], 'TradeAgreement')
            @key = HttpClient::Preconditions.assert_class('key', opts.delete(:key), String)
            @name = (x = opts.delete(:name); x.is_a?(::Io::Flow::V0::Models::TradeAgreementName) ? x : ::Io::Flow::V0::Models::TradeAgreementName.apply(x))
            @origins = HttpClient::Preconditions.assert_class('origins', opts.delete(:origins), Array).map { |v| HttpClient::Preconditions.assert_class('origins', v, String) }
            @destinations = HttpClient::Preconditions.assert_class('destinations', opts.delete(:destinations), Array).map { |v| HttpClient::Preconditions.assert_class('destinations', v, String) }
            @ship_from = (x = opts.delete(:ship_from); x.nil? ? nil : HttpClient::Preconditions.assert_class('ship_from', x, Array).map { |v| HttpClient::Preconditions.assert_class('ship_from', v, String) })
            @effective_at = HttpClient::Preconditions.assert_class('effective_at', HttpClient::Helper.to_date_time_iso8601(opts.delete(:effective_at)), DateTime)
            @status = (x = opts.delete(:status); x.is_a?(::Io::Flow::V0::Models::TradeAgreementStatus) ? x : ::Io::Flow::V0::Models::TradeAgreementStatus.apply(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            TradeAgreement.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :key => key,
              :name => name.value,
              :origins => origins,
              :destinations => destinations,
              :ship_from => ship_from.nil? ? nil : ship_from,
              :effective_at => effective_at,
              :status => status.value
            }
          end

        end

        # Person or organization responsible for certifying an item complies with a
        # trade agreement.
        class TradeAgreementCertifier

          attr_reader :key, :name, :exporter_of_record, :contact, :address, :signature_url

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:key, :name, :exporter_of_record], 'TradeAgreementCertifier')
            @key = HttpClient::Preconditions.assert_class('key', opts.delete(:key), String)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
            @exporter_of_record = (x = opts.delete(:exporter_of_record); x.is_a?(::Io::Flow::V0::Models::ExporterOfRecord) ? x : ::Io::Flow::V0::Models::ExporterOfRecord.apply(x))
            @contact = (x = opts.delete(:contact); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Contact) ? x : ::Io::Flow::V0::Models::Contact.new(x)))
            @address = (x = opts.delete(:address); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::Address) ? x : ::Io::Flow::V0::Models::Address.new(x)))
            @signature_url = (x = opts.delete(:signature_url); x.nil? ? nil : HttpClient::Preconditions.assert_class('signature_url', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            TradeAgreementCertifier.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :key => key,
              :name => name,
              :exporter_of_record => exporter_of_record.value,
              :contact => contact.nil? ? nil : contact.to_hash,
              :address => address.nil? ? nil : address.to_hash,
              :signature_url => signature_url
            }
          end

        end

        # The duty rate that applies for a trade agreement.
        class TradeAgreementDuty

          attr_reader :trade_agreement, :duty

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:trade_agreement, :duty], 'TradeAgreementDuty')
            @trade_agreement = (x = opts.delete(:trade_agreement); x.is_a?(::Io::Flow::V0::Models::TradeAgreement) ? x : ::Io::Flow::V0::Models::TradeAgreement.new(x))
            @duty = (x = opts.delete(:duty); x.is_a?(::Io::Flow::V0::Models::Duty) ? x : ::Io::Flow::V0::Models::Duty.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            TradeAgreementDuty.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :trade_agreement => trade_agreement.to_hash,
              :duty => duty.to_hash
            }
          end

        end

        class TransitEstimate

          attr_reader :origin, :destination, :min_date, :max_date, :source

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:origin, :destination, :min_date, :max_date, :source], 'TransitEstimate')
            @origin = (x = opts.delete(:origin); x.is_a?(::Io::Flow::V0::Models::DeliveryWindowLocation) ? x : ::Io::Flow::V0::Models::DeliveryWindowLocation.apply(x))
            @destination = (x = opts.delete(:destination); x.is_a?(::Io::Flow::V0::Models::DeliveryWindowLocation) ? x : ::Io::Flow::V0::Models::DeliveryWindowLocation.apply(x))
            @min_date = HttpClient::Preconditions.assert_class('min_date', HttpClient::Helper.to_date_time_iso8601(opts.delete(:min_date)), DateTime)
            @max_date = HttpClient::Preconditions.assert_class('max_date', HttpClient::Helper.to_date_time_iso8601(opts.delete(:max_date)), DateTime)
            @source = (x = opts.delete(:source); x.is_a?(::Io::Flow::V0::Models::DeliveryWindowComponentSource) ? x : ::Io::Flow::V0::Models::DeliveryWindowComponentSource.apply(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            TransitEstimate.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :origin => origin.value,
              :destination => destination.value,
              :min_date => min_date,
              :max_date => max_date,
              :source => source.value
            }
          end

        end

        class TransitWindow

          attr_reader :origin_country, :destination_country, :from, :to

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:origin_country, :destination_country, :from, :to], 'TransitWindow')
            @origin_country = HttpClient::Preconditions.assert_class('origin_country', opts.delete(:origin_country), String)
            @destination_country = HttpClient::Preconditions.assert_class('destination_country', opts.delete(:destination_country), String)
            @from = HttpClient::Preconditions.assert_class('from', opts.delete(:from), Integer)
            @to = HttpClient::Preconditions.assert_class('to', opts.delete(:to), Integer)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            TransitWindow.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :origin_country => origin_country,
              :destination_country => destination_country,
              :from => from,
              :to => to
            }
          end

        end

        # Export for items that require harmonization.
        class UnharmonizedItemExportType < ExportType

          attr_reader :sort

          def initialize(incoming={})
            super(:discriminator => ExportType::Types::UNHARMONIZED_ITEM_EXPORT_TYPE)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @sort = (x = opts.delete(:sort); x.nil? ? nil : HttpClient::Preconditions.assert_class('sort', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            UnharmonizedItemExportType.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :sort => sort
            }
          end

        end

        # Provides the ability to upload a file to a URL (an expiring s3 url, usually
        # valid for 1 week)
        class Upload

          attr_reader :id, :name, :url, :expiration

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :name, :url, :expiration], 'Upload')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
            @url = HttpClient::Preconditions.assert_class('url', opts.delete(:url), String)
            @expiration = HttpClient::Preconditions.assert_class('expiration', HttpClient::Helper.to_date_time_iso8601(opts.delete(:expiration)), DateTime)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            Upload.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :name => name,
              :url => url,
              :expiration => expiration
            }
          end

        end

        # Represents a single user in the system
        class User < ExpandableUser

          attr_reader :id, :email, :name, :status

          def initialize(incoming={})
            super(:discriminator => ExpandableUser::Types::USER)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :name], 'User')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @email = (x = opts.delete(:email); x.nil? ? nil : HttpClient::Preconditions.assert_class('email', x, String))
            @name = (x = opts.delete(:name); x.is_a?(::Io::Flow::V0::Models::Name) ? x : ::Io::Flow::V0::Models::Name.new(x))
            @status = (x = (x = opts.delete(:status); x.nil? ? "active" : x); x.is_a?(::Io::Flow::V0::Models::UserStatus) ? x : ::Io::Flow::V0::Models::UserStatus.apply(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            User.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :id => id,
              :email => email,
              :name => name.to_hash,
              :status => status.value
            }
          end

        end

        class UserForm

          attr_reader :email, :password, :name

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @email = (x = opts.delete(:email); x.nil? ? nil : HttpClient::Preconditions.assert_class('email', x, String))
            @password = (x = opts.delete(:password); x.nil? ? nil : HttpClient::Preconditions.assert_class('password', x, String))
            @name = (x = opts.delete(:name); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::NameForm) ? x : ::Io::Flow::V0::Models::NameForm.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            UserForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :email => email,
              :password => password,
              :name => name.nil? ? nil : name.to_hash
            }
          end

        end

        class UserPutForm

          attr_reader :email, :name

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @email = (x = opts.delete(:email); x.nil? ? nil : HttpClient::Preconditions.assert_class('email', x, String))
            @name = (x = opts.delete(:name); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::NameForm) ? x : ::Io::Flow::V0::Models::NameForm.new(x)))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            UserPutForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :email => email,
              :name => name.nil? ? nil : name.to_hash
            }
          end

        end

        class UserReference < ExpandableUser

          attr_reader :id

          def initialize(incoming={})
            super(:discriminator => ExpandableUser::Types::USER_REFERENCE)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id], 'UserReference')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            UserReference.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :id => id
            }
          end

        end

        class UserVersion

          attr_reader :id, :timestamp, :type, :user

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :timestamp, :type, :user], 'UserVersion')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::V0::Models::ChangeType) ? x : ::Io::Flow::V0::Models::ChangeType.apply(x))
            @user = (x = opts.delete(:user); x.is_a?(::Io::Flow::V0::Models::User) ? x : ::Io::Flow::V0::Models::User.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            UserVersion.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :timestamp => timestamp,
              :type => type.value,
              :user => user.to_hash
            }
          end

        end

        class ValueThresholdExceededDetails

          attr_reader :local, :original

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:local, :original], 'ValueThresholdExceededDetails')
            @local = (x = opts.delete(:local); x.is_a?(::Io::Flow::V0::Models::Price) ? x : ::Io::Flow::V0::Models::Price.new(x))
            @original = (x = opts.delete(:original); x.is_a?(::Io::Flow::V0::Models::Price) ? x : ::Io::Flow::V0::Models::Price.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            ValueThresholdExceededDetails.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :local => local.to_hash,
              :original => original.to_hash
            }
          end

        end

        # Virtual credit cards are created for a specific limit and currency. Currently
        # only USD denominated cards can be issued. Once created the virtual card can be
        # used in the same way as a physical credit card using the card number, cvv and
        # expiration details.
        class VirtualCard

          attr_reader :id, :key, :number, :cvv, :limit, :type, :expiration, :iin, :last4, :name, :attributes

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :key, :limit, :type, :expiration, :iin, :last4, :name], 'VirtualCard')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @key = HttpClient::Preconditions.assert_class('key', opts.delete(:key), String)
            @number = (x = opts.delete(:number); x.nil? ? nil : HttpClient::Preconditions.assert_class('number', x, String))
            @cvv = (x = opts.delete(:cvv); x.nil? ? nil : HttpClient::Preconditions.assert_class('cvv', x, String))
            @limit = (x = opts.delete(:limit); x.is_a?(::Io::Flow::V0::Models::Price) ? x : ::Io::Flow::V0::Models::Price.new(x))
            @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::V0::Models::CardType) ? x : ::Io::Flow::V0::Models::CardType.apply(x))
            @expiration = (x = opts.delete(:expiration); x.is_a?(::Io::Flow::V0::Models::Expiration) ? x : ::Io::Flow::V0::Models::Expiration.new(x))
            @iin = HttpClient::Preconditions.assert_class('iin', opts.delete(:iin), String)
            @last4 = HttpClient::Preconditions.assert_class('last4', opts.delete(:last4), String)
            @name = HttpClient::Preconditions.assert_class('name', opts.delete(:name), String)
            @attributes = (x = opts.delete(:attributes); x.nil? ? nil : HttpClient::Preconditions.assert_class('attributes', x, Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h })
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            VirtualCard.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :key => key,
              :number => number,
              :cvv => cvv,
              :limit => limit.to_hash,
              :type => type.value,
              :expiration => expiration.to_hash,
              :iin => iin,
              :last4 => last4,
              :name => name,
              :attributes => attributes.nil? ? nil : attributes
            }
          end

        end

        # Payment has been captured for the virtual credit card
        class VirtualCardCapture

          attr_reader :id, :issuer, :virtual_card, :authorization, :amount, :currency, :created_at

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :issuer, :virtual_card, :authorization, :amount, :currency, :created_at], 'VirtualCardCapture')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @issuer = (x = opts.delete(:issuer); x.is_a?(::Io::Flow::V0::Models::IssuerV1) ? x : ::Io::Flow::V0::Models::IssuerV1.new(x))
            @virtual_card = (x = opts.delete(:virtual_card); x.is_a?(::Io::Flow::V0::Models::VirtualCardReference) ? x : ::Io::Flow::V0::Models::VirtualCardReference.new(x))
            @authorization = (x = opts.delete(:authorization); x.is_a?(::Io::Flow::V0::Models::AuthorizationReference) ? x : ::Io::Flow::V0::Models::AuthorizationReference.new(x))
            @amount = HttpClient::Preconditions.assert_class('amount', HttpClient::Helper.to_big_decimal(opts.delete(:amount)), BigDecimal)
            @currency = HttpClient::Preconditions.assert_class('currency', opts.delete(:currency), String)
            @created_at = HttpClient::Preconditions.assert_class('created_at', HttpClient::Helper.to_date_time_iso8601(opts.delete(:created_at)), DateTime)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            VirtualCardCapture.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :issuer => issuer.to_hash,
              :virtual_card => virtual_card.to_hash,
              :authorization => authorization.to_hash,
              :amount => amount.to_f.to_s,
              :currency => currency,
              :created_at => created_at
            }
          end

        end

        # Event emitted when a previous virtual card capture has been deleted.
        class VirtualCardCaptureDeleted < Event

          attr_reader :event_id, :timestamp, :organization, :id

          def initialize(incoming={})
            super(:discriminator => Event::Types::VIRTUAL_CARD_CAPTURE_DELETED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :id], 'VirtualCardCaptureDeleted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            VirtualCardCaptureDeleted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :id => id
            }
          end

        end

        # Emitted when a capture event occurs against an existing virtual credit card.
        class VirtualCardCaptureUpserted < Event

          attr_reader :event_id, :timestamp, :organization, :id, :capture

          def initialize(incoming={})
            super(:discriminator => Event::Types::VIRTUAL_CARD_CAPTURE_UPSERTED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :id, :capture], 'VirtualCardCaptureUpserted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @capture = (x = opts.delete(:capture); x.is_a?(::Io::Flow::V0::Models::VirtualCardCapture) ? x : ::Io::Flow::V0::Models::VirtualCardCapture.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            VirtualCardCaptureUpserted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :id => id,
              :capture => capture.to_hash
            }
          end

        end

        class VirtualCardCaptureVersion

          attr_reader :id, :timestamp, :type, :virtual_card_capture

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :timestamp, :type, :virtual_card_capture], 'VirtualCardCaptureVersion')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::V0::Models::ChangeType) ? x : ::Io::Flow::V0::Models::ChangeType.apply(x))
            @virtual_card_capture = (x = opts.delete(:virtual_card_capture); x.is_a?(::Io::Flow::V0::Models::VirtualCardCapture) ? x : ::Io::Flow::V0::Models::VirtualCardCapture.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            VirtualCardCaptureVersion.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :timestamp => timestamp,
              :type => type.value,
              :virtual_card_capture => virtual_card_capture.to_hash
            }
          end

        end

        class VirtualCardForm

          attr_reader :limit, :attributes

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:limit], 'VirtualCardForm')
            @limit = (x = opts.delete(:limit); x.is_a?(::Io::Flow::V0::Models::Money) ? x : ::Io::Flow::V0::Models::Money.new(x))
            @attributes = (x = opts.delete(:attributes); x.nil? ? nil : HttpClient::Preconditions.assert_class('attributes', x, Hash).inject({}) { |h, d| h[d[0]] = HttpClient::Preconditions.assert_class('attributes', d[1], String); h })
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            VirtualCardForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :limit => limit.to_hash,
              :attributes => attributes.nil? ? nil : attributes
            }
          end

        end

        # Flows reference identifier for the virtual credit card.
        class VirtualCardReference

          attr_reader :id

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id], 'VirtualCardReference')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            VirtualCardReference.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id
            }
          end

        end

        # A refund has been issued for the virtual credit card
        class VirtualCardRefund

          attr_reader :id, :issuer, :virtual_card, :authorization, :amount, :currency, :created_at

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :issuer, :virtual_card, :authorization, :amount, :currency, :created_at], 'VirtualCardRefund')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @issuer = (x = opts.delete(:issuer); x.is_a?(::Io::Flow::V0::Models::IssuerV1) ? x : ::Io::Flow::V0::Models::IssuerV1.new(x))
            @virtual_card = (x = opts.delete(:virtual_card); x.is_a?(::Io::Flow::V0::Models::VirtualCardReference) ? x : ::Io::Flow::V0::Models::VirtualCardReference.new(x))
            @authorization = (x = opts.delete(:authorization); x.is_a?(::Io::Flow::V0::Models::AuthorizationReference) ? x : ::Io::Flow::V0::Models::AuthorizationReference.new(x))
            @amount = HttpClient::Preconditions.assert_class('amount', HttpClient::Helper.to_big_decimal(opts.delete(:amount)), BigDecimal)
            @currency = HttpClient::Preconditions.assert_class('currency', opts.delete(:currency), String)
            @created_at = HttpClient::Preconditions.assert_class('created_at', HttpClient::Helper.to_date_time_iso8601(opts.delete(:created_at)), DateTime)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            VirtualCardRefund.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :issuer => issuer.to_hash,
              :virtual_card => virtual_card.to_hash,
              :authorization => authorization.to_hash,
              :amount => amount.to_f.to_s,
              :currency => currency,
              :created_at => created_at
            }
          end

        end

        # Event emitted when a previous virtual card refund has been deleted.
        class VirtualCardRefundDeleted < Event

          attr_reader :event_id, :timestamp, :organization, :id

          def initialize(incoming={})
            super(:discriminator => Event::Types::VIRTUAL_CARD_REFUND_DELETED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :id], 'VirtualCardRefundDeleted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            VirtualCardRefundDeleted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :id => id
            }
          end

        end

        # Emitted when a refund event occurs against an existing virtual credit card.
        class VirtualCardRefundUpserted < Event

          attr_reader :event_id, :timestamp, :organization, :id, :refund

          def initialize(incoming={})
            super(:discriminator => Event::Types::VIRTUAL_CARD_REFUND_UPSERTED)
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:event_id, :timestamp, :organization, :id, :refund], 'VirtualCardRefundUpserted')
            @event_id = HttpClient::Preconditions.assert_class('event_id', opts.delete(:event_id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @organization = HttpClient::Preconditions.assert_class('organization', opts.delete(:organization), String)
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @refund = (x = opts.delete(:refund); x.is_a?(::Io::Flow::V0::Models::VirtualCardRefund) ? x : ::Io::Flow::V0::Models::VirtualCardRefund.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            VirtualCardRefundUpserted.new(subtype_to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def subtype_to_hash
            {
              :event_id => event_id,
              :timestamp => timestamp,
              :organization => organization,
              :id => id,
              :refund => refund.to_hash
            }
          end

        end

        class VirtualCardRefundVersion

          attr_reader :id, :timestamp, :type, :virtual_card_refund

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :timestamp, :type, :virtual_card_refund], 'VirtualCardRefundVersion')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::V0::Models::ChangeType) ? x : ::Io::Flow::V0::Models::ChangeType.apply(x))
            @virtual_card_refund = (x = opts.delete(:virtual_card_refund); x.is_a?(::Io::Flow::V0::Models::VirtualCardRefund) ? x : ::Io::Flow::V0::Models::VirtualCardRefund.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            VirtualCardRefundVersion.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :timestamp => timestamp,
              :type => type.value,
              :virtual_card_refund => virtual_card_refund.to_hash
            }
          end

        end

        class VirtualCardVersion

          attr_reader :id, :timestamp, :type, :virtual_card

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :timestamp, :type, :virtual_card], 'VirtualCardVersion')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @timestamp = HttpClient::Preconditions.assert_class('timestamp', HttpClient::Helper.to_date_time_iso8601(opts.delete(:timestamp)), DateTime)
            @type = (x = opts.delete(:type); x.is_a?(::Io::Flow::V0::Models::ChangeType) ? x : ::Io::Flow::V0::Models::ChangeType.apply(x))
            @virtual_card = (x = opts.delete(:virtual_card); x.is_a?(::Io::Flow::V0::Models::VirtualCard) ? x : ::Io::Flow::V0::Models::VirtualCard.new(x))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            VirtualCardVersion.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :timestamp => timestamp,
              :type => type.value,
              :virtual_card => virtual_card.to_hash
            }
          end

        end

        class Webhook

          attr_reader :id, :url, :events

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :url, :events], 'Webhook')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @url = HttpClient::Preconditions.assert_class('url', opts.delete(:url), String)
            @events = HttpClient::Preconditions.assert_class('events', opts.delete(:events), Array).map { |v| HttpClient::Preconditions.assert_class('events', v, String) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            Webhook.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :url => url,
              :events => events
            }
          end

        end

        # A webhook delivery represents an event that matched a webhook's event types.
        # Each delivery will be attempted one or more times subject to the settings of
        # your webhook.
        class WebhookDelivery

          attr_reader :id, :webhook, :status, :created_at, :latest, :next_attempt_at

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :webhook, :status, :created_at], 'WebhookDelivery')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @webhook = (x = opts.delete(:webhook); x.is_a?(::Io::Flow::V0::Models::WebhookReference) ? x : ::Io::Flow::V0::Models::WebhookReference.new(x))
            @status = (x = opts.delete(:status); x.is_a?(::Io::Flow::V0::Models::WebhookStatus) ? x : ::Io::Flow::V0::Models::WebhookStatus.apply(x))
            @created_at = HttpClient::Preconditions.assert_class('created_at', HttpClient::Helper.to_date_time_iso8601(opts.delete(:created_at)), DateTime)
            @latest = (x = opts.delete(:latest); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::WebhookRequest) ? x : ::Io::Flow::V0::Models::WebhookRequest.new(x)))
            @next_attempt_at = (x = opts.delete(:next_attempt_at); x.nil? ? nil : HttpClient::Preconditions.assert_class('next_attempt_at', HttpClient::Helper.to_date_time_iso8601(x), DateTime))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            WebhookDelivery.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :webhook => webhook.to_hash,
              :status => status.value,
              :created_at => created_at,
              :latest => latest.nil? ? nil : latest.to_hash,
              :next_attempt_at => next_attempt_at
            }
          end

        end

        class WebhookForm

          attr_reader :url, :events

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:url, :events], 'WebhookForm')
            @url = HttpClient::Preconditions.assert_class('url', opts.delete(:url), String)
            @events = HttpClient::Preconditions.assert_class('events', opts.delete(:events), Array).map { |v| HttpClient::Preconditions.assert_class('events', v, String) }
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            WebhookForm.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :url => url,
              :events => events
            }
          end

        end

        class WebhookReference

          attr_reader :id

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id], 'WebhookReference')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            WebhookReference.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id
            }
          end

        end

        class WebhookRequest

          attr_reader :id, :headers, :method, :body, :status, :started_at, :completed_at, :duration_ms, :response, :error

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :headers, :method, :body, :status], 'WebhookRequest')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @headers = HttpClient::Preconditions.assert_class('headers', opts.delete(:headers), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::Header) ? x : ::Io::Flow::V0::Models::Header.new(x)) }
            @method = (x = opts.delete(:method); x.is_a?(::Io::Flow::V0::Models::Method) ? x : ::Io::Flow::V0::Models::Method.apply(x))
            @body = HttpClient::Preconditions.assert_class('body', opts.delete(:body), String)
            @status = (x = opts.delete(:status); x.is_a?(::Io::Flow::V0::Models::WebhookStatus) ? x : ::Io::Flow::V0::Models::WebhookStatus.apply(x))
            @started_at = (x = opts.delete(:started_at); x.nil? ? nil : HttpClient::Preconditions.assert_class('started_at', HttpClient::Helper.to_date_time_iso8601(x), DateTime))
            @completed_at = (x = opts.delete(:completed_at); x.nil? ? nil : HttpClient::Preconditions.assert_class('completed_at', HttpClient::Helper.to_date_time_iso8601(x), DateTime))
            @duration_ms = (x = opts.delete(:duration_ms); x.nil? ? nil : HttpClient::Preconditions.assert_class('duration_ms', x, Integer))
            @response = (x = opts.delete(:response); x.nil? ? nil : (x = x; x.is_a?(::Io::Flow::V0::Models::WebhookResponse) ? x : ::Io::Flow::V0::Models::WebhookResponse.new(x)))
            @error = (x = opts.delete(:error); x.nil? ? nil : HttpClient::Preconditions.assert_class('error', x, String))
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            WebhookRequest.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :headers => headers.map { |o| o.to_hash },
              :method => method.value,
              :body => body,
              :status => status.value,
              :started_at => started_at,
              :completed_at => completed_at,
              :duration_ms => duration_ms,
              :response => response.nil? ? nil : response.to_hash,
              :error => error
            }
          end

        end

        class WebhookRequestReference

          attr_reader :id

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id], 'WebhookRequestReference')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            WebhookRequestReference.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id
            }
          end

        end

        class WebhookResponse

          attr_reader :id, :request, :headers, :body, :body_url, :status

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:id, :request, :headers, :body, :status], 'WebhookResponse')
            @id = HttpClient::Preconditions.assert_class('id', opts.delete(:id), String)
            @request = (x = opts.delete(:request); x.is_a?(::Io::Flow::V0::Models::WebhookRequestReference) ? x : ::Io::Flow::V0::Models::WebhookRequestReference.new(x))
            @headers = HttpClient::Preconditions.assert_class('headers', opts.delete(:headers), Array).map { |v| (x = v; x.is_a?(::Io::Flow::V0::Models::Header) ? x : ::Io::Flow::V0::Models::Header.new(x)) }
            @body = HttpClient::Preconditions.assert_class('body', opts.delete(:body), String)
            @body_url = (x = opts.delete(:body_url); x.nil? ? nil : HttpClient::Preconditions.assert_class('body_url', x, String))
            @status = HttpClient::Preconditions.assert_class('status', opts.delete(:status), Integer)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            WebhookResponse.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :id => id,
              :request => request.to_hash,
              :headers => headers.map { |o| o.to_hash },
              :body => body,
              :body_url => body_url,
              :status => status
            }
          end

        end

        # Sets organization level settings to determine things like how many retries on
        # delivery, how long we wait, etc. By default, we will attempt delivery up to 6
        # times, using exponential backoff with a see of 1 minute (60k ms) - which means
        # that we will retry over the course of approximately an hour before giving up.
        class WebhookSettings

          attr_reader :secret, :retry_max_attempts, :retry_sleep_ms, :sleep_ms

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @secret = (x = opts.delete(:secret); x.nil? ? nil : HttpClient::Preconditions.assert_class('secret', x, String))
            @retry_max_attempts = HttpClient::Preconditions.assert_class('retry_max_attempts', (x = opts.delete(:retry_max_attempts); x.nil? ? 6 : x), Integer)
            @retry_sleep_ms = HttpClient::Preconditions.assert_class('retry_sleep_ms', (x = opts.delete(:retry_sleep_ms); x.nil? ? 60000 : x), Integer)
            @sleep_ms = HttpClient::Preconditions.assert_class('sleep_ms', (x = opts.delete(:sleep_ms); x.nil? ? 0 : x), Integer)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            WebhookSettings.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :secret => secret,
              :retry_max_attempts => retry_max_attempts,
              :retry_sleep_ms => retry_sleep_ms,
              :sleep_ms => sleep_ms
            }
          end

        end

        class Zone

          attr_reader :postals, :provinces, :country

          def initialize(incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            HttpClient::Preconditions.require_keys(opts, [:country], 'Zone')
            @postals = (x = opts.delete(:postals); x.nil? ? nil : HttpClient::Preconditions.assert_class('postals', x, Array).map { |v| HttpClient::Preconditions.assert_class('postals', v, String) })
            @provinces = (x = opts.delete(:provinces); x.nil? ? nil : HttpClient::Preconditions.assert_class('provinces', x, Array).map { |v| HttpClient::Preconditions.assert_class('provinces', v, String) })
            @country = HttpClient::Preconditions.assert_class('country', opts.delete(:country), String)
          end

          def to_json
            JSON.dump(to_hash)
          end

          def copy(incoming={})
            Zone.new(to_hash.merge(HttpClient::Helper.symbolize_keys(incoming)))
          end

          def to_hash
            {
              :postals => postals.nil? ? nil : postals,
              :provinces => provinces.nil? ? nil : provinces,
              :country => country
            }
          end

        end

      end

      # ===== END OF SERVICE DEFINITION =====
      module HttpClient

        class HttpHandler

          # Returns a client instance to use
          #
          # @param base_uri The base URI for this API
          # @param path the Requested full http path (including any query strings)
          def instance(base_uri, path)
            raise "Override in subclass"
          end

        end

        class HttpHandlerInstance

          # Executes a request. The provided request object will be an
          # instance of Net::HTTP (e.g. Net::HTTP::Get)
          def execute(request)
            raise "Override in subclass"
          end

        end

        class DefaultHttpHandler < HttpHandler

          def instance(base_uri, path)
            DefaultHttpHandlerInstance.new(base_uri)
          end

        end

        class DefaultHttpHandlerInstance < HttpHandlerInstance

          attr_reader :client

          def initialize(base_uri)
            @base_uri = Preconditions.assert_class('base_uri', base_uri, URI)
            @client = Net::HTTP.new(@base_uri.host, @base_uri.port)
            if @base_uri.scheme == "https"
              configure_ssl
            end
          end

          def execute(request)
            response = begin
                         @client.request(request)
                       rescue SocketError => e
                         raise StandardError.new("Error accessing uri[#{full_uri(request.path)}]: #{e}")
                       end

            case response
            when Net::HTTPSuccess
              response.body
            else
              body = response.body rescue nil
              raise HttpClient::ServerError.new(response.code.to_i, response.message, :body => body, :uri => full_uri(request.path).to_s)
            end
          end

          def full_uri(path)
            path.start_with?(@base_uri.to_s) ? path : File.join(@base_uri.to_s, path)
          end

          # Called to configure SSL if the base uri requires it
          def configure_ssl
            @client.use_ssl = true
            @client.verify_mode = OpenSSL::SSL::VERIFY_PEER
            @client.cert_store = OpenSSL::X509::Store.new
            @client.cert_store.set_default_paths
          end

        end

        class Request

          attr_reader :base_uri, :path, :full_uri

          def initialize(http_handler, base_uri, path)
            @http_handler = http_handler
            @base_uri = Preconditions.assert_class('base_uri', base_uri, URI)
            @path = Preconditions.assert_class('path', path, String)
            @full_uri = @base_uri.to_s + @path
            @params = nil
            @body = nil
            @auth = nil
            @headers = {}
            @header_keys_lower_case = []
          end

          def with_header(name, value)
            Preconditions.check_not_blank('name', name, "Header name is required")
            Preconditions.check_not_blank('value', value, "Header value is required")
            Preconditions.check_state(!@headers.has_key?(name),
                                      "Duplicate header named[%s]" % name)
            @headers[name] = value
            @header_keys_lower_case << name.downcase
            self
          end

          def with_auth(auth)
            Preconditions.assert_class('auth', auth, HttpClient::Authorization)
            Preconditions.check_state(@auth.nil?, "auth previously set")

            if auth.scheme.name == AuthScheme::BASIC.name
              @auth = auth
            else
              raise "Auth Scheme[#{auth.scheme.name}] not supported"
            end
            self
          end

          def with_query(params)
            Preconditions.assert_class('params', params, Hash)
            Preconditions.check_state(@params.nil?, "Already have query parameters")
            @params = params
            self
          end

          # Wrapper to set Content-Type header to application/json and set
          # the provided json document as the body
          def with_json(json)
            @headers['Content-Type'] ||= 'application/json; charset=UTF-8'
            with_body(json)
          end

          def with_body(body)
            Preconditions.check_not_blank('body', body)
            @body = body
            self
          end

          def get(&block)
            do_request(Net::HTTP::Get, &block)
          end

          def delete(&block)
            do_request(Net::HTTP::Delete, &block)
          end

          def options(&block)
            do_request(Net::HTTP::Options, &block)
          end

          def post(&block)
            do_request(Net::HTTP::Post, &block)
          end

          def put(&block)
            do_request(Net::HTTP::Put, &block)
          end

          class PATCH < Net::HTTP::Put
            METHOD = "PATCH"
          end

          def patch(&block)
            do_request(PATCH, &block)
          end

          def do_request(klass)
            Preconditions.assert_class('klass', klass, Class)

            uri = @full_uri.dup
            if q = to_query(@params)
              uri += "?%s" % q
            end

            request = klass.send(:new, uri)

            # DEBUG curl = ['curl']
            # DEBUG if klass != Net::HTTP::Get
            # DEBUG  curl << "-X%s" % klass.name.split("::").last.upcase
            # DEBUG end

            if @body
              # DEBUG tmpfile = "/tmp/rest_client.tmp"
              # DEBUG File.open(tmpfile, "w") { |os| os << @body.to_s }
              # DEBUG curl << "-d@%s" % tmpfile
              request.body = @body
            end

            if @auth
              # DEBUG curl << "-u \"%s:%s\"" % [@auth.username, @auth.password]
              Preconditions.check_state(!@header_keys_lower_case.include?("authorization"),
                                        "Cannot specify both an Authorization header and an auth instance")
              user_pass = "%s:%s" % [@auth.username, @auth.password]
              encoded = Base64.encode64(user_pass).to_s.split("\n").map(&:strip).join
              request.add_field("Authorization", "Basic %s" % encoded)
            end

            @headers.each { |key, value|
              # DEBUG curl <<  "-H \"%s: %s\"" % [key, value]
              request.add_field(key, value)
            }

            # DEBUG curl << "'%s%s'" % [@base_uri, path]
            # DEBUG puts curl.join(" ")

            raw_response = @http_handler.instance(@base_uri, request.path).execute(request)
            response = raw_response.to_s == "" ? nil : JSON.parse(raw_response)

            if block_given?
              yield response
            else
              response
            end
          end

          private
          def to_query(params={})
            parts = (params || {}).map { |k,v|
              if v.is_a?(Enumerable)
                v.map { |el| "%s=%s" % [k, CGI.escape(el.to_s)] }
              else
                "%s=%s" % [k, CGI.escape(v.to_s)]
              end
            }
            parts.empty? ? nil : parts.join("&")
          end

        end

        class ServerError < StandardError

          attr_reader :code, :details, :body, :uri

          def initialize(code, details, incoming={})
            opts = HttpClient::Helper.symbolize_keys(incoming)
            @code = HttpClient::Preconditions.assert_class('code', code, Integer)
            @details = HttpClient::Preconditions.assert_class('details', details, String)
            @body = HttpClient::Preconditions.assert_class_or_nil('body', opts.delete(:body), String)
            @uri = HttpClient::Preconditions.assert_class_or_nil('uri', opts.delete(:uri), String)
            HttpClient::Preconditions.assert_empty_opts(opts)
            super(self.message)
          end

          def message
            m = "%s %s" % [@code, @details]
            if @body
              m << ": %s" % @body
            end
            m
          end

          def body_json
            @body ? JSON.parse(@body) : nil
          end

        end

        class PreconditionException < StandardError

          attr_reader :message

          def initialize(message)
            super(message)
            @message = message
          end

        end

        module Preconditions

          def Preconditions.check_argument(expression, error_message=nil)
            if !expression
              raise PreconditionException.new(error_message || "check_argument failed")
            end
            nil
          end

          def Preconditions.check_state(expression, error_message=nil)
            if !expression
              raise PreconditionException.new(error_message || "check_state failed")
            end
            nil
          end

          def Preconditions.check_not_nil(field_name, reference, error_message=nil)
            if reference.nil?
              raise PreconditionException.new(error_message || "argument for %s cannot be nil" % field_name)
            end
            reference
          end

          def Preconditions.check_not_blank(field_name, reference, error_message=nil)
            if reference.to_s.strip == ""
              raise PreconditionException.new(error_message || "argument for %s cannot be blank" % field_name)
            end
            reference
          end

          # Throws an error if opts is not empty. Useful when parsing
          # arguments to a function
          def Preconditions.assert_empty_opts(opts)
            if !opts.empty?
              raise PreconditionException.new("Invalid opts: #{opts.keys.inspect}\n#{opts.inspect}")
            end
          end

          # Requires that the provided hash has the specified keys.
          # @param fields A list of symbols
          def Preconditions.require_keys(hash, fields, error_prefix=nil)
            missing = fields.select { |f| !hash.has_key?(f) }
            if !missing.empty?
              msg = "Missing required fields: " + missing.join(", ")
              raise PreconditionException.new(error_prefix.empty? ? msg : "#{error_prefix}: #{msg}")
            end
          end

          # Asserts that value is not nill and is_?(klass). Returns
          # value. Common use is
          #
          # amount = Preconditions.assert_class('amount', amount, BigDecimal)
          def Preconditions.assert_class(field_name, value, klass)
            Preconditions.check_not_nil('field_name', field_name)
            Preconditions.check_not_nil('klass', klass)
            Preconditions.check_not_nil('value', value, "Value for %s cannot be nil. Expected an instance of class %s" % [field_name, klass.name])
            Preconditions.check_state(value.is_a?(klass),
                                      "Value for #{field_name} is of type[#{value.class}] - class[#{klass}] is required. value[#{value.inspect.to_s}]")
            value
          end

          def Preconditions.assert_class_or_nil(field_name, value, klass)
            if !value.nil?
              Preconditions.assert_class(field_name, value, klass)
            end
          end

          def Preconditions.assert_boolean(field_name, value)
            Preconditions.check_not_nil('field_name', field_name)
            Preconditions.check_not_nil('value', value, "Value for %s cannot be nil. Expected an instance of TrueClass or FalseClass" % field_name)
            Preconditions.check_state(value.is_a?(TrueClass) || value.is_a?(FalseClass),
                                      "Value for #{field_name} is of type[#{value.class}] - class[TrueClass or FalseClass] is required. value[#{value.inspect.to_s}]")
            value
          end

          def Preconditions.assert_boolean_or_nil(field_name, value)
            if !value.nil?
              Preconditions.assert_boolean(field_name, value)
            end
          end

          def Preconditions.assert_collection_of_class(field_name, values, klass)
            Preconditions.assert_class(field_name, values, Array)
            values.each { |v| Preconditions.assert_class(field_name, v, klass) }
          end

          def Preconditions.assert_hash_of_class(field_name, hash, klass)
            Preconditions.assert_class(field_name, hash, Hash)
            values.each { |k, v| Preconditions.assert_class(field_name, v, klass) }
          end

        end

        class AuthScheme

          attr_reader :name

          def initialize(name)
            @name = HttpClient::Preconditions.check_not_blank('name', name)
          end

          BASIC = AuthScheme.new("basic") unless defined?(BASIC)

        end

        class Authorization

          attr_reader :scheme, :username, :password

          def initialize(scheme, username, opts={})
            @scheme = HttpClient::Preconditions.assert_class('schema', scheme, AuthScheme)
            @username = HttpClient::Preconditions.check_not_blank('username', username, "username is required")
            @password = HttpClient::Preconditions.assert_class_or_nil('password', opts.delete(:password), String)
            HttpClient::Preconditions.assert_empty_opts(opts)
          end

          def Authorization.basic(username, password=nil)
            Authorization.new(AuthScheme::BASIC, username, :password => password)
          end

        end

        module Helper

          def Helper.symbolize_keys(hash)
            Preconditions.assert_class('hash', hash, Hash)
            new_hash = {}
            hash.each { |k, v|
              new_hash[k.to_sym] = v
            }
            new_hash
          end

          def Helper.to_big_decimal(value)
            value ? BigDecimal(value.to_s) : nil
          end

          def Helper.to_object(value)
            value ? (value.is_a?(Hash) ? value : JSON.parse(value)) : nil
          end

          def Helper.to_uuid(value)
            Preconditions.check_state(value.nil? || value.match(/^\w\w\w\w\w\w\w\w\-\w\w\w\w\-\w\w\w\w\-\w\w\w\w\-\w\w\w\w\w\w\w\w\w\w\w\w$/),
                                      "Invalid guid[%s]" % value)
            value
          end

          def Helper.to_date_iso8601(value)
            if value.is_a?(Date)
              value
            elsif value
              Date.parse(value.to_s)
            else
              nil
            end
          end

          def Helper.to_date_time_iso8601(value)
            if value.is_a?(DateTime)
              value
            elsif value
              DateTime.parse(value.to_s)
            else
              nil
            end
          end

          def Helper.date_iso8601_to_string(value)
            value.nil? ? nil : value.strftime('%Y-%m-%d')
          end

          def Helper.date_time_iso8601_to_string(value)
            value.nil? ? nil : value.strftime('%Y-%m-%dT%H:%M:%S%z')
          end

          TRUE_STRINGS = ['t', 'true', 'y', 'yes', 'on', '1', 'trueclass'] unless defined?(TRUE_STRINGS)
          FALSE_STRINGS = ['f', 'false', 'n', 'no', 'off', '0', 'falseclass'] unless defined?(FALSE_STRINGS)

          def Helper.to_boolean(field_name, value)
            string = value.to_s.strip.downcase
            if TRUE_STRINGS.include?(string)
              true
            elsif FALSE_STRINGS.include?(string)
              false
            elsif string != ""
              raise PreconditionException.new("Unsupported boolean value[#{string}]. For true, must be one of: #{TRUE_STRINGS.inspect}. For false, must be one of: #{FALSE_STRINGS.inspect}")
            else
              nil
            end
          end

        end

      end
    end
  end
end